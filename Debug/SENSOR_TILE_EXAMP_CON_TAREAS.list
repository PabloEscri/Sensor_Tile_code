
SENSOR_TILE_EXAMP_CON_TAREAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea8  08018e08  08018e08  00028e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019cb0  08019cb0  000302b4  2**0
                  CONTENTS
  4 .ARM          00000000  08019cb0  08019cb0  000302b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019cb0  08019cb0  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019cb0  08019cb0  00029cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019cb4  08019cb4  00029cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08019cb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c62c  200002b4  08019f6c  000302b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c8e0  08019f6c  0003c8e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005dc57  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007fa7  00000000  00000000  0008df3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003e28  00000000  00000000  00095ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003b70  00000000  00000000  00099d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000eb67  00000000  00000000  0009d880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00038329  00000000  00000000  000ac3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00139ee1  00000000  00000000  000e4710  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021e5f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011578  00000000  00000000  0021e66c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b4 	.word	0x200002b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018dec 	.word	0x08018dec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	08018dec 	.word	0x08018dec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <StartBeaconing>:




void StartBeaconing(void)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b092      	sub	sp, #72	; 0x48
 8000c0c:	af08      	add	r7, sp, #32

	    char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,'H','O','W','L','A','B',ID_UNIDADES,0};
 8000c0e:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <StartBeaconing+0xc0>)
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c18:	e883 0003 	stmia.w	r3, {r0, r1}
	    	  uint8_t manuf_data[26] = {
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <StartBeaconing+0xc4>)
 8000c1e:	463c      	mov	r4, r7
 8000c20:	461d      	mov	r5, r3
 8000c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c2a:	c403      	stmia	r4!, {r0, r1}
 8000c2c:	8022      	strh	r2, [r4, #0]
	    	    0x00,
	    	    0x00, /* BLE MAC stop */
	    	  };

	    	  /* BLE MAC */
	    	  manuf_data[20] = bdaddr[5];
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <StartBeaconing+0xc8>)
 8000c30:	795b      	ldrb	r3, [r3, #5]
 8000c32:	753b      	strb	r3, [r7, #20]
	    	  manuf_data[21] = bdaddr[4];
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <StartBeaconing+0xc8>)
 8000c36:	791b      	ldrb	r3, [r3, #4]
 8000c38:	757b      	strb	r3, [r7, #21]
	    	  manuf_data[22] = bdaddr[3];
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <StartBeaconing+0xc8>)
 8000c3c:	78db      	ldrb	r3, [r3, #3]
 8000c3e:	75bb      	strb	r3, [r7, #22]
	    	  manuf_data[23] = bdaddr[2];
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <StartBeaconing+0xc8>)
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	75fb      	strb	r3, [r7, #23]
	    	  manuf_data[24] = bdaddr[1];
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <StartBeaconing+0xc8>)
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	763b      	strb	r3, [r7, #24]
	    	  manuf_data[25] = bdaddr[0];
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <StartBeaconing+0xc8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	767b      	strb	r3, [r7, #25]

	    	  manuf_data[16] |= 0x20; /* Led */
 8000c52:	7c3b      	ldrb	r3, [r7, #16]
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	743b      	strb	r3, [r7, #16]


	    	    manuf_data[17] |= 0x10; /* Pressure value*/
 8000c5c:	7c7b      	ldrb	r3, [r7, #17]
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	747b      	strb	r3, [r7, #17]

	    	    manuf_data[18] |=0x04;
 8000c66:	7cbb      	ldrb	r3, [r7, #18]
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	74bb      	strb	r3, [r7, #18]




	    	    int ret = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
	  /* disable scan response */
	   ret = hci_le_set_scan_resp_data(0,NULL);
 8000c74:	2100      	movs	r1, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	f014 fc05 	bl	8015486 <hci_le_set_scan_resp_data>
 8000c7c:	6278      	str	r0, [r7, #36]	; 0x24
	  ret = aci_gap_set_discoverable(ADV_IND, 0x05A0, 0x05A2, RANDOM_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9306      	str	r3, [sp, #24]
 8000c82:	2300      	movs	r3, #0
 8000c84:	9305      	str	r3, [sp, #20]
 8000c86:	2300      	movs	r3, #0
 8000c88:	9304      	str	r3, [sp, #16]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	9303      	str	r3, [sp, #12]
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	9302      	str	r3, [sp, #8]
 8000c94:	2308      	movs	r3, #8
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f240 52a2 	movw	r2, #1442	; 0x5a2
 8000ca2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f013 fef8 	bl	8014a9c <aci_gap_set_discoverable>
 8000cac:	4603      	mov	r3, r0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Send Advertising data */
	  ret = aci_gap_update_adv_data(26, manuf_data);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	201a      	movs	r0, #26
 8000cb6:	f014 f834 	bl	8014d22 <aci_gap_update_adv_data>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08018e08 	.word	0x08018e08
 8000ccc:	08018e10 	.word	0x08018e10
 8000cd0:	2000b864 	.word	0x2000b864

08000cd4 <Init_BlueNRG_Custom_Services>:



 void Init_BlueNRG_Custom_Services(BLE_Estados_t estado_BLE)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	 if(estado_BLE == PERIPHERAL)
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d101      	bne.n	8000ce8 <Init_BlueNRG_Custom_Services+0x14>
	 	{
		 Add_HWServW2ST_Service();
 8000ce4:	f000 fd96 	bl	8001814 <Add_HWServW2ST_Service>
	 	}

	if(estado_BLE == PERIPHERAL)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d102      	bne.n	8000cf4 <Init_BlueNRG_Custom_Services+0x20>
	{
		StartBeaconing();
 8000cee:	f7ff ff8b 	bl	8000c08 <StartBeaconing>
	    HAL_Delay(1);
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
		int ret = aci_gap_start_general_discovery_proc(0x4000,0x4000,STATIC_RANDOM_ADDR, 1);
		while(ret != 0);
	}
}
 8000cf2:	e027      	b.n	8000d44 <Init_BlueNRG_Custom_Services+0x70>
	else if(estado_BLE == CENTRAL)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d124      	bne.n	8000d44 <Init_BlueNRG_Custom_Services+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f005 fe8e 	bl	8006a24 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f005 fe87 	bl	8006a24 <HAL_GPIO_WritePin>
	    HAL_Delay(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f005 f806 	bl	8005d28 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f005 fe7d 	bl	8006a24 <HAL_GPIO_WritePin>
		int ret = aci_gap_start_general_discovery_proc(0x4000,0x4000,STATIC_RANDOM_ADDR, 1);
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d36:	f014 f846 	bl	8014dc6 <aci_gap_start_general_discovery_proc>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60fb      	str	r3, [r7, #12]
		while(ret != 0);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1fc      	bne.n	8000d3e <Init_BlueNRG_Custom_Services+0x6a>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Init_BlueNRG_Stack>:




 void Init_BlueNRG_Stack(BLE_Estados_t estado_BLE)
 {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
   const char BoardName[8] = {'H','O','W','L','A','B','1',0};
 8000d56:	4a46      	ldr	r2, [pc, #280]	; (8000e70 <Init_BlueNRG_Stack+0x124>)
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d60:	e883 0003 	stmia.w	r3, {r0, r1}
   uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
   uint8_t data_len_out;
   int ret;

   /* Initialize the BlueNRG HCI */
   hci_init(HCI_Event_CB, NULL);
 8000d64:	2100      	movs	r1, #0
 8000d66:	4843      	ldr	r0, [pc, #268]	; (8000e74 <Init_BlueNRG_Stack+0x128>)
 8000d68:	f014 fc9e 	bl	80156a8 <hci_init>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
   aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, 6, &data_len_out, bdaddr);
 8000d6c:	f107 020d 	add.w	r2, r7, #13
 8000d70:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <Init_BlueNRG_Stack+0x12c>)
 8000d72:	2106      	movs	r1, #6
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	f014 fae0 	bl	801533a <aci_hal_read_config_data>
   hci_reset();
 8000d7a:	f014 fb62 	bl	8015442 <hci_reset>

      HAL_Delay(100);
 8000d7e:	2064      	movs	r0, #100	; 0x64
 8000d80:	f004 ffd2 	bl	8005d28 <HAL_Delay>


      /* Set the public address */
      ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000d84:	4a3c      	ldr	r2, [pc, #240]	; (8000e78 <Init_BlueNRG_Stack+0x12c>)
 8000d86:	2106      	movs	r1, #6
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f014 fa6e 	bl	801526a <aci_hal_write_config_data>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	61fb      	str	r3, [r7, #28]
                                      CONFIG_DATA_PUBADDR_LEN,
                                      bdaddr);

   if(ret)
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d15e      	bne.n	8000e56 <Init_BlueNRG_Stack+0x10a>
   }



   //HAL_Delay(100);
   ret = aci_gatt_init();
 8000d98:	f014 f853 	bl	8014e42 <aci_gatt_init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	61fb      	str	r3, [r7, #28]
   if(ret)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d159      	bne.n	8000e5a <Init_BlueNRG_Stack+0x10e>
   {

     goto fail;
   }

if(estado_BLE == PERIPHERAL)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d110      	bne.n	8000dce <Init_BlueNRG_Stack+0x82>
{
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000dac:	f107 0212 	add.w	r2, r7, #18
 8000db0:	f107 030e 	add.w	r3, r7, #14
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f013 fe1a 	bl	80149fc <aci_gap_init_IDB05A1>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	e012      	b.n	8000df4 <Init_BlueNRG_Stack+0xa8>
}
else if(estado_BLE == CENTRAL)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10f      	bne.n	8000df4 <Init_BlueNRG_Stack+0xa8>
{
   ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x09, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000dd4:	f107 0212 	add.w	r2, r7, #18
 8000dd8:	f107 030e 	add.w	r3, r7, #14
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	2209      	movs	r2, #9
 8000de8:	2100      	movs	r1, #0
 8000dea:	2004      	movs	r0, #4
 8000dec:	f013 fe06 	bl	80149fc <aci_gap_init_IDB05A1>
 8000df0:	4603      	mov	r3, r0
 8000df2:	61fb      	str	r3, [r7, #28]
}

   if(ret != BLE_STATUS_SUCCESS)
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d131      	bne.n	8000e5e <Init_BlueNRG_Stack+0x112>
   {
     goto fail;
   }

   //STATIC_BLE_MAC
   ret = hci_le_set_random_address(bdaddr);
 8000dfa:	481f      	ldr	r0, [pc, #124]	; (8000e78 <Init_BlueNRG_Stack+0x12c>)
 8000dfc:	f014 fb84 	bl	8015508 <hci_le_set_random_address>
 8000e00:	61f8      	str	r0, [r7, #28]
   if(ret)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d12c      	bne.n	8000e62 <Init_BlueNRG_Stack+0x116>
   {
 	  goto fail;
   }

   ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,  7, (uint8_t *)BoardName);
 8000e08:	8a78      	ldrh	r0, [r7, #18]
 8000e0a:	8a39      	ldrh	r1, [r7, #16]
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2307      	movs	r3, #7
 8000e14:	2200      	movs	r2, #0
 8000e16:	f014 f995 	bl	8015144 <aci_gatt_update_char_value>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	61fb      	str	r3, [r7, #28]
  //HAL_Delay(100);
   if(ret)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d000      	beq.n	8000e26 <Init_BlueNRG_Stack+0xda>
   {
     while(1);
 8000e24:	e7fe      	b.n	8000e24 <Init_BlueNRG_Stack+0xd8>
   }

   ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000e26:	2301      	movs	r3, #1
 8000e28:	9303      	str	r3, [sp, #12]
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <Init_BlueNRG_Stack+0x130>)
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	2310      	movs	r3, #16
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2307      	movs	r3, #7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f013 ff1c 	bl	8014c7a <aci_gap_set_auth_requirement>
 8000e42:	4603      	mov	r3, r0
 8000e44:	61fb      	str	r3, [r7, #28]
                                      OOB_AUTH_DATA_ABSENT,
                                      NULL, 7, 16,
                                      USE_FIXED_PIN_FOR_PAIRING, 123456,
                                      BONDING);
   if (ret != BLE_STATUS_SUCCESS)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10c      	bne.n	8000e66 <Init_BlueNRG_Stack+0x11a>
   {
      goto fail;
   }

     /* Set output power level */
   aci_hal_set_tx_power_level(1,4);
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f014 fac6 	bl	80153e0 <aci_hal_set_tx_power_level>

   //HAL_Delay(100);
   return;
 8000e54:	e009      	b.n	8000e6a <Init_BlueNRG_Stack+0x11e>
     goto fail;
 8000e56:	bf00      	nop
 8000e58:	e006      	b.n	8000e68 <Init_BlueNRG_Stack+0x11c>
     goto fail;
 8000e5a:	bf00      	nop
 8000e5c:	e004      	b.n	8000e68 <Init_BlueNRG_Stack+0x11c>
     goto fail;
 8000e5e:	bf00      	nop
 8000e60:	e002      	b.n	8000e68 <Init_BlueNRG_Stack+0x11c>
 	  goto fail;
 8000e62:	bf00      	nop
 8000e64:	e000      	b.n	8000e68 <Init_BlueNRG_Stack+0x11c>
      goto fail;
 8000e66:	bf00      	nop

 fail:
   return;
 8000e68:	bf00      	nop

 }
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	08018e2c 	.word	0x08018e2c
 8000e74:	08002269 	.word	0x08002269
 8000e78:	2000b864 	.word	0x2000b864
 8000e7c:	0001e240 	.word	0x0001e240

08000e80 <RTC_Init>:

RTC_HandleTypeDef hrtc;


void RTC_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN RTC_Init 0 */

	  /* USER CODE END RTC_Init 0 */

	  RTC_TimeTypeDef sTime = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
	  /* USER CODE BEGIN RTC_Init 1 */

	  /* USER CODE END RTC_Init 1 */
	  /** Initialize RTC Only
	  */
	  hrtc.Instance = RTC;
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <RTC_Init+0xb0>)
 8000e9a:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <RTC_Init+0xb4>)
 8000e9c:	601a      	str	r2, [r3, #0]
	  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <RTC_Init+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
	  hrtc.Init.AsynchPrediv = 127;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <RTC_Init+0xb0>)
 8000ea6:	227f      	movs	r2, #127	; 0x7f
 8000ea8:	609a      	str	r2, [r3, #8]
	  hrtc.Init.SynchPrediv = 255;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <RTC_Init+0xb0>)
 8000eac:	22ff      	movs	r2, #255	; 0xff
 8000eae:	60da      	str	r2, [r3, #12]
	  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <RTC_Init+0xb0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
	  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <RTC_Init+0xb0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
	  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <RTC_Init+0xb0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
	  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <RTC_Init+0xb0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ec8:	4819      	ldr	r0, [pc, #100]	; (8000f30 <RTC_Init+0xb0>)
 8000eca:	f007 f967 	bl	800819c <HAL_RTC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <RTC_Init+0x58>
	  {
	    Error_Handler();
 8000ed4:	f000 fc96 	bl	8001804 <Error_Handler>

	  /* USER CODE END Check_RTC_BKUP */

	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x6;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480f      	ldr	r0, [pc, #60]	; (8000f30 <RTC_Init+0xb0>)
 8000ef4:	f007 f9cd 	bl	8008292 <HAL_RTC_SetTime>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <RTC_Init+0x82>
	  {
	    Error_Handler();
 8000efe:	f000 fc81 	bl	8001804 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000f02:	2306      	movs	r3, #6
 8000f04:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_MARCH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x7;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x21;
 8000f0e:	2321      	movs	r3, #33	; 0x21
 8000f10:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <RTC_Init+0xb0>)
 8000f1a:	f007 fab3 	bl	8008484 <HAL_RTC_SetDate>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <RTC_Init+0xa8>
	  {
	    Error_Handler();
 8000f24:	f000 fc6e 	bl	8001804 <Error_Handler>
	  /* USER CODE BEGIN RTC_Init 2 */

	  /* USER CODE END RTC_Init 2 */


}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000b86c 	.word	0x2000b86c
 8000f34:	40002800 	.word	0x40002800

08000f38 <RTC_configurar_dia_desde_cadena>:

/*Se meterá asi la hora: (hora)(minuto)(segundo)(dia)(mes)(año) -> 230502020620  =   23:05:02/02/06/20(año2020 en este caso)     */
int RTC_configurar_dia_desde_cadena(const char * dia_str)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b08d      	sub	sp, #52	; 0x34
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	char aux[2]  = {'x','\0'};
 8000f40:	2378      	movs	r3, #120	; 0x78
 8000f42:	733b      	strb	r3, [r7, #12]
 8000f44:	2300      	movs	r3, #0
 8000f46:	737b      	strb	r3, [r7, #13]
	char aux2[2] = {'x','\0'};
 8000f48:	2378      	movs	r3, #120	; 0x78
 8000f4a:	723b      	strb	r3, [r7, #8]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	727b      	strb	r3, [r7, #9]
	uint8_t num;

    if(strlen(dia_str)==12)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff f947 	bl	80001e4 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b0c      	cmp	r3, #12
 8000f5a:	d16c      	bne.n	8001036 <RTC_configurar_dia_desde_cadena+0xfe>
    {
		for(int i = 0 ; i < 6; i++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f60:	e04d      	b.n	8000ffe <RTC_configurar_dia_desde_cadena+0xc6>
		{
			aux[0]  = dia_str[i*2];
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	461a      	mov	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	733b      	strb	r3, [r7, #12]
			aux2[0] = dia_str[i*2+1];
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	3301      	adds	r3, #1
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	723b      	strb	r3, [r7, #8]
			num = (atoi(aux)<<4) + atoi(aux2);
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	4618      	mov	r0, r3
 8000f84:	f015 fca0 	bl	80168c8 <atoi>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	b2dc      	uxtb	r4, r3
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4618      	mov	r0, r3
 8000f96:	f015 fc97 	bl	80168c8 <atoi>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4423      	add	r3, r4
 8000fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			switch(i)
 8000fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	d826      	bhi.n	8000ff8 <RTC_configurar_dia_desde_cadena+0xc0>
 8000faa:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <RTC_configurar_dia_desde_cadena+0x78>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	08000fc9 	.word	0x08000fc9
 8000fb4:	08000fd1 	.word	0x08000fd1
 8000fb8:	08000fd9 	.word	0x08000fd9
 8000fbc:	08000fe1 	.word	0x08000fe1
 8000fc0:	08000fe9 	.word	0x08000fe9
 8000fc4:	08000ff1 	.word	0x08000ff1
			{
			    case 0:
					sTime.Hours = num;
 8000fc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fcc:	753b      	strb	r3, [r7, #20]
				break;
 8000fce:	e013      	b.n	8000ff8 <RTC_configurar_dia_desde_cadena+0xc0>
				case 1:
					sTime.Minutes = num;
 8000fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fd4:	757b      	strb	r3, [r7, #21]
				break;
 8000fd6:	e00f      	b.n	8000ff8 <RTC_configurar_dia_desde_cadena+0xc0>
					case 2:
					sTime.Seconds = num;
 8000fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fdc:	75bb      	strb	r3, [r7, #22]
				break;
 8000fde:	e00b      	b.n	8000ff8 <RTC_configurar_dia_desde_cadena+0xc0>
				case 3:
					sDate.Date = num;
 8000fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fe4:	74bb      	strb	r3, [r7, #18]
				break;
 8000fe6:	e007      	b.n	8000ff8 <RTC_configurar_dia_desde_cadena+0xc0>
				case 4:
					sDate.Month = num;
 8000fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fec:	747b      	strb	r3, [r7, #17]
				break;
 8000fee:	e003      	b.n	8000ff8 <RTC_configurar_dia_desde_cadena+0xc0>
				case 5:
					sDate.Year = num;
 8000ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ff4:	74fb      	strb	r3, [r7, #19]
				break;
 8000ff6:	bf00      	nop
		for(int i = 0 ; i < 6; i++)
 8000ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001000:	2b05      	cmp	r3, #5
 8001002:	ddae      	ble.n	8000f62 <RTC_configurar_dia_desde_cadena+0x2a>
			  }
		}
		  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
		  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
		  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800100c:	2301      	movs	r3, #1
 800100e:	743b      	strb	r3, [r7, #16]

		  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2201      	movs	r2, #1
 8001016:	4619      	mov	r1, r3
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <RTC_configurar_dia_desde_cadena+0x108>)
 800101a:	f007 f93a 	bl	8008292 <HAL_RTC_SetTime>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <RTC_configurar_dia_desde_cadena+0xfa>
		  {
		      //PRINT("ERROR_SETTING_TIME")
		  }
		  else
		  {
			  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <RTC_configurar_dia_desde_cadena+0x108>)
 800102e:	f007 fa29 	bl	8008484 <HAL_RTC_SetDate>
				  //PRINT("ERROR_SETTING_DATE")
			  }
		  }


		return 0;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <RTC_configurar_dia_desde_cadena+0x100>
    }
	return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3734      	adds	r7, #52	; 0x34
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	2000b86c 	.word	0x2000b86c

08001044 <RTC_obtener_dia_str>:
}



int RTC_obtener_dia_str(char * buffer)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;


		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	483b      	ldr	r0, [pc, #236]	; (8001144 <RTC_obtener_dia_str+0x100>)
 8001056:	f007 f9b9 	bl	80083cc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	4838      	ldr	r0, [pc, #224]	; (8001144 <RTC_obtener_dia_str+0x100>)
 8001064:	f007 fa95 	bl	8008592 <HAL_RTC_GetDate>


		buffer[0] = (sTime.Hours / 16) + 48;
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3330      	adds	r3, #48	; 0x30
 8001070:	b2da      	uxtb	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	701a      	strb	r2, [r3, #0]
		buffer[1] = (sTime.Hours % 16) + 48;
 8001076:	7b3b      	ldrb	r3, [r7, #12]
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	b2da      	uxtb	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3301      	adds	r3, #1
 8001082:	3230      	adds	r2, #48	; 0x30
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
		buffer[2] = (sTime.Minutes / 16) + 48;
 8001088:	7b7b      	ldrb	r3, [r7, #13]
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	b2da      	uxtb	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3302      	adds	r3, #2
 8001092:	3230      	adds	r2, #48	; 0x30
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	701a      	strb	r2, [r3, #0]
		buffer[3] = (sTime.Minutes % 16) + 48;
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3303      	adds	r3, #3
 80010a4:	3230      	adds	r2, #48	; 0x30
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
		buffer[4] = (sTime.Seconds / 16) + 48;
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3304      	adds	r3, #4
 80010b4:	3230      	adds	r2, #48	; 0x30
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
		buffer[5] = (sTime.Seconds % 16) + 48;
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	f003 030f 	and.w	r3, r3, #15
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3305      	adds	r3, #5
 80010c6:	3230      	adds	r2, #48	; 0x30
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
		buffer[6] = (sDate.Date / 16) + 48;
 80010cc:	7abb      	ldrb	r3, [r7, #10]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3306      	adds	r3, #6
 80010d6:	3230      	adds	r2, #48	; 0x30
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]
		buffer[7] = (sDate.Date % 16) + 48;
 80010dc:	7abb      	ldrb	r3, [r7, #10]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3307      	adds	r3, #7
 80010e8:	3230      	adds	r2, #48	; 0x30
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
		buffer[8] = (sDate.Month / 16) + 48;
 80010ee:	7a7b      	ldrb	r3, [r7, #9]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3308      	adds	r3, #8
 80010f8:	3230      	adds	r2, #48	; 0x30
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
		buffer[9] = (sDate.Month % 16) + 48;
 80010fe:	7a7b      	ldrb	r3, [r7, #9]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	b2da      	uxtb	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3309      	adds	r3, #9
 800110a:	3230      	adds	r2, #48	; 0x30
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
		buffer[10] = (sDate.Year / 16) + 48;
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	b2da      	uxtb	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	330a      	adds	r3, #10
 800111a:	3230      	adds	r2, #48	; 0x30
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	701a      	strb	r2, [r3, #0]
		buffer[11] = (sDate.Year % 16) + 48;
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	b2da      	uxtb	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	330b      	adds	r3, #11
 800112c:	3230      	adds	r2, #48	; 0x30
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
		buffer[12] = '\0';
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	330c      	adds	r3, #12
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]

		return 0;
 800113a:	2300      	movs	r3, #0



}
 800113c:	4618      	mov	r0, r3
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000b86c 	.word	0x2000b86c

08001148 <RTC_obtener_hora_str>:


int RTC_obtener_hora_str(char * buffer)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;


	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	4826      	ldr	r0, [pc, #152]	; (80011f4 <RTC_obtener_hora_str+0xac>)
 800115a:	f007 f937 	bl	80083cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	2201      	movs	r2, #1
 8001164:	4619      	mov	r1, r3
 8001166:	4823      	ldr	r0, [pc, #140]	; (80011f4 <RTC_obtener_hora_str+0xac>)
 8001168:	f007 fa13 	bl	8008592 <HAL_RTC_GetDate>



	buffer[0] = (sTime.Hours / 16) + 48;
 800116c:	7b3b      	ldrb	r3, [r7, #12]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3330      	adds	r3, #48	; 0x30
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	701a      	strb	r2, [r3, #0]
	buffer[1] = (sTime.Hours % 16) + 48;
 800117a:	7b3b      	ldrb	r3, [r7, #12]
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	3230      	adds	r2, #48	; 0x30
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ':';
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3302      	adds	r3, #2
 8001190:	223a      	movs	r2, #58	; 0x3a
 8001192:	701a      	strb	r2, [r3, #0]
	buffer[3] = (sTime.Minutes / 16) + 48;
 8001194:	7b7b      	ldrb	r3, [r7, #13]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	b2da      	uxtb	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3303      	adds	r3, #3
 800119e:	3230      	adds	r2, #48	; 0x30
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	701a      	strb	r2, [r3, #0]
	buffer[4] = (sTime.Minutes % 16) + 48;
 80011a4:	7b7b      	ldrb	r3, [r7, #13]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3304      	adds	r3, #4
 80011b0:	3230      	adds	r2, #48	; 0x30
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
	buffer[5] = ':';
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3305      	adds	r3, #5
 80011ba:	223a      	movs	r2, #58	; 0x3a
 80011bc:	701a      	strb	r2, [r3, #0]
	buffer[6] = (sTime.Seconds / 16) + 48;
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3306      	adds	r3, #6
 80011c8:	3230      	adds	r2, #48	; 0x30
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
	buffer[7] = (sTime.Seconds % 16) + 48;
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3307      	adds	r3, #7
 80011da:	3230      	adds	r2, #48	; 0x30
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	701a      	strb	r2, [r3, #0]
	buffer[8] = '\0';
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3308      	adds	r3, #8
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]

	//sprintf(&dia_str[0], "%d:%d:%d/%d/%d/%d",sTime.Hours, sTime.Minutes,sTime.Seconds,sDate.Date,sDate.Month,sDate.Year);


	return 0;
 80011e8:	2300      	movs	r3, #0

}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000b86c 	.word	0x2000b86c

080011f8 <RTC_obtener_fecha_str>:
int RTC_obtener_fecha_str(char * buffer)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;


	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	4826      	ldr	r0, [pc, #152]	; (80012a4 <RTC_obtener_fecha_str+0xac>)
 800120a:	f007 f8df 	bl	80083cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2201      	movs	r2, #1
 8001214:	4619      	mov	r1, r3
 8001216:	4823      	ldr	r0, [pc, #140]	; (80012a4 <RTC_obtener_fecha_str+0xac>)
 8001218:	f007 f9bb 	bl	8008592 <HAL_RTC_GetDate>

	buffer[0] = (sDate.Date / 16) + 48;
 800121c:	7abb      	ldrb	r3, [r7, #10]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3330      	adds	r3, #48	; 0x30
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	701a      	strb	r2, [r3, #0]
	buffer[1] = (sDate.Date % 16) + 48;
 800122a:	7abb      	ldrb	r3, [r7, #10]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	3230      	adds	r2, #48	; 0x30
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
	buffer[2] = '/';
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3302      	adds	r3, #2
 8001240:	222f      	movs	r2, #47	; 0x2f
 8001242:	701a      	strb	r2, [r3, #0]
	buffer[3] = (sDate.Month / 16) + 48;
 8001244:	7a7b      	ldrb	r3, [r7, #9]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	b2da      	uxtb	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3303      	adds	r3, #3
 800124e:	3230      	adds	r2, #48	; 0x30
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
	buffer[4] = (sDate.Month % 16) + 48;
 8001254:	7a7b      	ldrb	r3, [r7, #9]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	b2da      	uxtb	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3304      	adds	r3, #4
 8001260:	3230      	adds	r2, #48	; 0x30
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]
	buffer[5] = '/';
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3305      	adds	r3, #5
 800126a:	222f      	movs	r2, #47	; 0x2f
 800126c:	701a      	strb	r2, [r3, #0]
	buffer[6] = (sDate.Year / 16) + 48;
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	b2da      	uxtb	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3306      	adds	r3, #6
 8001278:	3230      	adds	r2, #48	; 0x30
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (sDate.Year % 16) + 48;
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	b2da      	uxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3307      	adds	r3, #7
 800128a:	3230      	adds	r2, #48	; 0x30
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	701a      	strb	r2, [r3, #0]
	buffer[8] = '\0';
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3308      	adds	r3, #8
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]

	//sprintf(&dia_str[0], "%d:%d:%d/%d/%d/%d",sTime.Hours, sTime.Minutes,sTime.Seconds,sDate.Date,sDate.Month,sDate.Year);


	return 0;
 8001298:	2300      	movs	r3, #0

}
 800129a:	4618      	mov	r0, r3
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000b86c 	.word	0x2000b86c

080012a8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80012b0:	f005 fc5c 	bl	8006b6c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <HCI_TL_SPI_Init+0xc8>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2104      	movs	r1, #4
 8001300:	481c      	ldr	r0, [pc, #112]	; (8001374 <HCI_TL_SPI_Init+0xcc>)
 8001302:	f005 fb8f 	bl	8006a24 <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001306:	2320      	movs	r3, #32
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HCI_TL_SPI_Init+0xd0>)
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4818      	ldr	r0, [pc, #96]	; (800137c <HCI_TL_SPI_Init+0xd4>)
 800131a:	f005 f8cf 	bl	80064bc <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <HCI_TL_SPI_Init+0xd8>)
 8001336:	f005 f8c1 	bl	80064bc <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800133a:	2304      	movs	r3, #4
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <HCI_TL_SPI_Init+0xcc>)
 8001352:	f005 f8b3 	bl	80064bc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2104      	movs	r1, #4
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <HCI_TL_SPI_Init+0xcc>)
 800135c:	f005 fb62 	bl	8006a24 <HAL_GPIO_WritePin>
    
  return BSP_SPI1_Init();
 8001360:	f008 ff96 	bl	800a290 <BSP_SPI1_Init>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400
 8001378:	10110000 	.word	0x10110000
 800137c:	48000800 	.word	0x48000800
 8001380:	48001c00 	.word	0x48001c00

08001384 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8001388:	2120      	movs	r1, #32
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <HCI_TL_SPI_DeInit+0x24>)
 800138c:	f005 fa3e 	bl	800680c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8001390:	2104      	movs	r1, #4
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <HCI_TL_SPI_DeInit+0x28>)
 8001394:	f005 fa3a 	bl	800680c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8001398:	2101      	movs	r1, #1
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HCI_TL_SPI_DeInit+0x2c>)
 800139c:	f005 fa36 	bl	800680c <HAL_GPIO_DeInit>
  return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48000400 	.word	0x48000400
 80013b0:	48001c00 	.word	0x48001c00

080013b4 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2101      	movs	r1, #1
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <HCI_TL_SPI_Reset+0x2c>)
 80013be:	f005 fb31 	bl	8006a24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013c2:	2005      	movs	r0, #5
 80013c4:	f004 fcb0 	bl	8005d28 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2101      	movs	r1, #1
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <HCI_TL_SPI_Reset+0x2c>)
 80013ce:	f005 fb29 	bl	8006a24 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80013d2:	2005      	movs	r0, #5
 80013d4:	f004 fca8 	bl	8005d28 <HAL_Delay>
  return 0;
 80013d8:	2300      	movs	r3, #0
}  
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	48001c00 	.word	0x48001c00

080013e4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80013f4:	23ff      	movs	r3, #255	; 0xff
 80013f6:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80013f8:	230b      	movs	r3, #11
 80013fa:	753b      	strb	r3, [r7, #20]
 80013fc:	2300      	movs	r3, #0
 80013fe:	757b      	strb	r3, [r7, #21]
 8001400:	2300      	movs	r3, #0
 8001402:	75bb      	strb	r3, [r7, #22]
 8001404:	2300      	movs	r3, #0
 8001406:	75fb      	strb	r3, [r7, #23]
 8001408:	2300      	movs	r3, #0
 800140a:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2104      	movs	r1, #4
 8001410:	4820      	ldr	r0, [pc, #128]	; (8001494 <HCI_TL_SPI_Receive+0xb0>)
 8001412:	f005 fb07 	bl	8006a24 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001416:	f107 010c 	add.w	r1, r7, #12
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2205      	movs	r2, #5
 8001420:	4618      	mov	r0, r3
 8001422:	f008 ff59 	bl	800a2d8 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8001426:	7b3b      	ldrb	r3, [r7, #12]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d129      	bne.n	8001480 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800142c:	7c3b      	ldrb	r3, [r7, #16]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	b21b      	sxth	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b21b      	sxth	r3, r3
 800143a:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 800143c:	8bfb      	ldrh	r3, [r7, #30]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01e      	beq.n	8001480 <HCI_TL_SPI_Receive+0x9c>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 8001442:	8bfa      	ldrh	r2, [r7, #30]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	429a      	cmp	r2, r3
 8001448:	d901      	bls.n	800144e <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 800144e:	2300      	movs	r3, #0
 8001450:	777b      	strb	r3, [r7, #29]
 8001452:	e010      	b.n	8001476 <HCI_TL_SPI_Receive+0x92>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8001454:	f107 011b 	add.w	r1, r7, #27
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	2201      	movs	r2, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f008 ff3a 	bl	800a2d8 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001464:	7f7b      	ldrb	r3, [r7, #29]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	7efa      	ldrb	r2, [r7, #27]
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001470:	7f7b      	ldrb	r3, [r7, #29]
 8001472:	3301      	adds	r3, #1
 8001474:	777b      	strb	r3, [r7, #29]
 8001476:	7f7b      	ldrb	r3, [r7, #29]
 8001478:	b29b      	uxth	r3, r3
 800147a:	8bfa      	ldrh	r2, [r7, #30]
 800147c:	429a      	cmp	r2, r3
 800147e:	d8e9      	bhi.n	8001454 <HCI_TL_SPI_Receive+0x70>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2104      	movs	r1, #4
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <HCI_TL_SPI_Receive+0xb0>)
 8001486:	f005 facd 	bl	8006a24 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 800148a:	7f7b      	ldrb	r3, [r7, #29]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	48000400 	.word	0x48000400

08001498 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80014a4:	230a      	movs	r3, #10
 80014a6:	743b      	strb	r3, [r7, #16]
 80014a8:	2300      	movs	r3, #0
 80014aa:	747b      	strb	r3, [r7, #17]
 80014ac:	2300      	movs	r3, #0
 80014ae:	74bb      	strb	r3, [r7, #18]
 80014b0:	2300      	movs	r3, #0
 80014b2:	74fb      	strb	r3, [r7, #19]
 80014b4:	2300      	movs	r3, #0
 80014b6:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f004 fc2a 	bl	8005d10 <HAL_GetTick>
 80014bc:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2104      	movs	r1, #4
 80014c6:	481c      	ldr	r0, [pc, #112]	; (8001538 <HCI_TL_SPI_Send+0xa0>)
 80014c8:	f005 faac 	bl	8006a24 <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2205      	movs	r2, #5
 80014d6:	4618      	mov	r0, r3
 80014d8:	f008 fefe 	bl	800a2d8 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 80014dc:	7a3b      	ldrb	r3, [r7, #8]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d10f      	bne.n	8001502 <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80014e2:	7a7b      	ldrb	r3, [r7, #9]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d806      	bhi.n	80014fa <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4912      	ldr	r1, [pc, #72]	; (800153c <HCI_TL_SPI_Send+0xa4>)
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f008 fef0 	bl	800a2d8 <BSP_SPI1_SendRecv>
 80014f8:	e006      	b.n	8001508 <HCI_TL_SPI_Send+0x70>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 80014fa:	f06f 0301 	mvn.w	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	e002      	b.n	8001508 <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	2104      	movs	r1, #4
 800150c:	480a      	ldr	r0, [pc, #40]	; (8001538 <HCI_TL_SPI_Send+0xa0>)
 800150e:	f005 fa89 	bl	8006a24 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001512:	f004 fbfd 	bl	8005d10 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d903      	bls.n	8001528 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001520:	f06f 0302 	mvn.w	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
      break;
 8001526:	e002      	b.n	800152e <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	2b00      	cmp	r3, #0
 800152c:	dbc7      	blt.n	80014be <HCI_TL_SPI_Send+0x26>
  
  return result;
 800152e:	69fb      	ldr	r3, [r7, #28]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	48000400 	.word	0x48000400
 800153c:	200002d0 	.word	0x200002d0

08001540 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001544:	2120      	movs	r1, #32
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <IsDataAvailable+0x1c>)
 8001548:	f005 fa54 	bl	80069f4 <HAL_GPIO_ReadPin>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
} 
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	48000800 	.word	0x48000800

08001560 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <hci_tl_lowlevel_init+0x50>)
 8001568:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <hci_tl_lowlevel_init+0x54>)
 800156c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <hci_tl_lowlevel_init+0x58>)
 8001570:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <hci_tl_lowlevel_init+0x5c>)
 8001574:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <hci_tl_lowlevel_init+0x60>)
 8001578:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <hci_tl_lowlevel_init+0x64>)
 800157c:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4618      	mov	r0, r3
 8001582:	f014 f8d3 	bl	801572c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 8001586:	4910      	ldr	r1, [pc, #64]	; (80015c8 <hci_tl_lowlevel_init+0x68>)
 8001588:	4810      	ldr	r0, [pc, #64]	; (80015cc <hci_tl_lowlevel_init+0x6c>)
 800158a:	f004 ff53 	bl	8006434 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <hci_tl_lowlevel_init+0x70>)
 8001590:	2100      	movs	r1, #0
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <hci_tl_lowlevel_init+0x6c>)
 8001594:	f004 ff34 	bl	8006400 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	210f      	movs	r1, #15
 800159c:	2017      	movs	r0, #23
 800159e:	f004 fcbf 	bl	8005f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a2:	2017      	movs	r0, #23
 80015a4:	f004 fcd8 	bl	8005f58 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	080012a9 	.word	0x080012a9
 80015b4:	08001385 	.word	0x08001385
 80015b8:	08001499 	.word	0x08001499
 80015bc:	080013e5 	.word	0x080013e5
 80015c0:	080013b5 	.word	0x080013b5
 80015c4:	0800a319 	.word	0x0800a319
 80015c8:	16000005 	.word	0x16000005
 80015cc:	2000b890 	.word	0x2000b890
 80015d0:	080015d5 	.word	0x080015d5

080015d4 <hci_tl_lowlevel_isr>:
  * @retval None
  */
#include "cmsis_os.h"
extern osSemaphoreId_t ble_semaphore_Id;
void hci_tl_lowlevel_isr(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80015d8:	e005      	b.n	80015e6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80015da:	2000      	movs	r0, #0
 80015dc:	f014 fa08 	bl	80159f0 <hci_notify_asynch_evt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10a      	bne.n	80015fc <hci_tl_lowlevel_isr+0x28>
  while(IsDataAvailable())
 80015e6:	f7ff ffab 	bl	8001540 <IsDataAvailable>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f4      	bne.n	80015da <hci_tl_lowlevel_isr+0x6>
    {
      return;
    }
  }

  osSemaphoreRelease(ble_semaphore_Id);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <hci_tl_lowlevel_isr+0x2c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f00f ff29 	bl	801144c <osSemaphoreRelease>
 80015fa:	e000      	b.n	80015fe <hci_tl_lowlevel_isr+0x2a>
      return;
 80015fc:	bf00      	nop
  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000c860 	.word	0x2000c860

08001604 <main>:

UART_HandleTypeDef hlpuart1;
UART_HandleTypeDef huart5;

int main(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  	HAL_Init();
 8001608:	f004 fb55 	bl	8005cb6 <HAL_Init>
    SystemClock_Config();
 800160c:	f000 f806 	bl	800161c <SystemClock_Config>
    Init_my_tasks();
 8001610:	f014 fb44 	bl	8015c9c <Init_my_tasks>
 8001614:	2300      	movs	r3, #0
	   /*Configure GPIO pin : PA13 */

  /* USER CODE END Init */


}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <SystemClock_Config>:
  */

//SD + BLE todo funcionando
 //BLE
 void SystemClock_Config(void)
 {
 800161c:	b580      	push	{r7, lr}
 800161e:	b0dc      	sub	sp, #368	; 0x170
 8001620:	af00      	add	r7, sp, #0
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001622:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001636:	2244      	movs	r2, #68	; 0x44
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f015 f9ca 	bl	80169d4 <memset>
   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001640:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001644:	2288      	movs	r2, #136	; 0x88
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f015 f9c3 	bl	80169d4 <memset>

   __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b63      	ldr	r3, [pc, #396]	; (80017dc <SystemClock_Config+0x1c0>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a62      	ldr	r2, [pc, #392]	; (80017dc <SystemClock_Config+0x1c0>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b60      	ldr	r3, [pc, #384]	; (80017dc <SystemClock_Config+0x1c0>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0204 	and.w	r2, r3, #4
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	681b      	ldr	r3, [r3, #0]
   __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <SystemClock_Config+0x1c0>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a5b      	ldr	r2, [pc, #364]	; (80017dc <SystemClock_Config+0x1c0>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b59      	ldr	r3, [pc, #356]	; (80017dc <SystemClock_Config+0x1c0>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800167e:	463b      	mov	r3, r7
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	463b      	mov	r3, r7
 8001684:	681b      	ldr	r3, [r3, #0]
   HAL_PWR_EnableBkUpAccess();
 8001686:	f005 f9fd 	bl	8006a84 <HAL_PWR_EnableBkUpAccess>
   __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <SystemClock_Config+0x1c0>)
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <SystemClock_Config+0x1c0>)
 8001692:	f023 0318 	bic.w	r3, r3, #24
 8001696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90



   /* Enable the LSE Oscilator */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800169a:	2304      	movs	r3, #4
 800169c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 fa98 	bl	8006be0 <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d000      	beq.n	80016b8 <SystemClock_Config+0x9c>
   {
     while(1);
 80016b6:	e7fe      	b.n	80016b6 <SystemClock_Config+0x9a>
   }

   /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
   HAL_RCCEx_DisableLSECSS();
 80016b8:	f006 fb7e 	bl	8007db8 <HAL_RCCEx_DisableLSECSS>

   /* Enable MSI Oscillator and activate PLL with MSI as source */
   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 80016bc:	2310      	movs	r3, #16
 80016be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 80016ce:	23b0      	movs	r3, #176	; 0xb0
 80016d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 80016da:	2301      	movs	r3, #1
 80016dc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   RCC_OscInitStruct.PLL.PLLM            = 6;
 80016e0:	2306      	movs	r3, #6
 80016e2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
   RCC_OscInitStruct.PLL.PLLN            = 40;
 80016e6:	2328      	movs	r3, #40	; 0x28
 80016e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   RCC_OscInitStruct.PLL.PLLP            = 7;
 80016ec:	2307      	movs	r3, #7
 80016ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   RCC_OscInitStruct.PLL.PLLQ            = 4;
 80016f2:	2304      	movs	r3, #4
 80016f4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
   RCC_OscInitStruct.PLL.PLLR            = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001702:	4618      	mov	r0, r3
 8001704:	f005 fa6c 	bl	8006be0 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d000      	beq.n	8001710 <SystemClock_Config+0xf4>
   {
     while(1);
 800170e:	e7fe      	b.n	800170e <SystemClock_Config+0xf2>
   }

   /* Enable MSI Auto-calibration through LSE */
   HAL_RCCEx_EnableMSIPLLMode();
 8001710:	f006 fb6a 	bl	8007de8 <HAL_RCCEx_EnableMSIPLLMode>

   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4618      	mov	r0, r3
 800171a:	2388      	movs	r3, #136	; 0x88
 800171c:	461a      	mov	r2, r3
 800171e:	2100      	movs	r1, #0
 8001720:	f015 f958 	bl	80169d4 <memset>
   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172c:	601a      	str	r2, [r3, #0]
   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f006 f854 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x132>
   {
     Error_Handler();
 800174a:	f000 f85b 	bl	8001804 <Error_Handler>
   }


   /* Select MSI output as USB clock source */
   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8001756:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800175a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800175e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001762:	4618      	mov	r0, r3
 8001764:	f006 f842 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>

   /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
   clocks dividers */
   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001768:	230f      	movs	r3, #15
 800176a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	2303      	movs	r3, #3
 8001770:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001786:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800178a:	2104      	movs	r1, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f005 fe0d 	bl	80073ac <HAL_RCC_ClockConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d000      	beq.n	800179a <SystemClock_Config+0x17e>
   {
     while(1);
 8001798:	e7fe      	b.n	8001798 <SystemClock_Config+0x17c>
   }
   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	2220      	movs	r2, #32
 80017a0:	601a      	str	r2, [r3, #0]
     PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	2200      	movs	r2, #0
 80017a8:	64da      	str	r2, [r3, #76]	; 0x4c
     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 f81c 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0x1a2>
     {
       Error_Handler();
 80017ba:	f000 f823 	bl	8001804 <Error_Handler>
     }
     /** Configure the main internal regulator output voltage
     */
     if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017c2:	f005 f97d 	bl	8006ac0 <HAL_PWREx_ControlVoltageScaling>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x1b4>
     {
       Error_Handler();
 80017cc:	f000 f81a 	bl	8001804 <Error_Handler>
     }



 }
 80017d0:	bf00      	nop
 80017d2:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017f2:	f004 fa79 	bl	8005ce8 <HAL_IncTick>
  }

  /* USER CODE END Callback 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40012c00 	.word	0x40012c00

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <Add_HWServW2ST_Service>:
* @brief  Add the HW Features service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_HWServW2ST_Service(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08e      	sub	sp, #56	; 0x38
 8001818:	af06      	add	r7, sp, #24
	 tBleStatus ret;

	  uint8_t uuid[16];

	  COPY_CONFIG_SERVICE_UUID(uuid);
 800181a:	231b      	movs	r3, #27
 800181c:	733b      	strb	r3, [r7, #12]
 800181e:	23c5      	movs	r3, #197	; 0xc5
 8001820:	737b      	strb	r3, [r7, #13]
 8001822:	23d5      	movs	r3, #213	; 0xd5
 8001824:	73bb      	strb	r3, [r7, #14]
 8001826:	23a5      	movs	r3, #165	; 0xa5
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	2302      	movs	r3, #2
 800182c:	743b      	strb	r3, [r7, #16]
 800182e:	2300      	movs	r3, #0
 8001830:	747b      	strb	r3, [r7, #17]
 8001832:	23b4      	movs	r3, #180	; 0xb4
 8001834:	74bb      	strb	r3, [r7, #18]
 8001836:	239a      	movs	r3, #154	; 0x9a
 8001838:	74fb      	strb	r3, [r7, #19]
 800183a:	23e1      	movs	r3, #225	; 0xe1
 800183c:	753b      	strb	r3, [r7, #20]
 800183e:	2311      	movs	r3, #17
 8001840:	757b      	strb	r3, [r7, #21]
 8001842:	230f      	movs	r3, #15
 8001844:	75bb      	strb	r3, [r7, #22]
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
 800184a:	2300      	movs	r3, #0
 800184c:	763b      	strb	r3, [r7, #24]
 800184e:	2300      	movs	r3, #0
 8001850:	767b      	strb	r3, [r7, #25]
 8001852:	2300      	movs	r3, #0
 8001854:	76bb      	strb	r3, [r7, #26]
 8001856:	2300      	movs	r3, #0
 8001858:	76fb      	strb	r3, [r7, #27]
	  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 8,&ConfigServW2STHandle);
 800185a:	f107 010c 	add.w	r1, r7, #12
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <Add_HWServW2ST_Service+0x180>)
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2308      	movs	r3, #8
 8001864:	2201      	movs	r2, #1
 8001866:	2002      	movs	r0, #2
 8001868:	f013 fb0e 	bl	8014e88 <aci_gatt_add_serv>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

	  if (ret != BLE_STATUS_SUCCESS)
 8001870:	7ffb      	ldrb	r3, [r7, #31]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 8083 	bne.w	800197e <Add_HWServW2ST_Service+0x16a>
	    goto fail;

	  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 8001878:	231b      	movs	r3, #27
 800187a:	733b      	strb	r3, [r7, #12]
 800187c:	23c5      	movs	r3, #197	; 0xc5
 800187e:	737b      	strb	r3, [r7, #13]
 8001880:	23d5      	movs	r3, #213	; 0xd5
 8001882:	73bb      	strb	r3, [r7, #14]
 8001884:	23a5      	movs	r3, #165	; 0xa5
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	2302      	movs	r3, #2
 800188a:	743b      	strb	r3, [r7, #16]
 800188c:	2300      	movs	r3, #0
 800188e:	747b      	strb	r3, [r7, #17]
 8001890:	2336      	movs	r3, #54	; 0x36
 8001892:	74bb      	strb	r3, [r7, #18]
 8001894:	23ac      	movs	r3, #172	; 0xac
 8001896:	74fb      	strb	r3, [r7, #19]
 8001898:	23e1      	movs	r3, #225	; 0xe1
 800189a:	753b      	strb	r3, [r7, #20]
 800189c:	2311      	movs	r3, #17
 800189e:	757b      	strb	r3, [r7, #21]
 80018a0:	230f      	movs	r3, #15
 80018a2:	75bb      	strb	r3, [r7, #22]
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
 80018a8:	2302      	movs	r3, #2
 80018aa:	763b      	strb	r3, [r7, #24]
 80018ac:	2300      	movs	r3, #0
 80018ae:	767b      	strb	r3, [r7, #25]
 80018b0:	2300      	movs	r3, #0
 80018b2:	76bb      	strb	r3, [r7, #26]
 80018b4:	2300      	movs	r3, #0
 80018b6:	76fb      	strb	r3, [r7, #27]
	  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <Add_HWServW2ST_Service+0x180>)
 80018ba:	8818      	ldrh	r0, [r3, #0]
 80018bc:	f107 020c 	add.w	r2, r7, #12
 80018c0:	4b35      	ldr	r3, [pc, #212]	; (8001998 <Add_HWServW2ST_Service+0x184>)
 80018c2:	9305      	str	r3, [sp, #20]
 80018c4:	2301      	movs	r3, #1
 80018c6:	9304      	str	r3, [sp, #16]
 80018c8:	2310      	movs	r3, #16
 80018ca:	9303      	str	r3, [sp, #12]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	2300      	movs	r3, #0
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2312      	movs	r3, #18
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2314      	movs	r3, #20
 80018da:	2102      	movs	r1, #2
 80018dc:	f013 fb60 	bl	8014fa0 <aci_gatt_add_char>
 80018e0:	4603      	mov	r3, r0
 80018e2:	77fb      	strb	r3, [r7, #31]
	                           CHAR_PROP_NOTIFY| CHAR_PROP_READ,
	                           ATTR_PERMISSION_NONE,
							   GATT_DONT_NOTIFY_EVENTS,
	                           16, 1, &ConfigCharHandle);

	  if (ret != BLE_STATUS_SUCCESS)
 80018e4:	7ffb      	ldrb	r3, [r7, #31]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d14b      	bne.n	8001982 <Add_HWServW2ST_Service+0x16e>
	  {
	    goto fail;
	  }
	  char vector[9] = {'R','X',' ','B','U','F','F','E','R'};
 80018ea:	4a2c      	ldr	r2, [pc, #176]	; (800199c <Add_HWServW2ST_Service+0x188>)
 80018ec:	463b      	mov	r3, r7
 80018ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80018f0:	c303      	stmia	r3!, {r0, r1}
 80018f2:	701a      	strb	r2, [r3, #0]
	 	  aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, 9,vector);
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <Add_HWServW2ST_Service+0x180>)
 80018f6:	8818      	ldrh	r0, [r3, #0]
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <Add_HWServW2ST_Service+0x184>)
 80018fa:	8819      	ldrh	r1, [r3, #0]
 80018fc:	463b      	mov	r3, r7
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2309      	movs	r3, #9
 8001902:	2200      	movs	r2, #0
 8001904:	f013 fc1e 	bl	8015144 <aci_gatt_update_char_value>

	  COPY_CONFIG_W3ST_CHAR_UUID(uuid);
 8001908:	231b      	movs	r3, #27
 800190a:	733b      	strb	r3, [r7, #12]
 800190c:	23c5      	movs	r3, #197	; 0xc5
 800190e:	737b      	strb	r3, [r7, #13]
 8001910:	23d5      	movs	r3, #213	; 0xd5
 8001912:	73bb      	strb	r3, [r7, #14]
 8001914:	23a5      	movs	r3, #165	; 0xa5
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	2302      	movs	r3, #2
 800191a:	743b      	strb	r3, [r7, #16]
 800191c:	2300      	movs	r3, #0
 800191e:	747b      	strb	r3, [r7, #17]
 8001920:	2336      	movs	r3, #54	; 0x36
 8001922:	74bb      	strb	r3, [r7, #18]
 8001924:	23ac      	movs	r3, #172	; 0xac
 8001926:	74fb      	strb	r3, [r7, #19]
 8001928:	23e1      	movs	r3, #225	; 0xe1
 800192a:	753b      	strb	r3, [r7, #20]
 800192c:	2311      	movs	r3, #17
 800192e:	757b      	strb	r3, [r7, #21]
 8001930:	2303      	movs	r3, #3
 8001932:	75bb      	strb	r3, [r7, #22]
 8001934:	2303      	movs	r3, #3
 8001936:	75fb      	strb	r3, [r7, #23]
 8001938:	2303      	movs	r3, #3
 800193a:	763b      	strb	r3, [r7, #24]
 800193c:	2300      	movs	r3, #0
 800193e:	767b      	strb	r3, [r7, #25]
 8001940:	2300      	movs	r3, #0
 8001942:	76bb      	strb	r3, [r7, #26]
 8001944:	2300      	movs	r3, #0
 8001946:	76fb      	strb	r3, [r7, #27]
	 	  	  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <Add_HWServW2ST_Service+0x180>)
 800194a:	8818      	ldrh	r0, [r3, #0]
 800194c:	f107 020c 	add.w	r2, r7, #12
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <Add_HWServW2ST_Service+0x18c>)
 8001952:	9305      	str	r3, [sp, #20]
 8001954:	2301      	movs	r3, #1
 8001956:	9304      	str	r3, [sp, #16]
 8001958:	2310      	movs	r3, #16
 800195a:	9303      	str	r3, [sp, #12]
 800195c:	2301      	movs	r3, #1
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2304      	movs	r3, #4
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2314      	movs	r3, #20
 800196a:	2102      	movs	r1, #2
 800196c:	f013 fb18 	bl	8014fa0 <aci_gatt_add_char>
 8001970:	4603      	mov	r3, r0
 8001972:	77fb      	strb	r3, [r7, #31]
	 	  	                           CHAR_PROP_WRITE_WITHOUT_RESP,
	 	  	                           ATTR_PERMISSION_NONE,
	 	  	                           GATT_NOTIFY_ATTRIBUTE_WRITE ,
	 	  	                           16, 1, &ConfigCharHandle2);

	 	 if (ret != BLE_STATUS_SUCCESS)
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <Add_HWServW2ST_Service+0x172>
	 	 }




	  return BLE_STATUS_SUCCESS;
 800197a:	2300      	movs	r3, #0
 800197c:	e005      	b.n	800198a <Add_HWServW2ST_Service+0x176>
	    goto fail;
 800197e:	bf00      	nop
 8001980:	e002      	b.n	8001988 <Add_HWServW2ST_Service+0x174>
	    goto fail;
 8001982:	bf00      	nop
 8001984:	e000      	b.n	8001988 <Add_HWServW2ST_Service+0x174>
	 	  	    goto fail;
 8001986:	bf00      	nop
	  fail:
	    //STLBLE_PRINTF("Error while adding Configuration service.\n");
	    return BLE_STATUS_ERROR;
 8001988:	2347      	movs	r3, #71	; 0x47
}
 800198a:	4618      	mov	r0, r3
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000bbce 	.word	0x2000bbce
 8001998:	2000bbcc 	.word	0x2000bbcc
 800199c:	08018e34 	.word	0x08018e34
 80019a0:	200003d0 	.word	0x200003d0

080019a4 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t addr[6] Address of peer device
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
  

}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	StartBeaconing();
 80019c0:	f7ff f922 	bl	8000c08 <StartBeaconing>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <Read_Request_CB>:
* @brief  This function is called when there is a Bluetooth Read request
* @param  uint16_t handle Handle of the attribute
* @retval None
*/
void Read_Request_CB(uint16_t handle)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]

}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <Attribute_Modified_CB>:
extern uint8_t Archivo_seleccionado;
static const char * vector_comandos[7] = {"SD","GD","SS","GS","GL","LS","DL"};
DIR directorio_extraccion;

void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length)
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80019e6:	af02      	add	r7, sp, #8
 80019e8:	463b      	mov	r3, r7
 80019ea:	6019      	str	r1, [r3, #0]
 80019ec:	4611      	mov	r1, r2
 80019ee:	1dbb      	adds	r3, r7, #6
 80019f0:	4602      	mov	r2, r0
 80019f2:	801a      	strh	r2, [r3, #0]
 80019f4:	1d7b      	adds	r3, r7, #5
 80019f6:	460a      	mov	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
	static char pbuffer[200];



			char texto[40];
			for(int i = 0 ; i < data_length; i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001a00:	f000 bc0f 	b.w	8002222 <Attribute_Modified_CB+0x842>
			{
				int size = sprintf(texto, "%c",att_data[i] );
 8001a04:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001a08:	463a      	mov	r2, r7
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8001a16:	49c5      	ldr	r1, [pc, #788]	; (8001d2c <Attribute_Modified_CB+0x34c>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f015 f89b 	bl	8016b54 <siprintf>
 8001a1e:	f8c7 03a8 	str.w	r0, [r7, #936]	; 0x3a8
				int numero_comando = process_mesage(texto[0], pbuffer, 200, vector_comandos, 7, 0);
 8001a22:	f897 0344 	ldrb.w	r0, [r7, #836]	; 0x344
 8001a26:	2300      	movs	r3, #0
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4bc0      	ldr	r3, [pc, #768]	; (8001d30 <Attribute_Modified_CB+0x350>)
 8001a30:	22c8      	movs	r2, #200	; 0xc8
 8001a32:	49c0      	ldr	r1, [pc, #768]	; (8001d34 <Attribute_Modified_CB+0x354>)
 8001a34:	f008 fe44 	bl	800a6c0 <process_mesage>
 8001a38:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4


				//HAL_UART_Transmit(&huart1, &pbuffer[i], 1, 0xFFFF);

				if(numero_comando >= 0)
 8001a3c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f2c0 83e9 	blt.w	8002218 <Attribute_Modified_CB+0x838>
				{

					JSON_Value * val_1 = json_parse_string(pbuffer);
 8001a46:	48bb      	ldr	r0, [pc, #748]	; (8001d34 <Attribute_Modified_CB+0x354>)
 8001a48:	f00a f864 	bl	800bb14 <json_parse_string>
 8001a4c:	f8c7 03a0 	str.w	r0, [r7, #928]	; 0x3a0


					//Chequear si es un objeto
					JSON_Object *root_object = json_value_get_object(val_1);
 8001a50:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 8001a54:	f00a f927 	bl	800bca6 <json_value_get_object>
 8001a58:	f8c7 039c 	str.w	r0, [r7, #924]	; 0x39c



					JSON_Value  * valor_2 = json_object_dotget_value(root_object, "c");
 8001a5c:	49b6      	ldr	r1, [pc, #728]	; (8001d38 <Attribute_Modified_CB+0x358>)
 8001a5e:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001a62:	f00a f896 	bl	800bb92 <json_object_dotget_value>
 8001a66:	f8c7 0398 	str.w	r0, [r7, #920]	; 0x398

					char respuesta[40];
					int size;

					char vector[9] = {'S','D',' ',' ',' ',' ',' ',' ',' '};
 8001a6a:	4ab4      	ldr	r2, [pc, #720]	; (8001d3c <Attribute_Modified_CB+0x35c>)
 8001a6c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001a70:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a72:	c303      	stmia	r3!, {r0, r1}
 8001a74:	701a      	strb	r2, [r3, #0]
					switch(numero_comando)
 8001a76:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	f200 83cc 	bhi.w	8002218 <Attribute_Modified_CB+0x838>
 8001a80:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <Attribute_Modified_CB+0xa8>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001aa5 	.word	0x08001aa5
 8001a8c:	08001c3d 	.word	0x08001c3d
 8001a90:	08001e53 	.word	0x08001e53
 8001a94:	08001e89 	.word	0x08001e89
 8001a98:	08001ebf 	.word	0x08001ebf
 8001a9c:	080021a5 	.word	0x080021a5
 8001aa0:	080021db 	.word	0x080021db
					{
						case 0:
						{

							//PRINT("SD\r\n")
							char * respuest_sd_t = "";
 8001aa4:	4ba6      	ldr	r3, [pc, #664]	; (8001d40 <Attribute_Modified_CB+0x360>)
 8001aa6:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
							char * respuest_sd_m = "";
 8001aaa:	4ba5      	ldr	r3, [pc, #660]	; (8001d40 <Attribute_Modified_CB+0x360>)
 8001aac:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4

							/*Se meterá asi la hora: (hora)(minuto)(segundo)(dia)(mes)(año) -> 23050202062020  =   23:05:02/02/06/2020*/
							if(json_object_has_value(root_object, "t") != 0 )
 8001ab0:	49a4      	ldr	r1, [pc, #656]	; (8001d44 <Attribute_Modified_CB+0x364>)
 8001ab2:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001ab6:	f00a f8b4 	bl	800bc22 <json_object_has_value>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d051      	beq.n	8001b64 <Attribute_Modified_CB+0x184>
							{
								char aux[5]= {'x','x','\0','x','\0'};
 8001ac0:	4aa1      	ldr	r2, [pc, #644]	; (8001d48 <Attribute_Modified_CB+0x368>)
 8001ac2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aca:	6018      	str	r0, [r3, #0]
 8001acc:	3304      	adds	r3, #4
 8001ace:	7019      	strb	r1, [r3, #0]
								JSON_Value  * valor_3 = json_object_dotget_value(root_object, "t");
 8001ad0:	499c      	ldr	r1, [pc, #624]	; (8001d44 <Attribute_Modified_CB+0x364>)
 8001ad2:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001ad6:	f00a f85c 	bl	800bb92 <json_object_dotget_value>
 8001ada:	f8c7 0378 	str.w	r0, [r7, #888]	; 0x378
								//Falta un IF de solo si es una cadena!!!!!!!!!!!!!!!!!!!!!!!!!!!
								char * t_ptr = json_value_get_string (valor_3);
 8001ade:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8001ae2:	f00a f916 	bl	800bd12 <json_value_get_string>
 8001ae6:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
								if(strlen(t_ptr) == 12)
 8001aea:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8001aee:	f7fe fb79 	bl	80001e4 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	d132      	bne.n	8001b5e <Attribute_Modified_CB+0x17e>
								{
									//PRINT("Tiempo: ")
									for(int i = 0; i<5;i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8001afe:	e018      	b.n	8001b32 <Attribute_Modified_CB+0x152>
									{
										aux[0] = t_ptr[2*i];
 8001b00:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	461a      	mov	r2, r3
 8001b08:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	f887 3330 	strb.w	r3, [r7, #816]	; 0x330
										aux[1] = t_ptr[2*i+1];
 8001b14:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8001b20:	4413      	add	r3, r2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
									for(int i = 0; i<5;i++)
 8001b28:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8001b32:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	dde2      	ble.n	8001b00 <Attribute_Modified_CB+0x120>
										else
										{
											//PRINT("/")
										}
									}
									aux[0] = t_ptr[10];
 8001b3a:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8001b3e:	7a9b      	ldrb	r3, [r3, #10]
 8001b40:	f887 3330 	strb.w	r3, [r7, #816]	; 0x330
									aux[1] = t_ptr[11];
 8001b44:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8001b48:	7adb      	ldrb	r3, [r3, #11]
 8001b4a:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

									respuest_sd_t = "T: OK";
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <Attribute_Modified_CB+0x36c>)
 8001b50:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8

									RTC_configurar_dia_desde_cadena(t_ptr);
 8001b54:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8001b58:	f7ff f9ee 	bl	8000f38 <RTC_configurar_dia_desde_cadena>
 8001b5c:	e002      	b.n	8001b64 <Attribute_Modified_CB+0x184>

								}
								else
								{
									//PRINT("FORMATO DE HORA INCORRECTO.\r\n")
									respuest_sd_t = "T: ERROR";
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	; (8001d50 <Attribute_Modified_CB+0x370>)
 8001b60:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
								}
							}
							if(json_object_has_value(root_object, "m") != 0 )
 8001b64:	497b      	ldr	r1, [pc, #492]	; (8001d54 <Attribute_Modified_CB+0x374>)
 8001b66:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001b6a:	f00a f85a 	bl	800bc22 <json_object_has_value>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d048      	beq.n	8001c06 <Attribute_Modified_CB+0x226>
							{
								JSON_Value  * valor_4 = json_object_dotget_value(root_object, "m");
 8001b74:	4977      	ldr	r1, [pc, #476]	; (8001d54 <Attribute_Modified_CB+0x374>)
 8001b76:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001b7a:	f00a f80a 	bl	800bb92 <json_object_dotget_value>
 8001b7e:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
								//Falta un IF de solo si es una cadena!!!!!!!!!!!!!!!!!!!!!!!!!!!
								char * m_ptr = json_value_get_string (valor_4);
 8001b82:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8001b86:	f00a f8c4 	bl	800bd12 <json_value_get_string>
 8001b8a:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c
								switch(atoi(m_ptr))
 8001b8e:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 8001b92:	f014 fe99 	bl	80168c8 <atoi>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d830      	bhi.n	8001bfe <Attribute_Modified_CB+0x21e>
 8001b9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <Attribute_Modified_CB+0x1c4>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001bb9 	.word	0x08001bb9
 8001ba8:	08001bc7 	.word	0x08001bc7
 8001bac:	08001bd5 	.word	0x08001bd5
 8001bb0:	08001be3 	.word	0x08001be3
 8001bb4:	08001bf1 	.word	0x08001bf1
								{
									case 0:

										//PRINT("MODO BAJO CONSUMO. \r\n")
										respuest_sd_m = "M: DORMIDO";
 8001bb8:	4b67      	ldr	r3, [pc, #412]	; (8001d58 <Attribute_Modified_CB+0x378>)
 8001bba:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
										estado_uc_actual = DORMIDO;
 8001bbe:	4b67      	ldr	r3, [pc, #412]	; (8001d5c <Attribute_Modified_CB+0x37c>)
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	701a      	strb	r2, [r3, #0]
									break;
 8001bc4:	e020      	b.n	8001c08 <Attribute_Modified_CB+0x228>
									case 1:

										//PRINT("MODO STREAMING. \r\n")
										respuest_sd_m = "M: ESPERA_COMANDOS";
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <Attribute_Modified_CB+0x380>)
 8001bc8:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
										estado_uc_actual = ESPERA_COMANDOS;
 8001bcc:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <Attribute_Modified_CB+0x37c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]

									break;
 8001bd2:	e019      	b.n	8001c08 <Attribute_Modified_CB+0x228>
									case 2:

										//PRINT("MODO LOGGING. \r\n")
										respuest_sd_m = "M: LOGGING";
 8001bd4:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <Attribute_Modified_CB+0x384>)
 8001bd6:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
										estado_uc_actual = TOMANDO_DATOS;
 8001bda:	4b60      	ldr	r3, [pc, #384]	; (8001d5c <Attribute_Modified_CB+0x37c>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
									break;
 8001be0:	e012      	b.n	8001c08 <Attribute_Modified_CB+0x228>
									case 3:

																			//PRINT("MODO LOGGING. \r\n")
										respuest_sd_m = "M: STREAMING";
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <Attribute_Modified_CB+0x388>)
 8001be4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
										estado_uc_actual = TOMANDO_DATOS;
 8001be8:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <Attribute_Modified_CB+0x37c>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
									break;
 8001bee:	e00b      	b.n	8001c08 <Attribute_Modified_CB+0x228>
									case 4:

									//PRINT("MODO LOGGING. \r\n")
										respuest_sd_m = "M: EXTRACCION";
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <Attribute_Modified_CB+0x38c>)
 8001bf2:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
										estado_uc_actual = EXTRACCION;
 8001bf6:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <Attribute_Modified_CB+0x37c>)
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	701a      	strb	r2, [r3, #0]
									break;
 8001bfc:	e004      	b.n	8001c08 <Attribute_Modified_CB+0x228>
									default:

										//PRINT("MODO INCORRECTO. \r\n")
										respuest_sd_m = "M: ERROR";
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	; (8001d70 <Attribute_Modified_CB+0x390>)
 8001c00:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
									break;
 8001c04:	e000      	b.n	8001c08 <Attribute_Modified_CB+0x228>
								}

							}
 8001c06:	bf00      	nop
							size = sprintf(respuesta,"%s %s",respuest_sd_m,respuest_sd_t);
 8001c08:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001c0c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8001c10:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8001c14:	4957      	ldr	r1, [pc, #348]	; (8001d74 <Attribute_Modified_CB+0x394>)
 8001c16:	f014 ff9d 	bl	8016b54 <siprintf>
 8001c1a:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
							aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,respuesta);
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <Attribute_Modified_CB+0x398>)
 8001c20:	8818      	ldrh	r0, [r3, #0]
 8001c22:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <Attribute_Modified_CB+0x39c>)
 8001c24:	8819      	ldrh	r1, [r3, #0]
 8001c26:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	2200      	movs	r2, #0
 8001c36:	f013 fa85 	bl	8015144 <aci_gatt_update_char_value>

						break;
 8001c3a:	e2ed      	b.n	8002218 <Attribute_Modified_CB+0x838>
						}
						case 1:
							//GD
							if(json_object_has_value(root_object, "p") != 0 )
 8001c3c:	4950      	ldr	r1, [pc, #320]	; (8001d80 <Attribute_Modified_CB+0x3a0>)
 8001c3e:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001c42:	f009 ffee 	bl	800bc22 <json_object_has_value>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 82e2 	beq.w	8002212 <Attribute_Modified_CB+0x832>
							{
								JSON_Value  * valor_p = json_object_dotget_value(root_object, "p");
 8001c4e:	494c      	ldr	r1, [pc, #304]	; (8001d80 <Attribute_Modified_CB+0x3a0>)
 8001c50:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001c54:	f009 ff9d 	bl	800bb92 <json_object_dotget_value>
 8001c58:	f8c7 0380 	str.w	r0, [r7, #896]	; 0x380
								char * gd_ptr = json_value_get_string (valor_p);
 8001c5c:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8001c60:	f00a f857 	bl	800bd12 <json_value_get_string>
 8001c64:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
								if(strcmp(gd_ptr,"e")==0)
 8001c68:	4946      	ldr	r1, [pc, #280]	; (8001d84 <Attribute_Modified_CB+0x3a4>)
 8001c6a:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8001c6e:	f7fe faaf 	bl	80001d0 <strcmp>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f040 8093 	bne.w	8001da0 <Attribute_Modified_CB+0x3c0>
								{
										switch(estado_uc_actual)
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <Attribute_Modified_CB+0x37c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	f200 82c7 	bhi.w	8002212 <Attribute_Modified_CB+0x832>
 8001c84:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <Attribute_Modified_CB+0x2ac>)
 8001c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8a:	bf00      	nop
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cbb 	.word	0x08001cbb
 8001c94:	08001cd1 	.word	0x08001cd1
 8001c98:	08001ce7 	.word	0x08001ce7
 8001c9c:	08001d13 	.word	0x08001d13
 8001ca0:	08001cfd 	.word	0x08001cfd
										{
											case( ESPERA_COMANDOS):
												aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("ESPERA_COMANDOS"),"ESPERA_COMANDOS");
 8001ca4:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <Attribute_Modified_CB+0x398>)
 8001ca6:	8818      	ldrh	r0, [r3, #0]
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <Attribute_Modified_CB+0x39c>)
 8001caa:	8819      	ldrh	r1, [r3, #0]
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <Attribute_Modified_CB+0x3a8>)
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f013 fa46 	bl	8015144 <aci_gatt_update_char_value>
											break;
 8001cb8:	e0ca      	b.n	8001e50 <Attribute_Modified_CB+0x470>
											case( TOMANDO_DATOS):
												aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("TOMANDO_DATOS"),"TOMANDO_DATOS");
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <Attribute_Modified_CB+0x398>)
 8001cbc:	8818      	ldrh	r0, [r3, #0]
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <Attribute_Modified_CB+0x39c>)
 8001cc0:	8819      	ldrh	r1, [r3, #0]
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <Attribute_Modified_CB+0x3ac>)
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	230d      	movs	r3, #13
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f013 fa3b 	bl	8015144 <aci_gatt_update_char_value>
											break;
 8001cce:	e0bf      	b.n	8001e50 <Attribute_Modified_CB+0x470>
											case( DORMIDO ):
												aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("DORMIDO"),"DORMIDO");
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <Attribute_Modified_CB+0x398>)
 8001cd2:	8818      	ldrh	r0, [r3, #0]
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <Attribute_Modified_CB+0x39c>)
 8001cd6:	8819      	ldrh	r1, [r3, #0]
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <Attribute_Modified_CB+0x3b0>)
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2307      	movs	r3, #7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f013 fa30 	bl	8015144 <aci_gatt_update_char_value>
											break;
 8001ce4:	e0b4      	b.n	8001e50 <Attribute_Modified_CB+0x470>
											case( STREAMING ):
												aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("STREAMING"),"STREAMING");
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <Attribute_Modified_CB+0x398>)
 8001ce8:	8818      	ldrh	r0, [r3, #0]
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <Attribute_Modified_CB+0x39c>)
 8001cec:	8819      	ldrh	r1, [r3, #0]
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <Attribute_Modified_CB+0x3b4>)
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f013 fa25 	bl	8015144 <aci_gatt_update_char_value>
											break;
 8001cfa:	e0a9      	b.n	8001e50 <Attribute_Modified_CB+0x470>
											case( BAJO_CONSUMO ):
												aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("BAJO_CONSUMO"),"BAJO_CONSUMO");
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <Attribute_Modified_CB+0x398>)
 8001cfe:	8818      	ldrh	r0, [r3, #0]
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <Attribute_Modified_CB+0x39c>)
 8001d02:	8819      	ldrh	r1, [r3, #0]
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <Attribute_Modified_CB+0x3b8>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	230c      	movs	r3, #12
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f013 fa1a 	bl	8015144 <aci_gatt_update_char_value>
											break;
 8001d10:	e09e      	b.n	8001e50 <Attribute_Modified_CB+0x470>
											case( EXTRACCION ):
												aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("EXTRACCION"),"EXTRACCION");
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <Attribute_Modified_CB+0x398>)
 8001d14:	8818      	ldrh	r0, [r3, #0]
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <Attribute_Modified_CB+0x39c>)
 8001d18:	8819      	ldrh	r1, [r3, #0]
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <Attribute_Modified_CB+0x3bc>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	230a      	movs	r3, #10
 8001d20:	2200      	movs	r2, #0
 8001d22:	f013 fa0f 	bl	8015144 <aci_gatt_update_char_value>
											break;
 8001d26:	bf00      	nop
 8001d28:	e092      	b.n	8001e50 <Attribute_Modified_CB+0x470>
 8001d2a:	bf00      	nop
 8001d2c:	08018ecc 	.word	0x08018ecc
 8001d30:	20000000 	.word	0x20000000
 8001d34:	200003d4 	.word	0x200003d4
 8001d38:	08018ed0 	.word	0x08018ed0
 8001d3c:	08019024 	.word	0x08019024
 8001d40:	08018ed4 	.word	0x08018ed4
 8001d44:	08018ed8 	.word	0x08018ed8
 8001d48:	08019030 	.word	0x08019030
 8001d4c:	08018edc 	.word	0x08018edc
 8001d50:	08018ee4 	.word	0x08018ee4
 8001d54:	08018ef0 	.word	0x08018ef0
 8001d58:	08018ef4 	.word	0x08018ef4
 8001d5c:	200000dc 	.word	0x200000dc
 8001d60:	08018f00 	.word	0x08018f00
 8001d64:	08018f14 	.word	0x08018f14
 8001d68:	08018f20 	.word	0x08018f20
 8001d6c:	08018f30 	.word	0x08018f30
 8001d70:	08018f40 	.word	0x08018f40
 8001d74:	08018f4c 	.word	0x08018f4c
 8001d78:	2000bbce 	.word	0x2000bbce
 8001d7c:	2000bbcc 	.word	0x2000bbcc
 8001d80:	08018f54 	.word	0x08018f54
 8001d84:	08018f58 	.word	0x08018f58
 8001d88:	08018f5c 	.word	0x08018f5c
 8001d8c:	08018f6c 	.word	0x08018f6c
 8001d90:	08018f7c 	.word	0x08018f7c
 8001d94:	08018f84 	.word	0x08018f84
 8001d98:	08018f90 	.word	0x08018f90
 8001d9c:	08018fa0 	.word	0x08018fa0
										}


								}
								else if(strcmp(gd_ptr,"f")==0){
 8001da0:	49b1      	ldr	r1, [pc, #708]	; (8002068 <Attribute_Modified_CB+0x688>)
 8001da2:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8001da6:	f7fe fa13 	bl	80001d0 <strcmp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d119      	bne.n	8001de4 <Attribute_Modified_CB+0x404>
									char fecha[20];
									RTC_obtener_fecha_str(fecha);
 8001db0:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa1f 	bl	80011f8 <RTC_obtener_fecha_str>
									aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen(fecha),fecha);
 8001dba:	4bac      	ldr	r3, [pc, #688]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001dbc:	881c      	ldrh	r4, [r3, #0]
 8001dbe:	4bac      	ldr	r3, [pc, #688]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001dc0:	881d      	ldrh	r5, [r3, #0]
 8001dc2:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fa0c 	bl	80001e4 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4629      	mov	r1, r5
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f013 f9b1 	bl	8015144 <aci_gatt_update_char_value>

									aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("80%"),"80%");
								}
							}

						break;
 8001de2:	e216      	b.n	8002212 <Attribute_Modified_CB+0x832>
								else if(strcmp(gd_ptr,"h")==0)
 8001de4:	49a3      	ldr	r1, [pc, #652]	; (8002074 <Attribute_Modified_CB+0x694>)
 8001de6:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8001dea:	f7fe f9f1 	bl	80001d0 <strcmp>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d119      	bne.n	8001e28 <Attribute_Modified_CB+0x448>
									RTC_obtener_hora_str(hora);
 8001df4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f9a5 	bl	8001148 <RTC_obtener_hora_str>
									aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen(hora),hora);
 8001dfe:	4b9b      	ldr	r3, [pc, #620]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001e00:	881c      	ldrh	r4, [r3, #0]
 8001e02:	4b9b      	ldr	r3, [pc, #620]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001e04:	881d      	ldrh	r5, [r3, #0]
 8001e06:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe f9ea 	bl	80001e4 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4629      	mov	r1, r5
 8001e20:	4620      	mov	r0, r4
 8001e22:	f013 f98f 	bl	8015144 <aci_gatt_update_char_value>
						break;
 8001e26:	e1f4      	b.n	8002212 <Attribute_Modified_CB+0x832>
								else if(strcmp(gd_ptr,"b")==0)
 8001e28:	4993      	ldr	r1, [pc, #588]	; (8002078 <Attribute_Modified_CB+0x698>)
 8001e2a:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8001e2e:	f7fe f9cf 	bl	80001d0 <strcmp>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f040 81ec 	bne.w	8002212 <Attribute_Modified_CB+0x832>
									aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("80%"),"80%");
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001e3c:	8818      	ldrh	r0, [r3, #0]
 8001e3e:	4b8c      	ldr	r3, [pc, #560]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001e40:	8819      	ldrh	r1, [r3, #0]
 8001e42:	4b8e      	ldr	r3, [pc, #568]	; (800207c <Attribute_Modified_CB+0x69c>)
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2303      	movs	r3, #3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f013 f97b 	bl	8015144 <aci_gatt_update_char_value>
						break;
 8001e4e:	e1e0      	b.n	8002212 <Attribute_Modified_CB+0x832>
 8001e50:	e1df      	b.n	8002212 <Attribute_Modified_CB+0x832>
						case 2:
							//PRINT("SS\r\n")
							size = sprintf(vector,"SS");
 8001e52:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001e56:	4a8a      	ldr	r2, [pc, #552]	; (8002080 <Attribute_Modified_CB+0x6a0>)
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	8019      	strh	r1, [r3, #0]
 8001e5e:	3302      	adds	r3, #2
 8001e60:	0c12      	lsrs	r2, r2, #16
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
							aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,vector);
 8001e6a:	4b80      	ldr	r3, [pc, #512]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001e6c:	8818      	ldrh	r0, [r3, #0]
 8001e6e:	4b80      	ldr	r3, [pc, #512]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001e70:	8819      	ldrh	r1, [r3, #0]
 8001e72:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	2200      	movs	r2, #0
 8001e82:	f013 f95f 	bl	8015144 <aci_gatt_update_char_value>

						break;
 8001e86:	e1c7      	b.n	8002218 <Attribute_Modified_CB+0x838>
						case 3:
							//PRINT("GS\r\n")
							size = sprintf(vector,"GS");
 8001e88:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001e8c:	4a7d      	ldr	r2, [pc, #500]	; (8002084 <Attribute_Modified_CB+0x6a4>)
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	4611      	mov	r1, r2
 8001e92:	8019      	strh	r1, [r3, #0]
 8001e94:	3302      	adds	r3, #2
 8001e96:	0c12      	lsrs	r2, r2, #16
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
							aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,vector);
 8001ea0:	4b72      	ldr	r3, [pc, #456]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001ea2:	8818      	ldrh	r0, [r3, #0]
 8001ea4:	4b72      	ldr	r3, [pc, #456]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001ea6:	8819      	ldrh	r1, [r3, #0]
 8001ea8:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f013 f944 	bl	8015144 <aci_gatt_update_char_value>
						break;
 8001ebc:	e1ac      	b.n	8002218 <Attribute_Modified_CB+0x838>
							//PRINT("GL\r\n")
							//size = sprintf(vector,"GL");
							//aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,vector);

							/*Se meterá asi la hora: (hora)(minuto)(segundo)(dia)(mes)(año) -> 23050202062020  =   23:05:02/02/06/2020*/
							if(json_object_has_value(root_object, "p") != 0 )
 8001ebe:	4972      	ldr	r1, [pc, #456]	; (8002088 <Attribute_Modified_CB+0x6a8>)
 8001ec0:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001ec4:	f009 fead 	bl	800bc22 <json_object_has_value>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 81a3 	beq.w	8002216 <Attribute_Modified_CB+0x836>
							{

								JSON_Value  * valor_3 = json_object_dotget_value(root_object, "p");
 8001ed0:	496d      	ldr	r1, [pc, #436]	; (8002088 <Attribute_Modified_CB+0x6a8>)
 8001ed2:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001ed6:	f009 fe5c 	bl	800bb92 <json_object_dotget_value>
 8001eda:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
								//Falta un IF de solo si es una cadena!!!!!!!!!!!!!!!!!!!!!!!!!!!
								char * gd_ptr = json_value_get_string (valor_3);
 8001ede:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8001ee2:	f009 ff16 	bl	800bd12 <json_value_get_string>
 8001ee6:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
								if(strcmp(gd_ptr,"i")==0)//inicial file
 8001eea:	4968      	ldr	r1, [pc, #416]	; (800208c <Attribute_Modified_CB+0x6ac>)
 8001eec:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001ef0:	f7fe f96e 	bl	80001d0 <strcmp>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d132      	bne.n	8001f60 <Attribute_Modified_CB+0x580>
								{
									get_first_file_path(fichero_actual,&directorio_extraccion);
 8001efa:	4965      	ldr	r1, [pc, #404]	; (8002090 <Attribute_Modified_CB+0x6b0>)
 8001efc:	4865      	ldr	r0, [pc, #404]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001efe:	f00e fd85 	bl	8010a0c <get_first_file_path>
									if(strlen(fichero_actual)>20)
 8001f02:	4864      	ldr	r0, [pc, #400]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001f04:	f7fe f96e 	bl	80001e4 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b14      	cmp	r3, #20
 8001f0c:	d916      	bls.n	8001f3c <Attribute_Modified_CB+0x55c>
									{
										char ruta_20_bytes[20];
										memcpy(ruta_20_bytes,fichero_actual,20 );
 8001f0e:	4b61      	ldr	r3, [pc, #388]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001f10:	f507 743d 	add.w	r4, r7, #756	; 0x2f4
 8001f14:	461d      	mov	r5, r3
 8001f16:	6828      	ldr	r0, [r5, #0]
 8001f18:	6869      	ldr	r1, [r5, #4]
 8001f1a:	68aa      	ldr	r2, [r5, #8]
 8001f1c:	68eb      	ldr	r3, [r5, #12]
 8001f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f20:	6928      	ldr	r0, [r5, #16]
 8001f22:	6020      	str	r0, [r4, #0]
										aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, 20,ruta_20_bytes);
 8001f24:	4b51      	ldr	r3, [pc, #324]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001f26:	8818      	ldrh	r0, [r3, #0]
 8001f28:	4b51      	ldr	r3, [pc, #324]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001f2a:	8819      	ldrh	r1, [r3, #0]
 8001f2c:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2314      	movs	r3, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	f013 f905 	bl	8015144 <aci_gatt_update_char_value>
									aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen(tamano_archivo),tamano_archivo);
								}
							}


						break;
 8001f3a:	e16c      	b.n	8002216 <Attribute_Modified_CB+0x836>
										aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen(fichero_actual),fichero_actual);
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001f3e:	881c      	ldrh	r4, [r3, #0]
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001f42:	881d      	ldrh	r5, [r3, #0]
 8001f44:	4853      	ldr	r0, [pc, #332]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001f46:	f7fe f94d 	bl	80001e4 <strlen>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b51      	ldr	r3, [pc, #324]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	4613      	mov	r3, r2
 8001f54:	2200      	movs	r2, #0
 8001f56:	4629      	mov	r1, r5
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f013 f8f3 	bl	8015144 <aci_gatt_update_char_value>
						break;
 8001f5e:	e15a      	b.n	8002216 <Attribute_Modified_CB+0x836>
								else if(strcmp(gd_ptr,"s")==0)//sig
 8001f60:	494d      	ldr	r1, [pc, #308]	; (8002098 <Attribute_Modified_CB+0x6b8>)
 8001f62:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001f66:	f7fe f933 	bl	80001d0 <strcmp>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d132      	bne.n	8001fd6 <Attribute_Modified_CB+0x5f6>
									get_next_file_path(fichero_actual,&directorio_extraccion);
 8001f70:	4947      	ldr	r1, [pc, #284]	; (8002090 <Attribute_Modified_CB+0x6b0>)
 8001f72:	4848      	ldr	r0, [pc, #288]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001f74:	f00e fd7a 	bl	8010a6c <get_next_file_path>
									if(strlen(fichero_actual)>20)
 8001f78:	4846      	ldr	r0, [pc, #280]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001f7a:	f7fe f933 	bl	80001e4 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b14      	cmp	r3, #20
 8001f82:	d916      	bls.n	8001fb2 <Attribute_Modified_CB+0x5d2>
										memcpy(ruta_20_bytes,fichero_actual,20 );
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001f86:	f507 7438 	add.w	r4, r7, #736	; 0x2e0
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	6828      	ldr	r0, [r5, #0]
 8001f8e:	6869      	ldr	r1, [r5, #4]
 8001f90:	68aa      	ldr	r2, [r5, #8]
 8001f92:	68eb      	ldr	r3, [r5, #12]
 8001f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f96:	6928      	ldr	r0, [r5, #16]
 8001f98:	6020      	str	r0, [r4, #0]
										aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, 20,ruta_20_bytes);
 8001f9a:	4b34      	ldr	r3, [pc, #208]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001f9c:	8818      	ldrh	r0, [r3, #0]
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001fa0:	8819      	ldrh	r1, [r3, #0]
 8001fa2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2314      	movs	r3, #20
 8001faa:	2200      	movs	r2, #0
 8001fac:	f013 f8ca 	bl	8015144 <aci_gatt_update_char_value>
						break;
 8001fb0:	e131      	b.n	8002216 <Attribute_Modified_CB+0x836>
										aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen(fichero_actual),fichero_actual);
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <Attribute_Modified_CB+0x68c>)
 8001fb4:	881c      	ldrh	r4, [r3, #0]
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <Attribute_Modified_CB+0x690>)
 8001fb8:	881d      	ldrh	r5, [r3, #0]
 8001fba:	4836      	ldr	r0, [pc, #216]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001fbc:	f7fe f912 	bl	80001e4 <strlen>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4629      	mov	r1, r5
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f013 f8b8 	bl	8015144 <aci_gatt_update_char_value>
						break;
 8001fd4:	e11f      	b.n	8002216 <Attribute_Modified_CB+0x836>
								else if(strcmp(gd_ptr,"o")==0)//ok
 8001fd6:	4931      	ldr	r1, [pc, #196]	; (800209c <Attribute_Modified_CB+0x6bc>)
 8001fd8:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001fdc:	f7fe f8f8 	bl	80001d0 <strcmp>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <Attribute_Modified_CB+0x60e>
									Archivo_seleccionado = 1;
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <Attribute_Modified_CB+0x6c0>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
						break;
 8001fec:	e113      	b.n	8002216 <Attribute_Modified_CB+0x836>
								else if(strcmp(gd_ptr,"d")==0)//del
 8001fee:	492d      	ldr	r1, [pc, #180]	; (80020a4 <Attribute_Modified_CB+0x6c4>)
 8001ff0:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001ff4:	f7fe f8ec 	bl	80001d0 <strcmp>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d15a      	bne.n	80020b4 <Attribute_Modified_CB+0x6d4>
									sprintf(ruta,"%s/%s_sen.csv", fichero_actual,fichero_actual);
 8001ffe:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8002004:	4a23      	ldr	r2, [pc, #140]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8002006:	4928      	ldr	r1, [pc, #160]	; (80020a8 <Attribute_Modified_CB+0x6c8>)
 8002008:	f014 fda4 	bl	8016b54 <siprintf>
									FRESULT res = f_unlink(ruta);
 800200c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002010:	4618      	mov	r0, r3
 8002012:	f00d fa1b 	bl	800f44c <f_unlink>
 8002016:	4603      	mov	r3, r0
 8002018:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
									sprintf(ruta,"%s/%s_BT.csv", fichero_actual,fichero_actual);
 800201c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 8002024:	4921      	ldr	r1, [pc, #132]	; (80020ac <Attribute_Modified_CB+0x6cc>)
 8002026:	f014 fd95 	bl	8016b54 <siprintf>
									res = f_unlink(ruta);
 800202a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800202e:	4618      	mov	r0, r3
 8002030:	f00d fa0c 	bl	800f44c <f_unlink>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
									res = f_unlink(fichero_actual);
 800203a:	4816      	ldr	r0, [pc, #88]	; (8002094 <Attribute_Modified_CB+0x6b4>)
 800203c:	f00d fa06 	bl	800f44c <f_unlink>
 8002040:	4603      	mov	r3, r0
 8002042:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
									aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen("File deleted"),"File deleted");
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <Attribute_Modified_CB+0x68c>)
 8002048:	8818      	ldrh	r0, [r3, #0]
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <Attribute_Modified_CB+0x690>)
 800204c:	8819      	ldrh	r1, [r3, #0]
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <Attribute_Modified_CB+0x6d0>)
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	230c      	movs	r3, #12
 8002054:	2200      	movs	r2, #0
 8002056:	f013 f875 	bl	8015144 <aci_gatt_update_char_value>
									a=a+1;
 800205a:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800205e:	3301      	adds	r3, #1
 8002060:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
						break;
 8002064:	e0d7      	b.n	8002216 <Attribute_Modified_CB+0x836>
 8002066:	bf00      	nop
 8002068:	08018fac 	.word	0x08018fac
 800206c:	2000bbce 	.word	0x2000bbce
 8002070:	2000bbcc 	.word	0x2000bbcc
 8002074:	08018fb0 	.word	0x08018fb0
 8002078:	08018fb4 	.word	0x08018fb4
 800207c:	08018fb8 	.word	0x08018fb8
 8002080:	08018eb8 	.word	0x08018eb8
 8002084:	08018ebc 	.word	0x08018ebc
 8002088:	08018f54 	.word	0x08018f54
 800208c:	08018fbc 	.word	0x08018fbc
 8002090:	2000bb94 	.word	0x2000bb94
 8002094:	2000c870 	.word	0x2000c870
 8002098:	08018fc0 	.word	0x08018fc0
 800209c:	08018fc4 	.word	0x08018fc4
 80020a0:	2000b854 	.word	0x2000b854
 80020a4:	08018fc8 	.word	0x08018fc8
 80020a8:	08018fcc 	.word	0x08018fcc
 80020ac:	08018fdc 	.word	0x08018fdc
 80020b0:	08018fec 	.word	0x08018fec
								else if(strcmp(gd_ptr,"n")==0)//num
 80020b4:	4961      	ldr	r1, [pc, #388]	; (800223c <Attribute_Modified_CB+0x85c>)
 80020b6:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 80020ba:	f7fe f889 	bl	80001d0 <strcmp>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11d      	bne.n	8002100 <Attribute_Modified_CB+0x720>
									sprintf(numero_ficheros,"Num Fich: %ld", contador_ficheros());
 80020c4:	f00e fcf1 	bl	8010aaa <contador_ficheros>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80020ce:	495c      	ldr	r1, [pc, #368]	; (8002240 <Attribute_Modified_CB+0x860>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f014 fd3f 	bl	8016b54 <siprintf>
									aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen(numero_ficheros),numero_ficheros);
 80020d6:	4b5b      	ldr	r3, [pc, #364]	; (8002244 <Attribute_Modified_CB+0x864>)
 80020d8:	881c      	ldrh	r4, [r3, #0]
 80020da:	4b5b      	ldr	r3, [pc, #364]	; (8002248 <Attribute_Modified_CB+0x868>)
 80020dc:	881d      	ldrh	r5, [r3, #0]
 80020de:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f87e 	bl	80001e4 <strlen>
 80020e8:	4603      	mov	r3, r0
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	2200      	movs	r2, #0
 80020f6:	4629      	mov	r1, r5
 80020f8:	4620      	mov	r0, r4
 80020fa:	f013 f823 	bl	8015144 <aci_gatt_update_char_value>
						break;
 80020fe:	e08a      	b.n	8002216 <Attribute_Modified_CB+0x836>
								else if(strcmp(gd_ptr,"t")==0)//num
 8002100:	4952      	ldr	r1, [pc, #328]	; (800224c <Attribute_Modified_CB+0x86c>)
 8002102:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002106:	f7fe f863 	bl	80001d0 <strcmp>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 8082 	bne.w	8002216 <Attribute_Modified_CB+0x836>
									sprintf(ruta,"%s/%s_sen.csv", fichero_actual,fichero_actual);
 8002112:	f107 000c 	add.w	r0, r7, #12
 8002116:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <Attribute_Modified_CB+0x870>)
 8002118:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <Attribute_Modified_CB+0x870>)
 800211a:	494e      	ldr	r1, [pc, #312]	; (8002254 <Attribute_Modified_CB+0x874>)
 800211c:	f014 fd1a 	bl	8016b54 <siprintf>
									FRESULT fr = f_open(&fsrc, ruta, FA_READ);
 8002120:	f107 010c 	add.w	r1, r7, #12
 8002124:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002128:	2201      	movs	r2, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f00c fb4e 	bl	800e7cc <f_open>
 8002130:	4603      	mov	r3, r0
 8002132:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
									uint16_t size = f_size(&fsrc);
 8002136:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f8a7 3388 	strh.w	r3, [r7, #904]	; 0x388
									fr = f_close(&fsrc);
 8002140:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002144:	4618      	mov	r0, r3
 8002146:	f00d f841 	bl	800f1cc <f_close>
 800214a:	4603      	mov	r3, r0
 800214c:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
									if(fr==FR_OK)
 8002150:	f897 338b 	ldrb.w	r3, [r7, #907]	; 0x38b
 8002154:	2b00      	cmp	r3, #0
 8002156:	d108      	bne.n	800216a <Attribute_Modified_CB+0x78a>
										sprintf(tamano_archivo,"Size: %ld B", size);
 8002158:	f8b7 2388 	ldrh.w	r2, [r7, #904]	; 0x388
 800215c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002160:	493d      	ldr	r1, [pc, #244]	; (8002258 <Attribute_Modified_CB+0x878>)
 8002162:	4618      	mov	r0, r3
 8002164:	f014 fcf6 	bl	8016b54 <siprintf>
 8002168:	e007      	b.n	800217a <Attribute_Modified_CB+0x79a>
										sprintf(tamano_archivo,"Unknown", size);
 800216a:	f8b7 2388 	ldrh.w	r2, [r7, #904]	; 0x388
 800216e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002172:	493a      	ldr	r1, [pc, #232]	; (800225c <Attribute_Modified_CB+0x87c>)
 8002174:	4618      	mov	r0, r3
 8002176:	f014 fced 	bl	8016b54 <siprintf>
									aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, strlen(tamano_archivo),tamano_archivo);
 800217a:	4b32      	ldr	r3, [pc, #200]	; (8002244 <Attribute_Modified_CB+0x864>)
 800217c:	881c      	ldrh	r4, [r3, #0]
 800217e:	4b32      	ldr	r3, [pc, #200]	; (8002248 <Attribute_Modified_CB+0x868>)
 8002180:	881d      	ldrh	r5, [r3, #0]
 8002182:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f82c 	bl	80001e4 <strlen>
 800218c:	4603      	mov	r3, r0
 800218e:	b2da      	uxtb	r2, r3
 8002190:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	2200      	movs	r2, #0
 800219a:	4629      	mov	r1, r5
 800219c:	4620      	mov	r0, r4
 800219e:	f012 ffd1 	bl	8015144 <aci_gatt_update_char_value>
						break;
 80021a2:	e038      	b.n	8002216 <Attribute_Modified_CB+0x836>
						case 5:
							//PRINT("LS\r\n")
							size = sprintf(vector,"LS");
 80021a4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80021a8:	4a2d      	ldr	r2, [pc, #180]	; (8002260 <Attribute_Modified_CB+0x880>)
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	4611      	mov	r1, r2
 80021ae:	8019      	strh	r1, [r3, #0]
 80021b0:	3302      	adds	r3, #2
 80021b2:	0c12      	lsrs	r2, r2, #16
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	2302      	movs	r3, #2
 80021b8:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
							aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,vector);
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <Attribute_Modified_CB+0x864>)
 80021be:	8818      	ldrh	r0, [r3, #0]
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <Attribute_Modified_CB+0x868>)
 80021c2:	8819      	ldrh	r1, [r3, #0]
 80021c4:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	f012 ffb6 	bl	8015144 <aci_gatt_update_char_value>
						break;
 80021d8:	e01e      	b.n	8002218 <Attribute_Modified_CB+0x838>
						case 6:
							//PRINT("DL\r\n")
							size = sprintf(vector,"DL");
 80021da:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80021de:	4a21      	ldr	r2, [pc, #132]	; (8002264 <Attribute_Modified_CB+0x884>)
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	4611      	mov	r1, r2
 80021e4:	8019      	strh	r1, [r3, #0]
 80021e6:	3302      	adds	r3, #2
 80021e8:	0c12      	lsrs	r2, r2, #16
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	2302      	movs	r3, #2
 80021ee:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
							aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,vector);
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <Attribute_Modified_CB+0x864>)
 80021f4:	8818      	ldrh	r0, [r3, #0]
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <Attribute_Modified_CB+0x868>)
 80021f8:	8819      	ldrh	r1, [r3, #0]
 80021fa:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	2200      	movs	r2, #0
 800220a:	f012 ff9b 	bl	8015144 <aci_gatt_update_char_value>
						break;
 800220e:	bf00      	nop
 8002210:	e002      	b.n	8002218 <Attribute_Modified_CB+0x838>
						break;
 8002212:	bf00      	nop
 8002214:	e000      	b.n	8002218 <Attribute_Modified_CB+0x838>
						break;
 8002216:	bf00      	nop
			for(int i = 0 ; i < data_length; i++)
 8002218:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800221c:	3301      	adds	r3, #1
 800221e:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8002222:	1d7b      	adds	r3, r7, #5
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 800222a:	429a      	cmp	r2, r3
 800222c:	f6ff abea 	blt.w	8001a04 <Attribute_Modified_CB+0x24>

					}
				}
			}
}
 8002230:	bf00      	nop
 8002232:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8002236:	46bd      	mov	sp, r7
 8002238:	bdb0      	pop	{r4, r5, r7, pc}
 800223a:	bf00      	nop
 800223c:	08018ffc 	.word	0x08018ffc
 8002240:	08019000 	.word	0x08019000
 8002244:	2000bbce 	.word	0x2000bbce
 8002248:	2000bbcc 	.word	0x2000bbcc
 800224c:	08018ed8 	.word	0x08018ed8
 8002250:	2000c870 	.word	0x2000c870
 8002254:	08018fcc 	.word	0x08018fcc
 8002258:	08019010 	.word	0x08019010
 800225c:	0801901c 	.word	0x0801901c
 8002260:	08018ec4 	.word	0x08018ec4
 8002264:	08018ec8 	.word	0x08018ec8

08002268 <HCI_Event_CB>:
*         parsed.
* @param  void *pckt Pointer to the ACI packet
* @retval None
*/
void HCI_Event_CB(void *pckt)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pckt;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	3301      	adds	r3, #1
 8002278:	623b      	str	r3, [r7, #32]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d154      	bne.n	800232c <HCI_Event_CB+0xc4>
  {
    return;
  }
  
  switch(event_pckt->evt)
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d009      	beq.n	800229e <HCI_Event_CB+0x36>
 800228a:	2b05      	cmp	r3, #5
 800228c:	dc02      	bgt.n	8002294 <HCI_Event_CB+0x2c>
 800228e:	2b02      	cmp	r3, #2
 8002290:	d008      	beq.n	80022a4 <HCI_Event_CB+0x3c>
 8002292:	e04c      	b.n	800232e <HCI_Event_CB+0xc6>
 8002294:	2b3e      	cmp	r3, #62	; 0x3e
 8002296:	d008      	beq.n	80022aa <HCI_Event_CB+0x42>
 8002298:	2bff      	cmp	r3, #255	; 0xff
 800229a:	d01d      	beq.n	80022d8 <HCI_Event_CB+0x70>
 800229c:	e047      	b.n	800232e <HCI_Event_CB+0xc6>
  {
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800229e:	f7ff fb8d 	bl	80019bc <GAP_DisconnectionComplete_CB>
    }
    break;
 80022a2:	e044      	b.n	800232e <HCI_Event_CB+0xc6>
  case EVT_LE_ADVERTISING_REPORT:
        {
        	GAP_DisconnectionComplete_CB();
 80022a4:	f7ff fb8a 	bl	80019bc <GAP_DisconnectionComplete_CB>
        }
     break;
 80022a8:	e041      	b.n	800232e <HCI_Event_CB+0xc6>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	3302      	adds	r3, #2
 80022ae:	613b      	str	r3, [r7, #16]
      
      switch(evt->subevent)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d000      	beq.n	80022ba <HCI_Event_CB+0x52>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 80022b8:	e039      	b.n	800232e <HCI_Event_CB+0xc6>
          evt_le_connection_complete *cc = (void *)evt->data;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	3301      	adds	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1d5a      	adds	r2, r3, #5
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f7ff fb68 	bl	80019a4 <GAP_ConnectionComplete_CB>
        break;
 80022d4:	bf00      	nop
    break;
 80022d6:	e02a      	b.n	800232e <HCI_Event_CB+0xc6>
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	3302      	adds	r3, #2
 80022dc:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	f640 4201 	movw	r2, #3073	; 0xc01
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00f      	beq.n	800230c <HCI_Event_CB+0xa4>
 80022ec:	f640 4214 	movw	r2, #3092	; 0xc14
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d001      	beq.n	80022f8 <HCI_Event_CB+0x90>
 80022f4:	2b02      	cmp	r3, #2
    	  //evt_gap_device_found *gap_package = (evt_gap_device_found * )blue_evt->data;

    	  //GAP_Scan( gap_package->evt_type, gap_package->bdaddr_type, gap_package->bdaddr,  gap_package->data_length, gap_package->data_RSSI);

      }
      break;
 80022f6:	e017      	b.n	8002328 <HCI_Event_CB+0xc0>
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data; 
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3302      	adds	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);                    
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	885b      	ldrh	r3, [r3, #2]
 8002302:	b29b      	uxth	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fb5f 	bl	80019c8 <Read_Request_CB>
        break;
 800230a:	e00d      	b.n	8002328 <HCI_Event_CB+0xc0>
          evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3302      	adds	r3, #2
 8002310:	617b      	str	r3, [r7, #20]
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	885b      	ldrh	r3, [r3, #2]
 8002316:	b298      	uxth	r0, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1dd9      	adds	r1, r3, #7
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	461a      	mov	r2, r3
 8002322:	f7ff fb5d 	bl	80019e0 <Attribute_Modified_CB>
        break;
 8002326:	bf00      	nop

      }
    }
    break;
 8002328:	bf00      	nop
 800232a:	e000      	b.n	800232e <HCI_Event_CB+0xc6>
    return;
 800232c:	bf00      	nop
  }
}
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_RTC_MspInit+0x3c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10f      	bne.n	8002366 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RTC_MspInit+0x40>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_RTC_MspInit+0x40>)
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2029      	movs	r0, #41	; 0x29
 800235c:	f003 fde0 	bl	8005f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002360:	2029      	movs	r0, #41	; 0x29
 8002362:	f003 fdf9 	bl	8005f58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40002800 	.word	0x40002800
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_MspInit>:




void HAL_MspInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_MspInit+0x44>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_MspInit+0x44>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6613      	str	r3, [r2, #96]	; 0x60
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_MspInit+0x44>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_MspInit+0x44>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_MspInit+0x44>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_MspInit+0x44>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a33      	ldr	r2, [pc, #204]	; (80024ac <HAL_SPI_MspInit+0xec>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d129      	bne.n	8002436 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 80023e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e6:	4a32      	ldr	r2, [pc, #200]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 80023e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ec:	6613      	str	r3, [r2, #96]	; 0x60
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	4a2c      	ldr	r2, [pc, #176]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8002412:	23e0      	movs	r3, #224	; 0xe0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002422:	2305      	movs	r3, #5
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002430:	f004 f844 	bl	80064bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002434:	e035      	b.n	80024a2 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <HAL_SPI_MspInit+0xf4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d130      	bne.n	80024a2 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 8002446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244a:	6593      	str	r3, [r2, #88]	; 0x58
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_SPI_MspInit+0xf0>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8002470:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002482:	2305      	movs	r3, #5
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	480a      	ldr	r0, [pc, #40]	; (80024b8 <HAL_SPI_MspInit+0xf8>)
 800248e:	f004 f815 	bl	80064bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2024      	movs	r0, #36	; 0x24
 8002498:	f003 fd42 	bl	8005f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800249c:	2024      	movs	r0, #36	; 0x24
 800249e:	f003 fd5b 	bl	8005f58 <HAL_NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	; 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40013000 	.word	0x40013000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40003800 	.word	0x40003800
 80024b8:	48000400 	.word	0x48000400

080024bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_SPI_MspDeInit+0x58>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10b      	bne.n	80024e6 <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_SPI_MspDeInit+0x5c>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	4a11      	ldr	r2, [pc, #68]	; (8002518 <HAL_SPI_MspDeInit+0x5c>)
 80024d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024d8:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5);
 80024da:	21e0      	movs	r1, #224	; 0xe0
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e0:	f004 f994 	bl	800680c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80024e4:	e012      	b.n	800250c <HAL_SPI_MspDeInit+0x50>
  else if(hspi->Instance==SPI2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_SPI_MspDeInit+0x60>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d10d      	bne.n	800250c <HAL_SPI_MspDeInit+0x50>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_SPI_MspDeInit+0x5c>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_SPI_MspDeInit+0x5c>)
 80024f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024fa:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 80024fc:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <HAL_SPI_MspDeInit+0x64>)
 8002502:	f004 f983 	bl	800680c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8002506:	2024      	movs	r0, #36	; 0x24
 8002508:	f003 fd34 	bl	8005f74 <HAL_NVIC_DisableIRQ>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40013000 	.word	0x40013000
 8002518:	40021000 	.word	0x40021000
 800251c:	40003800 	.word	0x40003800
 8002520:	48000400 	.word	0x48000400

08002524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d113      	bne.n	800255e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_TIM_Base_MspInit+0x44>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <HAL_TIM_Base_MspInit+0x44>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_TIM_Base_MspInit+0x44>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 5);
 800254e:	2205      	movs	r2, #5
 8002550:	2105      	movs	r1, #5
 8002552:	201c      	movs	r0, #28
 8002554:	f003 fce4 	bl	8005f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002558:	201c      	movs	r0, #28
 800255a:	f003 fcfd 	bl	8005f58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	2019      	movs	r0, #25
 8002582:	f003 fccd 	bl	8005f20 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002586:	2019      	movs	r0, #25
 8002588:	f003 fce6 	bl	8005f58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_InitTick+0x9c>)
 800258e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_InitTick+0x9c>)
 8002592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002596:	6613      	str	r3, [r2, #96]	; 0x60
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_InitTick+0x9c>)
 800259a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025a4:	f107 0210 	add.w	r2, r7, #16
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f005 f88a 	bl	80076c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025b4:	f005 f872 	bl	800769c <HAL_RCC_GetPCLK2Freq>
 80025b8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	4a13      	ldr	r2, [pc, #76]	; (800260c <HAL_InitTick+0xa0>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	3b01      	subs	r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_InitTick+0xa4>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_InitTick+0xa8>)
 80025cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_InitTick+0xa4>)
 80025d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <HAL_InitTick+0xa4>)
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_InitTick+0xa4>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_InitTick+0xa4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80025e8:	4809      	ldr	r0, [pc, #36]	; (8002610 <HAL_InitTick+0xa4>)
 80025ea:	f007 fa69 	bl	8009ac0 <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80025f4:	4806      	ldr	r0, [pc, #24]	; (8002610 <HAL_InitTick+0xa4>)
 80025f6:	f007 fac7 	bl	8009b88 <HAL_TIM_Base_Start_IT>
 80025fa:	4603      	mov	r3, r0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	431bde83 	.word	0x431bde83
 8002610:	2000bbd0 	.word	0x2000bbd0
 8002614:	40012c00 	.word	0x40012c00

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <HardFault_Handler+0x4>

0800262c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <MemManage_Handler+0x4>

08002632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <BusFault_Handler+0x4>

08002638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <UsageFault_Handler+0x4>

0800263e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <SysTick_Handler>:
#include "task.h"
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002650:	f011 f8a0 	bl	8013794 <xTaskGetSchedulerState>
 8002654:	4603      	mov	r3, r0
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <SysTick_Handler+0x12>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800265a:	f011 ff6d 	bl	8014538 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <EXTI9_5_IRQHandler>:
  * @brief This function handles EXTI line[9:5] interrupts.
  */
#include "stm32l4xx_hal_exti.h"
extern EXTI_HandleTypeDef hexti5;
void EXTI9_5_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
	HAL_EXTI_IRQHandler(&hexti5);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <EXTI9_5_IRQHandler+0x10>)
 800266a:	f003 fef7 	bl	800645c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000b890 	.word	0x2000b890

08002678 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800267e:	f007 faf3 	bl	8009c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000bbd0 	.word	0x2000bbd0

0800268c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <SPI2_IRQHandler+0x10>)
 8002692:	f006 ff01 	bl	8009498 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000b89c 	.word	0x2000b89c

080026a0 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(SPI_SD_Handle.hdmatx);
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <DMA2_Channel2_IRQHandler+0x14>)
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fdca 	bl	8006242 <HAL_DMA_IRQHandler>
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000bdac 	.word	0x2000bdac

080026b8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80026bc:	2004      	movs	r0, #4
 80026be:	f004 f9c9 	bl	8006a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f014 f8ea 	bl	80168d0 <__errno>
 80026fc:	4602      	mov	r2, r0
 80026fe:	230c      	movs	r3, #12
 8002700:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20018000 	.word	0x20018000
 8002728:	00000400 	.word	0x00000400
 800272c:	2000049c 	.word	0x2000049c
 8002730:	2000c8e0 	.word	0x2000c8e0

08002734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <SystemInit+0x64>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a16      	ldr	r2, [pc, #88]	; (8002798 <SystemInit+0x64>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <SystemInit+0x68>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <SystemInit+0x68>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <SystemInit+0x68>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <SystemInit+0x68>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <SystemInit+0x68>)
 8002760:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002764:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002768:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <SystemInit+0x68>)
 800276c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002770:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <SystemInit+0x68>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <SystemInit+0x68>)
 8002778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <SystemInit+0x68>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <SystemInit+0x64>)
 8002786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800278a:	609a      	str	r2, [r3, #8]
#endif

}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	40021000 	.word	0x40021000

080027a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027a4:	f7ff ffc6 	bl	8002734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027aa:	e003      	b.n	80027b4 <LoopCopyDataInit>

080027ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027b2:	3104      	adds	r1, #4

080027b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027b4:	480a      	ldr	r0, [pc, #40]	; (80027e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027bc:	d3f6      	bcc.n	80027ac <CopyDataInit>
	ldr	r2, =_sbss
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027c0:	e002      	b.n	80027c8 <LoopFillZerobss>

080027c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027c4:	f842 3b04 	str.w	r3, [r2], #4

080027c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <LoopForever+0x16>)
	cmp	r2, r3
 80027ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027cc:	d3f9      	bcc.n	80027c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ce:	f014 f885 	bl	80168dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027d2:	f7fe ff17 	bl	8001604 <main>

080027d6 <LoopForever>:

LoopForever:
    b LoopForever
 80027d6:	e7fe      	b.n	80027d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80027dc:	08019cb8 	.word	0x08019cb8
	ldr	r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027e4:	200002b4 	.word	0x200002b4
	ldr	r2, =_sbss
 80027e8:	200002b4 	.word	0x200002b4
	ldr	r3, = _ebss
 80027ec:	2000c8e0 	.word	0x2000c8e0

080027f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC1_2_IRQHandler>
	...

080027f4 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e04b      	b.n	80028a8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	7b1a      	ldrb	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 800284c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002852:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e01e      	b.n	80028a8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4798      	blx	r3
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e014      	b.n	80028a8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d010      	beq.n	80028a8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	331c      	adds	r3, #28
 8002894:	2101      	movs	r1, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fb8e 	bl	8002fb8 <lsm303agr_mag_i2c_interface_set>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e000      	b.n	80028aa <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	08002caf 	.word	0x08002caf
 80028b8:	08002d11 	.word	0x08002d11

080028bc <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	331c      	adds	r3, #28
 80028c8:	2101      	movs	r1, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fb06 	bl	8002edc <lsm303agr_mag_block_data_update_set>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e028      	b.n	800292e <LSM303AGR_MAG_Init+0x72>
  /* Operating mode selection - power down */
/*  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
  {
    return LSM303AGR_ERROR;
  }*/
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	331c      	adds	r3, #28
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fa75 	bl	8002dd2 <lsm303agr_mag_operating_mode_set>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <LSM303AGR_MAG_Init+0x38>
   {
     return LSM303AGR_ERROR;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e01c      	b.n	800292e <LSM303AGR_MAG_Init+0x72>
   }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	331c      	adds	r3, #28
 80028f8:	2103      	movs	r1, #3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fa8f 	bl	8002e1e <lsm303agr_mag_data_rate_set>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	e010      	b.n	800292e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	331c      	adds	r3, #28
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fb2a 	bl	8002f6c <lsm303agr_mag_self_test_set>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	e004      	b.n	800292e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f874 	bl	8002a2c <LSM303AGR_MAG_Disable>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	e004      	b.n	800295a <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	331c      	adds	r3, #28
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fae9 	bl	8002f4a <lsm303agr_mag_device_id_get>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	e000      	b.n	8002986 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2200      	movs	r2, #0
 80029b0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2232      	movs	r2, #50	; 0x32
 80029c2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <LSM303AGR_MAG_GetCapabilities+0x58>)
 80029d8:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	42c80000 	.word	0x42c80000

080029ec <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e010      	b.n	8002a24 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	331c      	adds	r3, #28
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f9e2 	bl	8002dd2 <lsm303agr_mag_operating_mode_set>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
 8002a18:	e004      	b.n	8002a24 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e010      	b.n	8002a64 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	331c      	adds	r3, #28
 8002a46:	2102      	movs	r1, #2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f9c2 	bl	8002dd2 <lsm303agr_mag_operating_mode_set>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
 8002a58:	e004      	b.n	8002a64 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002a7c:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	331c      	adds	r3, #28
 8002a9e:	f107 020b 	add.w	r2, r7, #11
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f9e1 	bl	8002e6c <lsm303agr_mag_data_rate_get>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	e023      	b.n	8002afe <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d81b      	bhi.n	8002af4 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002add 	.word	0x08002add
 8002acc:	08002ae5 	.word	0x08002ae5
 8002ad0:	08002aed 	.word	0x08002aed
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002ad8:	601a      	str	r2, [r3, #0]
      break;
 8002ada:	e00f      	b.n	8002afc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002ae0:	601a      	str	r2, [r3, #0]
      break;
 8002ae2:	e00b      	b.n	8002afc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002ae8:	601a      	str	r2, [r3, #0]
      break;
 8002aea:	e007      	b.n	8002afc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002af0:	601a      	str	r2, [r3, #0]
      break;
 8002af2:	e003      	b.n	8002afc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
 8002af8:	60fb      	str	r3, [r7, #12]
      break;
 8002afa:	bf00      	nop
  }

  return ret;
 8002afc:	68fb      	ldr	r3, [r7, #12]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	41200000 	.word	0x41200000
 8002b0c:	41a00000 	.word	0x41a00000
 8002b10:	42480000 	.word	0x42480000
 8002b14:	42c80000 	.word	0x42c80000

08002b18 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002b24:	edd7 7a00 	vldr	s15, [r7]
 8002b28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	d801      	bhi.n	8002b3a <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002b36:	2300      	movs	r3, #0
 8002b38:	e016      	b.n	8002b68 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002b3a:	edd7 7a00 	vldr	s15, [r7]
 8002b3e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	d801      	bhi.n	8002b50 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e00b      	b.n	8002b68 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002b50:	edd7 7a00 	vldr	s15, [r7]
 8002b54:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b90 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	d801      	bhi.n	8002b66 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e000      	b.n	8002b68 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002b66:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002b68:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	331c      	adds	r3, #28
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f953 	bl	8002e1e <lsm303agr_mag_data_rate_set>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b82:	e000      	b.n	8002b86 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	42480000 	.word	0x42480000

08002b94 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2232      	movs	r2, #50	; 0x32
 8002ba2:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	331c      	adds	r3, #28
 8002bd8:	f107 0208 	add.w	r2, r7, #8
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f9a2 	bl	8002f28 <lsm303agr_magnetic_raw_get>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e00c      	b.n	8002c0a <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002bf0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002bf8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002c00:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	331c      	adds	r3, #28
 8002c20:	f107 0210 	add.w	r2, r7, #16
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f97e 	bl	8002f28 <lsm303agr_magnetic_raw_get>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	e036      	b.n	8002ca6 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ff14 	bl	8002a6c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c5c:	ee17 2a90 	vmov	r2, s15
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c7c:	ee17 2a90 	vmov	r2, s15
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c9c:	ee17 2a90 	vmov	r2, s15
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cae:	b590      	push	{r4, r7, lr}
 8002cb0:	b087      	sub	sp, #28
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	460b      	mov	r3, r1
 8002cbc:	72fb      	strb	r3, [r7, #11]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10e      	bne.n	8002cec <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	695c      	ldr	r4, [r3, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	7b1b      	ldrb	r3, [r3, #12]
 8002cd6:	b298      	uxth	r0, r3
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	b299      	uxth	r1, r3
 8002ce2:	893b      	ldrh	r3, [r7, #8]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	47a0      	blx	r4
 8002ce8:	4603      	mov	r3, r0
 8002cea:	e00d      	b.n	8002d08 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	695c      	ldr	r4, [r3, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	7b1b      	ldrb	r3, [r3, #12]
 8002cf4:	b298      	uxth	r0, r3
 8002cf6:	7afb      	ldrb	r3, [r7, #11]
 8002cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	b299      	uxth	r1, r3
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	47a0      	blx	r4
 8002d06:	4603      	mov	r3, r0
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd90      	pop	{r4, r7, pc}

08002d10 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	72fb      	strb	r3, [r7, #11]
 8002d20:	4613      	mov	r3, r2
 8002d22:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10e      	bne.n	8002d4e <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	691c      	ldr	r4, [r3, #16]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	7b1b      	ldrb	r3, [r3, #12]
 8002d38:	b298      	uxth	r0, r3
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	b299      	uxth	r1, r3
 8002d44:	893b      	ldrh	r3, [r7, #8]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	47a0      	blx	r4
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	e00d      	b.n	8002d6a <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	691c      	ldr	r4, [r3, #16]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	7b1b      	ldrb	r3, [r3, #12]
 8002d56:	b298      	uxth	r0, r3
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	b299      	uxth	r1, r3
 8002d62:	893b      	ldrh	r3, [r7, #8]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	47a0      	blx	r4
 8002d68:	4603      	mov	r3, r0
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd90      	pop	{r4, r7, pc}

08002d72 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002d72:	b590      	push	{r4, r7, lr}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	460b      	mov	r3, r1
 8002d80:	72fb      	strb	r3, [r7, #11]
 8002d82:	4613      	mov	r3, r2
 8002d84:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685c      	ldr	r4, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6898      	ldr	r0, [r3, #8]
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	7af9      	ldrb	r1, [r7, #11]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	47a0      	blx	r4
 8002d96:	6178      	str	r0, [r7, #20]
  return ret;
 8002d98:	697b      	ldr	r3, [r7, #20]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd90      	pop	{r4, r7, pc}

08002da2 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002da2:	b590      	push	{r4, r7, lr}
 8002da4:	b087      	sub	sp, #28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	461a      	mov	r2, r3
 8002dae:	460b      	mov	r3, r1
 8002db0:	72fb      	strb	r3, [r7, #11]
 8002db2:	4613      	mov	r3, r2
 8002db4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681c      	ldr	r4, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6898      	ldr	r0, [r3, #8]
 8002dbe:	893b      	ldrh	r3, [r7, #8]
 8002dc0:	7af9      	ldrb	r1, [r7, #11]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	47a0      	blx	r4
 8002dc6:	6178      	str	r0, [r7, #20]
  return ret;
 8002dc8:	697b      	ldr	r3, [r7, #20]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}

08002dd2 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002dde:	f107 0208 	add.w	r2, r7, #8
 8002de2:	2301      	movs	r3, #1
 8002de4:	2160      	movs	r1, #96	; 0x60
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffc3 	bl	8002d72 <lsm303agr_read_reg>
 8002dec:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10f      	bne.n	8002e14 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	7a3b      	ldrb	r3, [r7, #8]
 8002dfe:	f362 0301 	bfi	r3, r2, #0, #2
 8002e02:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002e04:	f107 0208 	add.w	r2, r7, #8
 8002e08:	2301      	movs	r3, #1
 8002e0a:	2160      	movs	r1, #96	; 0x60
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ffc8 	bl	8002da2 <lsm303agr_write_reg>
 8002e12:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8002e14:	68fb      	ldr	r3, [r7, #12]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002e2a:	f107 0208 	add.w	r2, r7, #8
 8002e2e:	2301      	movs	r3, #1
 8002e30:	2160      	movs	r1, #96	; 0x60
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff9d 	bl	8002d72 <lsm303agr_read_reg>
 8002e38:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	7a3b      	ldrb	r3, [r7, #8]
 8002e4a:	f362 0383 	bfi	r3, r2, #2, #2
 8002e4e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002e50:	f107 0208 	add.w	r2, r7, #8
 8002e54:	2301      	movs	r3, #1
 8002e56:	2160      	movs	r1, #96	; 0x60
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ffa2 	bl	8002da2 <lsm303agr_write_reg>
 8002e5e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8002e60:	68fb      	ldr	r3, [r7, #12]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002e76:	f107 0208 	add.w	r2, r7, #8
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	2160      	movs	r1, #96	; 0x60
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ff77 	bl	8002d72 <lsm303agr_read_reg>
 8002e84:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 8002e86:	7a3b      	ldrb	r3, [r7, #8]
 8002e88:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d81a      	bhi.n	8002ec8 <lsm303agr_mag_data_rate_get+0x5c>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <lsm303agr_mag_data_rate_get+0x2c>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002eb1 	.word	0x08002eb1
 8002ea0:	08002eb9 	.word	0x08002eb9
 8002ea4:	08002ec1 	.word	0x08002ec1
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
      break;
 8002eae:	e00f      	b.n	8002ed0 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
      break;
 8002eb6:	e00b      	b.n	8002ed0 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	701a      	strb	r2, [r3, #0]
      break;
 8002ebe:	e007      	b.n	8002ed0 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	701a      	strb	r2, [r3, #0]
      break;
 8002ec6:	e003      	b.n	8002ed0 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
      break;
 8002ece:	bf00      	nop
  }
  return ret;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop

08002edc <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002ee8:	f107 0208 	add.w	r2, r7, #8
 8002eec:	2301      	movs	r3, #1
 8002eee:	2162      	movs	r1, #98	; 0x62
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff3e 	bl	8002d72 <lsm303agr_read_reg>
 8002ef6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	7a3b      	ldrb	r3, [r7, #8]
 8002f08:	f362 1304 	bfi	r3, r2, #4, #1
 8002f0c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002f0e:	f107 0208 	add.w	r2, r7, #8
 8002f12:	2301      	movs	r3, #1
 8002f14:	2162      	movs	r1, #98	; 0x62
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff43 	bl	8002da2 <lsm303agr_write_reg>
 8002f1c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8002f32:	2306      	movs	r3, #6
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	2168      	movs	r1, #104	; 0x68
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff1a 	bl	8002d72 <lsm303agr_read_reg>
 8002f3e:	60f8      	str	r0, [r7, #12]
  return ret;
 8002f40:	68fb      	ldr	r3, [r7, #12]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8002f54:	2301      	movs	r3, #1
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	214f      	movs	r1, #79	; 0x4f
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff09 	bl	8002d72 <lsm303agr_read_reg>
 8002f60:	60f8      	str	r0, [r7, #12]
  return ret;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002f78:	f107 0208 	add.w	r2, r7, #8
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2162      	movs	r1, #98	; 0x62
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fef6 	bl	8002d72 <lsm303agr_read_reg>
 8002f86:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	7a3b      	ldrb	r3, [r7, #8]
 8002f98:	f362 0341 	bfi	r3, r2, #1, #1
 8002f9c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002f9e:	f107 0208 	add.w	r2, r7, #8
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	2162      	movs	r1, #98	; 0x62
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fefb 	bl	8002da2 <lsm303agr_write_reg>
 8002fac:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8002fae:	68fb      	ldr	r3, [r7, #12]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002fc4:	f107 0208 	add.w	r2, r7, #8
 8002fc8:	2301      	movs	r3, #1
 8002fca:	2162      	movs	r1, #98	; 0x62
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fed0 	bl	8002d72 <lsm303agr_read_reg>
 8002fd2:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10f      	bne.n	8002ffa <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	7a3b      	ldrb	r3, [r7, #8]
 8002fe4:	f362 1345 	bfi	r3, r2, #5, #1
 8002fe8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002fea:	f107 0208 	add.w	r2, r7, #8
 8002fee:	2301      	movs	r3, #1
 8002ff0:	2162      	movs	r1, #98	; 0x62
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fed5 	bl	8002da2 <lsm303agr_write_reg>
 8002ff8:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <LSM6DSM_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_RegisterBusIO(LSM6DSM_Object_t *pObj, LSM6DSM_IO_t *pIO)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSM_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <LSM6DSM_RegisterBusIO+0x1c>
  {
    ret = LSM6DSM_ERROR;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e04d      	b.n	80030bc <LSM6DSM_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	7b1a      	ldrb	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <LSM6DSM_RegisterBusIO+0xc4>)
 800305c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <LSM6DSM_RegisterBusIO+0xc8>)
 8003062:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <LSM6DSM_RegisterBusIO+0x76>
    {
      ret = LSM6DSM_ERROR;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e020      	b.n	80030bc <LSM6DSM_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSM_OK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4798      	blx	r3
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <LSM6DSM_RegisterBusIO+0x8a>
    {
      ret = LSM6DSM_ERROR;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e016      	b.n	80030bc <LSM6DSM_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSM_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d112      	bne.n	80030bc <LSM6DSM_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <LSM6DSM_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80030a0:	230c      	movs	r3, #12
 80030a2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSM_Write_Reg(pObj, LSM6DSM_CTRL3_C, data) != LSM6DSM_OK)
 80030a4:	7afb      	ldrb	r3, [r7, #11]
 80030a6:	461a      	mov	r2, r3
 80030a8:	2112      	movs	r1, #18
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fd2d 	bl	8003b0a <LSM6DSM_Write_Reg>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <LSM6DSM_RegisterBusIO+0xb8>
          {
            ret = LSM6DSM_ERROR;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80030bc:	68fb      	ldr	r3, [r7, #12]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	080040e5 	.word	0x080040e5
 80030cc:	0800411b 	.word	0x0800411b

080030d0 <LSM6DSM_Init>:
 * @brief  Initialize the LSM6DSM sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_Init(LSM6DSM_Object_t *pObj)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsm_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSM_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	331c      	adds	r3, #28
 80030dc:	2101      	movs	r1, #1
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fa9b 	bl	800461a <lsm6dsm_auto_increment_set>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <LSM6DSM_Init+0x20>
  {
    return LSM6DSM_ERROR;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	e054      	b.n	800319a <LSM6DSM_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsm_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSM_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	331c      	adds	r3, #28
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f001 fa36 	bl	8004568 <lsm6dsm_block_data_update_set>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <LSM6DSM_Init+0x38>
  {
    return LSM6DSM_ERROR;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e048      	b.n	800319a <LSM6DSM_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsm_fifo_mode_set(&(pObj->Ctx), LSM6DSM_BYPASS_MODE) != LSM6DSM_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	331c      	adds	r3, #28
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f001 ff33 	bl	8004f7a <lsm6dsm_fifo_mode_set>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <LSM6DSM_Init+0x50>
  {
    return LSM6DSM_ERROR;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	e03c      	b.n	800319a <LSM6DSM_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSM_XL_ODR_104Hz;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2204      	movs	r2, #4
 8003124:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsm_xl_data_rate_set(&(pObj->Ctx), LSM6DSM_XL_ODR_OFF) != LSM6DSM_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	331c      	adds	r3, #28
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f001 f89c 	bl	800426c <lsm6dsm_xl_data_rate_set>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <LSM6DSM_Init+0x70>
  {
    return LSM6DSM_ERROR;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
 800313e:	e02c      	b.n	800319a <LSM6DSM_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsm_xl_full_scale_set(&(pObj->Ctx), LSM6DSM_2g) != LSM6DSM_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	331c      	adds	r3, #28
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f001 f832 	bl	80041b0 <lsm6dsm_xl_full_scale_set>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <LSM6DSM_Init+0x88>
  {
    return LSM6DSM_ERROR;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	e020      	b.n	800319a <LSM6DSM_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSM_GY_ODR_104Hz;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2204      	movs	r2, #4
 800315c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsm_gy_data_rate_set(&(pObj->Ctx), LSM6DSM_GY_ODR_OFF) != LSM6DSM_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	331c      	adds	r3, #28
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f001 f976 	bl	8004458 <lsm6dsm_gy_data_rate_set>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <LSM6DSM_Init+0xa8>
  {
    return LSM6DSM_ERROR;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	e010      	b.n	800319a <LSM6DSM_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsm_gy_full_scale_set(&(pObj->Ctx), LSM6DSM_2000dps) != LSM6DSM_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	331c      	adds	r3, #28
 800317c:	2106      	movs	r1, #6
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f902 	bl	8004388 <lsm6dsm_gy_full_scale_set>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <LSM6DSM_Init+0xc0>
  {
    return LSM6DSM_ERROR;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	e004      	b.n	800319a <LSM6DSM_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSM_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <LSM6DSM_DeInit>:
 * @brief  Deinitialize the LSM6DSM sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_DeInit(LSM6DSM_Object_t *pObj)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSM_ACC_Disable(pObj) != LSM6DSM_OK)
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f888 	bl	80032c0 <LSM6DSM_ACC_Disable>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <LSM6DSM_DeInit+0x1a>
  {
    return LSM6DSM_ERROR;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	e015      	b.n	80031e8 <LSM6DSM_DeInit+0x46>
  }

  if (LSM6DSM_GYRO_Disable(pObj) != LSM6DSM_OK)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fa9a 	bl	80036f6 <LSM6DSM_GYRO_Disable>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <LSM6DSM_DeInit+0x2c>
  {
    return LSM6DSM_ERROR;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e00c      	b.n	80031e8 <LSM6DSM_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSM_XL_ODR_OFF;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSM_GY_ODR_OFF;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSM_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <LSM6DSM_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ReadID(LSM6DSM_Object_t *pObj, uint8_t *Id)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  if (lsm6dsm_device_id_get(&(pObj->Ctx), Id) != LSM6DSM_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	331c      	adds	r3, #28
 80031fe:	6839      	ldr	r1, [r7, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f001 f9f9 	bl	80045f8 <lsm6dsm_device_id_get>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <LSM6DSM_ReadID+0x22>
  {
    return LSM6DSM_ERROR;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	e000      	b.n	8003214 <LSM6DSM_ReadID+0x24>
  }

  return LSM6DSM_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <LSM6DSM_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSM sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GetCapabilities(LSM6DSM_Object_t *pObj, LSM6DSM_Capabilities_t *Capabilities)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2201      	movs	r2, #1
 8003230:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003244:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2210      	movs	r2, #16
 800324a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	4a07      	ldr	r2, [pc, #28]	; (8003274 <LSM6DSM_GetCapabilities+0x58>)
 8003256:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4a06      	ldr	r2, [pc, #24]	; (8003274 <LSM6DSM_GetCapabilities+0x58>)
 800325c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	619a      	str	r2, [r3, #24]
  return LSM6DSM_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	45d02000 	.word	0x45d02000

08003278 <LSM6DSM_ACC_Enable>:
 * @brief  Enable the LSM6DSM accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_Enable(LSM6DSM_Object_t *pObj)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <LSM6DSM_ACC_Enable+0x16>
  {
    return LSM6DSM_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e014      	b.n	80032b8 <LSM6DSM_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsm_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSM_OK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f103 021c 	add.w	r2, r3, #28
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f000 ffe5 	bl	800426c <lsm6dsm_xl_data_rate_set>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <LSM6DSM_ACC_Enable+0x36>
  {
    return LSM6DSM_ERROR;
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ac:	e004      	b.n	80032b8 <LSM6DSM_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSM_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <LSM6DSM_ACC_Disable>:
 * @brief  Disable the LSM6DSM accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_Disable(LSM6DSM_Object_t *pObj)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <LSM6DSM_ACC_Disable+0x16>
  {
    return LSM6DSM_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e01f      	b.n	8003316 <LSM6DSM_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsm_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSM_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f103 021c 	add.w	r2, r3, #28
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	332b      	adds	r3, #43	; 0x2b
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 ffe8 	bl	80042b8 <lsm6dsm_xl_data_rate_get>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <LSM6DSM_ACC_Disable+0x34>
  {
    return LSM6DSM_ERROR;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	e010      	b.n	8003316 <LSM6DSM_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsm_xl_data_rate_set(&(pObj->Ctx), LSM6DSM_XL_ODR_OFF) != LSM6DSM_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	331c      	adds	r3, #28
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 ffb6 	bl	800426c <lsm6dsm_xl_data_rate_set>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <LSM6DSM_ACC_Disable+0x4c>
  {
    return LSM6DSM_ERROR;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	e004      	b.n	8003316 <LSM6DSM_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSM_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <LSM6DSM_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_GetSensitivity(LSM6DSM_Object_t *pObj, float *Sensitivity)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSM_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
  lsm6dsm_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsm_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSM_OK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	331c      	adds	r3, #28
 8003332:	f107 020b 	add.w	r2, r7, #11
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f000 ff5f 	bl	80041fc <lsm6dsm_xl_full_scale_get>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <LSM6DSM_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSM_ERROR;
 8003344:	f04f 33ff 	mov.w	r3, #4294967295
 8003348:	e023      	b.n	8003392 <LSM6DSM_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d81b      	bhi.n	8003388 <LSM6DSM_ACC_GetSensitivity+0x68>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <LSM6DSM_ACC_GetSensitivity+0x38>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	08003369 	.word	0x08003369
 800335c:	08003381 	.word	0x08003381
 8003360:	08003371 	.word	0x08003371
 8003364:	08003379 	.word	0x08003379
  {
    case LSM6DSM_2g:
      *Sensitivity = LSM6DSM_ACC_SENSITIVITY_FS_2G;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <LSM6DSM_ACC_GetSensitivity+0x7c>)
 800336c:	601a      	str	r2, [r3, #0]
      break;
 800336e:	e00f      	b.n	8003390 <LSM6DSM_ACC_GetSensitivity+0x70>

    case LSM6DSM_4g:
      *Sensitivity = LSM6DSM_ACC_SENSITIVITY_FS_4G;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <LSM6DSM_ACC_GetSensitivity+0x80>)
 8003374:	601a      	str	r2, [r3, #0]
      break;
 8003376:	e00b      	b.n	8003390 <LSM6DSM_ACC_GetSensitivity+0x70>

    case LSM6DSM_8g:
      *Sensitivity = LSM6DSM_ACC_SENSITIVITY_FS_8G;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <LSM6DSM_ACC_GetSensitivity+0x84>)
 800337c:	601a      	str	r2, [r3, #0]
      break;
 800337e:	e007      	b.n	8003390 <LSM6DSM_ACC_GetSensitivity+0x70>

    case LSM6DSM_16g:
      *Sensitivity = LSM6DSM_ACC_SENSITIVITY_FS_16G;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <LSM6DSM_ACC_GetSensitivity+0x88>)
 8003384:	601a      	str	r2, [r3, #0]
      break;
 8003386:	e003      	b.n	8003390 <LSM6DSM_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSM_ERROR;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	60fb      	str	r3, [r7, #12]
      break;
 800338e:	bf00      	nop
  }

  return ret;
 8003390:	68fb      	ldr	r3, [r7, #12]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	3d79db23 	.word	0x3d79db23
 80033a0:	3df9db23 	.word	0x3df9db23
 80033a4:	3e79db23 	.word	0x3e79db23
 80033a8:	3ef9db23 	.word	0x3ef9db23

080033ac <LSM6DSM_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_GetOutputDataRate(LSM6DSM_Object_t *pObj, float *Odr)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSM_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  lsm6dsm_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsm_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSM_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	331c      	adds	r3, #28
 80033be:	f107 020b 	add.w	r2, r7, #11
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 ff77 	bl	80042b8 <lsm6dsm_xl_data_rate_get>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <LSM6DSM_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSM_ERROR;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
 80033d4:	e054      	b.n	8003480 <LSM6DSM_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	2b0b      	cmp	r3, #11
 80033da:	d84c      	bhi.n	8003476 <LSM6DSM_ACC_GetOutputDataRate+0xca>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <LSM6DSM_ACC_GetOutputDataRate+0x38>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	08003415 	.word	0x08003415
 80033e8:	08003427 	.word	0x08003427
 80033ec:	0800342f 	.word	0x0800342f
 80033f0:	08003437 	.word	0x08003437
 80033f4:	0800343f 	.word	0x0800343f
 80033f8:	08003447 	.word	0x08003447
 80033fc:	0800344f 	.word	0x0800344f
 8003400:	08003457 	.word	0x08003457
 8003404:	0800345f 	.word	0x0800345f
 8003408:	08003467 	.word	0x08003467
 800340c:	0800346f 	.word	0x0800346f
 8003410:	0800341f 	.word	0x0800341f
  {
    case LSM6DSM_XL_ODR_OFF:
      *Odr = 0.0f;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
      break;
 800341c:	e02f      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <LSM6DSM_ACC_GetOutputDataRate+0xdc>)
 8003422:	601a      	str	r2, [r3, #0]
      break;
 8003424:	e02b      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4a18      	ldr	r2, [pc, #96]	; (800348c <LSM6DSM_ACC_GetOutputDataRate+0xe0>)
 800342a:	601a      	str	r2, [r3, #0]
      break;
 800342c:	e027      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_26Hz:
      *Odr = 26.0f;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <LSM6DSM_ACC_GetOutputDataRate+0xe4>)
 8003432:	601a      	str	r2, [r3, #0]
      break;
 8003434:	e023      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	4a16      	ldr	r2, [pc, #88]	; (8003494 <LSM6DSM_ACC_GetOutputDataRate+0xe8>)
 800343a:	601a      	str	r2, [r3, #0]
      break;
 800343c:	e01f      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_104Hz:
      *Odr = 104.0f;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	4a15      	ldr	r2, [pc, #84]	; (8003498 <LSM6DSM_ACC_GetOutputDataRate+0xec>)
 8003442:	601a      	str	r2, [r3, #0]
      break;
 8003444:	e01b      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	4a14      	ldr	r2, [pc, #80]	; (800349c <LSM6DSM_ACC_GetOutputDataRate+0xf0>)
 800344a:	601a      	str	r2, [r3, #0]
      break;
 800344c:	e017      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_416Hz:
      *Odr = 416.0f;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <LSM6DSM_ACC_GetOutputDataRate+0xf4>)
 8003452:	601a      	str	r2, [r3, #0]
      break;
 8003454:	e013      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <LSM6DSM_ACC_GetOutputDataRate+0xf8>)
 800345a:	601a      	str	r2, [r3, #0]
      break;
 800345c:	e00f      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <LSM6DSM_ACC_GetOutputDataRate+0xfc>)
 8003462:	601a      	str	r2, [r3, #0]
      break;
 8003464:	e00b      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	4a10      	ldr	r2, [pc, #64]	; (80034ac <LSM6DSM_ACC_GetOutputDataRate+0x100>)
 800346a:	601a      	str	r2, [r3, #0]
      break;
 800346c:	e007      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    case LSM6DSM_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	4a0f      	ldr	r2, [pc, #60]	; (80034b0 <LSM6DSM_ACC_GetOutputDataRate+0x104>)
 8003472:	601a      	str	r2, [r3, #0]
      break;
 8003474:	e003      	b.n	800347e <LSM6DSM_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSM_ERROR;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
 800347a:	60fb      	str	r3, [r7, #12]
      break;
 800347c:	bf00      	nop
  }

  return ret;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	3fcccccd 	.word	0x3fcccccd
 800348c:	41480000 	.word	0x41480000
 8003490:	41d00000 	.word	0x41d00000
 8003494:	42500000 	.word	0x42500000
 8003498:	42d00000 	.word	0x42d00000
 800349c:	43500000 	.word	0x43500000
 80034a0:	43d00000 	.word	0x43d00000
 80034a4:	44504000 	.word	0x44504000
 80034a8:	44cf8000 	.word	0x44cf8000
 80034ac:	45502000 	.word	0x45502000
 80034b0:	45d02000 	.word	0x45d02000

080034b4 <LSM6DSM_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_SetOutputDataRate(LSM6DSM_Object_t *pObj, float Odr)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d106      	bne.n	80034d8 <LSM6DSM_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSM_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80034ca:	ed97 0a00 	vldr	s0, [r7]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fbec 	bl	8003cac <LSM6DSM_ACC_SetOutputDataRate_When_Enabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	e005      	b.n	80034e4 <LSM6DSM_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSM_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80034d8:	ed97 0a00 	vldr	s0, [r7]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fc71 	bl	8003dc4 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled>
 80034e2:	4603      	mov	r3, r0
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <LSM6DSM_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_GetFullScale(LSM6DSM_Object_t *pObj, int32_t *FullScale)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSM_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
  lsm6dsm_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsm_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSM_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	331c      	adds	r3, #28
 80034fe:	f107 020b 	add.w	r2, r7, #11
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fe79 	bl	80041fc <lsm6dsm_xl_full_scale_get>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <LSM6DSM_ACC_GetFullScale+0x2a>
  {
    return LSM6DSM_ERROR;
 8003510:	f04f 33ff 	mov.w	r3, #4294967295
 8003514:	e023      	b.n	800355e <LSM6DSM_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d81b      	bhi.n	8003554 <LSM6DSM_ACC_GetFullScale+0x68>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <LSM6DSM_ACC_GetFullScale+0x38>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003535 	.word	0x08003535
 8003528:	0800354d 	.word	0x0800354d
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003545 	.word	0x08003545
  {
    case LSM6DSM_2g:
      *FullScale =  2;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2202      	movs	r2, #2
 8003538:	601a      	str	r2, [r3, #0]
      break;
 800353a:	e00f      	b.n	800355c <LSM6DSM_ACC_GetFullScale+0x70>

    case LSM6DSM_4g:
      *FullScale =  4;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2204      	movs	r2, #4
 8003540:	601a      	str	r2, [r3, #0]
      break;
 8003542:	e00b      	b.n	800355c <LSM6DSM_ACC_GetFullScale+0x70>

    case LSM6DSM_8g:
      *FullScale =  8;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2208      	movs	r2, #8
 8003548:	601a      	str	r2, [r3, #0]
      break;
 800354a:	e007      	b.n	800355c <LSM6DSM_ACC_GetFullScale+0x70>

    case LSM6DSM_16g:
      *FullScale = 16;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2210      	movs	r2, #16
 8003550:	601a      	str	r2, [r3, #0]
      break;
 8003552:	e003      	b.n	800355c <LSM6DSM_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSM_ERROR;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
 8003558:	60fb      	str	r3, [r7, #12]
      break;
 800355a:	bf00      	nop
  }

  return ret;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop

08003568 <LSM6DSM_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_SetFullScale(LSM6DSM_Object_t *pObj, int32_t FullScale)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  lsm6dsm_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSM_2g
           : (FullScale <= 4) ? LSM6DSM_4g
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	dd0b      	ble.n	8003590 <LSM6DSM_ACC_SetFullScale+0x28>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b04      	cmp	r3, #4
 800357c:	dd06      	ble.n	800358c <LSM6DSM_ACC_SetFullScale+0x24>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	dc01      	bgt.n	8003588 <LSM6DSM_ACC_SetFullScale+0x20>
 8003584:	2303      	movs	r3, #3
 8003586:	e004      	b.n	8003592 <LSM6DSM_ACC_SetFullScale+0x2a>
 8003588:	2301      	movs	r3, #1
 800358a:	e002      	b.n	8003592 <LSM6DSM_ACC_SetFullScale+0x2a>
 800358c:	2302      	movs	r3, #2
 800358e:	e000      	b.n	8003592 <LSM6DSM_ACC_SetFullScale+0x2a>
 8003590:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSM_2g
 8003592:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSM_8g
           :                    LSM6DSM_16g;

  if (lsm6dsm_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSM_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	331c      	adds	r3, #28
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fe07 	bl	80041b0 <lsm6dsm_xl_full_scale_set>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <LSM6DSM_ACC_SetFullScale+0x46>
  {
    return LSM6DSM_ERROR;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	e000      	b.n	80035b0 <LSM6DSM_ACC_SetFullScale+0x48>
  }

  return LSM6DSM_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <LSM6DSM_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_GetAxesRaw(LSM6DSM_Object_t *pObj, LSM6DSM_AxesRaw_t *Value)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  lsm6dsm_axis3bit16_t  data_raw;

  /* Read raw data values. */
  if (lsm6dsm_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSM_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	331c      	adds	r3, #28
 80035c6:	f107 0208 	add.w	r2, r7, #8
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 f802 	bl	80045d6 <lsm6dsm_acceleration_raw_get>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <LSM6DSM_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSM_ERROR;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	e00c      	b.n	80035f8 <LSM6DSM_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80035de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80035e6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80035ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	809a      	strh	r2, [r3, #4]

  return LSM6DSM_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <LSM6DSM_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_GetAxes(LSM6DSM_Object_t *pObj, LSM6DSM_Axes_t *Acceleration)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  lsm6dsm_axis3bit16_t  data_raw;
  float sensitivity = 0.0f;
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsm_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSM_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	331c      	adds	r3, #28
 8003614:	f107 0210 	add.w	r2, r7, #16
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 ffdb 	bl	80045d6 <lsm6dsm_acceleration_raw_get>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <LSM6DSM_ACC_GetAxes+0x2c>
  {
    return LSM6DSM_ERROR;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	e03c      	b.n	80036a6 <LSM6DSM_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSM actual sensitivity. */
  if (LSM6DSM_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSM_OK)
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff fe74 	bl	8003320 <LSM6DSM_ACC_GetSensitivity>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <LSM6DSM_ACC_GetAxes+0x44>
  {
    return LSM6DSM_ERROR;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	e030      	b.n	80036a6 <LSM6DSM_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003644:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003650:	edd7 7a03 	vldr	s15, [r7, #12]
 8003654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365c:	ee17 2a90 	vmov	r2, s15
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003670:	edd7 7a03 	vldr	s15, [r7, #12]
 8003674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800367c:	ee17 2a90 	vmov	r2, s15
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003684:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003690:	edd7 7a03 	vldr	s15, [r7, #12]
 8003694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800369c:	ee17 2a90 	vmov	r2, s15
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	609a      	str	r2, [r3, #8]

  return LSM6DSM_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <LSM6DSM_GYRO_Enable>:
 * @brief  Enable the LSM6DSM gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_Enable(LSM6DSM_Object_t *pObj)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <LSM6DSM_GYRO_Enable+0x16>
  {
    return LSM6DSM_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e014      	b.n	80036ee <LSM6DSM_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsm_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSM_OK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f103 021c 	add.w	r2, r3, #28
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f000 fec0 	bl	8004458 <lsm6dsm_gy_data_rate_set>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <LSM6DSM_GYRO_Enable+0x36>
  {
    return LSM6DSM_ERROR;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e004      	b.n	80036ee <LSM6DSM_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSM_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <LSM6DSM_GYRO_Disable>:
 * @brief  Disable the LSM6DSM gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_Disable(LSM6DSM_Object_t *pObj)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <LSM6DSM_GYRO_Disable+0x16>
  {
    return LSM6DSM_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e01f      	b.n	800374c <LSM6DSM_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsm_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSM_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f103 021c 	add.w	r2, r3, #28
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	332c      	adds	r3, #44	; 0x2c
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f000 fec3 	bl	80044a4 <lsm6dsm_gy_data_rate_get>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <LSM6DSM_GYRO_Disable+0x34>
  {
    return LSM6DSM_ERROR;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	e010      	b.n	800374c <LSM6DSM_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsm_gy_data_rate_set(&(pObj->Ctx), LSM6DSM_GY_ODR_OFF) != LSM6DSM_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	331c      	adds	r3, #28
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fe91 	bl	8004458 <lsm6dsm_gy_data_rate_set>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <LSM6DSM_GYRO_Disable+0x4c>
  {
    return LSM6DSM_ERROR;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
 8003740:	e004      	b.n	800374c <LSM6DSM_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSM_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <LSM6DSM_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_GetSensitivity(LSM6DSM_Object_t *pObj, float *Sensitivity)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSM_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  lsm6dsm_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsm_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSM_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	331c      	adds	r3, #28
 8003766:	f107 020b 	add.w	r2, r7, #11
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fe31 	bl	80043d4 <lsm6dsm_gy_full_scale_get>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <LSM6DSM_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSM_ERROR;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	e02d      	b.n	80037da <LSM6DSM_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	2b06      	cmp	r3, #6
 8003782:	d825      	bhi.n	80037d0 <LSM6DSM_GYRO_GetSensitivity+0x7c>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <LSM6DSM_GYRO_GetSensitivity+0x38>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037a9 	.word	0x080037a9
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037c1 	.word	0x080037c1
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037c9 	.word	0x080037c9
  {
    case LSM6DSM_125dps:
      *Sensitivity = LSM6DSM_GYRO_SENSITIVITY_FS_125DPS;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <LSM6DSM_GYRO_GetSensitivity+0x90>)
 80037ac:	601a      	str	r2, [r3, #0]
      break;
 80037ae:	e013      	b.n	80037d8 <LSM6DSM_GYRO_GetSensitivity+0x84>

    case LSM6DSM_250dps:
      *Sensitivity = LSM6DSM_GYRO_SENSITIVITY_FS_250DPS;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <LSM6DSM_GYRO_GetSensitivity+0x94>)
 80037b4:	601a      	str	r2, [r3, #0]
      break;
 80037b6:	e00f      	b.n	80037d8 <LSM6DSM_GYRO_GetSensitivity+0x84>

    case LSM6DSM_500dps:
      *Sensitivity = LSM6DSM_GYRO_SENSITIVITY_FS_500DPS;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <LSM6DSM_GYRO_GetSensitivity+0x98>)
 80037bc:	601a      	str	r2, [r3, #0]
      break;
 80037be:	e00b      	b.n	80037d8 <LSM6DSM_GYRO_GetSensitivity+0x84>

    case LSM6DSM_1000dps:
      *Sensitivity = LSM6DSM_GYRO_SENSITIVITY_FS_1000DPS;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <LSM6DSM_GYRO_GetSensitivity+0x9c>)
 80037c4:	601a      	str	r2, [r3, #0]
      break;
 80037c6:	e007      	b.n	80037d8 <LSM6DSM_GYRO_GetSensitivity+0x84>

    case LSM6DSM_2000dps:
      *Sensitivity = LSM6DSM_GYRO_SENSITIVITY_FS_2000DPS;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <LSM6DSM_GYRO_GetSensitivity+0xa0>)
 80037cc:	601a      	str	r2, [r3, #0]
      break;
 80037ce:	e003      	b.n	80037d8 <LSM6DSM_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSM_ERROR;
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295
 80037d4:	60fb      	str	r3, [r7, #12]
      break;
 80037d6:	bf00      	nop
  }

  return ret;
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	408c0000 	.word	0x408c0000
 80037e8:	410c0000 	.word	0x410c0000
 80037ec:	418c0000 	.word	0x418c0000
 80037f0:	420c0000 	.word	0x420c0000
 80037f4:	428c0000 	.word	0x428c0000

080037f8 <LSM6DSM_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_GetOutputDataRate(LSM6DSM_Object_t *pObj, float *Odr)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSM_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
  lsm6dsm_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsm_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSM_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	331c      	adds	r3, #28
 800380a:	f107 020b 	add.w	r2, r7, #11
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fe47 	bl	80044a4 <lsm6dsm_gy_data_rate_get>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <LSM6DSM_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSM_ERROR;
 800381c:	f04f 33ff 	mov.w	r3, #4294967295
 8003820:	e04e      	b.n	80038c0 <LSM6DSM_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003822:	7afb      	ldrb	r3, [r7, #11]
 8003824:	2b0a      	cmp	r3, #10
 8003826:	d846      	bhi.n	80038b6 <LSM6DSM_GYRO_GetOutputDataRate+0xbe>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <LSM6DSM_GYRO_GetOutputDataRate+0x38>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	0800385d 	.word	0x0800385d
 8003834:	08003867 	.word	0x08003867
 8003838:	0800386f 	.word	0x0800386f
 800383c:	08003877 	.word	0x08003877
 8003840:	0800387f 	.word	0x0800387f
 8003844:	08003887 	.word	0x08003887
 8003848:	0800388f 	.word	0x0800388f
 800384c:	08003897 	.word	0x08003897
 8003850:	0800389f 	.word	0x0800389f
 8003854:	080038a7 	.word	0x080038a7
 8003858:	080038af 	.word	0x080038af
  {
    case LSM6DSM_GY_ODR_OFF:
      *Odr = 0.0f;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
      break;
 8003864:	e02b      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <LSM6DSM_GYRO_GetOutputDataRate+0xd0>)
 800386a:	601a      	str	r2, [r3, #0]
      break;
 800386c:	e027      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_26Hz:
      *Odr = 26.0f;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4a16      	ldr	r2, [pc, #88]	; (80038cc <LSM6DSM_GYRO_GetOutputDataRate+0xd4>)
 8003872:	601a      	str	r2, [r3, #0]
      break;
 8003874:	e023      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <LSM6DSM_GYRO_GetOutputDataRate+0xd8>)
 800387a:	601a      	str	r2, [r3, #0]
      break;
 800387c:	e01f      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_104Hz:
      *Odr = 104.0f;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	4a14      	ldr	r2, [pc, #80]	; (80038d4 <LSM6DSM_GYRO_GetOutputDataRate+0xdc>)
 8003882:	601a      	str	r2, [r3, #0]
      break;
 8003884:	e01b      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <LSM6DSM_GYRO_GetOutputDataRate+0xe0>)
 800388a:	601a      	str	r2, [r3, #0]
      break;
 800388c:	e017      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_416Hz:
      *Odr = 416.0f;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	4a12      	ldr	r2, [pc, #72]	; (80038dc <LSM6DSM_GYRO_GetOutputDataRate+0xe4>)
 8003892:	601a      	str	r2, [r3, #0]
      break;
 8003894:	e013      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <LSM6DSM_GYRO_GetOutputDataRate+0xe8>)
 800389a:	601a      	str	r2, [r3, #0]
      break;
 800389c:	e00f      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <LSM6DSM_GYRO_GetOutputDataRate+0xec>)
 80038a2:	601a      	str	r2, [r3, #0]
      break;
 80038a4:	e00b      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <LSM6DSM_GYRO_GetOutputDataRate+0xf0>)
 80038aa:	601a      	str	r2, [r3, #0]
      break;
 80038ac:	e007      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSM_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <LSM6DSM_GYRO_GetOutputDataRate+0xf4>)
 80038b2:	601a      	str	r2, [r3, #0]
      break;
 80038b4:	e003      	b.n	80038be <LSM6DSM_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSM_ERROR;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	60fb      	str	r3, [r7, #12]
      break;
 80038bc:	bf00      	nop
  }

  return ret;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	41480000 	.word	0x41480000
 80038cc:	41d00000 	.word	0x41d00000
 80038d0:	42500000 	.word	0x42500000
 80038d4:	42d00000 	.word	0x42d00000
 80038d8:	43500000 	.word	0x43500000
 80038dc:	43d00000 	.word	0x43d00000
 80038e0:	44504000 	.word	0x44504000
 80038e4:	44cf8000 	.word	0x44cf8000
 80038e8:	45502000 	.word	0x45502000
 80038ec:	45d02000 	.word	0x45d02000

080038f0 <LSM6DSM_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_SetOutputDataRate(LSM6DSM_Object_t *pObj, float Odr)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003902:	2b01      	cmp	r3, #1
 8003904:	d106      	bne.n	8003914 <LSM6DSM_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSM_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003906:	ed97 0a00 	vldr	s0, [r7]
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fadc 	bl	8003ec8 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled>
 8003910:	4603      	mov	r3, r0
 8003912:	e005      	b.n	8003920 <LSM6DSM_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSM_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003914:	ed97 0a00 	vldr	s0, [r7]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fb61 	bl	8003fe0 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled>
 800391e:	4603      	mov	r3, r0
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <LSM6DSM_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_GetFullScale(LSM6DSM_Object_t *pObj, int32_t  *FullScale)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSM_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  lsm6dsm_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsm_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSM_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	331c      	adds	r3, #28
 800393a:	f107 020b 	add.w	r2, r7, #11
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fd47 	bl	80043d4 <lsm6dsm_gy_full_scale_get>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <LSM6DSM_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSM_ERROR;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	e030      	b.n	80039b4 <LSM6DSM_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8003952:	7afb      	ldrb	r3, [r7, #11]
 8003954:	2b06      	cmp	r3, #6
 8003956:	d828      	bhi.n	80039aa <LSM6DSM_GYRO_GetFullScale+0x82>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <LSM6DSM_GYRO_GetFullScale+0x38>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003985 	.word	0x08003985
 8003964:	0800397d 	.word	0x0800397d
 8003968:	0800398d 	.word	0x0800398d
 800396c:	080039ab 	.word	0x080039ab
 8003970:	08003997 	.word	0x08003997
 8003974:	080039ab 	.word	0x080039ab
 8003978:	080039a1 	.word	0x080039a1
  {
    case LSM6DSM_125dps:
      *FullScale =  125;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	227d      	movs	r2, #125	; 0x7d
 8003980:	601a      	str	r2, [r3, #0]
      break;
 8003982:	e016      	b.n	80039b2 <LSM6DSM_GYRO_GetFullScale+0x8a>

    case LSM6DSM_250dps:
      *FullScale =  250;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	22fa      	movs	r2, #250	; 0xfa
 8003988:	601a      	str	r2, [r3, #0]
      break;
 800398a:	e012      	b.n	80039b2 <LSM6DSM_GYRO_GetFullScale+0x8a>

    case LSM6DSM_500dps:
      *FullScale =  500;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003992:	601a      	str	r2, [r3, #0]
      break;
 8003994:	e00d      	b.n	80039b2 <LSM6DSM_GYRO_GetFullScale+0x8a>

    case LSM6DSM_1000dps:
      *FullScale = 1000;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800399c:	601a      	str	r2, [r3, #0]
      break;
 800399e:	e008      	b.n	80039b2 <LSM6DSM_GYRO_GetFullScale+0x8a>

    case LSM6DSM_2000dps:
      *FullScale = 2000;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80039a6:	601a      	str	r2, [r3, #0]
      break;
 80039a8:	e003      	b.n	80039b2 <LSM6DSM_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSM_ERROR;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	60fb      	str	r3, [r7, #12]
      break;
 80039b0:	bf00      	nop
  }

  return ret;
 80039b2:	68fb      	ldr	r3, [r7, #12]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <LSM6DSM_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_SetFullScale(LSM6DSM_Object_t *pObj, int32_t FullScale)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  lsm6dsm_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSM_125dps
           : (FullScale <= 250)  ? LSM6DSM_250dps
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b7d      	cmp	r3, #125	; 0x7d
 80039ca:	dd12      	ble.n	80039f2 <LSM6DSM_GYRO_SetFullScale+0x36>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2bfa      	cmp	r3, #250	; 0xfa
 80039d0:	dd0d      	ble.n	80039ee <LSM6DSM_GYRO_SetFullScale+0x32>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039d8:	dd07      	ble.n	80039ea <LSM6DSM_GYRO_SetFullScale+0x2e>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e0:	dc01      	bgt.n	80039e6 <LSM6DSM_GYRO_SetFullScale+0x2a>
 80039e2:	2304      	movs	r3, #4
 80039e4:	e006      	b.n	80039f4 <LSM6DSM_GYRO_SetFullScale+0x38>
 80039e6:	2306      	movs	r3, #6
 80039e8:	e004      	b.n	80039f4 <LSM6DSM_GYRO_SetFullScale+0x38>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e002      	b.n	80039f4 <LSM6DSM_GYRO_SetFullScale+0x38>
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <LSM6DSM_GYRO_SetFullScale+0x38>
 80039f2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSM_125dps
 80039f4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSM_500dps
           : (FullScale <= 1000) ? LSM6DSM_1000dps
           :                       LSM6DSM_2000dps;

  if (lsm6dsm_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSM_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	331c      	adds	r3, #28
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fcc2 	bl	8004388 <lsm6dsm_gy_full_scale_set>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <LSM6DSM_GYRO_SetFullScale+0x54>
  {
    return LSM6DSM_ERROR;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0e:	e000      	b.n	8003a12 <LSM6DSM_GYRO_SetFullScale+0x56>
  }

  return LSM6DSM_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <LSM6DSM_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_GetAxesRaw(LSM6DSM_Object_t *pObj, LSM6DSM_AxesRaw_t *Value)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  lsm6dsm_axis3bit16_t  data_raw;

  /* Read raw data values. */
  if (lsm6dsm_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSM_OK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	331c      	adds	r3, #28
 8003a28:	f107 0208 	add.w	r2, r7, #8
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fdc0 	bl	80045b4 <lsm6dsm_angular_rate_raw_get>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <LSM6DSM_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSM_ERROR;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	e00c      	b.n	8003a5a <LSM6DSM_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003a40:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003a48:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003a50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	809a      	strh	r2, [r3, #4]

  return LSM6DSM_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <LSM6DSM_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_GYRO_GetAxes(LSM6DSM_Object_t *pObj, LSM6DSM_Axes_t *AngularRate)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  lsm6dsm_axis3bit16_t  data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsm_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSM_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	331c      	adds	r3, #28
 8003a70:	f107 0210 	add.w	r2, r7, #16
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fd9c 	bl	80045b4 <lsm6dsm_angular_rate_raw_get>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <LSM6DSM_GYRO_GetAxes+0x26>
  {
    return LSM6DSM_ERROR;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	e03c      	b.n	8003b02 <LSM6DSM_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSM actual sensitivity. */
  if (LSM6DSM_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSM_OK)
 8003a88:	f107 030c 	add.w	r3, r7, #12
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fe60 	bl	8003754 <LSM6DSM_GYRO_GetSensitivity>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <LSM6DSM_GYRO_GetAxes+0x3e>
  {
    return LSM6DSM_ERROR;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e030      	b.n	8003b02 <LSM6DSM_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003aa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aac:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ab8:	ee17 2a90 	vmov	r2, s15
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003acc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad8:	ee17 2a90 	vmov	r2, s15
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003ae0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003af8:	ee17 2a90 	vmov	r2, s15
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	609a      	str	r2, [r3, #8]

  return LSM6DSM_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <LSM6DSM_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_Write_Reg(LSM6DSM_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	70fb      	strb	r3, [r7, #3]
 8003b16:	4613      	mov	r3, r2
 8003b18:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsm_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSM_OK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f103 001c 	add.w	r0, r3, #28
 8003b20:	1cba      	adds	r2, r7, #2
 8003b22:	78f9      	ldrb	r1, [r7, #3]
 8003b24:	2301      	movs	r3, #1
 8003b26:	f000 fb2b 	bl	8004180 <lsm6dsm_write_reg>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <LSM6DSM_Write_Reg+0x2c>
  {
    return LSM6DSM_ERROR;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	e000      	b.n	8003b38 <LSM6DSM_Write_Reg+0x2e>
  }

  return LSM6DSM_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <LSM6DSM_ACC_Enable_Wake_Up_Detection>:
 * @param  pObj the device pObj
 * @param  IntPin interrupt pin line to be used
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_Enable_Wake_Up_Detection(LSM6DSM_Object_t *pObj, LSM6DSM_SensorIntPin_t IntPin)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSM_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  lsm6dsm_int1_route_t val1;
  lsm6dsm_int2_route_t val2;

  /* Output Data Rate selection */
  if (LSM6DSM_ACC_SetOutputDataRate(pObj, 416.0f) != LSM6DSM_OK)
 8003b50:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003c48 <LSM6DSM_ACC_Enable_Wake_Up_Detection+0x108>
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fcad 	bl	80034b4 <LSM6DSM_ACC_SetOutputDataRate>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <LSM6DSM_ACC_Enable_Wake_Up_Detection+0x26>
  {
    return LSM6DSM_ERROR;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	e06b      	b.n	8003c3e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfe>
  }

  /* Full scale selection */
  if (LSM6DSM_ACC_SetFullScale(pObj, 2) != LSM6DSM_OK)
 8003b66:	2102      	movs	r1, #2
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fcfd 	bl	8003568 <LSM6DSM_ACC_SetFullScale>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <LSM6DSM_ACC_Enable_Wake_Up_Detection+0x3a>
  {
    return LSM6DSM_ERROR;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295
 8003b78:	e061      	b.n	8003c3e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfe>
  }

  /* WAKE_DUR setting */
  if (lsm6dsm_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSM_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	331c      	adds	r3, #28
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f9d4 	bl	8004f2e <lsm6dsm_wkup_dur_set>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <LSM6DSM_ACC_Enable_Wake_Up_Detection+0x52>
  {
    return LSM6DSM_ERROR;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	e055      	b.n	8003c3e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfe>
  }

  /* Set wake up threshold. */
  if (lsm6dsm_wkup_threshold_set(&(pObj->Ctx), 0x02) != LSM6DSM_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	331c      	adds	r3, #28
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 f9a2 	bl	8004ee2 <lsm6dsm_wkup_threshold_set>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <LSM6DSM_ACC_Enable_Wake_Up_Detection+0x6a>
  {
    return LSM6DSM_ERROR;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	e049      	b.n	8003c3e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfe>
  }

  /* Enable wake up event on either INT1 or INT2 pin */
  switch (IntPin)
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <LSM6DSM_ACC_Enable_Wake_Up_Detection+0x76>
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d01e      	beq.n	8003bf2 <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xb2>
 8003bb4:	e03b      	b.n	8003c2e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xee>
  {
    case LSM6DSM_INT1_PIN:
      if (lsm6dsm_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSM_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	331c      	adds	r3, #28
 8003bba:	f107 0210 	add.w	r2, r7, #16
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 feb3 	bl	800492c <lsm6dsm_pin_int1_route_get>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <LSM6DSM_ACC_Enable_Wake_Up_Detection+0x92>
      {
        return LSM6DSM_ERROR;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd0:	e035      	b.n	8003c3e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfe>
      }

      val1.int1_wu = PROPERTY_ENABLE;
 8003bd2:	7c7b      	ldrb	r3, [r7, #17]
 8003bd4:	f043 0320 	orr.w	r3, r3, #32
 8003bd8:	747b      	strb	r3, [r7, #17]

      if (lsm6dsm_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSM_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	331c      	adds	r3, #28
 8003bde:	6939      	ldr	r1, [r7, #16]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fd40 	bl	8004666 <lsm6dsm_pin_int1_route_set>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d024      	beq.n	8003c36 <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xf6>
      {
        return LSM6DSM_ERROR;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf0:	e025      	b.n	8003c3e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfe>
      }
      break;

    case LSM6DSM_INT2_PIN:
      if (lsm6dsm_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSM_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	331c      	adds	r3, #28
 8003bf6:	f107 020c 	add.w	r2, r7, #12
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 f8ae 	bl	8004d5e <lsm6dsm_pin_int2_route_get>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xce>
      {
        return LSM6DSM_ERROR;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	e017      	b.n	8003c3e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfe>
      }

      val2.int2_wu = PROPERTY_ENABLE;
 8003c0e:	7b7b      	ldrb	r3, [r7, #13]
 8003c10:	f043 0320 	orr.w	r3, r3, #32
 8003c14:	737b      	strb	r3, [r7, #13]

      if (lsm6dsm_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSM_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	331c      	adds	r3, #28
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 ff5b 	bl	8004ad8 <lsm6dsm_pin_int2_route_set>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfa>
      {
        return LSM6DSM_ERROR;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	e007      	b.n	8003c3e <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfe>
      }
      break;

    default:
      ret = LSM6DSM_ERROR;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	617b      	str	r3, [r7, #20]
      break;
 8003c34:	e002      	b.n	8003c3c <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfc>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <LSM6DSM_ACC_Enable_Wake_Up_Detection+0xfc>
      break;
 8003c3a:	bf00      	nop
  }

  return ret;
 8003c3c:	697b      	ldr	r3, [r7, #20]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	43d00000 	.word	0x43d00000

08003c4c <LSM6DSM_ACC_Set_Wake_Up_Threshold>:
 * @param  pObj the device pObj
 * @param  Threshold wake up detection threshold
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_Set_Wake_Up_Threshold(LSM6DSM_Object_t *pObj, uint8_t Threshold)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
  /* Set wake up threshold. */
  if (lsm6dsm_wkup_threshold_set(&(pObj->Ctx), Threshold) != LSM6DSM_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	331c      	adds	r3, #28
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f93e 	bl	8004ee2 <lsm6dsm_wkup_threshold_set>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <LSM6DSM_ACC_Set_Wake_Up_Threshold+0x26>
  {
    return LSM6DSM_ERROR;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	e000      	b.n	8003c74 <LSM6DSM_ACC_Set_Wake_Up_Threshold+0x28>
  }

  return LSM6DSM_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <LSM6DSM_ACC_Set_Wake_Up_Duration>:
 * @param  pObj the device pObj
 * @param  Duration wake up detection duration
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSM_ACC_Set_Wake_Up_Duration(LSM6DSM_Object_t *pObj, uint8_t Duration)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
  /* Set wake up duration. */
  if (lsm6dsm_wkup_dur_set(&(pObj->Ctx), Duration) != LSM6DSM_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	331c      	adds	r3, #28
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 f94c 	bl	8004f2e <lsm6dsm_wkup_dur_set>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <LSM6DSM_ACC_Set_Wake_Up_Duration+0x26>
  {
    return LSM6DSM_ERROR;
 8003c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca0:	e000      	b.n	8003ca4 <LSM6DSM_ACC_Set_Wake_Up_Duration+0x28>
  }

  return LSM6DSM_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <LSM6DSM_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSM_ACC_SetOutputDataRate_When_Enabled(LSM6DSM_Object_t *pObj, float Odr)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsm_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSM_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSM_XL_ODR_26Hz
 8003cb8:	edd7 7a00 	vldr	s15, [r7]
 8003cbc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc8:	d801      	bhi.n	8003cce <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e058      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003cce:	edd7 7a00 	vldr	s15, [r7]
 8003cd2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cde:	d801      	bhi.n	8003ce4 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e04d      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003ce4:	edd7 7a00 	vldr	s15, [r7]
 8003ce8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003da8 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf4:	d801      	bhi.n	8003cfa <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e042      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003cfa:	edd7 7a00 	vldr	s15, [r7]
 8003cfe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003dac <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0a:	d801      	bhi.n	8003d10 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	e037      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d10:	edd7 7a00 	vldr	s15, [r7]
 8003d14:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003db0 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d20:	d801      	bhi.n	8003d26 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003d22:	2305      	movs	r3, #5
 8003d24:	e02c      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d26:	edd7 7a00 	vldr	s15, [r7]
 8003d2a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003db4 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d36:	d801      	bhi.n	8003d3c <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003d38:	2306      	movs	r3, #6
 8003d3a:	e021      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d3c:	edd7 7a00 	vldr	s15, [r7]
 8003d40:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003db8 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4c:	d801      	bhi.n	8003d52 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e016      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d52:	edd7 7a00 	vldr	s15, [r7]
 8003d56:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003dbc <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d62:	d801      	bhi.n	8003d68 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003d64:	2308      	movs	r3, #8
 8003d66:	e00b      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d68:	edd7 7a00 	vldr	s15, [r7]
 8003d6c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003dc0 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d78:	d801      	bhi.n	8003d7e <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8003d7a:	2309      	movs	r3, #9
 8003d7c:	e000      	b.n	8003d80 <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d7e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSM_XL_ODR_12Hz5
 8003d80:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSM_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSM_XL_ODR_3k33Hz
            :                    LSM6DSM_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsm_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSM_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	331c      	adds	r3, #28
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fa6e 	bl	800426c <lsm6dsm_xl_data_rate_set>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSM_ERROR;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	e000      	b.n	8003d9e <LSM6DSM_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSM_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	42500000 	.word	0x42500000
 8003dac:	42d00000 	.word	0x42d00000
 8003db0:	43500000 	.word	0x43500000
 8003db4:	43d00000 	.word	0x43d00000
 8003db8:	44504000 	.word	0x44504000
 8003dbc:	44cf8000 	.word	0x44cf8000
 8003dc0:	45502000 	.word	0x45502000

08003dc4 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSM_ACC_SetOutputDataRate_When_Disabled(LSM6DSM_Object_t *pObj, float Odr)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSM_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSM_XL_ODR_26Hz
 8003dd0:	edd7 7a00 	vldr	s15, [r7]
 8003dd4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	d801      	bhi.n	8003de6 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e058      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003de6:	edd7 7a00 	vldr	s15, [r7]
 8003dea:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df6:	d801      	bhi.n	8003dfc <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e04d      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003dfc:	edd7 7a00 	vldr	s15, [r7]
 8003e00:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003eac <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0c:	d801      	bhi.n	8003e12 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e042      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e12:	edd7 7a00 	vldr	s15, [r7]
 8003e16:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003eb0 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e22:	d801      	bhi.n	8003e28 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003e24:	2304      	movs	r3, #4
 8003e26:	e037      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e28:	edd7 7a00 	vldr	s15, [r7]
 8003e2c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003eb4 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e38:	d801      	bhi.n	8003e3e <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003e3a:	2305      	movs	r3, #5
 8003e3c:	e02c      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e3e:	edd7 7a00 	vldr	s15, [r7]
 8003e42:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003eb8 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4e:	d801      	bhi.n	8003e54 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003e50:	2306      	movs	r3, #6
 8003e52:	e021      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e54:	edd7 7a00 	vldr	s15, [r7]
 8003e58:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003ebc <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e64:	d801      	bhi.n	8003e6a <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003e66:	2307      	movs	r3, #7
 8003e68:	e016      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e6a:	edd7 7a00 	vldr	s15, [r7]
 8003e6e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ec0 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7a:	d801      	bhi.n	8003e80 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	e00b      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e80:	edd7 7a00 	vldr	s15, [r7]
 8003e84:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003ec4 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e90:	d801      	bhi.n	8003e96 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003e92:	2309      	movs	r3, #9
 8003e94:	e000      	b.n	8003e98 <LSM6DSM_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e96:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSM_XL_ODR_12Hz5
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSM_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSM_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSM_XL_ODR_3k33Hz
                  :                    LSM6DSM_XL_ODR_6k66Hz;

  return LSM6DSM_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	42500000 	.word	0x42500000
 8003eb0:	42d00000 	.word	0x42d00000
 8003eb4:	43500000 	.word	0x43500000
 8003eb8:	43d00000 	.word	0x43d00000
 8003ebc:	44504000 	.word	0x44504000
 8003ec0:	44cf8000 	.word	0x44cf8000
 8003ec4:	45502000 	.word	0x45502000

08003ec8 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSM_GYRO_SetOutputDataRate_When_Enabled(LSM6DSM_Object_t *pObj, float Odr)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsm_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSM_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSM_GY_ODR_26Hz
 8003ed4:	edd7 7a00 	vldr	s15, [r7]
 8003ed8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee4:	d801      	bhi.n	8003eea <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e058      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003eea:	edd7 7a00 	vldr	s15, [r7]
 8003eee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efa:	d801      	bhi.n	8003f00 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e04d      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f00:	edd7 7a00 	vldr	s15, [r7]
 8003f04:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003fc4 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f10:	d801      	bhi.n	8003f16 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003f12:	2303      	movs	r3, #3
 8003f14:	e042      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f16:	edd7 7a00 	vldr	s15, [r7]
 8003f1a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003fc8 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8003f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f26:	d801      	bhi.n	8003f2c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	e037      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f2c:	edd7 7a00 	vldr	s15, [r7]
 8003f30:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003fcc <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	d801      	bhi.n	8003f42 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003f3e:	2305      	movs	r3, #5
 8003f40:	e02c      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f42:	edd7 7a00 	vldr	s15, [r7]
 8003f46:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003fd0 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f52:	d801      	bhi.n	8003f58 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003f54:	2306      	movs	r3, #6
 8003f56:	e021      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f58:	edd7 7a00 	vldr	s15, [r7]
 8003f5c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003fd4 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	d801      	bhi.n	8003f6e <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003f6a:	2307      	movs	r3, #7
 8003f6c:	e016      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f6e:	edd7 7a00 	vldr	s15, [r7]
 8003f72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003fd8 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	d801      	bhi.n	8003f84 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003f80:	2308      	movs	r3, #8
 8003f82:	e00b      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f84:	edd7 7a00 	vldr	s15, [r7]
 8003f88:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003fdc <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f94:	d801      	bhi.n	8003f9a <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003f96:	2309      	movs	r3, #9
 8003f98:	e000      	b.n	8003f9c <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f9a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSM_GY_ODR_12Hz5
 8003f9c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSM_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSM_GY_ODR_3k33Hz
            :                    LSM6DSM_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsm_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSM_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	331c      	adds	r3, #28
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fa56 	bl	8004458 <lsm6dsm_gy_data_rate_set>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSM_ERROR;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	e000      	b.n	8003fba <LSM6DSM_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSM_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	42500000 	.word	0x42500000
 8003fc8:	42d00000 	.word	0x42d00000
 8003fcc:	43500000 	.word	0x43500000
 8003fd0:	43d00000 	.word	0x43d00000
 8003fd4:	44504000 	.word	0x44504000
 8003fd8:	44cf8000 	.word	0x44cf8000
 8003fdc:	45502000 	.word	0x45502000

08003fe0 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSM_GYRO_SetOutputDataRate_When_Disabled(LSM6DSM_Object_t *pObj, float Odr)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSM_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSM_GY_ODR_26Hz
 8003fec:	edd7 7a00 	vldr	s15, [r7]
 8003ff0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	d801      	bhi.n	8004002 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e058      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004002:	edd7 7a00 	vldr	s15, [r7]
 8004006:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800400a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d801      	bhi.n	8004018 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004014:	2302      	movs	r3, #2
 8004016:	e04d      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004018:	edd7 7a00 	vldr	s15, [r7]
 800401c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80040c8 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	d801      	bhi.n	800402e <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800402a:	2303      	movs	r3, #3
 800402c:	e042      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800402e:	edd7 7a00 	vldr	s15, [r7]
 8004032:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80040cc <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800403a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403e:	d801      	bhi.n	8004044 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004040:	2304      	movs	r3, #4
 8004042:	e037      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004044:	edd7 7a00 	vldr	s15, [r7]
 8004048:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80040d0 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800404c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	d801      	bhi.n	800405a <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004056:	2305      	movs	r3, #5
 8004058:	e02c      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800405a:	edd7 7a00 	vldr	s15, [r7]
 800405e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80040d4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406a:	d801      	bhi.n	8004070 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800406c:	2306      	movs	r3, #6
 800406e:	e021      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004070:	edd7 7a00 	vldr	s15, [r7]
 8004074:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80040d8 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800407c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004080:	d801      	bhi.n	8004086 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004082:	2307      	movs	r3, #7
 8004084:	e016      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004086:	edd7 7a00 	vldr	s15, [r7]
 800408a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80040dc <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800408e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004096:	d801      	bhi.n	800409c <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004098:	2308      	movs	r3, #8
 800409a:	e00b      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800409c:	edd7 7a00 	vldr	s15, [r7]
 80040a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80040e0 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80040a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ac:	d801      	bhi.n	80040b2 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80040ae:	2309      	movs	r3, #9
 80040b0:	e000      	b.n	80040b4 <LSM6DSM_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80040b2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSM_GY_ODR_12Hz5
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSM_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSM_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSM_GY_ODR_3k33Hz
                   :                    LSM6DSM_GY_ODR_6k66Hz;

  return LSM6DSM_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	42500000 	.word	0x42500000
 80040cc:	42d00000 	.word	0x42d00000
 80040d0:	43500000 	.word	0x43500000
 80040d4:	43d00000 	.word	0x43d00000
 80040d8:	44504000 	.word	0x44504000
 80040dc:	44cf8000 	.word	0x44cf8000
 80040e0:	45502000 	.word	0x45502000

080040e4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	461a      	mov	r2, r3
 80040f0:	460b      	mov	r3, r1
 80040f2:	72fb      	strb	r3, [r7, #11]
 80040f4:	4613      	mov	r3, r2
 80040f6:	813b      	strh	r3, [r7, #8]
  LSM6DSM_Object_t *pObj = (LSM6DSM_Object_t *)Handle;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	695c      	ldr	r4, [r3, #20]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	7b1b      	ldrb	r3, [r3, #12]
 8004104:	b298      	uxth	r0, r3
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	b299      	uxth	r1, r3
 800410a:	893b      	ldrh	r3, [r7, #8]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	47a0      	blx	r4
 8004110:	4603      	mov	r3, r0
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd90      	pop	{r4, r7, pc}

0800411a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800411a:	b590      	push	{r4, r7, lr}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	461a      	mov	r2, r3
 8004126:	460b      	mov	r3, r1
 8004128:	72fb      	strb	r3, [r7, #11]
 800412a:	4613      	mov	r3, r2
 800412c:	813b      	strh	r3, [r7, #8]
  LSM6DSM_Object_t *pObj = (LSM6DSM_Object_t *)Handle;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	691c      	ldr	r4, [r3, #16]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	7b1b      	ldrb	r3, [r3, #12]
 800413a:	b298      	uxth	r0, r3
 800413c:	7afb      	ldrb	r3, [r7, #11]
 800413e:	b299      	uxth	r1, r3
 8004140:	893b      	ldrh	r3, [r7, #8]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	47a0      	blx	r4
 8004146:	4603      	mov	r3, r0
}
 8004148:	4618      	mov	r0, r3
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <lsm6dsm_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsm_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	460b      	mov	r3, r1
 800415e:	72fb      	strb	r3, [r7, #11]
 8004160:	4613      	mov	r3, r2
 8004162:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685c      	ldr	r4, [r3, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6898      	ldr	r0, [r3, #8]
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	7af9      	ldrb	r1, [r7, #11]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	47a0      	blx	r4
 8004174:	6178      	str	r0, [r7, #20]
  return ret;
 8004176:	697b      	ldr	r3, [r7, #20]
}
 8004178:	4618      	mov	r0, r3
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}

08004180 <lsm6dsm_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsm_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	461a      	mov	r2, r3
 800418c:	460b      	mov	r3, r1
 800418e:	72fb      	strb	r3, [r7, #11]
 8004190:	4613      	mov	r3, r2
 8004192:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681c      	ldr	r4, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6898      	ldr	r0, [r3, #8]
 800419c:	893b      	ldrh	r3, [r7, #8]
 800419e:	7af9      	ldrb	r1, [r7, #11]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	47a0      	blx	r4
 80041a4:	6178      	str	r0, [r7, #20]
  return ret;
 80041a6:	697b      	ldr	r3, [r7, #20]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd90      	pop	{r4, r7, pc}

080041b0 <lsm6dsm_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsm_fs_xl_t val)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80041bc:	f107 0208 	add.w	r2, r7, #8
 80041c0:	2301      	movs	r3, #1
 80041c2:	2110      	movs	r1, #16
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ffc3 	bl	8004150 <lsm6dsm_read_reg>
 80041ca:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <lsm6dsm_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	7a3b      	ldrb	r3, [r7, #8]
 80041dc:	f362 0383 	bfi	r3, r2, #2, #2
 80041e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80041e2:	f107 0208 	add.w	r2, r7, #8
 80041e6:	2301      	movs	r3, #1
 80041e8:	2110      	movs	r1, #16
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ffc8 	bl	8004180 <lsm6dsm_write_reg>
 80041f0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <lsm6dsm_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsm_fs_xl_t *val)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004206:	f107 0208 	add.w	r2, r7, #8
 800420a:	2301      	movs	r3, #1
 800420c:	2110      	movs	r1, #16
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ff9e 	bl	8004150 <lsm6dsm_read_reg>
 8004214:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8004216:	7a3b      	ldrb	r3, [r7, #8]
 8004218:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b03      	cmp	r3, #3
 8004220:	d81a      	bhi.n	8004258 <lsm6dsm_xl_full_scale_get+0x5c>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <lsm6dsm_xl_full_scale_get+0x2c>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004239 	.word	0x08004239
 800422c:	08004241 	.word	0x08004241
 8004230:	08004249 	.word	0x08004249
 8004234:	08004251 	.word	0x08004251
    case LSM6DSM_2g:
      *val = LSM6DSM_2g;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
      break;
 800423e:	e00f      	b.n	8004260 <lsm6dsm_xl_full_scale_get+0x64>
    case LSM6DSM_16g:
      *val = LSM6DSM_16g;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
      break;
 8004246:	e00b      	b.n	8004260 <lsm6dsm_xl_full_scale_get+0x64>
    case LSM6DSM_4g:
      *val = LSM6DSM_4g;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2202      	movs	r2, #2
 800424c:	701a      	strb	r2, [r3, #0]
      break;
 800424e:	e007      	b.n	8004260 <lsm6dsm_xl_full_scale_get+0x64>
    case LSM6DSM_8g:
      *val = LSM6DSM_8g;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2203      	movs	r2, #3
 8004254:	701a      	strb	r2, [r3, #0]
      break;
 8004256:	e003      	b.n	8004260 <lsm6dsm_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSM_2g;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
      break;
 800425e:	bf00      	nop
  }

  return ret;
 8004260:	68fb      	ldr	r3, [r7, #12]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop

0800426c <lsm6dsm_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsm_odr_xl_t val)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004278:	f107 0208 	add.w	r2, r7, #8
 800427c:	2301      	movs	r3, #1
 800427e:	2110      	movs	r1, #16
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff65 	bl	8004150 <lsm6dsm_read_reg>
 8004286:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <lsm6dsm_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	b2da      	uxtb	r2, r3
 8004296:	7a3b      	ldrb	r3, [r7, #8]
 8004298:	f362 1307 	bfi	r3, r2, #4, #4
 800429c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800429e:	f107 0208 	add.w	r2, r7, #8
 80042a2:	2301      	movs	r3, #1
 80042a4:	2110      	movs	r1, #16
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ff6a 	bl	8004180 <lsm6dsm_write_reg>
 80042ac:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <lsm6dsm_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsm_odr_xl_t *val)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80042c2:	f107 0208 	add.w	r2, r7, #8
 80042c6:	2301      	movs	r3, #1
 80042c8:	2110      	movs	r1, #16
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff40 	bl	8004150 <lsm6dsm_read_reg>
 80042d0:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 80042d2:	7a3b      	ldrb	r3, [r7, #8]
 80042d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b0b      	cmp	r3, #11
 80042dc:	d84a      	bhi.n	8004374 <lsm6dsm_xl_data_rate_get+0xbc>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <lsm6dsm_xl_data_rate_get+0x2c>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004315 	.word	0x08004315
 80042e8:	0800431d 	.word	0x0800431d
 80042ec:	08004325 	.word	0x08004325
 80042f0:	0800432d 	.word	0x0800432d
 80042f4:	08004335 	.word	0x08004335
 80042f8:	0800433d 	.word	0x0800433d
 80042fc:	08004345 	.word	0x08004345
 8004300:	0800434d 	.word	0x0800434d
 8004304:	08004355 	.word	0x08004355
 8004308:	0800435d 	.word	0x0800435d
 800430c:	08004365 	.word	0x08004365
 8004310:	0800436d 	.word	0x0800436d
    case LSM6DSM_XL_ODR_OFF:
      *val = LSM6DSM_XL_ODR_OFF;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
      break;
 800431a:	e02f      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_12Hz5:
      *val = LSM6DSM_XL_ODR_12Hz5;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
      break;
 8004322:	e02b      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_26Hz:
      *val = LSM6DSM_XL_ODR_26Hz;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2202      	movs	r2, #2
 8004328:	701a      	strb	r2, [r3, #0]
      break;
 800432a:	e027      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_52Hz:
      *val = LSM6DSM_XL_ODR_52Hz;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2203      	movs	r2, #3
 8004330:	701a      	strb	r2, [r3, #0]
      break;
 8004332:	e023      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_104Hz:
      *val = LSM6DSM_XL_ODR_104Hz;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2204      	movs	r2, #4
 8004338:	701a      	strb	r2, [r3, #0]
      break;
 800433a:	e01f      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_208Hz:
      *val = LSM6DSM_XL_ODR_208Hz;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2205      	movs	r2, #5
 8004340:	701a      	strb	r2, [r3, #0]
      break;
 8004342:	e01b      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_416Hz:
      *val = LSM6DSM_XL_ODR_416Hz;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2206      	movs	r2, #6
 8004348:	701a      	strb	r2, [r3, #0]
      break;
 800434a:	e017      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_833Hz:
      *val = LSM6DSM_XL_ODR_833Hz;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2207      	movs	r2, #7
 8004350:	701a      	strb	r2, [r3, #0]
      break;
 8004352:	e013      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_1k66Hz:
      *val = LSM6DSM_XL_ODR_1k66Hz;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2208      	movs	r2, #8
 8004358:	701a      	strb	r2, [r3, #0]
      break;
 800435a:	e00f      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_3k33Hz:
      *val = LSM6DSM_XL_ODR_3k33Hz;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2209      	movs	r2, #9
 8004360:	701a      	strb	r2, [r3, #0]
      break;
 8004362:	e00b      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_6k66Hz:
      *val = LSM6DSM_XL_ODR_6k66Hz;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	220a      	movs	r2, #10
 8004368:	701a      	strb	r2, [r3, #0]
      break;
 800436a:	e007      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    case LSM6DSM_XL_ODR_1Hz6:
      *val = LSM6DSM_XL_ODR_1Hz6;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	220b      	movs	r2, #11
 8004370:	701a      	strb	r2, [r3, #0]
      break;
 8004372:	e003      	b.n	800437c <lsm6dsm_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSM_XL_ODR_OFF;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
      break;
 800437a:	bf00      	nop
  }

  return ret;
 800437c:	68fb      	ldr	r3, [r7, #12]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop

08004388 <lsm6dsm_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsm_fs_g_t val)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004394:	f107 0208 	add.w	r2, r7, #8
 8004398:	2301      	movs	r3, #1
 800439a:	2111      	movs	r1, #17
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fed7 	bl	8004150 <lsm6dsm_read_reg>
 80043a2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10f      	bne.n	80043ca <lsm6dsm_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	7a3b      	ldrb	r3, [r7, #8]
 80043b4:	f362 0343 	bfi	r3, r2, #1, #3
 80043b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80043ba:	f107 0208 	add.w	r2, r7, #8
 80043be:	2301      	movs	r3, #1
 80043c0:	2111      	movs	r1, #17
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fedc 	bl	8004180 <lsm6dsm_write_reg>
 80043c8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80043ca:	68fb      	ldr	r3, [r7, #12]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <lsm6dsm_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsm_fs_g_t *val)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80043de:	f107 0208 	add.w	r2, r7, #8
 80043e2:	2301      	movs	r3, #1
 80043e4:	2111      	movs	r1, #17
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff feb2 	bl	8004150 <lsm6dsm_read_reg>
 80043ec:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 80043ee:	7a3b      	ldrb	r3, [r7, #8]
 80043f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d824      	bhi.n	8004444 <lsm6dsm_gy_full_scale_get+0x70>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <lsm6dsm_gy_full_scale_get+0x2c>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004445 	.word	0x08004445
 8004410:	08004435 	.word	0x08004435
 8004414:	08004445 	.word	0x08004445
 8004418:	0800443d 	.word	0x0800443d
    case LSM6DSM_250dps:
      *val = LSM6DSM_250dps;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
      break;
 8004422:	e013      	b.n	800444c <lsm6dsm_gy_full_scale_get+0x78>
    case LSM6DSM_125dps:
      *val = LSM6DSM_125dps;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
      break;
 800442a:	e00f      	b.n	800444c <lsm6dsm_gy_full_scale_get+0x78>
    case LSM6DSM_500dps:
      *val = LSM6DSM_500dps;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2202      	movs	r2, #2
 8004430:	701a      	strb	r2, [r3, #0]
      break;
 8004432:	e00b      	b.n	800444c <lsm6dsm_gy_full_scale_get+0x78>
    case LSM6DSM_1000dps:
      *val = LSM6DSM_1000dps;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2204      	movs	r2, #4
 8004438:	701a      	strb	r2, [r3, #0]
      break;
 800443a:	e007      	b.n	800444c <lsm6dsm_gy_full_scale_get+0x78>
    case LSM6DSM_2000dps:
      *val = LSM6DSM_2000dps;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2206      	movs	r2, #6
 8004440:	701a      	strb	r2, [r3, #0]
      break;
 8004442:	e003      	b.n	800444c <lsm6dsm_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSM_250dps;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
      break;
 800444a:	bf00      	nop
  }

  return ret;
 800444c:	68fb      	ldr	r3, [r7, #12]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop

08004458 <lsm6dsm_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsm_odr_g_t val)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004464:	f107 0208 	add.w	r2, r7, #8
 8004468:	2301      	movs	r3, #1
 800446a:	2111      	movs	r1, #17
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fe6f 	bl	8004150 <lsm6dsm_read_reg>
 8004472:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <lsm6dsm_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	b2da      	uxtb	r2, r3
 8004482:	7a3b      	ldrb	r3, [r7, #8]
 8004484:	f362 1307 	bfi	r3, r2, #4, #4
 8004488:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800448a:	f107 0208 	add.w	r2, r7, #8
 800448e:	2301      	movs	r3, #1
 8004490:	2111      	movs	r1, #17
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fe74 	bl	8004180 <lsm6dsm_write_reg>
 8004498:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <lsm6dsm_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsm_odr_g_t *val)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80044ae:	f107 0208 	add.w	r2, r7, #8
 80044b2:	2301      	movs	r3, #1
 80044b4:	2111      	movs	r1, #17
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fe4a 	bl	8004150 <lsm6dsm_read_reg>
 80044bc:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 80044be:	7a3b      	ldrb	r3, [r7, #8]
 80044c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b0a      	cmp	r3, #10
 80044c8:	d844      	bhi.n	8004554 <lsm6dsm_gy_data_rate_get+0xb0>
 80044ca:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <lsm6dsm_gy_data_rate_get+0x2c>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	080044fd 	.word	0x080044fd
 80044d4:	08004505 	.word	0x08004505
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	08004515 	.word	0x08004515
 80044e0:	0800451d 	.word	0x0800451d
 80044e4:	08004525 	.word	0x08004525
 80044e8:	0800452d 	.word	0x0800452d
 80044ec:	08004535 	.word	0x08004535
 80044f0:	0800453d 	.word	0x0800453d
 80044f4:	08004545 	.word	0x08004545
 80044f8:	0800454d 	.word	0x0800454d
    case LSM6DSM_GY_ODR_OFF:
      *val = LSM6DSM_GY_ODR_OFF;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
      break;
 8004502:	e02b      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_12Hz5:
      *val = LSM6DSM_GY_ODR_12Hz5;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
      break;
 800450a:	e027      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_26Hz:
      *val = LSM6DSM_GY_ODR_26Hz;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2202      	movs	r2, #2
 8004510:	701a      	strb	r2, [r3, #0]
      break;
 8004512:	e023      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_52Hz:
      *val = LSM6DSM_GY_ODR_52Hz;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2203      	movs	r2, #3
 8004518:	701a      	strb	r2, [r3, #0]
      break;
 800451a:	e01f      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_104Hz:
      *val = LSM6DSM_GY_ODR_104Hz;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2204      	movs	r2, #4
 8004520:	701a      	strb	r2, [r3, #0]
      break;
 8004522:	e01b      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_208Hz:
      *val = LSM6DSM_GY_ODR_208Hz;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2205      	movs	r2, #5
 8004528:	701a      	strb	r2, [r3, #0]
      break;
 800452a:	e017      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_416Hz:
      *val = LSM6DSM_GY_ODR_416Hz;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2206      	movs	r2, #6
 8004530:	701a      	strb	r2, [r3, #0]
      break;
 8004532:	e013      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_833Hz:
      *val = LSM6DSM_GY_ODR_833Hz;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2207      	movs	r2, #7
 8004538:	701a      	strb	r2, [r3, #0]
      break;
 800453a:	e00f      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_1k66Hz:
      *val = LSM6DSM_GY_ODR_1k66Hz;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2208      	movs	r2, #8
 8004540:	701a      	strb	r2, [r3, #0]
      break;
 8004542:	e00b      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_3k33Hz:
      *val = LSM6DSM_GY_ODR_3k33Hz;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2209      	movs	r2, #9
 8004548:	701a      	strb	r2, [r3, #0]
      break;
 800454a:	e007      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    case LSM6DSM_GY_ODR_6k66Hz:
      *val = LSM6DSM_GY_ODR_6k66Hz;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	220a      	movs	r2, #10
 8004550:	701a      	strb	r2, [r3, #0]
      break;
 8004552:	e003      	b.n	800455c <lsm6dsm_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSM_GY_ODR_OFF;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
      break;
 800455a:	bf00      	nop
  }

  return ret;
 800455c:	68fb      	ldr	r3, [r7, #12]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop

08004568 <lsm6dsm_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004574:	f107 0208 	add.w	r2, r7, #8
 8004578:	2301      	movs	r3, #1
 800457a:	2112      	movs	r1, #18
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fde7 	bl	8004150 <lsm6dsm_read_reg>
 8004582:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <lsm6dsm_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	b2da      	uxtb	r2, r3
 8004592:	7a3b      	ldrb	r3, [r7, #8]
 8004594:	f362 1386 	bfi	r3, r2, #6, #1
 8004598:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800459a:	f107 0208 	add.w	r2, r7, #8
 800459e:	2301      	movs	r3, #1
 80045a0:	2112      	movs	r1, #18
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fdec 	bl	8004180 <lsm6dsm_write_reg>
 80045a8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80045aa:	68fb      	ldr	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <lsm6dsm_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUTX_L_G, buff, 6);
 80045be:	2306      	movs	r3, #6
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	2122      	movs	r1, #34	; 0x22
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fdc3 	bl	8004150 <lsm6dsm_read_reg>
 80045ca:	60f8      	str	r0, [r7, #12]
  return ret;
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <lsm6dsm_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUTX_L_XL, buff, 6);
 80045e0:	2306      	movs	r3, #6
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	2128      	movs	r1, #40	; 0x28
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fdb2 	bl	8004150 <lsm6dsm_read_reg>
 80045ec:	60f8      	str	r0, [r7, #12]
  return ret;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <lsm6dsm_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsm_read_reg(ctx, LSM6DSM_WHO_AM_I, buff, 1);
 8004602:	2301      	movs	r3, #1
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	210f      	movs	r1, #15
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fda1 	bl	8004150 <lsm6dsm_read_reg>
 800460e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004610:	68fb      	ldr	r3, [r7, #12]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <lsm6dsm_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004626:	f107 0208 	add.w	r2, r7, #8
 800462a:	2301      	movs	r3, #1
 800462c:	2112      	movs	r1, #18
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fd8e 	bl	8004150 <lsm6dsm_read_reg>
 8004634:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10f      	bne.n	800465c <lsm6dsm_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	b2da      	uxtb	r2, r3
 8004644:	7a3b      	ldrb	r3, [r7, #8]
 8004646:	f362 0382 	bfi	r3, r2, #2, #1
 800464a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800464c:	f107 0208 	add.w	r2, r7, #8
 8004650:	2301      	movs	r3, #1
 8004652:	2112      	movs	r1, #18
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff fd93 	bl	8004180 <lsm6dsm_write_reg>
 800465a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800465c:	68fb      	ldr	r3, [r7, #12]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <lsm6dsm_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsm_int1_route_t val)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08a      	sub	sp, #40	; 0x28
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  lsm6dsm_md2_cfg_t md2_cfg;
  lsm6dsm_ctrl4_c_t ctrl4_c;
  lsm6dsm_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8004670:	f107 021c 	add.w	r2, r7, #28
 8004674:	2301      	movs	r3, #1
 8004676:	210d      	movs	r1, #13
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fd69 	bl	8004150 <lsm6dsm_read_reg>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	2b00      	cmp	r3, #0
 8004684:	d147      	bne.n	8004716 <lsm6dsm_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8004686:	783b      	ldrb	r3, [r7, #0]
 8004688:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	7f3b      	ldrb	r3, [r7, #28]
 8004690:	f362 0300 	bfi	r3, r2, #0, #1
 8004694:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8004696:	783b      	ldrb	r3, [r7, #0]
 8004698:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800469c:	b2da      	uxtb	r2, r3
 800469e:	7f3b      	ldrb	r3, [r7, #28]
 80046a0:	f362 0341 	bfi	r3, r2, #1, #1
 80046a4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80046a6:	783b      	ldrb	r3, [r7, #0]
 80046a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	7f3b      	ldrb	r3, [r7, #28]
 80046b0:	f362 0382 	bfi	r3, r2, #2, #1
 80046b4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80046b6:	783b      	ldrb	r3, [r7, #0]
 80046b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	7f3b      	ldrb	r3, [r7, #28]
 80046c0:	f362 03c3 	bfi	r3, r2, #3, #1
 80046c4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80046c6:	783b      	ldrb	r3, [r7, #0]
 80046c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	7f3b      	ldrb	r3, [r7, #28]
 80046d0:	f362 1304 	bfi	r3, r2, #4, #1
 80046d4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80046d6:	783b      	ldrb	r3, [r7, #0]
 80046d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	7f3b      	ldrb	r3, [r7, #28]
 80046e0:	f362 1345 	bfi	r3, r2, #5, #1
 80046e4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80046e6:	783b      	ldrb	r3, [r7, #0]
 80046e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	7f3b      	ldrb	r3, [r7, #28]
 80046f0:	f362 1386 	bfi	r3, r2, #6, #1
 80046f4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80046f6:	783b      	ldrb	r3, [r7, #0]
 80046f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	7f3b      	ldrb	r3, [r7, #28]
 8004700:	f362 13c7 	bfi	r3, r2, #7, #1
 8004704:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8004706:	f107 021c 	add.w	r2, r7, #28
 800470a:	2301      	movs	r3, #1
 800470c:	210d      	movs	r1, #13
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fd36 	bl	8004180 <lsm6dsm_write_reg>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <lsm6dsm_pin_int1_route_set+0xc6>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800471c:	f107 0218 	add.w	r2, r7, #24
 8004720:	2301      	movs	r3, #1
 8004722:	215e      	movs	r1, #94	; 0x5e
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fd13 	bl	8004150 <lsm6dsm_read_reg>
 800472a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d107      	bne.n	8004742 <lsm6dsm_pin_int1_route_set+0xdc>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8004732:	f107 0214 	add.w	r2, r7, #20
 8004736:	2301      	movs	r3, #1
 8004738:	215f      	movs	r1, #95	; 0x5f
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fd08 	bl	8004150 <lsm6dsm_read_reg>
 8004740:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	d147      	bne.n	80047d8 <lsm6dsm_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 8004748:	787b      	ldrb	r3, [r7, #1]
 800474a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800474e:	b2da      	uxtb	r2, r3
 8004750:	7e3b      	ldrb	r3, [r7, #24]
 8004752:	f362 0300 	bfi	r3, r2, #0, #1
 8004756:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 8004758:	787b      	ldrb	r3, [r7, #1]
 800475a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800475e:	b2da      	uxtb	r2, r3
 8004760:	7e3b      	ldrb	r3, [r7, #24]
 8004762:	f362 0341 	bfi	r3, r2, #1, #1
 8004766:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 8004768:	787b      	ldrb	r3, [r7, #1]
 800476a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800476e:	b2da      	uxtb	r2, r3
 8004770:	7e3b      	ldrb	r3, [r7, #24]
 8004772:	f362 0382 	bfi	r3, r2, #2, #1
 8004776:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 8004778:	787b      	ldrb	r3, [r7, #1]
 800477a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800477e:	b2da      	uxtb	r2, r3
 8004780:	7e3b      	ldrb	r3, [r7, #24]
 8004782:	f362 03c3 	bfi	r3, r2, #3, #1
 8004786:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 8004788:	787b      	ldrb	r3, [r7, #1]
 800478a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	7e3b      	ldrb	r3, [r7, #24]
 8004792:	f362 1304 	bfi	r3, r2, #4, #1
 8004796:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 8004798:	787b      	ldrb	r3, [r7, #1]
 800479a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	7e3b      	ldrb	r3, [r7, #24]
 80047a2:	f362 1345 	bfi	r3, r2, #5, #1
 80047a6:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 80047a8:	787b      	ldrb	r3, [r7, #1]
 80047aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	7e3b      	ldrb	r3, [r7, #24]
 80047b2:	f362 1386 	bfi	r3, r2, #6, #1
 80047b6:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 80047b8:	787b      	ldrb	r3, [r7, #1]
 80047ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	7e3b      	ldrb	r3, [r7, #24]
 80047c2:	f362 13c7 	bfi	r3, r2, #7, #1
 80047c6:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsm_write_reg(ctx, LSM6DSM_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 80047c8:	f107 0218 	add.w	r2, r7, #24
 80047cc:	2301      	movs	r3, #1
 80047ce:	215e      	movs	r1, #94	; 0x5e
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff fcd5 	bl	8004180 <lsm6dsm_write_reg>
 80047d6:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d107      	bne.n	80047ee <lsm6dsm_pin_int1_route_set+0x188>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80047de:	f107 0210 	add.w	r2, r7, #16
 80047e2:	2301      	movs	r3, #1
 80047e4:	2113      	movs	r1, #19
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fcb2 	bl	8004150 <lsm6dsm_read_reg>
 80047ec:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10f      	bne.n	8004814 <lsm6dsm_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80047f4:	78bb      	ldrb	r3, [r7, #2]
 80047f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	7c3b      	ldrb	r3, [r7, #16]
 80047fe:	f362 1304 	bfi	r3, r2, #4, #1
 8004802:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8004804:	f107 0210 	add.w	r2, r7, #16
 8004808:	2301      	movs	r3, #1
 800480a:	2113      	movs	r1, #19
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fcb7 	bl	8004180 <lsm6dsm_write_reg>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d107      	bne.n	800482a <lsm6dsm_pin_int1_route_set+0x1c4>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_MASTER_CONFIG,
 800481a:	f107 0220 	add.w	r2, r7, #32
 800481e:	2301      	movs	r3, #1
 8004820:	211a      	movs	r1, #26
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fc94 	bl	8004150 <lsm6dsm_read_reg>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	2b00      	cmp	r3, #0
 800482e:	d111      	bne.n	8004854 <lsm6dsm_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 8004830:	78bb      	ldrb	r3, [r7, #2]
 8004832:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004836:	b2da      	uxtb	r2, r3
 8004838:	f897 3020 	ldrb.w	r3, [r7, #32]
 800483c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004840:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsm_write_reg(ctx, LSM6DSM_MASTER_CONFIG,
 8004844:	f107 0220 	add.w	r2, r7, #32
 8004848:	2301      	movs	r3, #1
 800484a:	211a      	movs	r1, #26
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff fc97 	bl	8004180 <lsm6dsm_write_reg>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	2b00      	cmp	r3, #0
 8004858:	d158      	bne.n	800490c <lsm6dsm_pin_int1_route_set+0x2a6>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800485a:	f107 020c 	add.w	r2, r7, #12
 800485e:	2301      	movs	r3, #1
 8004860:	2158      	movs	r1, #88	; 0x58
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fc74 	bl	8004150 <lsm6dsm_read_reg>
 8004868:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 800486a:	787b      	ldrb	r3, [r7, #1]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d141      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8004876:	787b      	ldrb	r3, [r7, #1]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 800487e:	2b00      	cmp	r3, #0
 8004880:	d13b      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8004882:	787b      	ldrb	r3, [r7, #1]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800488a:	2b00      	cmp	r3, #0
 800488c:	d135      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 800488e:	787b      	ldrb	r3, [r7, #1]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d12f      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800489a:	787b      	ldrb	r3, [r7, #1]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d129      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 80048a6:	787b      	ldrb	r3, [r7, #1]
 80048a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048ac:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d123      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 80048b2:	7d3b      	ldrb	r3, [r7, #20]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d11d      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 80048be:	7d3b      	ldrb	r3, [r7, #20]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d117      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 80048ca:	7d3b      	ldrb	r3, [r7, #20]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d111      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 80048d6:	7d3b      	ldrb	r3, [r7, #20]
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80048e2:	7d3b      	ldrb	r3, [r7, #20]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <lsm6dsm_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 80048ee:	7d3b      	ldrb	r3, [r7, #20]
 80048f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048f4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <lsm6dsm_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80048fa:	7b3b      	ldrb	r3, [r7, #12]
 80048fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004900:	733b      	strb	r3, [r7, #12]
 8004902:	e003      	b.n	800490c <lsm6dsm_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8004904:	7b3b      	ldrb	r3, [r7, #12]
 8004906:	f36f 13c7 	bfc	r3, #7, #1
 800490a:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <lsm6dsm_pin_int1_route_set+0x2bc>
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8004912:	f107 020c 	add.w	r2, r7, #12
 8004916:	2301      	movs	r3, #1
 8004918:	2158      	movs	r1, #88	; 0x58
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fc30 	bl	8004180 <lsm6dsm_write_reg>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004924:	4618      	mov	r0, r3
 8004926:	3728      	adds	r7, #40	; 0x28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <lsm6dsm_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsm_int1_route_t *val)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  lsm6dsm_md1_cfg_t md1_cfg;
  lsm6dsm_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8004936:	f107 0214 	add.w	r2, r7, #20
 800493a:	2301      	movs	r3, #1
 800493c:	210d      	movs	r1, #13
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fc06 	bl	8004150 <lsm6dsm_read_reg>
 8004944:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 80c0 	bne.w	8004ace <lsm6dsm_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 800494e:	7d3b      	ldrb	r3, [r7, #20]
 8004950:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004954:	b2d9      	uxtb	r1, r3
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	7813      	ldrb	r3, [r2, #0]
 800495a:	f361 0300 	bfi	r3, r1, #0, #1
 800495e:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8004960:	7d3b      	ldrb	r3, [r7, #20]
 8004962:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004966:	b2d9      	uxtb	r1, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	7813      	ldrb	r3, [r2, #0]
 800496c:	f361 0341 	bfi	r3, r1, #1, #1
 8004970:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8004972:	7d3b      	ldrb	r3, [r7, #20]
 8004974:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004978:	b2d9      	uxtb	r1, r3
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	7813      	ldrb	r3, [r2, #0]
 800497e:	f361 0382 	bfi	r3, r1, #2, #1
 8004982:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8004984:	7d3b      	ldrb	r3, [r7, #20]
 8004986:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800498a:	b2d9      	uxtb	r1, r3
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	7813      	ldrb	r3, [r2, #0]
 8004990:	f361 03c3 	bfi	r3, r1, #3, #1
 8004994:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8004996:	7d3b      	ldrb	r3, [r7, #20]
 8004998:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800499c:	b2d9      	uxtb	r1, r3
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	7813      	ldrb	r3, [r2, #0]
 80049a2:	f361 1304 	bfi	r3, r1, #4, #1
 80049a6:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 80049a8:	7d3b      	ldrb	r3, [r7, #20]
 80049aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80049ae:	b2d9      	uxtb	r1, r3
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	7813      	ldrb	r3, [r2, #0]
 80049b4:	f361 1345 	bfi	r3, r1, #5, #1
 80049b8:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 80049ba:	7d3b      	ldrb	r3, [r7, #20]
 80049bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80049c0:	b2d9      	uxtb	r1, r3
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	7813      	ldrb	r3, [r2, #0]
 80049c6:	f361 1386 	bfi	r3, r1, #6, #1
 80049ca:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 80049cc:	7d3b      	ldrb	r3, [r7, #20]
 80049ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049d2:	b2d9      	uxtb	r1, r3
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	7813      	ldrb	r3, [r2, #0]
 80049d8:	f361 13c7 	bfi	r3, r1, #7, #1
 80049dc:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsm_read_reg(ctx, LSM6DSM_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 80049de:	f107 0210 	add.w	r2, r7, #16
 80049e2:	2301      	movs	r3, #1
 80049e4:	215e      	movs	r1, #94	; 0x5e
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fbb2 	bl	8004150 <lsm6dsm_read_reg>
 80049ec:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d16c      	bne.n	8004ace <lsm6dsm_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 80049f4:	7c3b      	ldrb	r3, [r7, #16]
 80049f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049fa:	b2d9      	uxtb	r1, r3
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	7853      	ldrb	r3, [r2, #1]
 8004a00:	f361 0300 	bfi	r3, r1, #0, #1
 8004a04:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 8004a06:	7c3b      	ldrb	r3, [r7, #16]
 8004a08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004a0c:	b2d9      	uxtb	r1, r3
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	7853      	ldrb	r3, [r2, #1]
 8004a12:	f361 0341 	bfi	r3, r1, #1, #1
 8004a16:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 8004a18:	7c3b      	ldrb	r3, [r7, #16]
 8004a1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004a1e:	b2d9      	uxtb	r1, r3
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	7853      	ldrb	r3, [r2, #1]
 8004a24:	f361 0382 	bfi	r3, r1, #2, #1
 8004a28:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 8004a2a:	7c3b      	ldrb	r3, [r7, #16]
 8004a2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004a30:	b2d9      	uxtb	r1, r3
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	7853      	ldrb	r3, [r2, #1]
 8004a36:	f361 03c3 	bfi	r3, r1, #3, #1
 8004a3a:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 8004a3c:	7c3b      	ldrb	r3, [r7, #16]
 8004a3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a42:	b2d9      	uxtb	r1, r3
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	7853      	ldrb	r3, [r2, #1]
 8004a48:	f361 1304 	bfi	r3, r1, #4, #1
 8004a4c:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 8004a4e:	7c3b      	ldrb	r3, [r7, #16]
 8004a50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004a54:	b2d9      	uxtb	r1, r3
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	7853      	ldrb	r3, [r2, #1]
 8004a5a:	f361 1345 	bfi	r3, r1, #5, #1
 8004a5e:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 8004a60:	7c3b      	ldrb	r3, [r7, #16]
 8004a62:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a66:	b2d9      	uxtb	r1, r3
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	7853      	ldrb	r3, [r2, #1]
 8004a6c:	f361 1386 	bfi	r3, r1, #6, #1
 8004a70:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 8004a72:	7c3b      	ldrb	r3, [r7, #16]
 8004a74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a78:	b2d9      	uxtb	r1, r3
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	7853      	ldrb	r3, [r2, #1]
 8004a7e:	f361 13c7 	bfi	r3, r1, #7, #1
 8004a82:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8004a84:	f107 020c 	add.w	r2, r7, #12
 8004a88:	2301      	movs	r3, #1
 8004a8a:	2113      	movs	r1, #19
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff fb5f 	bl	8004150 <lsm6dsm_read_reg>
 8004a92:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d119      	bne.n	8004ace <lsm6dsm_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8004a9a:	7b3b      	ldrb	r3, [r7, #12]
 8004a9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004aa0:	b2d9      	uxtb	r1, r3
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	7893      	ldrb	r3, [r2, #2]
 8004aa6:	f361 0300 	bfi	r3, r1, #0, #1
 8004aaa:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsm_read_reg(ctx, LSM6DSM_MASTER_CONFIG,
 8004aac:	f107 0218 	add.w	r2, r7, #24
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	211a      	movs	r1, #26
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fb4b 	bl	8004150 <lsm6dsm_read_reg>
 8004aba:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8004abc:	7e3b      	ldrb	r3, [r7, #24]
 8004abe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ac2:	b2d9      	uxtb	r1, r3
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	7893      	ldrb	r3, [r2, #2]
 8004ac8:	f361 0300 	bfi	r3, r1, #0, #1
 8004acc:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 8004ace:	69fb      	ldr	r3, [r7, #28]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <lsm6dsm_pin_int2_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsm_int2_route_t val)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  lsm6dsm_drdy_pulse_cfg_t drdy_pulse_cfg;
  lsm6dsm_tap_cfg_t tap_cfg;
  int32_t ret;


  ret = lsm6dsm_read_reg(ctx, LSM6DSM_INT2_CTRL, (uint8_t*)&int2_ctrl, 1);
 8004ae2:	f107 0218 	add.w	r2, r7, #24
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	210e      	movs	r1, #14
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fb30 	bl	8004150 <lsm6dsm_read_reg>
 8004af0:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d147      	bne.n	8004b88 <lsm6dsm_pin_int2_route_set+0xb0>
    int2_ctrl.int2_drdy_xl        = val.int2_drdy_xl;
 8004af8:	783b      	ldrb	r3, [r7, #0]
 8004afa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	7e3b      	ldrb	r3, [r7, #24]
 8004b02:	f362 0300 	bfi	r3, r2, #0, #1
 8004b06:	763b      	strb	r3, [r7, #24]
    int2_ctrl.int2_drdy_g         = val.int2_drdy_g;
 8004b08:	783b      	ldrb	r3, [r7, #0]
 8004b0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	7e3b      	ldrb	r3, [r7, #24]
 8004b12:	f362 0341 	bfi	r3, r2, #1, #1
 8004b16:	763b      	strb	r3, [r7, #24]
    int2_ctrl.int2_drdy_temp      = val.int2_drdy_temp;
 8004b18:	783b      	ldrb	r3, [r7, #0]
 8004b1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	7e3b      	ldrb	r3, [r7, #24]
 8004b22:	f362 0382 	bfi	r3, r2, #2, #1
 8004b26:	763b      	strb	r3, [r7, #24]
    int2_ctrl.int2_fth            = val.int2_fth;
 8004b28:	783b      	ldrb	r3, [r7, #0]
 8004b2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	7e3b      	ldrb	r3, [r7, #24]
 8004b32:	f362 03c3 	bfi	r3, r2, #3, #1
 8004b36:	763b      	strb	r3, [r7, #24]
    int2_ctrl.int2_fifo_ovr       = val.int2_fifo_ovr;
 8004b38:	783b      	ldrb	r3, [r7, #0]
 8004b3a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	7e3b      	ldrb	r3, [r7, #24]
 8004b42:	f362 1304 	bfi	r3, r2, #4, #1
 8004b46:	763b      	strb	r3, [r7, #24]
    int2_ctrl.int2_full_flag      = val.int2_full_flag;
 8004b48:	783b      	ldrb	r3, [r7, #0]
 8004b4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	7e3b      	ldrb	r3, [r7, #24]
 8004b52:	f362 1345 	bfi	r3, r2, #5, #1
 8004b56:	763b      	strb	r3, [r7, #24]
    int2_ctrl.int2_step_count_ov  = val.int2_step_count_ov;
 8004b58:	783b      	ldrb	r3, [r7, #0]
 8004b5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	7e3b      	ldrb	r3, [r7, #24]
 8004b62:	f362 1386 	bfi	r3, r2, #6, #1
 8004b66:	763b      	strb	r3, [r7, #24]
    int2_ctrl.int2_step_delta     = val.int2_step_delta;
 8004b68:	783b      	ldrb	r3, [r7, #0]
 8004b6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	7e3b      	ldrb	r3, [r7, #24]
 8004b72:	f362 13c7 	bfi	r3, r2, #7, #1
 8004b76:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_INT2_CTRL, (uint8_t*)&int2_ctrl, 1);
 8004b78:	f107 0218 	add.w	r2, r7, #24
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	210e      	movs	r1, #14
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fafd 	bl	8004180 <lsm6dsm_write_reg>
 8004b86:	61f8      	str	r0, [r7, #28]
  }
  if(ret == 0){
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d107      	bne.n	8004b9e <lsm6dsm_pin_int2_route_set+0xc6>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8004b8e:	f107 0214 	add.w	r2, r7, #20
 8004b92:	2301      	movs	r3, #1
 8004b94:	215e      	movs	r1, #94	; 0x5e
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fada 	bl	8004150 <lsm6dsm_read_reg>
 8004b9c:	61f8      	str	r0, [r7, #28]
  }
  if(ret == 0){
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d107      	bne.n	8004bb4 <lsm6dsm_pin_int2_route_set+0xdc>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8004ba4:	f107 0210 	add.w	r2, r7, #16
 8004ba8:	2301      	movs	r3, #1
 8004baa:	215f      	movs	r1, #95	; 0x5f
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff facf 	bl	8004150 <lsm6dsm_read_reg>
 8004bb2:	61f8      	str	r0, [r7, #28]
  }
  if(ret == 0){
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d147      	bne.n	8004c4a <lsm6dsm_pin_int2_route_set+0x172>
    md2_cfg.int2_iron              = val.int2_iron;
 8004bba:	787b      	ldrb	r3, [r7, #1]
 8004bbc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	7c3b      	ldrb	r3, [r7, #16]
 8004bc4:	f362 0300 	bfi	r3, r2, #0, #1
 8004bc8:	743b      	strb	r3, [r7, #16]
    md2_cfg.int2_tilt              = val.int2_tilt;
 8004bca:	787b      	ldrb	r3, [r7, #1]
 8004bcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	7c3b      	ldrb	r3, [r7, #16]
 8004bd4:	f362 0341 	bfi	r3, r2, #1, #1
 8004bd8:	743b      	strb	r3, [r7, #16]
    md2_cfg.int2_6d                = val.int2_6d;
 8004bda:	787b      	ldrb	r3, [r7, #1]
 8004bdc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	7c3b      	ldrb	r3, [r7, #16]
 8004be4:	f362 0382 	bfi	r3, r2, #2, #1
 8004be8:	743b      	strb	r3, [r7, #16]
    md2_cfg.int2_double_tap        = val.int2_double_tap;
 8004bea:	787b      	ldrb	r3, [r7, #1]
 8004bec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	7c3b      	ldrb	r3, [r7, #16]
 8004bf4:	f362 03c3 	bfi	r3, r2, #3, #1
 8004bf8:	743b      	strb	r3, [r7, #16]
    md2_cfg.int2_ff                = val.int2_ff;
 8004bfa:	787b      	ldrb	r3, [r7, #1]
 8004bfc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	7c3b      	ldrb	r3, [r7, #16]
 8004c04:	f362 1304 	bfi	r3, r2, #4, #1
 8004c08:	743b      	strb	r3, [r7, #16]
    md2_cfg.int2_wu                = val.int2_wu;
 8004c0a:	787b      	ldrb	r3, [r7, #1]
 8004c0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	7c3b      	ldrb	r3, [r7, #16]
 8004c14:	f362 1345 	bfi	r3, r2, #5, #1
 8004c18:	743b      	strb	r3, [r7, #16]
    md2_cfg.int2_single_tap        = val.int2_single_tap;
 8004c1a:	787b      	ldrb	r3, [r7, #1]
 8004c1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	7c3b      	ldrb	r3, [r7, #16]
 8004c24:	f362 1386 	bfi	r3, r2, #6, #1
 8004c28:	743b      	strb	r3, [r7, #16]
    md2_cfg.int2_inact_state       = val.int2_inact_state;
 8004c2a:	787b      	ldrb	r3, [r7, #1]
 8004c2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	7c3b      	ldrb	r3, [r7, #16]
 8004c34:	f362 13c7 	bfi	r3, r2, #7, #1
 8004c38:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8004c3a:	f107 0210 	add.w	r2, r7, #16
 8004c3e:	2301      	movs	r3, #1
 8004c40:	215f      	movs	r1, #95	; 0x5f
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fa9c 	bl	8004180 <lsm6dsm_write_reg>
 8004c48:	61f8      	str	r0, [r7, #28]
  }
  if(ret == 0){
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d107      	bne.n	8004c60 <lsm6dsm_pin_int2_route_set+0x188>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_DRDY_PULSE_CFG,
 8004c50:	f107 020c 	add.w	r2, r7, #12
 8004c54:	2301      	movs	r3, #1
 8004c56:	210b      	movs	r1, #11
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff fa79 	bl	8004150 <lsm6dsm_read_reg>
 8004c5e:	61f8      	str	r0, [r7, #28]
                           (uint8_t*)&drdy_pulse_cfg, 1);
  }
  if(ret == 0){
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10f      	bne.n	8004c86 <lsm6dsm_pin_int2_route_set+0x1ae>
    drdy_pulse_cfg.int2_wrist_tilt = val.int2_wrist_tilt;
 8004c66:	78bb      	ldrb	r3, [r7, #2]
 8004c68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	7b3b      	ldrb	r3, [r7, #12]
 8004c70:	f362 0300 	bfi	r3, r2, #0, #1
 8004c74:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_DRDY_PULSE_CFG,
 8004c76:	f107 020c 	add.w	r2, r7, #12
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	210b      	movs	r1, #11
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fa7e 	bl	8004180 <lsm6dsm_write_reg>
 8004c84:	61f8      	str	r0, [r7, #28]
                            (uint8_t*)&drdy_pulse_cfg, 1);
  }
  if(ret == 0){
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d158      	bne.n	8004d3e <lsm6dsm_pin_int2_route_set+0x266>
    ret = lsm6dsm_read_reg(ctx, LSM6DSM_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8004c8c:	f107 0208 	add.w	r2, r7, #8
 8004c90:	2301      	movs	r3, #1
 8004c92:	2158      	movs	r1, #88	; 0x58
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fa5b 	bl	8004150 <lsm6dsm_read_reg>
 8004c9a:	61f8      	str	r0, [r7, #28]
    if ((md1_cfg.int1_6d != 0x00U) ||
 8004c9c:	7d3b      	ldrb	r3, [r7, #20]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d141      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (md1_cfg.int1_ff != 0x00U) ||
 8004ca8:	7d3b      	ldrb	r3, [r7, #20]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	b2db      	uxtb	r3, r3
    if ((md1_cfg.int1_6d != 0x00U) ||
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d13b      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (md1_cfg.int1_wu != 0x00U) ||
 8004cb4:	7d3b      	ldrb	r3, [r7, #20]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	b2db      	uxtb	r3, r3
        (md1_cfg.int1_ff != 0x00U) ||
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d135      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (md1_cfg.int1_single_tap != 0x00U) ||
 8004cc0:	7d3b      	ldrb	r3, [r7, #20]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	b2db      	uxtb	r3, r3
        (md1_cfg.int1_wu != 0x00U) ||
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d12f      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (md1_cfg.int1_double_tap != 0x00U) ||
 8004ccc:	7d3b      	ldrb	r3, [r7, #20]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	b2db      	uxtb	r3, r3
        (md1_cfg.int1_single_tap != 0x00U) ||
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d129      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (md1_cfg.int1_inact_state != 0x00U) ||
 8004cd8:	7d3b      	ldrb	r3, [r7, #20]
 8004cda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cde:	b2db      	uxtb	r3, r3
        (md1_cfg.int1_double_tap != 0x00U) ||
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d123      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (val.int2_6d != 0x00U) ||
 8004ce4:	787b      	ldrb	r3, [r7, #1]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	b2db      	uxtb	r3, r3
        (md1_cfg.int1_inact_state != 0x00U) ||
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d11d      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (val.int2_ff != 0x00U) ||
 8004cf0:	787b      	ldrb	r3, [r7, #1]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	b2db      	uxtb	r3, r3
        (val.int2_6d != 0x00U) ||
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d117      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (val.int2_wu != 0x00U) ||
 8004cfc:	787b      	ldrb	r3, [r7, #1]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	b2db      	uxtb	r3, r3
        (val.int2_ff != 0x00U) ||
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d111      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (val.int2_single_tap != 0x00U) ||
 8004d08:	787b      	ldrb	r3, [r7, #1]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	b2db      	uxtb	r3, r3
        (val.int2_wu != 0x00U) ||
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (val.int2_double_tap != 0x00U) ||
 8004d14:	787b      	ldrb	r3, [r7, #1]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	b2db      	uxtb	r3, r3
        (val.int2_single_tap != 0x00U) ||
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <lsm6dsm_pin_int2_route_set+0x254>
        (val.int2_inact_state!= 0x00U) ){
 8004d20:	787b      	ldrb	r3, [r7, #1]
 8004d22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d26:	b2db      	uxtb	r3, r3
        (val.int2_double_tap != 0x00U) ||
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <lsm6dsm_pin_int2_route_set+0x25e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8004d2c:	7a3b      	ldrb	r3, [r7, #8]
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d32:	723b      	strb	r3, [r7, #8]
 8004d34:	e003      	b.n	8004d3e <lsm6dsm_pin_int2_route_set+0x266>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8004d36:	7a3b      	ldrb	r3, [r7, #8]
 8004d38:	f36f 13c7 	bfc	r3, #7, #1
 8004d3c:	723b      	strb	r3, [r7, #8]
    }
  }
  if(ret == 0){
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <lsm6dsm_pin_int2_route_set+0x27c>
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8004d44:	f107 0208 	add.w	r2, r7, #8
 8004d48:	2301      	movs	r3, #1
 8004d4a:	2158      	movs	r1, #88	; 0x58
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fa17 	bl	8004180 <lsm6dsm_write_reg>
 8004d52:	61f8      	str	r0, [r7, #28]
  }
  return ret;
 8004d54:	69fb      	ldr	r3, [r7, #28]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <lsm6dsm_pin_int2_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_pin_int2_route_get(stmdev_ctx_t *ctx,
lsm6dsm_int2_route_t *val)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  lsm6dsm_md2_cfg_t md2_cfg;
  lsm6dsm_drdy_pulse_cfg_t drdy_pulse_cfg;

  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_INT2_CTRL, (uint8_t*)&int2_ctrl, 1);
 8004d68:	f107 0210 	add.w	r2, r7, #16
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	210e      	movs	r1, #14
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff f9ed 	bl	8004150 <lsm6dsm_read_reg>
 8004d76:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 80ac 	bne.w	8004ed8 <lsm6dsm_pin_int2_route_get+0x17a>
    val->int2_drdy_xl         = int2_ctrl.int2_drdy_xl;
 8004d80:	7c3b      	ldrb	r3, [r7, #16]
 8004d82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d86:	b2d9      	uxtb	r1, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	7813      	ldrb	r3, [r2, #0]
 8004d8c:	f361 0300 	bfi	r3, r1, #0, #1
 8004d90:	7013      	strb	r3, [r2, #0]
    val->int2_drdy_g          = int2_ctrl.int2_drdy_g;
 8004d92:	7c3b      	ldrb	r3, [r7, #16]
 8004d94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d98:	b2d9      	uxtb	r1, r3
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	7813      	ldrb	r3, [r2, #0]
 8004d9e:	f361 0341 	bfi	r3, r1, #1, #1
 8004da2:	7013      	strb	r3, [r2, #0]
    val->int2_drdy_temp       = int2_ctrl.int2_drdy_temp;
 8004da4:	7c3b      	ldrb	r3, [r7, #16]
 8004da6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004daa:	b2d9      	uxtb	r1, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	7813      	ldrb	r3, [r2, #0]
 8004db0:	f361 0382 	bfi	r3, r1, #2, #1
 8004db4:	7013      	strb	r3, [r2, #0]
    val->int2_fth             = int2_ctrl.int2_fth;
 8004db6:	7c3b      	ldrb	r3, [r7, #16]
 8004db8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004dbc:	b2d9      	uxtb	r1, r3
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	7813      	ldrb	r3, [r2, #0]
 8004dc2:	f361 03c3 	bfi	r3, r1, #3, #1
 8004dc6:	7013      	strb	r3, [r2, #0]
    val->int2_fifo_ovr        = int2_ctrl.int2_fifo_ovr;
 8004dc8:	7c3b      	ldrb	r3, [r7, #16]
 8004dca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dce:	b2d9      	uxtb	r1, r3
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	7813      	ldrb	r3, [r2, #0]
 8004dd4:	f361 1304 	bfi	r3, r1, #4, #1
 8004dd8:	7013      	strb	r3, [r2, #0]
    val->int2_full_flag       = int2_ctrl.int2_full_flag;
 8004dda:	7c3b      	ldrb	r3, [r7, #16]
 8004ddc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004de0:	b2d9      	uxtb	r1, r3
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	7813      	ldrb	r3, [r2, #0]
 8004de6:	f361 1345 	bfi	r3, r1, #5, #1
 8004dea:	7013      	strb	r3, [r2, #0]
    val->int2_step_count_ov   = int2_ctrl.int2_step_count_ov;
 8004dec:	7c3b      	ldrb	r3, [r7, #16]
 8004dee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004df2:	b2d9      	uxtb	r1, r3
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	7813      	ldrb	r3, [r2, #0]
 8004df8:	f361 1386 	bfi	r3, r1, #6, #1
 8004dfc:	7013      	strb	r3, [r2, #0]
    val->int2_step_delta      = int2_ctrl.int2_step_delta;
 8004dfe:	7c3b      	ldrb	r3, [r7, #16]
 8004e00:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e04:	b2d9      	uxtb	r1, r3
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	7813      	ldrb	r3, [r2, #0]
 8004e0a:	f361 13c7 	bfi	r3, r1, #7, #1
 8004e0e:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsm_read_reg(ctx, LSM6DSM_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8004e10:	f107 020c 	add.w	r2, r7, #12
 8004e14:	2301      	movs	r3, #1
 8004e16:	215f      	movs	r1, #95	; 0x5f
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff f999 	bl	8004150 <lsm6dsm_read_reg>
 8004e1e:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d158      	bne.n	8004ed8 <lsm6dsm_pin_int2_route_get+0x17a>
      val->int2_iron           = md2_cfg.int2_iron;
 8004e26:	7b3b      	ldrb	r3, [r7, #12]
 8004e28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e2c:	b2d9      	uxtb	r1, r3
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	7853      	ldrb	r3, [r2, #1]
 8004e32:	f361 0300 	bfi	r3, r1, #0, #1
 8004e36:	7053      	strb	r3, [r2, #1]
      val->int2_tilt           = md2_cfg.int2_tilt;
 8004e38:	7b3b      	ldrb	r3, [r7, #12]
 8004e3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e3e:	b2d9      	uxtb	r1, r3
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	7853      	ldrb	r3, [r2, #1]
 8004e44:	f361 0341 	bfi	r3, r1, #1, #1
 8004e48:	7053      	strb	r3, [r2, #1]
      val->int2_6d             = md2_cfg.int2_6d;
 8004e4a:	7b3b      	ldrb	r3, [r7, #12]
 8004e4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e50:	b2d9      	uxtb	r1, r3
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	7853      	ldrb	r3, [r2, #1]
 8004e56:	f361 0382 	bfi	r3, r1, #2, #1
 8004e5a:	7053      	strb	r3, [r2, #1]
      val->int2_double_tap     = md2_cfg.int2_double_tap;
 8004e5c:	7b3b      	ldrb	r3, [r7, #12]
 8004e5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e62:	b2d9      	uxtb	r1, r3
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	7853      	ldrb	r3, [r2, #1]
 8004e68:	f361 03c3 	bfi	r3, r1, #3, #1
 8004e6c:	7053      	strb	r3, [r2, #1]
      val->int2_ff             = md2_cfg.int2_ff;
 8004e6e:	7b3b      	ldrb	r3, [r7, #12]
 8004e70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e74:	b2d9      	uxtb	r1, r3
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	7853      	ldrb	r3, [r2, #1]
 8004e7a:	f361 1304 	bfi	r3, r1, #4, #1
 8004e7e:	7053      	strb	r3, [r2, #1]
      val->int2_wu             = md2_cfg.int2_wu;
 8004e80:	7b3b      	ldrb	r3, [r7, #12]
 8004e82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e86:	b2d9      	uxtb	r1, r3
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	7853      	ldrb	r3, [r2, #1]
 8004e8c:	f361 1345 	bfi	r3, r1, #5, #1
 8004e90:	7053      	strb	r3, [r2, #1]
      val->int2_single_tap     = md2_cfg.int2_single_tap;
 8004e92:	7b3b      	ldrb	r3, [r7, #12]
 8004e94:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e98:	b2d9      	uxtb	r1, r3
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	7853      	ldrb	r3, [r2, #1]
 8004e9e:	f361 1386 	bfi	r3, r1, #6, #1
 8004ea2:	7053      	strb	r3, [r2, #1]
      val->int2_inact_state    = md2_cfg.int2_inact_state;
 8004ea4:	7b3b      	ldrb	r3, [r7, #12]
 8004ea6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004eaa:	b2d9      	uxtb	r1, r3
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	7853      	ldrb	r3, [r2, #1]
 8004eb0:	f361 13c7 	bfi	r3, r1, #7, #1
 8004eb4:	7053      	strb	r3, [r2, #1]

      ret = lsm6dsm_read_reg(ctx, LSM6DSM_DRDY_PULSE_CFG,
 8004eb6:	f107 0208 	add.w	r2, r7, #8
 8004eba:	2301      	movs	r3, #1
 8004ebc:	210b      	movs	r1, #11
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff f946 	bl	8004150 <lsm6dsm_read_reg>
 8004ec4:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&drdy_pulse_cfg, 1);
      val->int2_wrist_tilt = drdy_pulse_cfg.int2_wrist_tilt;
 8004ec6:	7a3b      	ldrb	r3, [r7, #8]
 8004ec8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ecc:	b2d9      	uxtb	r1, r3
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	7893      	ldrb	r3, [r2, #2]
 8004ed2:	f361 0300 	bfi	r3, r1, #0, #1
 8004ed6:	7093      	strb	r3, [r2, #2]
    }
  }
  return ret;
 8004ed8:	697b      	ldr	r3, [r7, #20]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <lsm6dsm_wkup_threshold_set>:
  * @param  val    Change the values of wk_ths in reg WAKE_UP_THS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_wake_up_ths_t wake_up_ths;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_WAKE_UP_THS, (uint8_t*)&wake_up_ths, 1);
 8004eee:	f107 0208 	add.w	r2, r7, #8
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	215b      	movs	r1, #91	; 0x5b
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff f92a 	bl	8004150 <lsm6dsm_read_reg>
 8004efc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10f      	bne.n	8004f24 <lsm6dsm_wkup_threshold_set+0x42>
    wake_up_ths.wk_ths = val;
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	7a3b      	ldrb	r3, [r7, #8]
 8004f0e:	f362 0305 	bfi	r3, r2, #0, #6
 8004f12:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_WAKE_UP_THS,
 8004f14:	f107 0208 	add.w	r2, r7, #8
 8004f18:	2301      	movs	r3, #1
 8004f1a:	215b      	movs	r1, #91	; 0x5b
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff f92f 	bl	8004180 <lsm6dsm_write_reg>
 8004f22:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&wake_up_ths, 1);
  }
  return ret;
 8004f24:	68fb      	ldr	r3, [r7, #12]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <lsm6dsm_wkup_dur_set>:
  * @param  val    Change the values of wake_dur in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
 8004f3a:	f107 0208 	add.w	r2, r7, #8
 8004f3e:	2301      	movs	r3, #1
 8004f40:	215c      	movs	r1, #92	; 0x5c
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff f904 	bl	8004150 <lsm6dsm_read_reg>
 8004f48:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10f      	bne.n	8004f70 <lsm6dsm_wkup_dur_set+0x42>
    wake_up_dur.wake_dur = val;
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	7a3b      	ldrb	r3, [r7, #8]
 8004f5a:	f362 1346 	bfi	r3, r2, #5, #2
 8004f5e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_WAKE_UP_DUR,
 8004f60:	f107 0208 	add.w	r2, r7, #8
 8004f64:	2301      	movs	r3, #1
 8004f66:	215c      	movs	r1, #92	; 0x5c
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff f909 	bl	8004180 <lsm6dsm_write_reg>
 8004f6e:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&wake_up_dur, 1);
  }
  return ret;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <lsm6dsm_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsm_fifo_mode_t val)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004f86:	f107 0208 	add.w	r2, r7, #8
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	210a      	movs	r1, #10
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff f8de 	bl	8004150 <lsm6dsm_read_reg>
 8004f94:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10f      	bne.n	8004fbc <lsm6dsm_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	7a3b      	ldrb	r3, [r7, #8]
 8004fa6:	f362 0302 	bfi	r3, r2, #0, #3
 8004faa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004fac:	f107 0208 	add.w	r2, r7, #8
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	210a      	movs	r1, #10
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff f8e3 	bl	8004180 <lsm6dsm_write_reg>
 8004fba:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <ACCEL_MOTION_SENSOR_wakeup_Threshold>:
#endif



int32_t ACCEL_MOTION_SENSOR_wakeup_Threshold(uint8_t Threshold, uint8_t duration)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	460a      	mov	r2, r1
 8004fd2:	71fb      	strb	r3, [r7, #7]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71bb      	strb	r3, [r7, #6]

	int32_t resultado = LSM6DSM_ACC_Enable_Wake_Up_Detection(MotionCompObj[LSM6DSM_0], LSM6DSM_INT2_PIN);
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <ACCEL_MOTION_SENSOR_wakeup_Threshold+0x48>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fdae 	bl	8003b40 <LSM6DSM_ACC_Enable_Wake_Up_Detection>
 8004fe4:	6178      	str	r0, [r7, #20]

	int32_t resultado2 = LSM6DSM_ACC_Set_Wake_Up_Threshold(MotionCompObj[LSM6DSM_0], Threshold);
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <ACCEL_MOTION_SENSOR_wakeup_Threshold+0x48>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	79fa      	ldrb	r2, [r7, #7]
 8004fec:	4611      	mov	r1, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fe2c 	bl	8003c4c <LSM6DSM_ACC_Set_Wake_Up_Threshold>
 8004ff4:	6138      	str	r0, [r7, #16]
	int32_t resultado3 = LSM6DSM_ACC_Set_Wake_Up_Duration(MotionCompObj[LSM6DSM_0], duration);
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <ACCEL_MOTION_SENSOR_wakeup_Threshold+0x48>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	79ba      	ldrb	r2, [r7, #6]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe fe3c 	bl	8003c7c <LSM6DSM_ACC_Set_Wake_Up_Duration>
 8005004:	60f8      	str	r0, [r7, #12]
	//int32_t resultado = LSM6DSM_ACC_Enable_Inactivity_Detection(MotionCompObj[LSM6DSM_0], LSM6DSM_INT2_PIN,Threshold);
	return resultado;
 8005006:	697b      	ldr	r3, [r7, #20]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	2000bc8c 	.word	0x2000bc8c

08005014 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08e      	sub	sp, #56	; 0x38
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800501e:	2300      	movs	r3, #0
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005022:	2301      	movs	r3, #1
 8005024:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	62bb      	str	r3, [r7, #40]	; 0x28
  MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <BSP_MOTION_SENSOR_Init+0x22>
 8005030:	2b01      	cmp	r3, #1
 8005032:	d032      	beq.n	800509a <BSP_MOTION_SENSOR_Init+0x86>
 8005034:	e063      	b.n	80050fe <BSP_MOTION_SENSOR_Init+0xea>
  {
#if (USE_MOTION_SENSOR_LSM6DSM_0 == 1)
    case LSM6DSM_0:
      if (LSM6DSM_0_Probe(Functions) != BSP_ERROR_NONE)
 8005036:	6838      	ldr	r0, [r7, #0]
 8005038:	f000 f9bc 	bl	80053b4 <LSM6DSM_0_Probe>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <BSP_MOTION_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 8005042:	f04f 33ff 	mov.w	r3, #4294967295
 8005046:	e098      	b.n	800517a <BSP_MOTION_SENSOR_Init+0x166>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005048:	4a4e      	ldr	r2, [pc, #312]	; (8005184 <BSP_MOTION_SENSOR_Init+0x170>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	494d      	ldr	r1, [pc, #308]	; (8005188 <BSP_MOTION_SENSOR_Init+0x174>)
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800505a:	f107 010c 	add.w	r1, r7, #12
 800505e:	4610      	mov	r0, r2
 8005060:	4798      	blx	r3
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <BSP_MOTION_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005068:	f06f 0306 	mvn.w	r3, #6
 800506c:	e085      	b.n	800517a <BSP_MOTION_SENSOR_Init+0x166>
      }
      if (cap.Acc == 1U)
 800506e:	7b3b      	ldrb	r3, [r7, #12]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d103      	bne.n	800507c <BSP_MOTION_SENSOR_Init+0x68>
      {
        component_functions |= MOTION_ACCELERO;
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	f043 0302 	orr.w	r3, r3, #2
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800507c:	7b7b      	ldrb	r3, [r7, #13]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d103      	bne.n	800508a <BSP_MOTION_SENSOR_Init+0x76>
      {
        component_functions |= MOTION_GYRO;
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800508a:	7bbb      	ldrb	r3, [r7, #14]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d13a      	bne.n	8005106 <BSP_MOTION_SENSOR_Init+0xf2>
      {
        component_functions |= MOTION_MAGNETO;
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	f043 0304 	orr.w	r3, r3, #4
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005098:	e035      	b.n	8005106 <BSP_MOTION_SENSOR_Init+0xf2>
      }
      break;
#endif
#if (USE_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800509a:	6838      	ldr	r0, [r7, #0]
 800509c:	f000 fbce 	bl	800583c <LSM303AGR_MAG_0_Probe>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <BSP_MOTION_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	e066      	b.n	800517a <BSP_MOTION_SENSOR_Init+0x166>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80050ac:	4a35      	ldr	r2, [pc, #212]	; (8005184 <BSP_MOTION_SENSOR_Init+0x170>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	4934      	ldr	r1, [pc, #208]	; (8005188 <BSP_MOTION_SENSOR_Init+0x174>)
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80050be:	f107 010c 	add.w	r1, r7, #12
 80050c2:	4610      	mov	r0, r2
 80050c4:	4798      	blx	r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <BSP_MOTION_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80050cc:	f06f 0306 	mvn.w	r3, #6
 80050d0:	e053      	b.n	800517a <BSP_MOTION_SENSOR_Init+0x166>
      }
      if (cap.Acc == 1U)
 80050d2:	7b3b      	ldrb	r3, [r7, #12]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d103      	bne.n	80050e0 <BSP_MOTION_SENSOR_Init+0xcc>
      {
        component_functions |= MOTION_ACCELERO;
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	f043 0302 	orr.w	r3, r3, #2
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80050e0:	7b7b      	ldrb	r3, [r7, #13]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d103      	bne.n	80050ee <BSP_MOTION_SENSOR_Init+0xda>
      {
        component_functions |= MOTION_GYRO;
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80050ee:	7bbb      	ldrb	r3, [r7, #14]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10a      	bne.n	800510a <BSP_MOTION_SENSOR_Init+0xf6>
      {
        component_functions |= MOTION_MAGNETO;
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	f043 0304 	orr.w	r3, r3, #4
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80050fc:	e005      	b.n	800510a <BSP_MOTION_SENSOR_Init+0xf6>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80050fe:	f06f 0301 	mvn.w	r3, #1
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005104:	e002      	b.n	800510c <BSP_MOTION_SENSOR_Init+0xf8>
      break;
 8005106:	bf00      	nop
 8005108:	e000      	b.n	800510c <BSP_MOTION_SENSOR_Init+0xf8>
      break;
 800510a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <BSP_MOTION_SENSOR_Init+0x102>
  {
    return ret;
 8005112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005114:	e031      	b.n	800517a <BSP_MOTION_SENSOR_Init+0x166>
  }

  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8005116:	2300      	movs	r3, #0
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511a:	e02a      	b.n	8005172 <BSP_MOTION_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	4013      	ands	r3, r2
 8005122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005124:	429a      	cmp	r2, r3
 8005126:	d11e      	bne.n	8005166 <BSP_MOTION_SENSOR_Init+0x152>
 8005128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	4013      	ands	r3, r2
 800512e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005130:	429a      	cmp	r2, r3
 8005132:	d118      	bne.n	8005166 <BSP_MOTION_SENSOR_Init+0x152>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005134:	4a15      	ldr	r2, [pc, #84]	; (800518c <BSP_MOTION_SENSOR_Init+0x178>)
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800513c:	4814      	ldr	r0, [pc, #80]	; (8005190 <BSP_MOTION_SENSOR_Init+0x17c>)
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4413      	add	r3, r2
 8005146:	440b      	add	r3, r1
 8005148:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	490e      	ldr	r1, [pc, #56]	; (8005188 <BSP_MOTION_SENSOR_Init+0x174>)
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005156:	4610      	mov	r0, r2
 8005158:	4798      	blx	r3
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <BSP_MOTION_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005160:	f06f 0304 	mvn.w	r3, #4
 8005164:	e009      	b.n	800517a <BSP_MOTION_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	3301      	adds	r3, #1
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	2b02      	cmp	r3, #2
 8005176:	d9d1      	bls.n	800511c <BSP_MOTION_SENSOR_Init+0x108>
  }

  return ret;
 8005178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800517a:	4618      	mov	r0, r3
 800517c:	3738      	adds	r7, #56	; 0x38
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200004b8 	.word	0x200004b8
 8005188:	2000bc8c 	.word	0x2000bc8c
 800518c:	200000ac 	.word	0x200000ac
 8005190:	200004a0 	.word	0x200004a0

08005194 <BSP_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d903      	bls.n	80051ac <BSP_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80051a4:	f06f 0301 	mvn.w	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	e028      	b.n	80051fe <BSP_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80051ac:	4a16      	ldr	r2, [pc, #88]	; (8005208 <BSP_MOTION_SENSOR_Enable+0x74>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	4013      	ands	r3, r2
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d11c      	bne.n	80051f8 <BSP_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <BSP_MOTION_SENSOR_Enable+0x78>)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051c6:	4812      	ldr	r0, [pc, #72]	; (8005210 <BSP_MOTION_SENSOR_Enable+0x7c>)
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	440b      	add	r3, r1
 80051d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	490e      	ldr	r1, [pc, #56]	; (8005214 <BSP_MOTION_SENSOR_Enable+0x80>)
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80051e0:	4610      	mov	r0, r2
 80051e2:	4798      	blx	r3
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <BSP_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80051ea:	f06f 0304 	mvn.w	r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e005      	b.n	80051fe <BSP_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e002      	b.n	80051fe <BSP_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80051f8:	f06f 0301 	mvn.w	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80051fe:	68fb      	ldr	r3, [r7, #12]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	200004c0 	.word	0x200004c0
 800520c:	200000ac 	.word	0x200000ac
 8005210:	200004a0 	.word	0x200004a0
 8005214:	2000bc8c 	.word	0x2000bc8c

08005218 <BSP_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d903      	bls.n	8005232 <BSP_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800522a:	f06f 0301 	mvn.w	r3, #1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e029      	b.n	8005286 <BSP_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005232:	4a17      	ldr	r2, [pc, #92]	; (8005290 <BSP_MOTION_SENSOR_GetAxes+0x78>)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4013      	ands	r3, r2
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d11d      	bne.n	8005280 <BSP_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <BSP_MOTION_SENSOR_GetAxes+0x7c>)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800524c:	4812      	ldr	r0, [pc, #72]	; (8005298 <BSP_MOTION_SENSOR_GetAxes+0x80>)
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	4413      	add	r3, r2
 8005256:	440b      	add	r3, r1
 8005258:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	490f      	ldr	r1, [pc, #60]	; (800529c <BSP_MOTION_SENSOR_GetAxes+0x84>)
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4610      	mov	r0, r2
 800526a:	4798      	blx	r3
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <BSP_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005272:	f06f 0304 	mvn.w	r3, #4
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e005      	b.n	8005286 <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e002      	b.n	8005286 <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005280:	f06f 0301 	mvn.w	r3, #1
 8005284:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005286:	697b      	ldr	r3, [r7, #20]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	200004c0 	.word	0x200004c0
 8005294:	200000ac 	.word	0x200000ac
 8005298:	200004a0 	.word	0x200004a0
 800529c:	2000bc8c 	.word	0x2000bc8c

080052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d903      	bls.n	80052bc <BSP_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80052b4:	f06f 0301 	mvn.w	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e02a      	b.n	8005312 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80052bc:	4a17      	ldr	r2, [pc, #92]	; (800531c <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4013      	ands	r3, r2
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d11e      	bne.n	800530c <BSP_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80052ce:	4a14      	ldr	r2, [pc, #80]	; (8005320 <BSP_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052d6:	4813      	ldr	r0, [pc, #76]	; (8005324 <BSP_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	440b      	add	r3, r1
 80052e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	490f      	ldr	r1, [pc, #60]	; (8005328 <BSP_MOTION_SENSOR_SetOutputDataRate+0x88>)
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80052f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80052f4:	4610      	mov	r0, r2
 80052f6:	4798      	blx	r3
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <BSP_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052fe:	f06f 0304 	mvn.w	r3, #4
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e005      	b.n	8005312 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e002      	b.n	8005312 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800530c:	f06f 0301 	mvn.w	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005312:	697b      	ldr	r3, [r7, #20]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200004c0 	.word	0x200004c0
 8005320:	200000ac 	.word	0x200000ac
 8005324:	200004a0 	.word	0x200004a0
 8005328:	2000bc8c 	.word	0x2000bc8c

0800532c <BSP_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d903      	bls.n	8005346 <BSP_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800533e:	f06f 0301 	mvn.w	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e029      	b.n	800539a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005346:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <BSP_MOTION_SENSOR_SetFullScale+0x78>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	429a      	cmp	r2, r3
 8005356:	d11d      	bne.n	8005394 <BSP_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8005358:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <BSP_MOTION_SENSOR_SetFullScale+0x7c>)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005360:	4812      	ldr	r0, [pc, #72]	; (80053ac <BSP_MOTION_SENSOR_SetFullScale+0x80>)
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	440b      	add	r3, r1
 800536c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	490f      	ldr	r1, [pc, #60]	; (80053b0 <BSP_MOTION_SENSOR_SetFullScale+0x84>)
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <BSP_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005386:	f06f 0304 	mvn.w	r3, #4
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e005      	b.n	800539a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	e002      	b.n	800539a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005394:	f06f 0301 	mvn.w	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800539a:	697b      	ldr	r3, [r7, #20]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	200004c0 	.word	0x200004c0
 80053a8:	200000ac 	.word	0x200000ac
 80053ac:	200004a0 	.word	0x200004a0
 80053b0:	2000bc8c 	.word	0x2000bc8c

080053b4 <LSM6DSM_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSM_0_Probe(uint32_t Functions)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b092      	sub	sp, #72	; 0x48
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  LSM6DSM_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSM_Object_t lsm6dsm_obj_0;
  LSM6DSM_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80053bc:	2300      	movs	r3, #0
 80053be:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSM_SPI_3WIRES_BUS; /* SPI 4-Wires */
 80053c0:	2302      	movs	r3, #2
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = 0x0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = BSP_LSM6DSM_Init;
 80053ca:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <LSM6DSM_0_Probe+0x11c>)
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = BSP_LSM6DSM_DeInit;
 80053ce:	4b41      	ldr	r3, [pc, #260]	; (80054d4 <LSM6DSM_0_Probe+0x120>)
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = BSP_LSM6DSM_ReadReg;
 80053d2:	4b41      	ldr	r3, [pc, #260]	; (80054d8 <LSM6DSM_0_Probe+0x124>)
 80053d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = BSP_LSM6DSM_WriteReg;
 80053d6:	4b41      	ldr	r3, [pc, #260]	; (80054dc <LSM6DSM_0_Probe+0x128>)
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 80053da:	4b41      	ldr	r3, [pc, #260]	; (80054e0 <LSM6DSM_0_Probe+0x12c>)
 80053dc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSM_RegisterBusIO(&lsm6dsm_obj_0, &io_ctx) != LSM6DSM_OK)
 80053de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053e2:	4619      	mov	r1, r3
 80053e4:	483f      	ldr	r0, [pc, #252]	; (80054e4 <LSM6DSM_0_Probe+0x130>)
 80053e6:	f7fd fe0d 	bl	8003004 <LSM6DSM_RegisterBusIO>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <LSM6DSM_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80053f0:	f06f 0306 	mvn.w	r3, #6
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
 80053f6:	e066      	b.n	80054c6 <LSM6DSM_0_Probe+0x112>
  }
  else if (LSM6DSM_ReadID(&lsm6dsm_obj_0, &id) != LSM6DSM_OK)
 80053f8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80053fc:	4619      	mov	r1, r3
 80053fe:	4839      	ldr	r0, [pc, #228]	; (80054e4 <LSM6DSM_0_Probe+0x130>)
 8005400:	f7fd fef6 	bl	80031f0 <LSM6DSM_ReadID>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <LSM6DSM_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800540a:	f06f 0306 	mvn.w	r3, #6
 800540e:	647b      	str	r3, [r7, #68]	; 0x44
 8005410:	e059      	b.n	80054c6 <LSM6DSM_0_Probe+0x112>
  }
  else if (id != LSM6DSM_ID)
 8005412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005416:	2b6a      	cmp	r3, #106	; 0x6a
 8005418:	d003      	beq.n	8005422 <LSM6DSM_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800541a:	f06f 0306 	mvn.w	r3, #6
 800541e:	647b      	str	r3, [r7, #68]	; 0x44
 8005420:	e051      	b.n	80054c6 <LSM6DSM_0_Probe+0x112>
  }
  else
  {
    (void)LSM6DSM_GetCapabilities(&lsm6dsm_obj_0, &cap);
 8005422:	f107 0308 	add.w	r3, r7, #8
 8005426:	4619      	mov	r1, r3
 8005428:	482e      	ldr	r0, [pc, #184]	; (80054e4 <LSM6DSM_0_Probe+0x130>)
 800542a:	f7fd fef7 	bl	800321c <LSM6DSM_GetCapabilities>
    MotionCtx[LSM6DSM_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800542e:	7a7b      	ldrb	r3, [r7, #9]
 8005430:	461a      	mov	r2, r3
 8005432:	7a3b      	ldrb	r3, [r7, #8]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	431a      	orrs	r2, r3
 8005438:	7abb      	ldrb	r3, [r7, #10]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4313      	orrs	r3, r2
 800543e:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <LSM6DSM_0_Probe+0x134>)
 8005440:	6013      	str	r3, [r2, #0]

    MotionCompObj[LSM6DSM_0] = &lsm6dsm_obj_0;
 8005442:	4b2a      	ldr	r3, [pc, #168]	; (80054ec <LSM6DSM_0_Probe+0x138>)
 8005444:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <LSM6DSM_0_Probe+0x130>)
 8005446:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LSM6DSM_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSM_COMMON_Driver;
 8005448:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <LSM6DSM_0_Probe+0x13c>)
 800544a:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <LSM6DSM_0_Probe+0x140>)
 800544c:	601a      	str	r2, [r3, #0]

    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d018      	beq.n	800548a <LSM6DSM_0_Probe+0xd6>
 8005458:	7a7b      	ldrb	r3, [r7, #9]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d115      	bne.n	800548a <LSM6DSM_0_Probe+0xd6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSM_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSM_GYRO_Driver;
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <LSM6DSM_0_Probe+0x144>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4a26      	ldr	r2, [pc, #152]	; (80054fc <LSM6DSM_0_Probe+0x148>)
 8005464:	4926      	ldr	r1, [pc, #152]	; (8005500 <LSM6DSM_0_Probe+0x14c>)
 8005466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LSM6DSM_0]->Init(MotionCompObj[LSM6DSM_0]) != LSM6DSM_OK)
 800546a:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <LSM6DSM_0_Probe+0x13c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1e      	ldr	r2, [pc, #120]	; (80054ec <LSM6DSM_0_Probe+0x138>)
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	4610      	mov	r0, r2
 8005476:	4798      	blx	r3
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <LSM6DSM_0_Probe+0xd2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800547e:	f06f 0304 	mvn.w	r3, #4
 8005482:	647b      	str	r3, [r7, #68]	; 0x44
 8005484:	e001      	b.n	800548a <LSM6DSM_0_Probe+0xd6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005486:	2300      	movs	r3, #0
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d018      	beq.n	80054c6 <LSM6DSM_0_Probe+0x112>
 8005494:	7a3b      	ldrb	r3, [r7, #8]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d115      	bne.n	80054c6 <LSM6DSM_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSM_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSM_ACC_Driver;
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <LSM6DSM_0_Probe+0x144>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4a17      	ldr	r2, [pc, #92]	; (80054fc <LSM6DSM_0_Probe+0x148>)
 80054a0:	4918      	ldr	r1, [pc, #96]	; (8005504 <LSM6DSM_0_Probe+0x150>)
 80054a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LSM6DSM_0]->Init(MotionCompObj[LSM6DSM_0]) != LSM6DSM_OK)
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <LSM6DSM_0_Probe+0x13c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a0f      	ldr	r2, [pc, #60]	; (80054ec <LSM6DSM_0_Probe+0x138>)
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	4610      	mov	r0, r2
 80054b2:	4798      	blx	r3
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <LSM6DSM_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054ba:	f06f 0304 	mvn.w	r3, #4
 80054be:	647b      	str	r3, [r7, #68]	; 0x44
 80054c0:	e001      	b.n	80054c6 <LSM6DSM_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
  }

  return ret;
 80054c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3748      	adds	r7, #72	; 0x48
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	08005509 	.word	0x08005509
 80054d4:	08005585 	.word	0x08005585
 80054d8:	08005621 	.word	0x08005621
 80054dc:	080055a9 	.word	0x080055a9
 80054e0:	0800a319 	.word	0x0800a319
 80054e4:	200004c8 	.word	0x200004c8
 80054e8:	200004c0 	.word	0x200004c0
 80054ec:	2000bc8c 	.word	0x2000bc8c
 80054f0:	200004b8 	.word	0x200004b8
 80054f4:	20000054 	.word	0x20000054
 80054f8:	200000ac 	.word	0x200000ac
 80054fc:	200004a0 	.word	0x200004a0
 8005500:	20000088 	.word	0x20000088
 8005504:	20000064 	.word	0x20000064

08005508 <BSP_LSM6DSM_Init>:
/**
 * @brief  Initialize SPI bus for LSM6DSM
 * @retval BSP status
 */
static int32_t BSP_LSM6DSM_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800550e:	f06f 0305 	mvn.w	r3, #5
 8005512:	61fb      	str	r3, [r7, #28]
  
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005514:	2201      	movs	r2, #1
 8005516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800551a:	4818      	ldr	r0, [pc, #96]	; (800557c <BSP_LSM6DSM_Init+0x74>)
 800551c:	f001 fa82 	bl	8006a24 <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005520:	2303      	movs	r3, #3
 8005522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	2300      	movs	r3, #0
 8005526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005528:	2301      	movs	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
  
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 800552c:	4b14      	ldr	r3, [pc, #80]	; (8005580 <BSP_LSM6DSM_Init+0x78>)
 800552e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005530:	4a13      	ldr	r2, [pc, #76]	; (8005580 <BSP_LSM6DSM_Init+0x78>)
 8005532:	f043 0302 	orr.w	r3, r3, #2
 8005536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <BSP_LSM6DSM_Init+0x78>)
 800553a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 8005544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005548:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 800554a:	f107 0308 	add.w	r3, r7, #8
 800554e:	4619      	mov	r1, r3
 8005550:	480a      	ldr	r0, [pc, #40]	; (800557c <BSP_LSM6DSM_Init+0x74>)
 8005552:	f000 ffb3 	bl	80064bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005556:	2201      	movs	r2, #1
 8005558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800555c:	4807      	ldr	r0, [pc, #28]	; (800557c <BSP_LSM6DSM_Init+0x74>)
 800555e:	f001 fa61 	bl	8006a24 <HAL_GPIO_WritePin>

  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 8005562:	f004 fe3d 	bl	800a1e0 <BSP_SPI2_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <BSP_LSM6DSM_Init+0x68>
  {
    ret = BSP_ERROR_NONE;
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8005570:	69fb      	ldr	r3, [r7, #28]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	48000400 	.word	0x48000400
 8005580:	40021000 	.word	0x40021000

08005584 <BSP_LSM6DSM_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LSM6DSM
 * @retval BSP status
 */
static int32_t BSP_LSM6DSM_DeInit(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800558a:	f06f 0305 	mvn.w	r3, #5
 800558e:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 8005590:	f004 fe4a 	bl	800a228 <BSP_SPI2_DeInit>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <BSP_LSM6DSM_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800559a:	2300      	movs	r3, #0
 800559c:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800559e:	687b      	ldr	r3, [r7, #4]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <BSP_LSM6DSM_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t BSP_LSM6DSM_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60ba      	str	r2, [r7, #8]
 80055b0:	461a      	mov	r2, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	81fb      	strh	r3, [r7, #14]
 80055b6:	460b      	mov	r3, r1
 80055b8:	81bb      	strh	r3, [r7, #12]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 80055c2:	89bb      	ldrh	r3, [r7, #12]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 80055c8:	2200      	movs	r2, #0
 80055ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055ce:	4813      	ldr	r0, [pc, #76]	; (800561c <BSP_LSM6DSM_WriteReg+0x74>)
 80055d0:	f001 fa28 	bl	8006a24 <HAL_GPIO_WritePin>

  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 80055d4:	f107 0313 	add.w	r3, r7, #19
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f004 fe3c 	bl	800a258 <BSP_SPI2_Send>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d002      	beq.n	80055ec <BSP_LSM6DSM_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80055e6:	f06f 0305 	mvn.w	r3, #5
 80055ea:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI2_Send(pdata, len) != len)
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	4619      	mov	r1, r3
 80055f0:	68b8      	ldr	r0, [r7, #8]
 80055f2:	f004 fe31 	bl	800a258 <BSP_SPI2_Send>
 80055f6:	4602      	mov	r2, r0
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d002      	beq.n	8005604 <BSP_LSM6DSM_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80055fe:	f06f 0305 	mvn.w	r3, #5
 8005602:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005604:	2201      	movs	r2, #1
 8005606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800560a:	4804      	ldr	r0, [pc, #16]	; (800561c <BSP_LSM6DSM_WriteReg+0x74>)
 800560c:	f001 fa0a 	bl	8006a24 <HAL_GPIO_WritePin>

  return ret;
 8005610:	697b      	ldr	r3, [r7, #20]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	48000400 	.word	0x48000400

08005620 <BSP_LSM6DSM_ReadReg>:
* @param  pdata the pointer to the data to be read
* @param  len the length of the data to be read
* @retval BSP status
*/
static int32_t BSP_LSM6DSM_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60ba      	str	r2, [r7, #8]
 8005628:	461a      	mov	r2, r3
 800562a:	4603      	mov	r3, r0
 800562c:	81fb      	strh	r3, [r7, #14]
 800562e:	460b      	mov	r3, r1
 8005630:	81bb      	strh	r3, [r7, #12]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800563a:	89bb      	ldrh	r3, [r7, #12]
 800563c:	74fb      	strb	r3, [r7, #19]
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);    
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005644:	4821      	ldr	r0, [pc, #132]	; (80056cc <BSP_LSM6DSM_ReadReg+0xac>)
 8005646:	f001 f9ed 	bl	8006a24 <HAL_GPIO_WritePin>
  LSM6DSM_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 800564a:	7cfb      	ldrb	r3, [r7, #19]
 800564c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005650:	b2db      	uxtb	r3, r3
 8005652:	4619      	mov	r1, r3
 8005654:	481e      	ldr	r0, [pc, #120]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 8005656:	f000 f8c7 	bl	80057e8 <LSM6DSM_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 800565a:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005668:	601a      	str	r2, [r3, #0]
  SPI_1LINE_RX(&hbusspi2);
 800566a:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005678:	601a      	str	r2, [r3, #0]
  
  if (len > 1)
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d906      	bls.n	800568e <BSP_LSM6DSM_ReadReg+0x6e>
  {
    LSM6DSM_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	461a      	mov	r2, r3
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4812      	ldr	r0, [pc, #72]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 8005688:	f000 f824 	bl	80056d4 <LSM6DSM_SPI_Read_nBytes>
 800568c:	e003      	b.n	8005696 <BSP_LSM6DSM_ReadReg+0x76>
  }
  else
  {
    LSM6DSM_SPI_Read(&hbusspi2, (pdata));
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	480f      	ldr	r0, [pc, #60]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 8005692:	f000 f871 	bl	8005778 <LSM6DSM_SPI_Read>
  }
  
  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);    
 8005696:	2201      	movs	r2, #1
 8005698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800569c:	480b      	ldr	r0, [pc, #44]	; (80056cc <BSP_LSM6DSM_ReadReg+0xac>)
 800569e:	f001 f9c1 	bl	8006a24 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <BSP_LSM6DSM_ReadReg+0xb0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c0:	601a      	str	r2, [r3, #0]
  
  return ret;
 80056c2:	697b      	ldr	r3, [r7, #20]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	48000400 	.word	0x48000400
 80056d0:	2000bce4 	.word	0x2000bce4

080056d4 <LSM6DSM_SPI_Read_nBytes>:
* @param  val: value.
* @param  nBytesToRead: number of bytes to read.
* @retval None
*/
void LSM6DSM_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t *val, uint16_t nBytesToRead)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056e2:	b672      	cpsid	i
  /* Interrupts should be disabled during this operation */
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f2:	601a      	str	r2, [r3, #0]
  
  /* Transfer loop */
  while (nBytesToRead > 1U)
 80056f4:	e013      	b.n	800571e <LSM6DSM_SPI_Read_nBytes+0x4a>
  {
    /* Check the RXNE flag */
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00c      	beq.n	800571e <LSM6DSM_SPI_Read_nBytes+0x4a>
    {
      /* read the received data */
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	701a      	strb	r2, [r3, #0]
      val += sizeof(uint8_t);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3301      	adds	r3, #1
 8005716:	60bb      	str	r3, [r7, #8]
      nBytesToRead--;
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	3b01      	subs	r3, #1
 800571c:	80fb      	strh	r3, [r7, #6]
  while (nBytesToRead > 1U)
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d8e8      	bhi.n	80056f6 <LSM6DSM_SPI_Read_nBytes+0x22>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f4f 	dsb	sy
  disabled after the first bit and before the latest bit of the last Byte received */
  /* __DSB instruction are inserted to garantee that clock is Disabled in the right timeframe */
  
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(xSpiHandle);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800573c:	b662      	cpsie	i
  
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 800573e:	bf00      	nop
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b01      	cmp	r3, #1
 800574c:	d1f8      	bne.n	8005740 <LSM6DSM_SPI_Read_nBytes+0x6c>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800575c:	bf00      	nop
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b80      	cmp	r3, #128	; 0x80
 800576a:	d0f8      	beq.n	800575e <LSM6DSM_SPI_Read_nBytes+0x8a>
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LSM6DSM_SPI_Read>:
* @param  command: command id.
* @param  uint8_t val: value.
* @retval None
*/
void LSM6DSM_SPI_Read(SPI_HandleTypeDef* xSpiHandle, uint8_t *val)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005782:	b672      	cpsid	i
  So to guarantee the clock generation for only one data, the clock must be
  disabled after the first bit and before the latest bit */
  /* Interrupts should be disabled during this operation */
  
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005792:	601a      	str	r2, [r3, #0]
  __asm("dsb\n");
 8005794:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005798:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80057ac:	b662      	cpsie	i
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80057ae:	bf00      	nop
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d1f8      	bne.n	80057b0 <LSM6DSM_SPI_Read+0x38>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80057cc:	bf00      	nop
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d8:	2b80      	cmp	r3, #128	; 0x80
 80057da:	d0f8      	beq.n	80057ce <LSM6DSM_SPI_Read+0x56>
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <LSM6DSM_SPI_Write>:
* @param  command : command id.
* @param  val : value.
* @retval None
*/
void LSM6DSM_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	70fb      	strb	r3, [r7, #3]
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80057f4:	bf00      	nop
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d1f8      	bne.n	80057f6 <LSM6DSM_SPI_Write+0xe>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	701a      	strb	r2, [r3, #0]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 800580e:	bf00      	nop
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f8      	bne.n	8005810 <LSM6DSM_SPI_Write+0x28>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800581e:	bf00      	nop
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d0f8      	beq.n	8005820 <LSM6DSM_SPI_Write+0x38>
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <LSM303AGR_MAG_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b092      	sub	sp, #72	; 0x48
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005844:	2300      	movs	r3, #0
 8005846:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_SPI_3WIRES_BUS; /* I2C */
 8005848:	2301      	movs	r3, #1
 800584a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = 0x0;
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = BSP_LSM303AGR_Init;
 8005852:	4b33      	ldr	r3, [pc, #204]	; (8005920 <LSM303AGR_MAG_0_Probe+0xe4>)
 8005854:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = BSP_LSM303AGR_DeInit;
 8005856:	4b33      	ldr	r3, [pc, #204]	; (8005924 <LSM303AGR_MAG_0_Probe+0xe8>)
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = BSP_LSM303AGR_ReadReg;
 800585a:	4b33      	ldr	r3, [pc, #204]	; (8005928 <LSM303AGR_MAG_0_Probe+0xec>)
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = BSP_LSM303AGR_WriteReg;
 800585e:	4b33      	ldr	r3, [pc, #204]	; (800592c <LSM303AGR_MAG_0_Probe+0xf0>)
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 8005862:	4b33      	ldr	r3, [pc, #204]	; (8005930 <LSM303AGR_MAG_0_Probe+0xf4>)
 8005864:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800586a:	4619      	mov	r1, r3
 800586c:	4831      	ldr	r0, [pc, #196]	; (8005934 <LSM303AGR_MAG_0_Probe+0xf8>)
 800586e:	f7fc ffc1 	bl	80027f4 <LSM303AGR_MAG_RegisterBusIO>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005878:	f06f 0306 	mvn.w	r3, #6
 800587c:	647b      	str	r3, [r7, #68]	; 0x44
 800587e:	e049      	b.n	8005914 <LSM303AGR_MAG_0_Probe+0xd8>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005880:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005884:	4619      	mov	r1, r3
 8005886:	482b      	ldr	r0, [pc, #172]	; (8005934 <LSM303AGR_MAG_0_Probe+0xf8>)
 8005888:	f7fd f86b 	bl	8002962 <LSM303AGR_MAG_ReadID>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005892:	f06f 0306 	mvn.w	r3, #6
 8005896:	647b      	str	r3, [r7, #68]	; 0x44
 8005898:	e03c      	b.n	8005914 <LSM303AGR_MAG_0_Probe+0xd8>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800589a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d003      	beq.n	80058aa <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80058a2:	f06f 0306 	mvn.w	r3, #6
 80058a6:	647b      	str	r3, [r7, #68]	; 0x44
 80058a8:	e034      	b.n	8005914 <LSM303AGR_MAG_0_Probe+0xd8>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	4619      	mov	r1, r3
 80058b0:	4820      	ldr	r0, [pc, #128]	; (8005934 <LSM303AGR_MAG_0_Probe+0xf8>)
 80058b2:	f7fd f86d 	bl	8002990 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80058b6:	7a7b      	ldrb	r3, [r7, #9]
 80058b8:	461a      	mov	r2, r3
 80058ba:	7a3b      	ldrb	r3, [r7, #8]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	431a      	orrs	r2, r3
 80058c0:	7abb      	ldrb	r3, [r7, #10]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4313      	orrs	r3, r2
 80058c6:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <LSM303AGR_MAG_0_Probe+0xfc>)
 80058c8:	6053      	str	r3, [r2, #4]

    MotionCompObj[LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80058ca:	4b1c      	ldr	r3, [pc, #112]	; (800593c <LSM303AGR_MAG_0_Probe+0x100>)
 80058cc:	4a19      	ldr	r2, [pc, #100]	; (8005934 <LSM303AGR_MAG_0_Probe+0xf8>)
 80058ce:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80058d0:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <LSM303AGR_MAG_0_Probe+0x104>)
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <LSM303AGR_MAG_0_Probe+0x108>)
 80058d4:	605a      	str	r2, [r3, #4]

    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d019      	beq.n	8005914 <LSM303AGR_MAG_0_Probe+0xd8>
 80058e0:	7abb      	ldrb	r3, [r7, #10]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d116      	bne.n	8005914 <LSM303AGR_MAG_0_Probe+0xd8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM303AGR_MAG_Driver;
 80058e6:	4b18      	ldr	r3, [pc, #96]	; (8005948 <LSM303AGR_MAG_0_Probe+0x10c>)
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <LSM303AGR_MAG_0_Probe+0x110>)
 80058ec:	3303      	adds	r3, #3
 80058ee:	4918      	ldr	r1, [pc, #96]	; (8005950 <LSM303AGR_MAG_0_Probe+0x114>)
 80058f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LSM303AGR_MAG_0]->Init(MotionCompObj[LSM303AGR_MAG_0]) != LSM303AGR_OK)
 80058f4:	4b12      	ldr	r3, [pc, #72]	; (8005940 <LSM303AGR_MAG_0_Probe+0x104>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a10      	ldr	r2, [pc, #64]	; (800593c <LSM303AGR_MAG_0_Probe+0x100>)
 80058fc:	6852      	ldr	r2, [r2, #4]
 80058fe:	4610      	mov	r0, r2
 8005900:	4798      	blx	r3
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <LSM303AGR_MAG_0_Probe+0xd4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005908:	f06f 0304 	mvn.w	r3, #4
 800590c:	647b      	str	r3, [r7, #68]	; 0x44
 800590e:	e001      	b.n	8005914 <LSM303AGR_MAG_0_Probe+0xd8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005910:	2300      	movs	r3, #0
 8005912:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
  }

  return ret;
 8005914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005916:	4618      	mov	r0, r3
 8005918:	3748      	adds	r7, #72	; 0x48
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	08005955 	.word	0x08005955
 8005924:	08005a09 	.word	0x08005a09
 8005928:	08005aa1 	.word	0x08005aa1
 800592c:	08005a2d 	.word	0x08005a2d
 8005930:	0800a319 	.word	0x0800a319
 8005934:	200004f8 	.word	0x200004f8
 8005938:	200004c0 	.word	0x200004c0
 800593c:	2000bc8c 	.word	0x2000bc8c
 8005940:	200004b8 	.word	0x200004b8
 8005944:	20000020 	.word	0x20000020
 8005948:	200000ac 	.word	0x200000ac
 800594c:	200004a0 	.word	0x200004a0
 8005950:	20000030 	.word	0x20000030

08005954 <BSP_LSM303AGR_Init>:



static int32_t BSP_LSM303AGR_Init(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800595a:	f06f 0305 	mvn.w	r3, #5
 800595e:	61fb      	str	r3, [r7, #28]
  
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 8005960:	2201      	movs	r2, #1
 8005962:	2110      	movs	r1, #16
 8005964:	4825      	ldr	r0, [pc, #148]	; (80059fc <BSP_LSM303AGR_Init+0xa8>)
 8005966:	f001 f85d 	bl	8006a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 800596a:	2201      	movs	r2, #1
 800596c:	2102      	movs	r1, #2
 800596e:	4824      	ldr	r0, [pc, #144]	; (8005a00 <BSP_LSM303AGR_Init+0xac>)
 8005970:	f001 f858 	bl	8006a24 <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005974:	2303      	movs	r3, #3
 8005976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800597c:	2301      	movs	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
  
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8005980:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <BSP_LSM303AGR_Init+0xb0>)
 8005982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005984:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <BSP_LSM303AGR_Init+0xb0>)
 8005986:	f043 0304 	orr.w	r3, r3, #4
 800598a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800598c:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <BSP_LSM303AGR_Init+0xb0>)
 800598e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8005998:	2310      	movs	r3, #16
 800599a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	4619      	mov	r1, r3
 80059a2:	4816      	ldr	r0, [pc, #88]	; (80059fc <BSP_LSM303AGR_Init+0xa8>)
 80059a4:	f000 fd8a 	bl	80064bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 80059a8:	2201      	movs	r2, #1
 80059aa:	2110      	movs	r1, #16
 80059ac:	4813      	ldr	r0, [pc, #76]	; (80059fc <BSP_LSM303AGR_Init+0xa8>)
 80059ae:	f001 f839 	bl	8006a24 <HAL_GPIO_WritePin>
  
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 80059b2:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <BSP_LSM303AGR_Init+0xb0>)
 80059b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b6:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <BSP_LSM303AGR_Init+0xb0>)
 80059b8:	f043 0302 	orr.w	r3, r3, #2
 80059bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <BSP_LSM303AGR_Init+0xb0>)
 80059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 80059ca:	2302      	movs	r3, #2
 80059cc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4619      	mov	r1, r3
 80059d4:	480a      	ldr	r0, [pc, #40]	; (8005a00 <BSP_LSM303AGR_Init+0xac>)
 80059d6:	f000 fd71 	bl	80064bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 80059da:	2201      	movs	r2, #1
 80059dc:	2102      	movs	r1, #2
 80059de:	4808      	ldr	r0, [pc, #32]	; (8005a00 <BSP_LSM303AGR_Init+0xac>)
 80059e0:	f001 f820 	bl	8006a24 <HAL_GPIO_WritePin>
  
  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80059e4:	f004 fbfc 	bl	800a1e0 <BSP_SPI2_Init>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <BSP_LSM303AGR_Init+0x9e>
  {
    ret = BSP_ERROR_NONE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
  }
  
  return ret;
 80059f2:	69fb      	ldr	r3, [r7, #28]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3720      	adds	r7, #32
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	48000800 	.word	0x48000800
 8005a00:	48000400 	.word	0x48000400
 8005a04:	40021000 	.word	0x40021000

08005a08 <BSP_LSM303AGR_DeInit>:

static int32_t BSP_LSM303AGR_DeInit(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005a0e:	f06f 0305 	mvn.w	r3, #5
 8005a12:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 8005a14:	f004 fc08 	bl	800a228 <BSP_SPI2_DeInit>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <BSP_LSM303AGR_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8005a22:	687b      	ldr	r3, [r7, #4]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <BSP_LSM303AGR_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t BSP_LSM303AGR_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60ba      	str	r2, [r7, #8]
 8005a34:	461a      	mov	r2, r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	81fb      	strh	r3, [r7, #14]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	81bb      	strh	r3, [r7, #12]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8005a46:	89bb      	ldrh	r3, [r7, #12]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2102      	movs	r1, #2
 8005a50:	4812      	ldr	r0, [pc, #72]	; (8005a9c <BSP_LSM303AGR_WriteReg+0x70>)
 8005a52:	f000 ffe7 	bl	8006a24 <HAL_GPIO_WritePin>

  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 8005a56:	f107 0313 	add.w	r3, r7, #19
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f004 fbfb 	bl	800a258 <BSP_SPI2_Send>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d002      	beq.n	8005a6e <BSP_LSM303AGR_WriteReg+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005a68:	f06f 0305 	mvn.w	r3, #5
 8005a6c:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI2_Send(pdata, len) != len)
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	4619      	mov	r1, r3
 8005a72:	68b8      	ldr	r0, [r7, #8]
 8005a74:	f004 fbf0 	bl	800a258 <BSP_SPI2_Send>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d002      	beq.n	8005a86 <BSP_LSM303AGR_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005a80:	f06f 0305 	mvn.w	r3, #5
 8005a84:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005a86:	2201      	movs	r2, #1
 8005a88:	2102      	movs	r1, #2
 8005a8a:	4804      	ldr	r0, [pc, #16]	; (8005a9c <BSP_LSM303AGR_WriteReg+0x70>)
 8005a8c:	f000 ffca 	bl	8006a24 <HAL_GPIO_WritePin>

  return ret;
 8005a90:	697b      	ldr	r3, [r7, #20]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	48000400 	.word	0x48000400

08005aa0 <BSP_LSM303AGR_ReadReg>:
* @param  pdata the pointer to the data to be read
* @param  len the length of the data to be read
* @retval BSP status
*/
static int32_t BSP_LSM303AGR_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60ba      	str	r2, [r7, #8]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	81fb      	strh	r3, [r7, #14]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	81bb      	strh	r3, [r7, #12]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8005aba:	89bb      	ldrh	r3, [r7, #12]
 8005abc:	74fb      	strb	r3, [r7, #19]
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	4821      	ldr	r0, [pc, #132]	; (8005b48 <BSP_LSM303AGR_ReadReg+0xa8>)
 8005ac4:	f000 ffae 	bl	8006a24 <HAL_GPIO_WritePin>
  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
 8005aca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	481e      	ldr	r0, [pc, #120]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005ad4:	f000 f8c6 	bl	8005c64 <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005ad8:	4b1c      	ldr	r3, [pc, #112]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b1b      	ldr	r3, [pc, #108]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae6:	601a      	str	r2, [r3, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005ae8:	4b18      	ldr	r3, [pc, #96]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005af6:	601a      	str	r2, [r3, #0]
  
  if (len > 1)
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d906      	bls.n	8005b0c <BSP_LSM303AGR_ReadReg+0x6c>
  {
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	461a      	mov	r2, r3
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	4811      	ldr	r0, [pc, #68]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005b06:	f000 f823 	bl	8005b50 <LSM303AGR_SPI_Read_nBytes>
 8005b0a:	e003      	b.n	8005b14 <BSP_LSM303AGR_ReadReg+0x74>
  }
  else
  {
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	480f      	ldr	r0, [pc, #60]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005b10:	f000 f870 	bl	8005bf4 <LSM303AGR_SPI_Read>
  }
  
  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005b14:	2201      	movs	r2, #1
 8005b16:	2102      	movs	r1, #2
 8005b18:	480b      	ldr	r0, [pc, #44]	; (8005b48 <BSP_LSM303AGR_ReadReg+0xa8>)
 8005b1a:	f000 ff83 	bl	8006a24 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b2c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <BSP_LSM303AGR_ReadReg+0xac>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b3c:	601a      	str	r2, [r3, #0]
  return ret;
 8005b3e:	697b      	ldr	r3, [r7, #20]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	48000400 	.word	0x48000400
 8005b4c:	2000bce4 	.word	0x2000bce4

08005b50 <LSM303AGR_SPI_Read_nBytes>:
* @param  val: value.
* @param  nBytesToRead: number of bytes to read.
* @retval None
*/
void LSM303AGR_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t *val, uint16_t nBytesToRead)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b5e:	b672      	cpsid	i
  /* Interrupts should be disabled during this operation */
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b6e:	601a      	str	r2, [r3, #0]
  
  /* Transfer loop */
  while (nBytesToRead > 1U)
 8005b70:	e013      	b.n	8005b9a <LSM303AGR_SPI_Read_nBytes+0x4a>
  {
    /* Check the RXNE flag */
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00c      	beq.n	8005b9a <LSM303AGR_SPI_Read_nBytes+0x4a>
    {
      /* read the received data */
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	701a      	strb	r2, [r3, #0]
      val += sizeof(uint8_t);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60bb      	str	r3, [r7, #8]
      nBytesToRead--;
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	80fb      	strh	r3, [r7, #6]
  while (nBytesToRead > 1U)
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d8e8      	bhi.n	8005b72 <LSM303AGR_SPI_Read_nBytes+0x22>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
  disabled after the first bit and before the latest bit of the last Byte received */
  /* __DSB instruction are inserted to garantee that clock is Disabled in the right timeframe */
  
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(xSpiHandle);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005bb8:	b662      	cpsie	i
  
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005bba:	bf00      	nop
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d1f8      	bne.n	8005bbc <LSM303AGR_SPI_Read_nBytes+0x6c>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005bd8:	bf00      	nop
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b80      	cmp	r3, #128	; 0x80
 8005be6:	d0f8      	beq.n	8005bda <LSM303AGR_SPI_Read_nBytes+0x8a>
}
 8005be8:	bf00      	nop
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LSM303AGR_SPI_Read>:
* @param  command: command id.
* @param  uint8_t val: value.
* @retval None
*/
void LSM303AGR_SPI_Read(SPI_HandleTypeDef* xSpiHandle, uint8_t *val)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bfe:	b672      	cpsid	i
  So to guarantee the clock generation for only one data, the clock must be
  disabled after the first bit and before the latest bit */
  /* Interrupts should be disabled during this operation */
  
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0e:	601a      	str	r2, [r3, #0]
  __asm("dsb\n");
 8005c10:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005c14:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c28:	b662      	cpsie	i
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005c2a:	bf00      	nop
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d1f8      	bne.n	8005c2c <LSM303AGR_SPI_Read+0x38>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005c48:	bf00      	nop
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d0f8      	beq.n	8005c4a <LSM303AGR_SPI_Read+0x56>
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <LSM303AGR_SPI_Write>:
* @param  command : command id.
* @param  val : value.
* @retval None
*/
void LSM303AGR_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005c70:	bf00      	nop
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d1f8      	bne.n	8005c72 <LSM303AGR_SPI_Write+0xe>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	701a      	strb	r2, [r3, #0]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8005c8a:	bf00      	nop
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f8      	bne.n	8005c8c <LSM303AGR_SPI_Write+0x28>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005c9a:	bf00      	nop
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca6:	2b80      	cmp	r3, #128	; 0x80
 8005ca8:	d0f8      	beq.n	8005c9c <LSM303AGR_SPI_Write+0x38>
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cc0:	2003      	movs	r0, #3
 8005cc2:	f000 f922 	bl	8005f0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7fc fc50 	bl	800256c <HAL_InitTick>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	71fb      	strb	r3, [r7, #7]
 8005cd6:	e001      	b.n	8005cdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005cd8:	f7fc fb4e 	bl	8002378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <HAL_IncTick+0x20>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <HAL_IncTick+0x24>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	4a04      	ldr	r2, [pc, #16]	; (8005d0c <HAL_IncTick+0x24>)
 8005cfa:	6013      	str	r3, [r2, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	200000c4 	.word	0x200000c4
 8005d0c:	2000bc94 	.word	0x2000bc94

08005d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  return uwTick;
 8005d14:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <HAL_GetTick+0x14>)
 8005d16:	681b      	ldr	r3, [r3, #0]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	2000bc94 	.word	0x2000bc94

08005d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d30:	f7ff ffee 	bl	8005d10 <HAL_GetTick>
 8005d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d40:	d005      	beq.n	8005d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <HAL_Delay+0x40>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d4e:	bf00      	nop
 8005d50:	f7ff ffde 	bl	8005d10 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d8f7      	bhi.n	8005d50 <HAL_Delay+0x28>
  {
  }
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	200000c4 	.word	0x200000c4

08005d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d88:	4013      	ands	r3, r2
 8005d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d9e:	4a04      	ldr	r2, [pc, #16]	; (8005db0 <__NVIC_SetPriorityGrouping+0x44>)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	60d3      	str	r3, [r2, #12]
}
 8005da4:	bf00      	nop
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	e000ed00 	.word	0xe000ed00

08005db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005db8:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <__NVIC_GetPriorityGrouping+0x18>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	f003 0307 	and.w	r3, r3, #7
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	e000ed00 	.word	0xe000ed00

08005dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db0b      	blt.n	8005dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	f003 021f 	and.w	r2, r3, #31
 8005de8:	4907      	ldr	r1, [pc, #28]	; (8005e08 <__NVIC_EnableIRQ+0x38>)
 8005dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	2001      	movs	r0, #1
 8005df2:	fa00 f202 	lsl.w	r2, r0, r2
 8005df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	e000e100 	.word	0xe000e100

08005e0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	db10      	blt.n	8005e40 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	f003 021f 	and.w	r2, r3, #31
 8005e24:	4909      	ldr	r1, [pc, #36]	; (8005e4c <__NVIC_DisableIRQ+0x40>)
 8005e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e32:	3320      	adds	r3, #32
 8005e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005e3c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	e000e100 	.word	0xe000e100

08005e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	6039      	str	r1, [r7, #0]
 8005e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	db0a      	blt.n	8005e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	490c      	ldr	r1, [pc, #48]	; (8005e9c <__NVIC_SetPriority+0x4c>)
 8005e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6e:	0112      	lsls	r2, r2, #4
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	440b      	add	r3, r1
 8005e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e78:	e00a      	b.n	8005e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	4908      	ldr	r1, [pc, #32]	; (8005ea0 <__NVIC_SetPriority+0x50>)
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	3b04      	subs	r3, #4
 8005e88:	0112      	lsls	r2, r2, #4
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	761a      	strb	r2, [r3, #24]
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	e000e100 	.word	0xe000e100
 8005ea0:	e000ed00 	.word	0xe000ed00

08005ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f1c3 0307 	rsb	r3, r3, #7
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	bf28      	it	cs
 8005ec2:	2304      	movcs	r3, #4
 8005ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	2b06      	cmp	r3, #6
 8005ecc:	d902      	bls.n	8005ed4 <NVIC_EncodePriority+0x30>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3b03      	subs	r3, #3
 8005ed2:	e000      	b.n	8005ed6 <NVIC_EncodePriority+0x32>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43da      	mvns	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	401a      	ands	r2, r3
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005eec:	f04f 31ff 	mov.w	r1, #4294967295
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef6:	43d9      	mvns	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005efc:	4313      	orrs	r3, r2
         );
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3724      	adds	r7, #36	; 0x24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff ff2a 	bl	8005d6c <__NVIC_SetPriorityGrouping>
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f32:	f7ff ff3f 	bl	8005db4 <__NVIC_GetPriorityGrouping>
 8005f36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	6978      	ldr	r0, [r7, #20]
 8005f3e:	f7ff ffb1 	bl	8005ea4 <NVIC_EncodePriority>
 8005f42:	4602      	mov	r2, r0
 8005f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff ff80 	bl	8005e50 <__NVIC_SetPriority>
}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff ff32 	bl	8005dd0 <__NVIC_EnableIRQ>
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff ff42 	bl	8005e0c <__NVIC_DisableIRQ>
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e098      	b.n	80060d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4b4d      	ldr	r3, [pc, #308]	; (80060e0 <HAL_DMA_Init+0x150>)
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d80f      	bhi.n	8005fce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b4b      	ldr	r3, [pc, #300]	; (80060e4 <HAL_DMA_Init+0x154>)
 8005fb6:	4413      	add	r3, r2
 8005fb8:	4a4b      	ldr	r2, [pc, #300]	; (80060e8 <HAL_DMA_Init+0x158>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	091b      	lsrs	r3, r3, #4
 8005fc0:	009a      	lsls	r2, r3, #2
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a48      	ldr	r2, [pc, #288]	; (80060ec <HAL_DMA_Init+0x15c>)
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
 8005fcc:	e00e      	b.n	8005fec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4b46      	ldr	r3, [pc, #280]	; (80060f0 <HAL_DMA_Init+0x160>)
 8005fd6:	4413      	add	r3, r2
 8005fd8:	4a43      	ldr	r2, [pc, #268]	; (80060e8 <HAL_DMA_Init+0x158>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	009a      	lsls	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a42      	ldr	r2, [pc, #264]	; (80060f4 <HAL_DMA_Init+0x164>)
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800601c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006046:	d039      	beq.n	80060bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	4a27      	ldr	r2, [pc, #156]	; (80060ec <HAL_DMA_Init+0x15c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d11a      	bne.n	8006088 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006052:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <HAL_DMA_Init+0x168>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605a:	f003 031c 	and.w	r3, r3, #28
 800605e:	210f      	movs	r1, #15
 8006060:	fa01 f303 	lsl.w	r3, r1, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	4924      	ldr	r1, [pc, #144]	; (80060f8 <HAL_DMA_Init+0x168>)
 8006068:	4013      	ands	r3, r2
 800606a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800606c:	4b22      	ldr	r3, [pc, #136]	; (80060f8 <HAL_DMA_Init+0x168>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	f003 031c 	and.w	r3, r3, #28
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	491d      	ldr	r1, [pc, #116]	; (80060f8 <HAL_DMA_Init+0x168>)
 8006082:	4313      	orrs	r3, r2
 8006084:	600b      	str	r3, [r1, #0]
 8006086:	e019      	b.n	80060bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006088:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <HAL_DMA_Init+0x16c>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006090:	f003 031c 	and.w	r3, r3, #28
 8006094:	210f      	movs	r1, #15
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	43db      	mvns	r3, r3
 800609c:	4917      	ldr	r1, [pc, #92]	; (80060fc <HAL_DMA_Init+0x16c>)
 800609e:	4013      	ands	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <HAL_DMA_Init+0x16c>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6859      	ldr	r1, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	f003 031c 	and.w	r3, r3, #28
 80060b2:	fa01 f303 	lsl.w	r3, r1, r3
 80060b6:	4911      	ldr	r1, [pc, #68]	; (80060fc <HAL_DMA_Init+0x16c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40020407 	.word	0x40020407
 80060e4:	bffdfff8 	.word	0xbffdfff8
 80060e8:	cccccccd 	.word	0xcccccccd
 80060ec:	40020000 	.word	0x40020000
 80060f0:	bffdfbf8 	.word	0xbffdfbf8
 80060f4:	40020400 	.word	0x40020400
 80060f8:	400200a8 	.word	0x400200a8
 80060fc:	400204a8 	.word	0x400204a8

08006100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_DMA_Start_IT+0x20>
 800611c:	2302      	movs	r3, #2
 800611e:	e04b      	b.n	80061b8 <HAL_DMA_Start_IT+0xb8>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d13a      	bne.n	80061aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f921 	bl	80063a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 020e 	orr.w	r2, r2, #14
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e00f      	b.n	8006198 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0204 	bic.w	r2, r2, #4
 8006186:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 020a 	orr.w	r2, r2, #10
 8006196:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e005      	b.n	80061b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
 80061b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d005      	beq.n	80061e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2204      	movs	r2, #4
 80061dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e029      	b.n	8006238 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 020e 	bic.w	r2, r2, #14
 80061f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006208:	f003 021c 	and.w	r2, r3, #28
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	2101      	movs	r1, #1
 8006212:	fa01 f202 	lsl.w	r2, r1, r2
 8006216:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
    }
  }
  return status;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	f003 031c 	and.w	r3, r3, #28
 8006262:	2204      	movs	r2, #4
 8006264:	409a      	lsls	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d026      	beq.n	80062bc <HAL_DMA_IRQHandler+0x7a>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d021      	beq.n	80062bc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d107      	bne.n	8006296 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0204 	bic.w	r2, r2, #4
 8006294:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	f003 021c 	and.w	r2, r3, #28
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	2104      	movs	r1, #4
 80062a4:	fa01 f202 	lsl.w	r2, r1, r2
 80062a8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d071      	beq.n	8006396 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80062ba:	e06c      	b.n	8006396 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c0:	f003 031c 	and.w	r3, r3, #28
 80062c4:	2202      	movs	r2, #2
 80062c6:	409a      	lsls	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d02e      	beq.n	800632e <HAL_DMA_IRQHandler+0xec>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d029      	beq.n	800632e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 020a 	bic.w	r2, r2, #10
 80062f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	f003 021c 	and.w	r2, r3, #28
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	2102      	movs	r1, #2
 800630e:	fa01 f202 	lsl.w	r2, r1, r2
 8006312:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d038      	beq.n	8006396 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800632c:	e033      	b.n	8006396 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	f003 031c 	and.w	r3, r3, #28
 8006336:	2208      	movs	r2, #8
 8006338:	409a      	lsls	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4013      	ands	r3, r2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d02a      	beq.n	8006398 <HAL_DMA_IRQHandler+0x156>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d025      	beq.n	8006398 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 020e 	bic.w	r2, r2, #14
 800635a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006360:	f003 021c 	and.w	r2, r3, #28
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	2101      	movs	r1, #1
 800636a:	fa01 f202 	lsl.w	r2, r1, r2
 800636e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006396:	bf00      	nop
 8006398:	bf00      	nop
}
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f003 021c 	and.w	r2, r3, #28
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	2101      	movs	r1, #1
 80063bc:	fa01 f202 	lsl.w	r2, r1, r2
 80063c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d108      	bne.n	80063e4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80063e2:	e007      	b.n	80063f4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	60da      	str	r2, [r3, #12]
}
 80063f4:	bf00      	nop
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	460b      	mov	r3, r1
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d103      	bne.n	8006420 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	605a      	str	r2, [r3, #4]
      break;
 800641e:	e002      	b.n	8006426 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	75fb      	strb	r3, [r7, #23]
      break;
 8006424:	bf00      	nop
  }

  return status;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
}
 8006428:	4618      	mov	r0, r3
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e003      	b.n	8006450 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800644e:	2300      	movs	r3, #0
  }
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	2201      	movs	r2, #1
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <HAL_EXTI_IRQHandler+0x5c>)
 8006486:	4413      	add	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4013      	ands	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	4798      	blx	r3
    }
  }
}
 80064ae:	bf00      	nop
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40010414 	.word	0x40010414

080064bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064ca:	e17f      	b.n	80067cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	2101      	movs	r1, #1
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	4013      	ands	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8171 	beq.w	80067c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d00b      	beq.n	8006504 <HAL_GPIO_Init+0x48>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d007      	beq.n	8006504 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064f8:	2b11      	cmp	r3, #17
 80064fa:	d003      	beq.n	8006504 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b12      	cmp	r3, #18
 8006502:	d130      	bne.n	8006566 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	2203      	movs	r2, #3
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4013      	ands	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800653a:	2201      	movs	r2, #1
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43db      	mvns	r3, r3
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4013      	ands	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	091b      	lsrs	r3, r3, #4
 8006550:	f003 0201 	and.w	r2, r3, #1
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d118      	bne.n	80065a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006578:	2201      	movs	r2, #1
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4013      	ands	r3, r2
 8006586:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	08db      	lsrs	r3, r3, #3
 800658e:	f003 0201 	and.w	r2, r3, #1
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	2203      	movs	r2, #3
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4013      	ands	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d003      	beq.n	80065e4 <HAL_GPIO_Init+0x128>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b12      	cmp	r3, #18
 80065e2:	d123      	bne.n	800662c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	08da      	lsrs	r2, r3, #3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3208      	adds	r2, #8
 80065ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	220f      	movs	r2, #15
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4013      	ands	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	08da      	lsrs	r2, r3, #3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3208      	adds	r2, #8
 8006626:	6939      	ldr	r1, [r7, #16]
 8006628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	2203      	movs	r2, #3
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4013      	ands	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f003 0203 	and.w	r2, r3, #3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80ac 	beq.w	80067c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800666e:	4b5e      	ldr	r3, [pc, #376]	; (80067e8 <HAL_GPIO_Init+0x32c>)
 8006670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006672:	4a5d      	ldr	r2, [pc, #372]	; (80067e8 <HAL_GPIO_Init+0x32c>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	6613      	str	r3, [r2, #96]	; 0x60
 800667a:	4b5b      	ldr	r3, [pc, #364]	; (80067e8 <HAL_GPIO_Init+0x32c>)
 800667c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006686:	4a59      	ldr	r2, [pc, #356]	; (80067ec <HAL_GPIO_Init+0x330>)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	3302      	adds	r3, #2
 800668e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006692:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	220f      	movs	r2, #15
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	43db      	mvns	r3, r3
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4013      	ands	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066b0:	d025      	beq.n	80066fe <HAL_GPIO_Init+0x242>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a4e      	ldr	r2, [pc, #312]	; (80067f0 <HAL_GPIO_Init+0x334>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01f      	beq.n	80066fa <HAL_GPIO_Init+0x23e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a4d      	ldr	r2, [pc, #308]	; (80067f4 <HAL_GPIO_Init+0x338>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d019      	beq.n	80066f6 <HAL_GPIO_Init+0x23a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a4c      	ldr	r2, [pc, #304]	; (80067f8 <HAL_GPIO_Init+0x33c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_GPIO_Init+0x236>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a4b      	ldr	r2, [pc, #300]	; (80067fc <HAL_GPIO_Init+0x340>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00d      	beq.n	80066ee <HAL_GPIO_Init+0x232>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a4a      	ldr	r2, [pc, #296]	; (8006800 <HAL_GPIO_Init+0x344>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <HAL_GPIO_Init+0x22e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a49      	ldr	r2, [pc, #292]	; (8006804 <HAL_GPIO_Init+0x348>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_GPIO_Init+0x22a>
 80066e2:	2306      	movs	r3, #6
 80066e4:	e00c      	b.n	8006700 <HAL_GPIO_Init+0x244>
 80066e6:	2307      	movs	r3, #7
 80066e8:	e00a      	b.n	8006700 <HAL_GPIO_Init+0x244>
 80066ea:	2305      	movs	r3, #5
 80066ec:	e008      	b.n	8006700 <HAL_GPIO_Init+0x244>
 80066ee:	2304      	movs	r3, #4
 80066f0:	e006      	b.n	8006700 <HAL_GPIO_Init+0x244>
 80066f2:	2303      	movs	r3, #3
 80066f4:	e004      	b.n	8006700 <HAL_GPIO_Init+0x244>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e002      	b.n	8006700 <HAL_GPIO_Init+0x244>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <HAL_GPIO_Init+0x244>
 80066fe:	2300      	movs	r3, #0
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	f002 0203 	and.w	r2, r2, #3
 8006706:	0092      	lsls	r2, r2, #2
 8006708:	4093      	lsls	r3, r2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006710:	4936      	ldr	r1, [pc, #216]	; (80067ec <HAL_GPIO_Init+0x330>)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	089b      	lsrs	r3, r3, #2
 8006716:	3302      	adds	r3, #2
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800671e:	4b3a      	ldr	r3, [pc, #232]	; (8006808 <HAL_GPIO_Init+0x34c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	43db      	mvns	r3, r3
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4013      	ands	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006742:	4a31      	ldr	r2, [pc, #196]	; (8006808 <HAL_GPIO_Init+0x34c>)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006748:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <HAL_GPIO_Init+0x34c>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	43db      	mvns	r3, r3
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4013      	ands	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800676c:	4a26      	ldr	r2, [pc, #152]	; (8006808 <HAL_GPIO_Init+0x34c>)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006772:	4b25      	ldr	r3, [pc, #148]	; (8006808 <HAL_GPIO_Init+0x34c>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	43db      	mvns	r3, r3
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4013      	ands	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006796:	4a1c      	ldr	r2, [pc, #112]	; (8006808 <HAL_GPIO_Init+0x34c>)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800679c:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <HAL_GPIO_Init+0x34c>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	43db      	mvns	r3, r3
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4013      	ands	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80067c0:	4a11      	ldr	r2, [pc, #68]	; (8006808 <HAL_GPIO_Init+0x34c>)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	3301      	adds	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	fa22 f303 	lsr.w	r3, r2, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f47f ae78 	bne.w	80064cc <HAL_GPIO_Init+0x10>
  }
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40010000 	.word	0x40010000
 80067f0:	48000400 	.word	0x48000400
 80067f4:	48000800 	.word	0x48000800
 80067f8:	48000c00 	.word	0x48000c00
 80067fc:	48001000 	.word	0x48001000
 8006800:	48001400 	.word	0x48001400
 8006804:	48001800 	.word	0x48001800
 8006808:	40010400 	.word	0x40010400

0800680c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800681a:	e0cd      	b.n	80069b8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800681c:	2201      	movs	r2, #1
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	fa02 f303 	lsl.w	r3, r2, r3
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	4013      	ands	r3, r2
 8006828:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80c0 	beq.w	80069b2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006832:	4a68      	ldr	r2, [pc, #416]	; (80069d4 <HAL_GPIO_DeInit+0x1c8>)
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	3302      	adds	r3, #2
 800683a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800683e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	220f      	movs	r2, #15
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800685a:	d025      	beq.n	80068a8 <HAL_GPIO_DeInit+0x9c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a5e      	ldr	r2, [pc, #376]	; (80069d8 <HAL_GPIO_DeInit+0x1cc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d01f      	beq.n	80068a4 <HAL_GPIO_DeInit+0x98>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a5d      	ldr	r2, [pc, #372]	; (80069dc <HAL_GPIO_DeInit+0x1d0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d019      	beq.n	80068a0 <HAL_GPIO_DeInit+0x94>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a5c      	ldr	r2, [pc, #368]	; (80069e0 <HAL_GPIO_DeInit+0x1d4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d013      	beq.n	800689c <HAL_GPIO_DeInit+0x90>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a5b      	ldr	r2, [pc, #364]	; (80069e4 <HAL_GPIO_DeInit+0x1d8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00d      	beq.n	8006898 <HAL_GPIO_DeInit+0x8c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a5a      	ldr	r2, [pc, #360]	; (80069e8 <HAL_GPIO_DeInit+0x1dc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <HAL_GPIO_DeInit+0x88>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a59      	ldr	r2, [pc, #356]	; (80069ec <HAL_GPIO_DeInit+0x1e0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d101      	bne.n	8006890 <HAL_GPIO_DeInit+0x84>
 800688c:	2306      	movs	r3, #6
 800688e:	e00c      	b.n	80068aa <HAL_GPIO_DeInit+0x9e>
 8006890:	2307      	movs	r3, #7
 8006892:	e00a      	b.n	80068aa <HAL_GPIO_DeInit+0x9e>
 8006894:	2305      	movs	r3, #5
 8006896:	e008      	b.n	80068aa <HAL_GPIO_DeInit+0x9e>
 8006898:	2304      	movs	r3, #4
 800689a:	e006      	b.n	80068aa <HAL_GPIO_DeInit+0x9e>
 800689c:	2303      	movs	r3, #3
 800689e:	e004      	b.n	80068aa <HAL_GPIO_DeInit+0x9e>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e002      	b.n	80068aa <HAL_GPIO_DeInit+0x9e>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <HAL_GPIO_DeInit+0x9e>
 80068a8:	2300      	movs	r3, #0
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	f002 0203 	and.w	r2, r2, #3
 80068b0:	0092      	lsls	r2, r2, #2
 80068b2:	4093      	lsls	r3, r2
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d132      	bne.n	8006920 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80068ba:	4b4d      	ldr	r3, [pc, #308]	; (80069f0 <HAL_GPIO_DeInit+0x1e4>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	494b      	ldr	r1, [pc, #300]	; (80069f0 <HAL_GPIO_DeInit+0x1e4>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80068c8:	4b49      	ldr	r3, [pc, #292]	; (80069f0 <HAL_GPIO_DeInit+0x1e4>)
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	43db      	mvns	r3, r3
 80068d0:	4947      	ldr	r1, [pc, #284]	; (80069f0 <HAL_GPIO_DeInit+0x1e4>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80068d6:	4b46      	ldr	r3, [pc, #280]	; (80069f0 <HAL_GPIO_DeInit+0x1e4>)
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	43db      	mvns	r3, r3
 80068de:	4944      	ldr	r1, [pc, #272]	; (80069f0 <HAL_GPIO_DeInit+0x1e4>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80068e4:	4b42      	ldr	r3, [pc, #264]	; (80069f0 <HAL_GPIO_DeInit+0x1e4>)
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	43db      	mvns	r3, r3
 80068ec:	4940      	ldr	r1, [pc, #256]	; (80069f0 <HAL_GPIO_DeInit+0x1e4>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	220f      	movs	r2, #15
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006902:	4a34      	ldr	r2, [pc, #208]	; (80069d4 <HAL_GPIO_DeInit+0x1c8>)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	089b      	lsrs	r3, r3, #2
 8006908:	3302      	adds	r3, #2
 800690a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	43da      	mvns	r2, r3
 8006912:	4830      	ldr	r0, [pc, #192]	; (80069d4 <HAL_GPIO_DeInit+0x1c8>)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	089b      	lsrs	r3, r3, #2
 8006918:	400a      	ands	r2, r1
 800691a:	3302      	adds	r3, #2
 800691c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	2103      	movs	r1, #3
 800692a:	fa01 f303 	lsl.w	r3, r1, r3
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	08da      	lsrs	r2, r3, #3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3208      	adds	r2, #8
 800693c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	220f      	movs	r2, #15
 800694a:	fa02 f303 	lsl.w	r3, r2, r3
 800694e:	43db      	mvns	r3, r3
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	08d2      	lsrs	r2, r2, #3
 8006954:	4019      	ands	r1, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3208      	adds	r2, #8
 800695a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	2103      	movs	r1, #3
 8006968:	fa01 f303 	lsl.w	r3, r1, r3
 800696c:	43db      	mvns	r3, r3
 800696e:	401a      	ands	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	2101      	movs	r1, #1
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	fa01 f303 	lsl.w	r3, r1, r3
 8006980:	43db      	mvns	r3, r3
 8006982:	401a      	ands	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	2103      	movs	r1, #3
 8006992:	fa01 f303 	lsl.w	r3, r1, r3
 8006996:	43db      	mvns	r3, r3
 8006998:	401a      	ands	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a2:	2101      	movs	r1, #1
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	fa01 f303 	lsl.w	r3, r1, r3
 80069aa:	43db      	mvns	r3, r3
 80069ac:	401a      	ands	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	3301      	adds	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	fa22 f303 	lsr.w	r3, r2, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f47f af2b 	bne.w	800681c <HAL_GPIO_DeInit+0x10>
  }
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40010000 	.word	0x40010000
 80069d8:	48000400 	.word	0x48000400
 80069dc:	48000800 	.word	0x48000800
 80069e0:	48000c00 	.word	0x48000c00
 80069e4:	48001000 	.word	0x48001000
 80069e8:	48001400 	.word	0x48001400
 80069ec:	48001800 	.word	0x48001800
 80069f0:	40010400 	.word	0x40010400

080069f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
 8006a10:	e001      	b.n	8006a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	807b      	strh	r3, [r7, #2]
 8006a30:	4613      	mov	r3, r2
 8006a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a34:	787b      	ldrb	r3, [r7, #1]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a3a:	887a      	ldrh	r2, [r7, #2]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a40:	e002      	b.n	8006a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a42:	887a      	ldrh	r2, [r7, #2]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a5e:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a60:	695a      	ldr	r2, [r3, #20]
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d006      	beq.n	8006a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a6a:	4a05      	ldr	r2, [pc, #20]	; (8006a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f00f fb34 	bl	80160e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40010400 	.word	0x40010400

08006a84 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a04      	ldr	r2, [pc, #16]	; (8006aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a92:	6013      	str	r3, [r2, #0]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40007000 	.word	0x40007000

08006aa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <HAL_PWREx_GetVoltageRange+0x18>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40007000 	.word	0x40007000

08006ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ace:	d130      	bne.n	8006b32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ad0:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006adc:	d038      	beq.n	8006b50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ade:	4b20      	ldr	r3, [pc, #128]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006aee:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2232      	movs	r2, #50	; 0x32
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	0c9b      	lsrs	r3, r3, #18
 8006b00:	3301      	adds	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b04:	e002      	b.n	8006b0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b0c:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b18:	d102      	bne.n	8006b20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f2      	bne.n	8006b06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2c:	d110      	bne.n	8006b50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e00f      	b.n	8006b52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3e:	d007      	beq.n	8006b50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b48:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40007000 	.word	0x40007000
 8006b64:	2000001c 	.word	0x2000001c
 8006b68:	431bde83 	.word	0x431bde83

08006b6c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b7a:	6053      	str	r3, [r2, #4]
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40007000 	.word	0x40007000

08006b8c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a0f      	ldr	r2, [pc, #60]	; (8006bd8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8006b9c:	f023 0307 	bic.w	r3, r3, #7
 8006ba0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006ba2:	4b0e      	ldr	r3, [pc, #56]	; (8006bdc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006ba8:	f043 0304 	orr.w	r3, r3, #4
 8006bac:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006bb4:	bf30      	wfi
 8006bb6:	e002      	b.n	8006bbe <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006bb8:	bf40      	sev
    __WFE();
 8006bba:	bf20      	wfe
    __WFE();
 8006bbc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006bbe:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	4a06      	ldr	r2, [pc, #24]	; (8006bdc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006bc4:	f023 0304 	bic.w	r3, r3, #4
 8006bc8:	6113      	str	r3, [r2, #16]
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40007000 	.word	0x40007000
 8006bdc:	e000ed00 	.word	0xe000ed00

08006be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e3d4      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bf2:	4ba1      	ldr	r3, [pc, #644]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bfc:	4b9e      	ldr	r3, [pc, #632]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0310 	and.w	r3, r3, #16
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80e4 	beq.w	8006ddc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <HAL_RCC_OscConfig+0x4a>
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b0c      	cmp	r3, #12
 8006c1e:	f040 808b 	bne.w	8006d38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	f040 8087 	bne.w	8006d38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c2a:	4b93      	ldr	r3, [pc, #588]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <HAL_RCC_OscConfig+0x62>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e3ac      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1a      	ldr	r2, [r3, #32]
 8006c46:	4b8c      	ldr	r3, [pc, #560]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d004      	beq.n	8006c5c <HAL_RCC_OscConfig+0x7c>
 8006c52:	4b89      	ldr	r3, [pc, #548]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c5a:	e005      	b.n	8006c68 <HAL_RCC_OscConfig+0x88>
 8006c5c:	4b86      	ldr	r3, [pc, #536]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c62:	091b      	lsrs	r3, r3, #4
 8006c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d223      	bcs.n	8006cb4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fd5b 	bl	800772c <RCC_SetFlashLatencyFromMSIRange>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e38d      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c80:	4b7d      	ldr	r3, [pc, #500]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a7c      	ldr	r2, [pc, #496]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006c86:	f043 0308 	orr.w	r3, r3, #8
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	4b7a      	ldr	r3, [pc, #488]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	4977      	ldr	r1, [pc, #476]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c9e:	4b76      	ldr	r3, [pc, #472]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	4972      	ldr	r1, [pc, #456]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	604b      	str	r3, [r1, #4]
 8006cb2:	e025      	b.n	8006d00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cb4:	4b70      	ldr	r3, [pc, #448]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a6f      	ldr	r2, [pc, #444]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006cba:	f043 0308 	orr.w	r3, r3, #8
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	4b6d      	ldr	r3, [pc, #436]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	496a      	ldr	r1, [pc, #424]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cd2:	4b69      	ldr	r3, [pc, #420]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	4965      	ldr	r1, [pc, #404]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fd1b 	bl	800772c <RCC_SetFlashLatencyFromMSIRange>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e34d      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d00:	f000 fc36 	bl	8007570 <HAL_RCC_GetSysClockFreq>
 8006d04:	4601      	mov	r1, r0
 8006d06:	4b5c      	ldr	r3, [pc, #368]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	091b      	lsrs	r3, r3, #4
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	4a5a      	ldr	r2, [pc, #360]	; (8006e7c <HAL_RCC_OscConfig+0x29c>)
 8006d12:	5cd3      	ldrb	r3, [r2, r3]
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	fa21 f303 	lsr.w	r3, r1, r3
 8006d1c:	4a58      	ldr	r2, [pc, #352]	; (8006e80 <HAL_RCC_OscConfig+0x2a0>)
 8006d1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006d20:	4b58      	ldr	r3, [pc, #352]	; (8006e84 <HAL_RCC_OscConfig+0x2a4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fb fc21 	bl	800256c <HAL_InitTick>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d052      	beq.n	8006dda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	e331      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d032      	beq.n	8006da6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006d40:	4b4d      	ldr	r3, [pc, #308]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a4c      	ldr	r2, [pc, #304]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d4c:	f7fe ffe0 	bl	8005d10 <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d54:	f7fe ffdc 	bl	8005d10 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e31a      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d66:	4b44      	ldr	r3, [pc, #272]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0f0      	beq.n	8006d54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d72:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a40      	ldr	r2, [pc, #256]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d78:	f043 0308 	orr.w	r3, r3, #8
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	4b3e      	ldr	r3, [pc, #248]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	493b      	ldr	r1, [pc, #236]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d90:	4b39      	ldr	r3, [pc, #228]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	4936      	ldr	r1, [pc, #216]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	604b      	str	r3, [r1, #4]
 8006da4:	e01a      	b.n	8006ddc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006da6:	4b34      	ldr	r3, [pc, #208]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a33      	ldr	r2, [pc, #204]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006db2:	f7fe ffad 	bl	8005d10 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006dba:	f7fe ffa9 	bl	8005d10 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e2e7      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006dcc:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f0      	bne.n	8006dba <HAL_RCC_OscConfig+0x1da>
 8006dd8:	e000      	b.n	8006ddc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006dda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d074      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d005      	beq.n	8006dfa <HAL_RCC_OscConfig+0x21a>
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b0c      	cmp	r3, #12
 8006df2:	d10e      	bne.n	8006e12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d10b      	bne.n	8006e12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfa:	4b1f      	ldr	r3, [pc, #124]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d064      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x2f0>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d160      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e2c4      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1a:	d106      	bne.n	8006e2a <HAL_RCC_OscConfig+0x24a>
 8006e1c:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	e01d      	b.n	8006e66 <HAL_RCC_OscConfig+0x286>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e32:	d10c      	bne.n	8006e4e <HAL_RCC_OscConfig+0x26e>
 8006e34:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a0f      	ldr	r2, [pc, #60]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	e00b      	b.n	8006e66 <HAL_RCC_OscConfig+0x286>
 8006e4e:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a09      	ldr	r2, [pc, #36]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a06      	ldr	r2, [pc, #24]	; (8006e78 <HAL_RCC_OscConfig+0x298>)
 8006e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01c      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6e:	f7fe ff4f 	bl	8005d10 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e74:	e011      	b.n	8006e9a <HAL_RCC_OscConfig+0x2ba>
 8006e76:	bf00      	nop
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	080193f0 	.word	0x080193f0
 8006e80:	2000001c 	.word	0x2000001c
 8006e84:	200000c0 	.word	0x200000c0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e88:	f7fe ff42 	bl	8005d10 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b64      	cmp	r3, #100	; 0x64
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e280      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e9a:	4baf      	ldr	r3, [pc, #700]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <HAL_RCC_OscConfig+0x2a8>
 8006ea6:	e014      	b.n	8006ed2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea8:	f7fe ff32 	bl	8005d10 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eb0:	f7fe ff2e 	bl	8005d10 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b64      	cmp	r3, #100	; 0x64
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e26c      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ec2:	4ba5      	ldr	r3, [pc, #660]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f0      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x2d0>
 8006ece:	e000      	b.n	8006ed2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d060      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d005      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x310>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2b0c      	cmp	r3, #12
 8006ee8:	d119      	bne.n	8006f1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d116      	bne.n	8006f1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef0:	4b99      	ldr	r3, [pc, #612]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_RCC_OscConfig+0x328>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e249      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f08:	4b93      	ldr	r3, [pc, #588]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	4990      	ldr	r1, [pc, #576]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f1c:	e040      	b.n	8006fa0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d023      	beq.n	8006f6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f26:	4b8c      	ldr	r3, [pc, #560]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a8b      	ldr	r2, [pc, #556]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f32:	f7fe feed 	bl	8005d10 <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f38:	e008      	b.n	8006f4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f3a:	f7fe fee9 	bl	8005d10 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e227      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f4c:	4b82      	ldr	r3, [pc, #520]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f58:	4b7f      	ldr	r3, [pc, #508]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	061b      	lsls	r3, r3, #24
 8006f66:	497c      	ldr	r1, [pc, #496]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	604b      	str	r3, [r1, #4]
 8006f6c:	e018      	b.n	8006fa0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f6e:	4b7a      	ldr	r3, [pc, #488]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a79      	ldr	r2, [pc, #484]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7a:	f7fe fec9 	bl	8005d10 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f82:	f7fe fec5 	bl	8005d10 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e203      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f94:	4b70      	ldr	r3, [pc, #448]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f0      	bne.n	8006f82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d03c      	beq.n	8007026 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01c      	beq.n	8006fee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fb4:	4b68      	ldr	r3, [pc, #416]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fba:	4a67      	ldr	r2, [pc, #412]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc4:	f7fe fea4 	bl	8005d10 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fcc:	f7fe fea0 	bl	8005d10 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e1de      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fde:	4b5e      	ldr	r3, [pc, #376]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0ef      	beq.n	8006fcc <HAL_RCC_OscConfig+0x3ec>
 8006fec:	e01b      	b.n	8007026 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fee:	4b5a      	ldr	r3, [pc, #360]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff4:	4a58      	ldr	r2, [pc, #352]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ffe:	f7fe fe87 	bl	8005d10 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007006:	f7fe fe83 	bl	8005d10 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e1c1      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007018:	4b4f      	ldr	r3, [pc, #316]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 800701a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1ef      	bne.n	8007006 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80a6 	beq.w	8007180 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007034:	2300      	movs	r3, #0
 8007036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007038:	4b47      	ldr	r3, [pc, #284]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 800703a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10d      	bne.n	8007060 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007044:	4b44      	ldr	r3, [pc, #272]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	4a43      	ldr	r2, [pc, #268]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 800704a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800704e:	6593      	str	r3, [r2, #88]	; 0x58
 8007050:	4b41      	ldr	r3, [pc, #260]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 8007052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800705c:	2301      	movs	r3, #1
 800705e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007060:	4b3e      	ldr	r3, [pc, #248]	; (800715c <HAL_RCC_OscConfig+0x57c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d118      	bne.n	800709e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800706c:	4b3b      	ldr	r3, [pc, #236]	; (800715c <HAL_RCC_OscConfig+0x57c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a3a      	ldr	r2, [pc, #232]	; (800715c <HAL_RCC_OscConfig+0x57c>)
 8007072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007078:	f7fe fe4a 	bl	8005d10 <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007080:	f7fe fe46 	bl	8005d10 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e184      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007092:	4b32      	ldr	r3, [pc, #200]	; (800715c <HAL_RCC_OscConfig+0x57c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0f0      	beq.n	8007080 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d108      	bne.n	80070b8 <HAL_RCC_OscConfig+0x4d8>
 80070a6:	4b2c      	ldr	r3, [pc, #176]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ac:	4a2a      	ldr	r2, [pc, #168]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070b6:	e024      	b.n	8007102 <HAL_RCC_OscConfig+0x522>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b05      	cmp	r3, #5
 80070be:	d110      	bne.n	80070e2 <HAL_RCC_OscConfig+0x502>
 80070c0:	4b25      	ldr	r3, [pc, #148]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	4a24      	ldr	r2, [pc, #144]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070c8:	f043 0304 	orr.w	r3, r3, #4
 80070cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070d0:	4b21      	ldr	r3, [pc, #132]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d6:	4a20      	ldr	r2, [pc, #128]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070d8:	f043 0301 	orr.w	r3, r3, #1
 80070dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070e0:	e00f      	b.n	8007102 <HAL_RCC_OscConfig+0x522>
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e8:	4a1b      	ldr	r2, [pc, #108]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070f2:	4b19      	ldr	r3, [pc, #100]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f8:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 80070fa:	f023 0304 	bic.w	r3, r3, #4
 80070fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d016      	beq.n	8007138 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710a:	f7fe fe01 	bl	8005d10 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007110:	e00a      	b.n	8007128 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007112:	f7fe fdfd 	bl	8005d10 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007120:	4293      	cmp	r3, r2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e139      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <HAL_RCC_OscConfig+0x578>)
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0ed      	beq.n	8007112 <HAL_RCC_OscConfig+0x532>
 8007136:	e01a      	b.n	800716e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007138:	f7fe fdea 	bl	8005d10 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800713e:	e00f      	b.n	8007160 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007140:	f7fe fde6 	bl	8005d10 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	f241 3288 	movw	r2, #5000	; 0x1388
 800714e:	4293      	cmp	r3, r2
 8007150:	d906      	bls.n	8007160 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e122      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
 8007156:	bf00      	nop
 8007158:	40021000 	.word	0x40021000
 800715c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007160:	4b90      	ldr	r3, [pc, #576]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e8      	bne.n	8007140 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800716e:	7ffb      	ldrb	r3, [r7, #31]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d105      	bne.n	8007180 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007174:	4b8b      	ldr	r3, [pc, #556]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007178:	4a8a      	ldr	r2, [pc, #552]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 800717a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800717e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8108 	beq.w	800739a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	2b02      	cmp	r3, #2
 8007190:	f040 80d0 	bne.w	8007334 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007194:	4b83      	ldr	r3, [pc, #524]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f003 0203 	and.w	r2, r3, #3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d130      	bne.n	800720a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	3b01      	subs	r3, #1
 80071b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d127      	bne.n	800720a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d11f      	bne.n	800720a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071d4:	2a07      	cmp	r2, #7
 80071d6:	bf14      	ite	ne
 80071d8:	2201      	movne	r2, #1
 80071da:	2200      	moveq	r2, #0
 80071dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071de:	4293      	cmp	r3, r2
 80071e0:	d113      	bne.n	800720a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	3b01      	subs	r3, #1
 80071f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d109      	bne.n	800720a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	3b01      	subs	r3, #1
 8007204:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007206:	429a      	cmp	r2, r3
 8007208:	d06e      	beq.n	80072e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b0c      	cmp	r3, #12
 800720e:	d069      	beq.n	80072e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007210:	4b64      	ldr	r3, [pc, #400]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d105      	bne.n	8007228 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800721c:	4b61      	ldr	r3, [pc, #388]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0b7      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800722c:	4b5d      	ldr	r3, [pc, #372]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a5c      	ldr	r2, [pc, #368]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007236:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007238:	f7fe fd6a 	bl	8005d10 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007240:	f7fe fd66 	bl	8005d10 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e0a4      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007252:	4b54      	ldr	r3, [pc, #336]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1f0      	bne.n	8007240 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800725e:	4b51      	ldr	r3, [pc, #324]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	4b51      	ldr	r3, [pc, #324]	; (80073a8 <HAL_RCC_OscConfig+0x7c8>)
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800726e:	3a01      	subs	r2, #1
 8007270:	0112      	lsls	r2, r2, #4
 8007272:	4311      	orrs	r1, r2
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007278:	0212      	lsls	r2, r2, #8
 800727a:	4311      	orrs	r1, r2
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007280:	0852      	lsrs	r2, r2, #1
 8007282:	3a01      	subs	r2, #1
 8007284:	0552      	lsls	r2, r2, #21
 8007286:	4311      	orrs	r1, r2
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800728c:	0852      	lsrs	r2, r2, #1
 800728e:	3a01      	subs	r2, #1
 8007290:	0652      	lsls	r2, r2, #25
 8007292:	4311      	orrs	r1, r2
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007298:	0912      	lsrs	r2, r2, #4
 800729a:	0452      	lsls	r2, r2, #17
 800729c:	430a      	orrs	r2, r1
 800729e:	4941      	ldr	r1, [pc, #260]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80072a4:	4b3f      	ldr	r3, [pc, #252]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a3e      	ldr	r2, [pc, #248]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80072b0:	4b3c      	ldr	r3, [pc, #240]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4a3b      	ldr	r2, [pc, #236]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80072bc:	f7fe fd28 	bl	8005d10 <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072c4:	f7fe fd24 	bl	8005d10 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e062      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072d6:	4b33      	ldr	r3, [pc, #204]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f0      	beq.n	80072c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072e2:	e05a      	b.n	800739a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e059      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072e8:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d152      	bne.n	800739a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80072f4:	4b2b      	ldr	r3, [pc, #172]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 80072fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007300:	4b28      	ldr	r3, [pc, #160]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800730a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800730c:	f7fe fd00 	bl	8005d10 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007314:	f7fe fcfc 	bl	8005d10 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e03a      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007326:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0f0      	beq.n	8007314 <HAL_RCC_OscConfig+0x734>
 8007332:	e032      	b.n	800739a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b0c      	cmp	r3, #12
 8007338:	d02d      	beq.n	8007396 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800733a:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007340:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007344:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007346:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d105      	bne.n	800735e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007352:	4b14      	ldr	r3, [pc, #80]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	4a13      	ldr	r2, [pc, #76]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800735e:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	4a10      	ldr	r2, [pc, #64]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 8007364:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800736c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736e:	f7fe fccf 	bl	8005d10 <HAL_GetTick>
 8007372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007374:	e008      	b.n	8007388 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007376:	f7fe fccb 	bl	8005d10 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e009      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <HAL_RCC_OscConfig+0x7c4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f0      	bne.n	8007376 <HAL_RCC_OscConfig+0x796>
 8007394:	e001      	b.n	800739a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3720      	adds	r7, #32
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40021000 	.word	0x40021000
 80073a8:	f99d808c 	.word	0xf99d808c

080073ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e0c8      	b.n	8007552 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073c0:	4b66      	ldr	r3, [pc, #408]	; (800755c <HAL_RCC_ClockConfig+0x1b0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d910      	bls.n	80073f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ce:	4b63      	ldr	r3, [pc, #396]	; (800755c <HAL_RCC_ClockConfig+0x1b0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f023 0207 	bic.w	r2, r3, #7
 80073d6:	4961      	ldr	r1, [pc, #388]	; (800755c <HAL_RCC_ClockConfig+0x1b0>)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	4313      	orrs	r3, r2
 80073dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073de:	4b5f      	ldr	r3, [pc, #380]	; (800755c <HAL_RCC_ClockConfig+0x1b0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d001      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0b0      	b.n	8007552 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d04c      	beq.n	8007496 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b03      	cmp	r3, #3
 8007402:	d107      	bne.n	8007414 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007404:	4b56      	ldr	r3, [pc, #344]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d121      	bne.n	8007454 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e09e      	b.n	8007552 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d107      	bne.n	800742c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800741c:	4b50      	ldr	r3, [pc, #320]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d115      	bne.n	8007454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e092      	b.n	8007552 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d107      	bne.n	8007444 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007434:	4b4a      	ldr	r3, [pc, #296]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d109      	bne.n	8007454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e086      	b.n	8007552 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007444:	4b46      	ldr	r3, [pc, #280]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e07e      	b.n	8007552 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007454:	4b42      	ldr	r3, [pc, #264]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f023 0203 	bic.w	r2, r3, #3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	493f      	ldr	r1, [pc, #252]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 8007462:	4313      	orrs	r3, r2
 8007464:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007466:	f7fe fc53 	bl	8005d10 <HAL_GetTick>
 800746a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800746c:	e00a      	b.n	8007484 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800746e:	f7fe fc4f 	bl	8005d10 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	f241 3288 	movw	r2, #5000	; 0x1388
 800747c:	4293      	cmp	r3, r2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e066      	b.n	8007552 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007484:	4b36      	ldr	r3, [pc, #216]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 020c 	and.w	r2, r3, #12
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	429a      	cmp	r2, r3
 8007494:	d1eb      	bne.n	800746e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a2:	4b2f      	ldr	r3, [pc, #188]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	492c      	ldr	r1, [pc, #176]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074b4:	4b29      	ldr	r3, [pc, #164]	; (800755c <HAL_RCC_ClockConfig+0x1b0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d210      	bcs.n	80074e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <HAL_RCC_ClockConfig+0x1b0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f023 0207 	bic.w	r2, r3, #7
 80074ca:	4924      	ldr	r1, [pc, #144]	; (800755c <HAL_RCC_ClockConfig+0x1b0>)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d2:	4b22      	ldr	r3, [pc, #136]	; (800755c <HAL_RCC_ClockConfig+0x1b0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d001      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e036      	b.n	8007552 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d008      	beq.n	8007502 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074f0:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	4918      	ldr	r1, [pc, #96]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800750e:	4b14      	ldr	r3, [pc, #80]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4910      	ldr	r1, [pc, #64]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 800751e:	4313      	orrs	r3, r2
 8007520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007522:	f000 f825 	bl	8007570 <HAL_RCC_GetSysClockFreq>
 8007526:	4601      	mov	r1, r0
 8007528:	4b0d      	ldr	r3, [pc, #52]	; (8007560 <HAL_RCC_ClockConfig+0x1b4>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	091b      	lsrs	r3, r3, #4
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	4a0c      	ldr	r2, [pc, #48]	; (8007564 <HAL_RCC_ClockConfig+0x1b8>)
 8007534:	5cd3      	ldrb	r3, [r2, r3]
 8007536:	f003 031f 	and.w	r3, r3, #31
 800753a:	fa21 f303 	lsr.w	r3, r1, r3
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <HAL_RCC_ClockConfig+0x1bc>)
 8007540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007542:	4b0a      	ldr	r3, [pc, #40]	; (800756c <HAL_RCC_ClockConfig+0x1c0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f7fb f810 	bl	800256c <HAL_InitTick>
 800754c:	4603      	mov	r3, r0
 800754e:	72fb      	strb	r3, [r7, #11]

  return status;
 8007550:	7afb      	ldrb	r3, [r7, #11]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40022000 	.word	0x40022000
 8007560:	40021000 	.word	0x40021000
 8007564:	080193f0 	.word	0x080193f0
 8007568:	2000001c 	.word	0x2000001c
 800756c:	200000c0 	.word	0x200000c0

08007570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007570:	b480      	push	{r7}
 8007572:	b089      	sub	sp, #36	; 0x24
 8007574:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800757e:	4b3d      	ldr	r3, [pc, #244]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007588:	4b3a      	ldr	r3, [pc, #232]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0303 	and.w	r3, r3, #3
 8007590:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_GetSysClockFreq+0x34>
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b0c      	cmp	r3, #12
 800759c:	d121      	bne.n	80075e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d11e      	bne.n	80075e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80075a4:	4b33      	ldr	r3, [pc, #204]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d107      	bne.n	80075c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80075b0:	4b30      	ldr	r3, [pc, #192]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 80075b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075b6:	0a1b      	lsrs	r3, r3, #8
 80075b8:	f003 030f 	and.w	r3, r3, #15
 80075bc:	61fb      	str	r3, [r7, #28]
 80075be:	e005      	b.n	80075cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80075c0:	4b2c      	ldr	r3, [pc, #176]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80075cc:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <HAL_RCC_GetSysClockFreq+0x108>)
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10d      	bne.n	80075f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075e0:	e00a      	b.n	80075f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d102      	bne.n	80075ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075e8:	4b24      	ldr	r3, [pc, #144]	; (800767c <HAL_RCC_GetSysClockFreq+0x10c>)
 80075ea:	61bb      	str	r3, [r7, #24]
 80075ec:	e004      	b.n	80075f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d101      	bne.n	80075f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075f4:	4b22      	ldr	r3, [pc, #136]	; (8007680 <HAL_RCC_GetSysClockFreq+0x110>)
 80075f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2b0c      	cmp	r3, #12
 80075fc:	d133      	bne.n	8007666 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075fe:	4b1d      	ldr	r3, [pc, #116]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d002      	beq.n	8007614 <HAL_RCC_GetSysClockFreq+0xa4>
 800760e:	2b03      	cmp	r3, #3
 8007610:	d003      	beq.n	800761a <HAL_RCC_GetSysClockFreq+0xaa>
 8007612:	e005      	b.n	8007620 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007614:	4b19      	ldr	r3, [pc, #100]	; (800767c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007616:	617b      	str	r3, [r7, #20]
      break;
 8007618:	e005      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800761a:	4b19      	ldr	r3, [pc, #100]	; (8007680 <HAL_RCC_GetSysClockFreq+0x110>)
 800761c:	617b      	str	r3, [r7, #20]
      break;
 800761e:	e002      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	617b      	str	r3, [r7, #20]
      break;
 8007624:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	3301      	adds	r3, #1
 8007632:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007634:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	0a1b      	lsrs	r3, r3, #8
 800763a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	fb02 f203 	mul.w	r2, r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	fbb2 f3f3 	udiv	r3, r2, r3
 800764a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <HAL_RCC_GetSysClockFreq+0x104>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	0e5b      	lsrs	r3, r3, #25
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	3301      	adds	r3, #1
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007666:	69bb      	ldr	r3, [r7, #24]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3724      	adds	r7, #36	; 0x24
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	40021000 	.word	0x40021000
 8007678:	08019408 	.word	0x08019408
 800767c:	00f42400 	.word	0x00f42400
 8007680:	007a1200 	.word	0x007a1200

08007684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007688:	4b03      	ldr	r3, [pc, #12]	; (8007698 <HAL_RCC_GetHCLKFreq+0x14>)
 800768a:	681b      	ldr	r3, [r3, #0]
}
 800768c:	4618      	mov	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	2000001c 	.word	0x2000001c

0800769c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076a0:	f7ff fff0 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076a4:	4601      	mov	r1, r0
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	0adb      	lsrs	r3, r3, #11
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076b2:	5cd3      	ldrb	r3, [r2, r3]
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076bc:	4618      	mov	r0, r3
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40021000 	.word	0x40021000
 80076c4:	08019400 	.word	0x08019400

080076c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	220f      	movs	r2, #15
 80076d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80076d8:	4b12      	ldr	r3, [pc, #72]	; (8007724 <HAL_RCC_GetClockConfig+0x5c>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 0203 	and.w	r2, r3, #3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80076e4:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <HAL_RCC_GetClockConfig+0x5c>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80076f0:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <HAL_RCC_GetClockConfig+0x5c>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80076fc:	4b09      	ldr	r3, [pc, #36]	; (8007724 <HAL_RCC_GetClockConfig+0x5c>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	08db      	lsrs	r3, r3, #3
 8007702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800770a:	4b07      	ldr	r3, [pc, #28]	; (8007728 <HAL_RCC_GetClockConfig+0x60>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0207 	and.w	r2, r3, #7
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	601a      	str	r2, [r3, #0]
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40021000 	.word	0x40021000
 8007728:	40022000 	.word	0x40022000

0800772c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007738:	4b2a      	ldr	r3, [pc, #168]	; (80077e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800773a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007744:	f7ff f9ae 	bl	8006aa4 <HAL_PWREx_GetVoltageRange>
 8007748:	6178      	str	r0, [r7, #20]
 800774a:	e014      	b.n	8007776 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800774c:	4b25      	ldr	r3, [pc, #148]	; (80077e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800774e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007750:	4a24      	ldr	r2, [pc, #144]	; (80077e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007756:	6593      	str	r3, [r2, #88]	; 0x58
 8007758:	4b22      	ldr	r3, [pc, #136]	; (80077e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800775a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007764:	f7ff f99e 	bl	8006aa4 <HAL_PWREx_GetVoltageRange>
 8007768:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800776a:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800776c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007774:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800777c:	d10b      	bne.n	8007796 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b80      	cmp	r3, #128	; 0x80
 8007782:	d919      	bls.n	80077b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2ba0      	cmp	r3, #160	; 0xa0
 8007788:	d902      	bls.n	8007790 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800778a:	2302      	movs	r3, #2
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	e013      	b.n	80077b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007790:	2301      	movs	r3, #1
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	e010      	b.n	80077b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d902      	bls.n	80077a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800779c:	2303      	movs	r3, #3
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	e00a      	b.n	80077b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b80      	cmp	r3, #128	; 0x80
 80077a6:	d102      	bne.n	80077ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077a8:	2302      	movs	r3, #2
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	e004      	b.n	80077b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b70      	cmp	r3, #112	; 0x70
 80077b2:	d101      	bne.n	80077b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077b4:	2301      	movs	r3, #1
 80077b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f023 0207 	bic.w	r2, r3, #7
 80077c0:	4909      	ldr	r1, [pc, #36]	; (80077e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80077c8:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d001      	beq.n	80077da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40021000 	.word	0x40021000
 80077e8:	40022000 	.word	0x40022000

080077ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077f4:	2300      	movs	r3, #0
 80077f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077f8:	2300      	movs	r3, #0
 80077fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007804:	2b00      	cmp	r3, #0
 8007806:	d03f      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800780c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007810:	d01c      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007816:	d802      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00e      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800781c:	e01f      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800781e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007822:	d003      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007824:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007828:	d01c      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800782a:	e018      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800782c:	4b85      	ldr	r3, [pc, #532]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4a84      	ldr	r2, [pc, #528]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007836:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007838:	e015      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3304      	adds	r3, #4
 800783e:	2100      	movs	r1, #0
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fae1 	bl	8007e08 <RCCEx_PLLSAI1_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800784a:	e00c      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3320      	adds	r3, #32
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fbc8 	bl	8007fe8 <RCCEx_PLLSAI2_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800785c:	e003      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	74fb      	strb	r3, [r7, #19]
      break;
 8007862:	e000      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007866:	7cfb      	ldrb	r3, [r7, #19]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10b      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800786c:	4b75      	ldr	r3, [pc, #468]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800786e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007872:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800787a:	4972      	ldr	r1, [pc, #456]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007882:	e001      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d03f      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800789c:	d01c      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800789e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078a2:	d802      	bhi.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00e      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80078a8:	e01f      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80078aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078ae:	d003      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80078b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80078b4:	d01c      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80078b6:	e018      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80078b8:	4b62      	ldr	r3, [pc, #392]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	4a61      	ldr	r2, [pc, #388]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80078be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078c4:	e015      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3304      	adds	r3, #4
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fa9b 	bl	8007e08 <RCCEx_PLLSAI1_Config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078d6:	e00c      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3320      	adds	r3, #32
 80078dc:	2100      	movs	r1, #0
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fb82 	bl	8007fe8 <RCCEx_PLLSAI2_Config>
 80078e4:	4603      	mov	r3, r0
 80078e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078e8:	e003      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	74fb      	strb	r3, [r7, #19]
      break;
 80078ee:	e000      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80078f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f2:	7cfb      	ldrb	r3, [r7, #19]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10b      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078f8:	4b52      	ldr	r3, [pc, #328]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80078fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007906:	494f      	ldr	r1, [pc, #316]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007908:	4313      	orrs	r3, r2
 800790a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800790e:	e001      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007910:	7cfb      	ldrb	r3, [r7, #19]
 8007912:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80a0 	beq.w	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007922:	2300      	movs	r3, #0
 8007924:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007926:	4b47      	ldr	r3, [pc, #284]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007936:	2300      	movs	r3, #0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00d      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800793c:	4b41      	ldr	r3, [pc, #260]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800793e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007940:	4a40      	ldr	r2, [pc, #256]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007946:	6593      	str	r3, [r2, #88]	; 0x58
 8007948:	4b3e      	ldr	r3, [pc, #248]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800794a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007950:	60bb      	str	r3, [r7, #8]
 8007952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007954:	2301      	movs	r3, #1
 8007956:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007958:	4b3b      	ldr	r3, [pc, #236]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a3a      	ldr	r2, [pc, #232]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800795e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007964:	f7fe f9d4 	bl	8005d10 <HAL_GetTick>
 8007968:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800796a:	e009      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800796c:	f7fe f9d0 	bl	8005d10 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d902      	bls.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	74fb      	strb	r3, [r7, #19]
        break;
 800797e:	e005      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007980:	4b31      	ldr	r3, [pc, #196]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0ef      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800798c:	7cfb      	ldrb	r3, [r7, #19]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d15c      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007992:	4b2c      	ldr	r3, [pc, #176]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01f      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d019      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079b0:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079bc:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80079be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c2:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80079c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079cc:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	4a1c      	ldr	r2, [pc, #112]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80079d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079dc:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d016      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ee:	f7fe f98f 	bl	8005d10 <HAL_GetTick>
 80079f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079f4:	e00b      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079f6:	f7fe f98b 	bl	8005d10 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d902      	bls.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8007a0c:	e006      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0ec      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007a1c:	7cfb      	ldrb	r3, [r7, #19]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10c      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a22:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a32:	4904      	ldr	r1, [pc, #16]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a3a:	e009      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a3c:	7cfb      	ldrb	r3, [r7, #19]
 8007a3e:	74bb      	strb	r3, [r7, #18]
 8007a40:	e006      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8007a42:	bf00      	nop
 8007a44:	40021000 	.word	0x40021000
 8007a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4c:	7cfb      	ldrb	r3, [r7, #19]
 8007a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a50:	7c7b      	ldrb	r3, [r7, #17]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d105      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a56:	4b9e      	ldr	r3, [pc, #632]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	4a9d      	ldr	r2, [pc, #628]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a6e:	4b98      	ldr	r3, [pc, #608]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a74:	f023 0203 	bic.w	r2, r3, #3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	4994      	ldr	r1, [pc, #592]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a90:	4b8f      	ldr	r3, [pc, #572]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	f023 020c 	bic.w	r2, r3, #12
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9e:	498c      	ldr	r1, [pc, #560]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0304 	and.w	r3, r3, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ab2:	4b87      	ldr	r3, [pc, #540]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	4983      	ldr	r1, [pc, #524]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0308 	and.w	r3, r3, #8
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ad4:	4b7e      	ldr	r3, [pc, #504]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae2:	497b      	ldr	r1, [pc, #492]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007af6:	4b76      	ldr	r3, [pc, #472]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b04:	4972      	ldr	r1, [pc, #456]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b18:	4b6d      	ldr	r3, [pc, #436]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	496a      	ldr	r1, [pc, #424]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b3a:	4b65      	ldr	r3, [pc, #404]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b48:	4961      	ldr	r1, [pc, #388]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b5c:	4b5c      	ldr	r3, [pc, #368]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6a:	4959      	ldr	r1, [pc, #356]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b7e:	4b54      	ldr	r3, [pc, #336]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8c:	4950      	ldr	r1, [pc, #320]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ba0:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bae:	4948      	ldr	r1, [pc, #288]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bc2:	4b43      	ldr	r3, [pc, #268]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd0:	493f      	ldr	r1, [pc, #252]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d028      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007be4:	4b3a      	ldr	r3, [pc, #232]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf2:	4937      	ldr	r1, [pc, #220]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c02:	d106      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c04:	4b32      	ldr	r3, [pc, #200]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	4a31      	ldr	r2, [pc, #196]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0e:	60d3      	str	r3, [r2, #12]
 8007c10:	e011      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c1a:	d10c      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	2101      	movs	r1, #1
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f8f0 	bl	8007e08 <RCCEx_PLLSAI1_Config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c2c:	7cfb      	ldrb	r3, [r7, #19]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8007c32:	7cfb      	ldrb	r3, [r7, #19]
 8007c34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d028      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c42:	4b23      	ldr	r3, [pc, #140]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c50:	491f      	ldr	r1, [pc, #124]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c60:	d106      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c62:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4a1a      	ldr	r2, [pc, #104]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c6c:	60d3      	str	r3, [r2, #12]
 8007c6e:	e011      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c78:	d10c      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	2101      	movs	r1, #1
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f8c1 	bl	8007e08 <RCCEx_PLLSAI1_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c8a:	7cfb      	ldrb	r3, [r7, #19]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8007c90:	7cfb      	ldrb	r3, [r7, #19]
 8007c92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d02b      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cae:	4908      	ldr	r1, [pc, #32]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cbe:	d109      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc0:	4b03      	ldr	r3, [pc, #12]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	4a02      	ldr	r2, [pc, #8]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cca:	60d3      	str	r3, [r2, #12]
 8007ccc:	e014      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007cce:	bf00      	nop
 8007cd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cdc:	d10c      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 f88f 	bl	8007e08 <RCCEx_PLLSAI1_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007cee:	7cfb      	ldrb	r3, [r7, #19]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8007cf4:	7cfb      	ldrb	r3, [r7, #19]
 8007cf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d02f      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d04:	4b2b      	ldr	r3, [pc, #172]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d12:	4928      	ldr	r1, [pc, #160]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d22:	d10d      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3304      	adds	r3, #4
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 f86c 	bl	8007e08 <RCCEx_PLLSAI1_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d34:	7cfb      	ldrb	r3, [r7, #19]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d014      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007d3a:	7cfb      	ldrb	r3, [r7, #19]
 8007d3c:	74bb      	strb	r3, [r7, #18]
 8007d3e:	e011      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d48:	d10c      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3320      	adds	r3, #32
 8007d4e:	2102      	movs	r1, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f949 	bl	8007fe8 <RCCEx_PLLSAI2_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d5a:	7cfb      	ldrb	r3, [r7, #19]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007d60:	7cfb      	ldrb	r3, [r7, #19]
 8007d62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d70:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7e:	490d      	ldr	r1, [pc, #52]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d92:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007da2:	4904      	ldr	r1, [pc, #16]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007daa:	7cbb      	ldrb	r3, [r7, #18]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40021000 	.word	0x40021000

08007db8 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8007dbc:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc2:	4a08      	ldr	r2, [pc, #32]	; (8007de4 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8007dc4:	f023 0320 	bic.w	r3, r3, #32
 8007dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	4a04      	ldr	r2, [pc, #16]	; (8007de4 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8007dd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd6:	6193      	str	r3, [r2, #24]
}
 8007dd8:	bf00      	nop
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	40021000 	.word	0x40021000

08007de8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007df2:	f043 0304 	orr.w	r3, r3, #4
 8007df6:	6013      	str	r3, [r2, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40021000 	.word	0x40021000

08007e08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e16:	4b73      	ldr	r3, [pc, #460]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d018      	beq.n	8007e54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007e22:	4b70      	ldr	r3, [pc, #448]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f003 0203 	and.w	r2, r3, #3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d10d      	bne.n	8007e4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
       ||
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007e3a:	4b6a      	ldr	r3, [pc, #424]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
       ||
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d044      	beq.n	8007ed8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	73fb      	strb	r3, [r7, #15]
 8007e52:	e041      	b.n	8007ed8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d00c      	beq.n	8007e76 <RCCEx_PLLSAI1_Config+0x6e>
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d013      	beq.n	8007e88 <RCCEx_PLLSAI1_Config+0x80>
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d120      	bne.n	8007ea6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007e64:	4b5f      	ldr	r3, [pc, #380]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d11d      	bne.n	8007eac <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e74:	e01a      	b.n	8007eac <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007e76:	4b5b      	ldr	r3, [pc, #364]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d116      	bne.n	8007eb0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e86:	e013      	b.n	8007eb0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007e88:	4b56      	ldr	r3, [pc, #344]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10f      	bne.n	8007eb4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e94:	4b53      	ldr	r3, [pc, #332]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ea4:	e006      	b.n	8007eb4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eaa:	e004      	b.n	8007eb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007eac:	bf00      	nop
 8007eae:	e002      	b.n	8007eb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e000      	b.n	8007eb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007eb4:	bf00      	nop
    }

    if(status == HAL_OK)
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10d      	bne.n	8007ed8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007ebc:	4b49      	ldr	r3, [pc, #292]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6819      	ldr	r1, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	4944      	ldr	r1, [pc, #272]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d17d      	bne.n	8007fda <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ede:	4b41      	ldr	r3, [pc, #260]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a40      	ldr	r2, [pc, #256]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ee4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eea:	f7fd ff11 	bl	8005d10 <HAL_GetTick>
 8007eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ef0:	e009      	b.n	8007f06 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ef2:	f7fd ff0d 	bl	8005d10 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d902      	bls.n	8007f06 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	73fb      	strb	r3, [r7, #15]
        break;
 8007f04:	e005      	b.n	8007f12 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f06:	4b37      	ldr	r3, [pc, #220]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1ef      	bne.n	8007ef2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d160      	bne.n	8007fda <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d111      	bne.n	8007f42 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f1e:	4b31      	ldr	r3, [pc, #196]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6892      	ldr	r2, [r2, #8]
 8007f2e:	0211      	lsls	r1, r2, #8
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	68d2      	ldr	r2, [r2, #12]
 8007f34:	0912      	lsrs	r2, r2, #4
 8007f36:	0452      	lsls	r2, r2, #17
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	492a      	ldr	r1, [pc, #168]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	610b      	str	r3, [r1, #16]
 8007f40:	e027      	b.n	8007f92 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d112      	bne.n	8007f6e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f48:	4b26      	ldr	r3, [pc, #152]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007f50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6892      	ldr	r2, [r2, #8]
 8007f58:	0211      	lsls	r1, r2, #8
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6912      	ldr	r2, [r2, #16]
 8007f5e:	0852      	lsrs	r2, r2, #1
 8007f60:	3a01      	subs	r2, #1
 8007f62:	0552      	lsls	r2, r2, #21
 8007f64:	430a      	orrs	r2, r1
 8007f66:	491f      	ldr	r1, [pc, #124]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	610b      	str	r3, [r1, #16]
 8007f6c:	e011      	b.n	8007f92 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f6e:	4b1d      	ldr	r3, [pc, #116]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007f76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6892      	ldr	r2, [r2, #8]
 8007f7e:	0211      	lsls	r1, r2, #8
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6952      	ldr	r2, [r2, #20]
 8007f84:	0852      	lsrs	r2, r2, #1
 8007f86:	3a01      	subs	r2, #1
 8007f88:	0652      	lsls	r2, r2, #25
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	4915      	ldr	r1, [pc, #84]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a13      	ldr	r2, [pc, #76]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f9e:	f7fd feb7 	bl	8005d10 <HAL_GetTick>
 8007fa2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007fa4:	e009      	b.n	8007fba <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fa6:	f7fd feb3 	bl	8005d10 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d902      	bls.n	8007fba <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	73fb      	strb	r3, [r7, #15]
          break;
 8007fb8:	e005      	b.n	8007fc6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007fba:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0ef      	beq.n	8007fa6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d106      	bne.n	8007fda <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	4903      	ldr	r1, [pc, #12]	; (8007fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40021000 	.word	0x40021000

08007fe8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ff6:	4b68      	ldr	r3, [pc, #416]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d018      	beq.n	8008034 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008002:	4b65      	ldr	r3, [pc, #404]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f003 0203 	and.w	r2, r3, #3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d10d      	bne.n	800802e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
       ||
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800801a:	4b5f      	ldr	r3, [pc, #380]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	091b      	lsrs	r3, r3, #4
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
       ||
 800802a:	429a      	cmp	r2, r3
 800802c:	d044      	beq.n	80080b8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	73fb      	strb	r3, [r7, #15]
 8008032:	e041      	b.n	80080b8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d00c      	beq.n	8008056 <RCCEx_PLLSAI2_Config+0x6e>
 800803c:	2b03      	cmp	r3, #3
 800803e:	d013      	beq.n	8008068 <RCCEx_PLLSAI2_Config+0x80>
 8008040:	2b01      	cmp	r3, #1
 8008042:	d120      	bne.n	8008086 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008044:	4b54      	ldr	r3, [pc, #336]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d11d      	bne.n	800808c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008054:	e01a      	b.n	800808c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008056:	4b50      	ldr	r3, [pc, #320]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800805e:	2b00      	cmp	r3, #0
 8008060:	d116      	bne.n	8008090 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008066:	e013      	b.n	8008090 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008068:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10f      	bne.n	8008094 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008074:	4b48      	ldr	r3, [pc, #288]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008084:	e006      	b.n	8008094 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	73fb      	strb	r3, [r7, #15]
      break;
 800808a:	e004      	b.n	8008096 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800808c:	bf00      	nop
 800808e:	e002      	b.n	8008096 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008090:	bf00      	nop
 8008092:	e000      	b.n	8008096 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008094:	bf00      	nop
    }

    if(status == HAL_OK)
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10d      	bne.n	80080b8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800809c:	4b3e      	ldr	r3, [pc, #248]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6819      	ldr	r1, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	430b      	orrs	r3, r1
 80080b2:	4939      	ldr	r1, [pc, #228]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d167      	bne.n	800818e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80080be:	4b36      	ldr	r3, [pc, #216]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a35      	ldr	r2, [pc, #212]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 80080c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ca:	f7fd fe21 	bl	8005d10 <HAL_GetTick>
 80080ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80080d0:	e009      	b.n	80080e6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80080d2:	f7fd fe1d 	bl	8005d10 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d902      	bls.n	80080e6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	73fb      	strb	r3, [r7, #15]
        break;
 80080e4:	e005      	b.n	80080f2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80080e6:	4b2c      	ldr	r3, [pc, #176]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1ef      	bne.n	80080d2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d14a      	bne.n	800818e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d111      	bne.n	8008122 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80080fe:	4b26      	ldr	r3, [pc, #152]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6892      	ldr	r2, [r2, #8]
 800810e:	0211      	lsls	r1, r2, #8
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	68d2      	ldr	r2, [r2, #12]
 8008114:	0912      	lsrs	r2, r2, #4
 8008116:	0452      	lsls	r2, r2, #17
 8008118:	430a      	orrs	r2, r1
 800811a:	491f      	ldr	r1, [pc, #124]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 800811c:	4313      	orrs	r3, r2
 800811e:	614b      	str	r3, [r1, #20]
 8008120:	e011      	b.n	8008146 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008122:	4b1d      	ldr	r3, [pc, #116]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800812a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6892      	ldr	r2, [r2, #8]
 8008132:	0211      	lsls	r1, r2, #8
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6912      	ldr	r2, [r2, #16]
 8008138:	0852      	lsrs	r2, r2, #1
 800813a:	3a01      	subs	r2, #1
 800813c:	0652      	lsls	r2, r2, #25
 800813e:	430a      	orrs	r2, r1
 8008140:	4915      	ldr	r1, [pc, #84]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008142:	4313      	orrs	r3, r2
 8008144:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a13      	ldr	r2, [pc, #76]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 800814c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008150:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008152:	f7fd fddd 	bl	8005d10 <HAL_GetTick>
 8008156:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008158:	e009      	b.n	800816e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800815a:	f7fd fdd9 	bl	8005d10 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d902      	bls.n	800816e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	73fb      	strb	r3, [r7, #15]
          break;
 800816c:	e005      	b.n	800817a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800816e:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0ef      	beq.n	800815a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008180:	4b05      	ldr	r3, [pc, #20]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008182:	695a      	ldr	r2, [r3, #20]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	4903      	ldr	r1, [pc, #12]	; (8008198 <RCCEx_PLLSAI2_Config+0x1b0>)
 800818a:	4313      	orrs	r3, r2
 800818c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40021000 	.word	0x40021000

0800819c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d06c      	beq.n	8008288 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d106      	bne.n	80081c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7fa f8b6 	bl	8002334 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	22ca      	movs	r2, #202	; 0xca
 80081d6:	625a      	str	r2, [r3, #36]	; 0x24
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2253      	movs	r2, #83	; 0x53
 80081de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa49 	bl	8008678 <RTC_EnterInitMode>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d14b      	bne.n	8008288 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008202:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6899      	ldr	r1, [r3, #8]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	431a      	orrs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	68d2      	ldr	r2, [r2, #12]
 800822a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6919      	ldr	r1, [r3, #16]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	041a      	lsls	r2, r3, #16
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa4d 	bl	80086e0 <RTC_ExitInitMode>
 8008246:	4603      	mov	r3, r0
 8008248:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d11b      	bne.n	8008288 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0203 	bic.w	r2, r2, #3
 800825e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69da      	ldr	r2, [r3, #28]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	22ff      	movs	r2, #255	; 0xff
 800827e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008288:	7bfb      	ldrb	r3, [r7, #15]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008292:	b590      	push	{r4, r7, lr}
 8008294:	b087      	sub	sp, #28
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_RTC_SetTime+0x1a>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e08b      	b.n	80083c4 <HAL_RTC_SetTime+0x132>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	22ca      	movs	r2, #202	; 0xca
 80082c2:	625a      	str	r2, [r3, #36]	; 0x24
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2253      	movs	r2, #83	; 0x53
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f9d3 	bl	8008678 <RTC_EnterInitMode>
 80082d2:	4603      	mov	r3, r0
 80082d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80082d6:	7cfb      	ldrb	r3, [r7, #19]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d163      	bne.n	80083a4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d126      	bne.n	8008330 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fa2e 	bl	800875c <RTC_ByteToBcd2>
 8008300:	4603      	mov	r3, r0
 8008302:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fa27 	bl	800875c <RTC_ByteToBcd2>
 800830e:	4603      	mov	r3, r0
 8008310:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008312:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	789b      	ldrb	r3, [r3, #2]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fa1f 	bl	800875c <RTC_ByteToBcd2>
 800831e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008320:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	78db      	ldrb	r3, [r3, #3]
 8008328:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e018      	b.n	8008362 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2200      	movs	r2, #0
 8008342:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008350:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008356:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	78db      	ldrb	r3, [r3, #3]
 800835c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800835e:	4313      	orrs	r3, r2
 8008360:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800836c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008370:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008380:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6899      	ldr	r1, [r3, #8]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	431a      	orrs	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f9a0 	bl	80086e0 <RTC_ExitInitMode>
 80083a0:	4603      	mov	r3, r0
 80083a2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	22ff      	movs	r2, #255	; 0xff
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80083ac:	7cfb      	ldrb	r3, [r7, #19]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80083c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd90      	pop	{r4, r7, pc}

080083cc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80083fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80083fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	b2db      	uxtb	r3, r3
 8008406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800840a:	b2da      	uxtb	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841a:	b2da      	uxtb	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008428:	b2da      	uxtb	r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	0d9b      	lsrs	r3, r3, #22
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	b2da      	uxtb	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d11a      	bne.n	800847a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	4618      	mov	r0, r3
 800844a:	f000 f9a7 	bl	800879c <RTC_Bcd2ToByte>
 800844e:	4603      	mov	r3, r0
 8008450:	461a      	mov	r2, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f99e 	bl	800879c <RTC_Bcd2ToByte>
 8008460:	4603      	mov	r3, r0
 8008462:	461a      	mov	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	789b      	ldrb	r3, [r3, #2]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 f995 	bl	800879c <RTC_Bcd2ToByte>
 8008472:	4603      	mov	r3, r0
 8008474:	461a      	mov	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008484:	b590      	push	{r4, r7, lr}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <HAL_RTC_SetDate+0x1a>
 800849a:	2302      	movs	r3, #2
 800849c:	e075      	b.n	800858a <HAL_RTC_SetDate+0x106>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2202      	movs	r2, #2
 80084aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10e      	bne.n	80084d2 <HAL_RTC_SetDate+0x4e>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d008      	beq.n	80084d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	f023 0310 	bic.w	r3, r3, #16
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	330a      	adds	r3, #10
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d11c      	bne.n	8008512 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	78db      	ldrb	r3, [r3, #3]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f93d 	bl	800875c <RTC_ByteToBcd2>
 80084e2:	4603      	mov	r3, r0
 80084e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	785b      	ldrb	r3, [r3, #1]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f936 	bl	800875c <RTC_ByteToBcd2>
 80084f0:	4603      	mov	r3, r0
 80084f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80084f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	789b      	ldrb	r3, [r3, #2]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f92e 	bl	800875c <RTC_ByteToBcd2>
 8008500:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008502:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	e00e      	b.n	8008530 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	78db      	ldrb	r3, [r3, #3]
 8008516:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800851e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008524:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800852c:	4313      	orrs	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	22ca      	movs	r2, #202	; 0xca
 8008536:	625a      	str	r2, [r3, #36]	; 0x24
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2253      	movs	r2, #83	; 0x53
 800853e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 f899 	bl	8008678 <RTC_EnterInitMode>
 8008546:	4603      	mov	r3, r0
 8008548:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800854a:	7cfb      	ldrb	r3, [r7, #19]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10c      	bne.n	800856a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800855a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800855e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f8bd 	bl	80086e0 <RTC_ExitInitMode>
 8008566:	4603      	mov	r3, r0
 8008568:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	22ff      	movs	r2, #255	; 0xff
 8008570:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008572:	7cfb      	ldrb	r3, [r7, #19]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008588:	7cfb      	ldrb	r3, [r7, #19]
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	bd90      	pop	{r4, r7, pc}

08008592 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b086      	sub	sp, #24
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80085a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	0b5b      	lsrs	r3, r3, #13
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11a      	bne.n	8008622 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	78db      	ldrb	r3, [r3, #3]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f8d3 	bl	800879c <RTC_Bcd2ToByte>
 80085f6:	4603      	mov	r3, r0
 80085f8:	461a      	mov	r2, r3
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f8ca 	bl	800879c <RTC_Bcd2ToByte>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	789b      	ldrb	r3, [r3, #2]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f8c1 	bl	800879c <RTC_Bcd2ToByte>
 800861a:	4603      	mov	r3, r0
 800861c:	461a      	mov	r2, r3
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008642:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008644:	f7fd fb64 	bl	8005d10 <HAL_GetTick>
 8008648:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800864a:	e009      	b.n	8008660 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800864c:	f7fd fb60 	bl	8005d10 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800865a:	d901      	bls.n	8008660 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e007      	b.n	8008670 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0ee      	beq.n	800864c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d120      	bne.n	80086d4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f04f 32ff 	mov.w	r2, #4294967295
 800869a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800869c:	f7fd fb38 	bl	8005d10 <HAL_GetTick>
 80086a0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80086a2:	e00d      	b.n	80086c0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80086a4:	f7fd fb34 	bl	8005d10 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086b2:	d905      	bls.n	80086c0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2203      	movs	r2, #3
 80086bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <RTC_EnterInitMode+0x5c>
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d1e7      	bne.n	80086a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80086ec:	4b1a      	ldr	r3, [pc, #104]	; (8008758 <RTC_ExitInitMode+0x78>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	4a19      	ldr	r2, [pc, #100]	; (8008758 <RTC_ExitInitMode+0x78>)
 80086f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086f6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80086f8:	4b17      	ldr	r3, [pc, #92]	; (8008758 <RTC_ExitInitMode+0x78>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10c      	bne.n	800871e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff91 	bl	800862c <HAL_RTC_WaitForSynchro>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01e      	beq.n	800874e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2203      	movs	r2, #3
 8008714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	e017      	b.n	800874e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800871e:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <RTC_ExitInitMode+0x78>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	4a0d      	ldr	r2, [pc, #52]	; (8008758 <RTC_ExitInitMode+0x78>)
 8008724:	f023 0320 	bic.w	r3, r3, #32
 8008728:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff ff7e 	bl	800862c <HAL_RTC_WaitForSynchro>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2203      	movs	r2, #3
 800873a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008742:	4b05      	ldr	r3, [pc, #20]	; (8008758 <RTC_ExitInitMode+0x78>)
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	4a04      	ldr	r2, [pc, #16]	; (8008758 <RTC_ExitInitMode+0x78>)
 8008748:	f043 0320 	orr.w	r3, r3, #32
 800874c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40002800 	.word	0x40002800

0800875c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800876e:	e005      	b.n	800877c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	3b0a      	subs	r3, #10
 800877a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	2b09      	cmp	r3, #9
 8008780:	d8f6      	bhi.n	8008770 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	b2da      	uxtb	r2, r3
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	4313      	orrs	r3, r2
 800878e:	b2db      	uxtb	r3, r3
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	091b      	lsrs	r3, r3, #4
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	461a      	mov	r2, r3
 80087ae:	0092      	lsls	r2, r2, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	f003 030f 	and.w	r3, r3, #15
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	4413      	add	r3, r2
 80087c2:	b2db      	uxtb	r3, r3
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e0be      	b.n	8008960 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d108      	bne.n	80087fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087f2:	d009      	beq.n	8008808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	61da      	str	r2, [r3, #28]
 80087fa:	e005      	b.n	8008808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d106      	bne.n	8008822 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7f9 fdcf 	bl	80023c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2202      	movs	r2, #2
 8008826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008838:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008842:	d902      	bls.n	800884a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	e002      	b.n	8008850 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800884a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800884e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008858:	d007      	beq.n	800886a <HAL_SPI_Init+0x9a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008862:	d002      	beq.n	800886a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800887a:	431a      	orrs	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ac:	ea42 0103 	orr.w	r1, r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c8:	d11b      	bne.n	8008902 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088da:	d903      	bls.n	80088e4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	631a      	str	r2, [r3, #48]	; 0x30
 80088e2:	e002      	b.n	80088ea <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d107      	bne.n	8008902 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008900:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	0c1b      	lsrs	r3, r3, #16
 8008908:	f003 0204 	and.w	r2, r3, #4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	431a      	orrs	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008928:	ea42 0103 	orr.w	r1, r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008942:	d105      	bne.n	8008950 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	b292      	uxth	r2, r2
 800894e:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e01a      	b.n	80089b0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2202      	movs	r2, #2
 800897e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008990:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7f9 fd92 	bl	80024bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	4613      	mov	r3, r2
 80089c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_SPI_Transmit+0x22>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e17a      	b.n	8008cd0 <HAL_SPI_Transmit+0x318>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089e2:	f7fd f995 	bl	8005d10 <HAL_GetTick>
 80089e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d002      	beq.n	80089fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80089f8:	2302      	movs	r3, #2
 80089fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089fc:	e15f      	b.n	8008cbe <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_SPI_Transmit+0x52>
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a0e:	e156      	b.n	8008cbe <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2203      	movs	r2, #3
 8008a14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	88fa      	ldrh	r2, [r7, #6]
 8008a28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	88fa      	ldrh	r2, [r7, #6]
 8008a2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a5a:	d10f      	bne.n	8008a7c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a7a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a84:	d10f      	bne.n	8008aa6 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008aa4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d007      	beq.n	8008ac4 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008acc:	d94b      	bls.n	8008b66 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <HAL_SPI_Transmit+0x124>
 8008ad6:	8afb      	ldrh	r3, [r7, #22]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d13e      	bne.n	8008b5a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	881a      	ldrh	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	1c9a      	adds	r2, r3, #2
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b00:	e02b      	b.n	8008b5a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d112      	bne.n	8008b36 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	881a      	ldrh	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	1c9a      	adds	r2, r3, #2
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b34:	e011      	b.n	8008b5a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b36:	f7fd f8eb 	bl	8005d10 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d803      	bhi.n	8008b4e <HAL_SPI_Transmit+0x196>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4c:	d102      	bne.n	8008b54 <HAL_SPI_Transmit+0x19c>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d102      	bne.n	8008b5a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b58:	e0b1      	b.n	8008cbe <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1ce      	bne.n	8008b02 <HAL_SPI_Transmit+0x14a>
 8008b64:	e07c      	b.n	8008c60 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <HAL_SPI_Transmit+0x1bc>
 8008b6e:	8afb      	ldrh	r3, [r7, #22]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d170      	bne.n	8008c56 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d912      	bls.n	8008ba4 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	881a      	ldrh	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	1c9a      	adds	r2, r3, #2
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b02      	subs	r3, #2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ba2:	e058      	b.n	8008c56 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	330c      	adds	r3, #12
 8008bae:	7812      	ldrb	r2, [r2, #0]
 8008bb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008bca:	e044      	b.n	8008c56 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d12b      	bne.n	8008c32 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d912      	bls.n	8008c0a <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	881a      	ldrh	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	1c9a      	adds	r2, r3, #2
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	3b02      	subs	r3, #2
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c08:	e025      	b.n	8008c56 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	330c      	adds	r3, #12
 8008c14:	7812      	ldrb	r2, [r2, #0]
 8008c16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c30:	e011      	b.n	8008c56 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c32:	f7fd f86d 	bl	8005d10 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d803      	bhi.n	8008c4a <HAL_SPI_Transmit+0x292>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d102      	bne.n	8008c50 <HAL_SPI_Transmit+0x298>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c54:	e033      	b.n	8008cbe <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1b5      	bne.n	8008bcc <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c68:	d107      	bne.n	8008c7a <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c78:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fed8 	bl	8009a34 <SPI_EndRxTxTransaction>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	77fb      	strb	r3, [r7, #31]
 8008cba:	e000      	b.n	8008cbe <HAL_SPI_Transmit+0x306>
  }

error:
 8008cbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3720      	adds	r7, #32
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08e      	sub	sp, #56	; 0x38
 8008cdc:	af02      	add	r7, sp, #8
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d101      	bne.n	8008cfe <HAL_SPI_TransmitReceive+0x26>
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	e2c0      	b.n	8009280 <HAL_SPI_TransmitReceive+0x5a8>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d06:	f7fd f803 	bl	8005d10 <HAL_GetTick>
 8008d0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d1c:	887b      	ldrh	r3, [r7, #2]
 8008d1e:	837b      	strh	r3, [r7, #26]
  initial_RxXferCount = Size;
 8008d20:	887b      	ldrh	r3, [r7, #2]
 8008d22:	833b      	strh	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	617b      	str	r3, [r7, #20]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	613b      	str	r3, [r7, #16]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d00f      	beq.n	8008d5c <HAL_SPI_TransmitReceive+0x84>
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d42:	d107      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x7c>
 8008d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d003      	beq.n	8008d5c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008d54:	2302      	movs	r3, #2
 8008d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d5a:	e287      	b.n	800926c <HAL_SPI_TransmitReceive+0x594>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <HAL_SPI_TransmitReceive+0x96>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <HAL_SPI_TransmitReceive+0x96>
 8008d68:	887b      	ldrh	r3, [r7, #2]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d103      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d74:	e27a      	b.n	800926c <HAL_SPI_TransmitReceive+0x594>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d003      	beq.n	8008d8a <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2205      	movs	r2, #5
 8008d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	887a      	ldrh	r2, [r7, #2]
 8008d9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	887a      	ldrh	r2, [r7, #2]
 8008da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	887a      	ldrh	r2, [r7, #2]
 8008db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	887a      	ldrh	r2, [r7, #2]
 8008db6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dcc:	d10f      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x116>
  {
    SPI_RESET_CRC(hspi);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dec:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008df6:	d802      	bhi.n	8008dfe <HAL_SPI_TransmitReceive+0x126>
 8008df8:	8b3b      	ldrh	r3, [r7, #24]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d908      	bls.n	8008e10 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e0c:	605a      	str	r2, [r3, #4]
 8008e0e:	e007      	b.n	8008e20 <HAL_SPI_TransmitReceive+0x148>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2a:	2b40      	cmp	r3, #64	; 0x40
 8008e2c:	d007      	beq.n	8008e3e <HAL_SPI_TransmitReceive+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e46:	f240 80a4 	bls.w	8008f92 <HAL_SPI_TransmitReceive+0x2ba>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_SPI_TransmitReceive+0x182>
 8008e52:	8b7b      	ldrh	r3, [r7, #26]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	f040 808e 	bne.w	8008f76 <HAL_SPI_TransmitReceive+0x29e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	881a      	ldrh	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	1c9a      	adds	r2, r3, #2
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e7e:	e07a      	b.n	8008f76 <HAL_SPI_TransmitReceive+0x29e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d13f      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x236>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d03a      	beq.n	8008f0e <HAL_SPI_TransmitReceive+0x236>
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d137      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x236>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	881a      	ldrh	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eae:	1c9a      	adds	r2, r3, #2
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d11e      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x236>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ed8:	d119      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x236>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10c      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x226>
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f003 0308 	and.w	r3, r3, #8
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <HAL_SPI_TransmitReceive+0x226>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008efc:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f0c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d11c      	bne.n	8008f56 <HAL_SPI_TransmitReceive+0x27e>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d016      	beq.n	8008f56 <HAL_SPI_TransmitReceive+0x27e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	b292      	uxth	r2, r2
 8008f34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	1c9a      	adds	r2, r3, #2
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f52:	2301      	movs	r3, #1
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f56:	f7fc fedb 	bl	8005d10 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d807      	bhi.n	8008f76 <HAL_SPI_TransmitReceive+0x29e>
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6c:	d003      	beq.n	8008f76 <HAL_SPI_TransmitReceive+0x29e>
      {
        errorcode = HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f74:	e17a      	b.n	800926c <HAL_SPI_TransmitReceive+0x594>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f47f af7f 	bne.w	8008e80 <HAL_SPI_TransmitReceive+0x1a8>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f47f af78 	bne.w	8008e80 <HAL_SPI_TransmitReceive+0x1a8>
 8008f90:	e103      	b.n	800919a <HAL_SPI_TransmitReceive+0x4c2>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <HAL_SPI_TransmitReceive+0x2ca>
 8008f9a:	8b7b      	ldrh	r3, [r7, #26]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	f040 80ef 	bne.w	8009180 <HAL_SPI_TransmitReceive+0x4a8>
    {
      if (hspi->TxXferCount > 1U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d912      	bls.n	8008fd2 <HAL_SPI_TransmitReceive+0x2fa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb0:	881a      	ldrh	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	1c9a      	adds	r2, r3, #2
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	3b02      	subs	r3, #2
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fd0:	e0d6      	b.n	8009180 <HAL_SPI_TransmitReceive+0x4a8>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	330c      	adds	r3, #12
 8008fdc:	7812      	ldrb	r2, [r2, #0]
 8008fde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ff8:	e0c2      	b.n	8009180 <HAL_SPI_TransmitReceive+0x4a8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b02      	cmp	r3, #2
 8009006:	d158      	bne.n	80090ba <HAL_SPI_TransmitReceive+0x3e2>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900c:	b29b      	uxth	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d053      	beq.n	80090ba <HAL_SPI_TransmitReceive+0x3e2>
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	2b01      	cmp	r3, #1
 8009016:	d150      	bne.n	80090ba <HAL_SPI_TransmitReceive+0x3e2>
      {
        if (hspi->TxXferCount > 1U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b01      	cmp	r3, #1
 8009020:	d912      	bls.n	8009048 <HAL_SPI_TransmitReceive+0x370>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009026:	881a      	ldrh	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	1c9a      	adds	r2, r3, #2
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b02      	subs	r3, #2
 8009040:	b29a      	uxth	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009046:	e012      	b.n	800906e <HAL_SPI_TransmitReceive+0x396>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	7812      	ldrb	r2, [r2, #0]
 8009054:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009064:	b29b      	uxth	r3, r3
 8009066:	3b01      	subs	r3, #1
 8009068:	b29a      	uxth	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800906e:	2300      	movs	r3, #0
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009076:	b29b      	uxth	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	d11e      	bne.n	80090ba <HAL_SPI_TransmitReceive+0x3e2>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009084:	d119      	bne.n	80090ba <HAL_SPI_TransmitReceive+0x3e2>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10c      	bne.n	80090aa <HAL_SPI_TransmitReceive+0x3d2>
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <HAL_SPI_TransmitReceive+0x3d2>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090a8:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090b8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d148      	bne.n	800915a <HAL_SPI_TransmitReceive+0x482>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d042      	beq.n	800915a <HAL_SPI_TransmitReceive+0x482>
      {
        if (hspi->RxXferCount > 1U)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090da:	b29b      	uxth	r3, r3
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d923      	bls.n	8009128 <HAL_SPI_TransmitReceive+0x450>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	b292      	uxth	r2, r2
 80090ec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f2:	1c9a      	adds	r2, r3, #2
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b02      	subs	r3, #2
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b01      	cmp	r3, #1
 8009114:	d81f      	bhi.n	8009156 <HAL_SPI_TransmitReceive+0x47e>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009124:	605a      	str	r2, [r3, #4]
 8009126:	e016      	b.n	8009156 <HAL_SPI_TransmitReceive+0x47e>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f103 020c 	add.w	r2, r3, #12
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	7812      	ldrb	r2, [r2, #0]
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800914a:	b29b      	uxth	r3, r3
 800914c:	3b01      	subs	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009156:	2301      	movs	r3, #1
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800915a:	f7fc fdd9 	bl	8005d10 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009166:	429a      	cmp	r2, r3
 8009168:	d803      	bhi.n	8009172 <HAL_SPI_TransmitReceive+0x49a>
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009170:	d102      	bne.n	8009178 <HAL_SPI_TransmitReceive+0x4a0>
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <HAL_SPI_TransmitReceive+0x4a8>
      {
        errorcode = HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800917e:	e075      	b.n	800926c <HAL_SPI_TransmitReceive+0x594>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009184:	b29b      	uxth	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	f47f af37 	bne.w	8008ffa <HAL_SPI_TransmitReceive+0x322>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009192:	b29b      	uxth	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	f47f af30 	bne.w	8008ffa <HAL_SPI_TransmitReceive+0x322>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091a2:	d13e      	bne.n	8009222 <HAL_SPI_TransmitReceive+0x54a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	2201      	movs	r2, #1
 80091ac:	2101      	movs	r1, #1
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 fb2a 	bl	8009808 <SPI_WaitFlagStateUntilTimeout>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <HAL_SPI_TransmitReceive+0x4f6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091be:	f043 0202 	orr.w	r2, r3, #2
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80091cc:	e04e      	b.n	800926c <HAL_SPI_TransmitReceive+0x594>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80091d6:	d103      	bne.n	80091e0 <HAL_SPI_TransmitReceive+0x508>
    {
      /* Read 16bit CRC */
      READ_REG(hspi->Instance->DR);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	e020      	b.n	8009222 <HAL_SPI_TransmitReceive+0x54a>
    }
    else
    {
      /* Read 8bit CRC */
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	781b      	ldrb	r3, [r3, #0]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d118      	bne.n	8009222 <HAL_SPI_TransmitReceive+0x54a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	2201      	movs	r2, #1
 80091f8:	2101      	movs	r1, #1
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 fb04 	bl	8009808 <SPI_WaitFlagStateUntilTimeout>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d009      	beq.n	800921a <HAL_SPI_TransmitReceive+0x542>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800920a:	f043 0202 	orr.w	r2, r3, #2
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          goto error;
 8009218:	e028      	b.n	800926c <HAL_SPI_TransmitReceive+0x594>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	330c      	adds	r3, #12
 8009220:	781b      	ldrb	r3, [r3, #0]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b10      	cmp	r3, #16
 800922e:	d10d      	bne.n	800924c <HAL_SPI_TransmitReceive+0x574>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009234:	f043 0202 	orr.w	r2, r3, #2
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009244:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800924c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 fbef 	bl	8009a34 <SPI_EndRxTxTransaction>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <HAL_SPI_TransmitReceive+0x592>
  {
    errorcode = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2220      	movs	r2, #32
 8009266:	661a      	str	r2, [r3, #96]	; 0x60
 8009268:	e000      	b.n	800926c <HAL_SPI_TransmitReceive+0x594>
  }

error :
 800926a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800927c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009280:	4618      	mov	r0, r3
 8009282:	3730      	adds	r7, #48	; 0x30
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <HAL_SPI_Transmit_DMA+0x20>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e0ed      	b.n	8009484 <HAL_SPI_Transmit_DMA+0x1fc>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d002      	beq.n	80092c2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80092bc:	2302      	movs	r3, #2
 80092be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092c0:	e0db      	b.n	800947a <HAL_SPI_Transmit_DMA+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <HAL_SPI_Transmit_DMA+0x46>
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092d2:	e0d2      	b.n	800947a <HAL_SPI_Transmit_DMA+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2203      	movs	r2, #3
 80092d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	88fa      	ldrh	r2, [r7, #6]
 80092ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	88fa      	ldrh	r2, [r7, #6]
 80092f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800931e:	d10f      	bne.n	8009340 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800932e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800933e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009348:	d10f      	bne.n	800936a <HAL_SPI_Transmit_DMA+0xe2>
  {
    SPI_RESET_CRC(hspi);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009368:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800936e:	4a47      	ldr	r2, [pc, #284]	; (800948c <HAL_SPI_Transmit_DMA+0x204>)
 8009370:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009376:	4a46      	ldr	r2, [pc, #280]	; (8009490 <HAL_SPI_Transmit_DMA+0x208>)
 8009378:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937e:	4a45      	ldr	r2, [pc, #276]	; (8009494 <HAL_SPI_Transmit_DMA+0x20c>)
 8009380:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009386:	2200      	movs	r2, #0
 8009388:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009398:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093a2:	d82d      	bhi.n	8009400 <HAL_SPI_Transmit_DMA+0x178>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ae:	d127      	bne.n	8009400 <HAL_SPI_Transmit_DMA+0x178>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10f      	bne.n	80093de <HAL_SPI_Transmit_DMA+0x156>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093cc:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	085b      	lsrs	r3, r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093dc:	e010      	b.n	8009400 <HAL_SPI_Transmit_DMA+0x178>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ec:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	085b      	lsrs	r3, r3, #1
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	3301      	adds	r3, #1
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009408:	4619      	mov	r1, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	330c      	adds	r3, #12
 8009410:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009416:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009418:	f7fc fe72 	bl	8006100 <HAL_DMA_Start_IT>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00c      	beq.n	800943c <HAL_SPI_Transmit_DMA+0x1b4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009426:	f043 0210 	orr.w	r2, r3, #16
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800943a:	e01e      	b.n	800947a <HAL_SPI_Transmit_DMA+0x1f2>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009446:	2b40      	cmp	r3, #64	; 0x40
 8009448:	d007      	beq.n	800945a <HAL_SPI_Transmit_DMA+0x1d2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009458:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f042 0220 	orr.w	r2, r2, #32
 8009468:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0202 	orr.w	r2, r2, #2
 8009478:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009482:	7dfb      	ldrb	r3, [r7, #23]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	08009783 	.word	0x08009783
 8009490:	080096dd 	.word	0x080096dd
 8009494:	0800979f 	.word	0x0800979f

08009498 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	099b      	lsrs	r3, r3, #6
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10f      	bne.n	80094dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	099b      	lsrs	r3, r3, #6
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d004      	beq.n	80094dc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	4798      	blx	r3
    return;
 80094da:	e0d8      	b.n	800968e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	085b      	lsrs	r3, r3, #1
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <HAL_SPI_IRQHandler+0x66>
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	09db      	lsrs	r3, r3, #7
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d004      	beq.n	80094fe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	4798      	blx	r3
    return;
 80094fc:	e0c7      	b.n	800968e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	095b      	lsrs	r3, r3, #5
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10c      	bne.n	8009524 <HAL_SPI_IRQHandler+0x8c>
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	099b      	lsrs	r3, r3, #6
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	0a1b      	lsrs	r3, r3, #8
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80b5 	beq.w	800968e <HAL_SPI_IRQHandler+0x1f6>
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	095b      	lsrs	r3, r3, #5
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80ae 	beq.w	800968e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	099b      	lsrs	r3, r3, #6
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d023      	beq.n	8009586 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d011      	beq.n	800956e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800954e:	f043 0204 	orr.w	r2, r3, #4
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	e00b      	b.n	8009586 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800956e:	2300      	movs	r3, #0
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	613b      	str	r3, [r7, #16]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	613b      	str	r3, [r7, #16]
 8009582:	693b      	ldr	r3, [r7, #16]
        return;
 8009584:	e083      	b.n	800968e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	095b      	lsrs	r3, r3, #5
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d014      	beq.n	80095bc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009596:	f043 0201 	orr.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	0a1b      	lsrs	r3, r3, #8
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00c      	beq.n	80095e2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095cc:	f043 0208 	orr.w	r2, r3, #8
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095d4:	2300      	movs	r3, #0
 80095d6:	60bb      	str	r3, [r7, #8]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	60bb      	str	r3, [r7, #8]
 80095e0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d050      	beq.n	800968c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095f8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <HAL_SPI_IRQHandler+0x17e>
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d034      	beq.n	8009680 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0203 	bic.w	r2, r2, #3
 8009624:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962a:	2b00      	cmp	r3, #0
 800962c:	d011      	beq.n	8009652 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009632:	4a18      	ldr	r2, [pc, #96]	; (8009694 <HAL_SPI_IRQHandler+0x1fc>)
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963a:	4618      	mov	r0, r3
 800963c:	f7fc fdc0 	bl	80061c0 <HAL_DMA_Abort_IT>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800964a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009656:	2b00      	cmp	r3, #0
 8009658:	d016      	beq.n	8009688 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965e:	4a0d      	ldr	r2, [pc, #52]	; (8009694 <HAL_SPI_IRQHandler+0x1fc>)
 8009660:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009666:	4618      	mov	r0, r3
 8009668:	f7fc fdaa 	bl	80061c0 <HAL_DMA_Abort_IT>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00a      	beq.n	8009688 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800967e:	e003      	b.n	8009688 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f813 	bl	80096ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009686:	e000      	b.n	800968a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009688:	bf00      	nop
    return;
 800968a:	bf00      	nop
 800968c:	bf00      	nop
  }
}
 800968e:	3720      	adds	r7, #32
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	080097df 	.word	0x080097df

08009698 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096ce:	b2db      	uxtb	r3, r3
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096ea:	f7fc fb11 	bl	8005d10 <HAL_GetTick>
 80096ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d03b      	beq.n	8009776 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0220 	bic.w	r2, r2, #32
 800970c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0202 	bic.w	r2, r2, #2
 800971c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	2164      	movs	r1, #100	; 0x64
 8009722:	6978      	ldr	r0, [r7, #20]
 8009724:	f000 f986 	bl	8009a34 <SPI_EndRxTxTransaction>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009732:	f043 0220 	orr.w	r2, r3, #32
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	2200      	movs	r2, #0
 800975c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800976e:	6978      	ldr	r0, [r7, #20]
 8009770:	f7ff ff9c 	bl	80096ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009774:	e002      	b.n	800977c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009776:	6978      	ldr	r0, [r7, #20]
 8009778:	f006 fdfa 	bl	8010370 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff ff81 	bl	8009698 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0203 	bic.w	r2, r2, #3
 80097ba:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c0:	f043 0210 	orr.w	r2, r3, #16
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7ff ff6b 	bl	80096ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff ff56 	bl	80096ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009800:	bf00      	nop
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	4613      	mov	r3, r2
 8009816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009818:	f7fc fa7a 	bl	8005d10 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	1a9b      	subs	r3, r3, r2
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	4413      	add	r3, r2
 8009826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009828:	f7fc fa72 	bl	8005d10 <HAL_GetTick>
 800982c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800982e:	4b39      	ldr	r3, [pc, #228]	; (8009914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	015b      	lsls	r3, r3, #5
 8009834:	0d1b      	lsrs	r3, r3, #20
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	fb02 f303 	mul.w	r3, r2, r3
 800983c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800983e:	e054      	b.n	80098ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009846:	d050      	beq.n	80098ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009848:	f7fc fa62 	bl	8005d10 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	69fa      	ldr	r2, [r7, #28]
 8009854:	429a      	cmp	r2, r3
 8009856:	d902      	bls.n	800985e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d13d      	bne.n	80098da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800986c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009876:	d111      	bne.n	800989c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009880:	d004      	beq.n	800988c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800988a:	d107      	bne.n	800989c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800989a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a4:	d10f      	bne.n	80098c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e017      	b.n	800990a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4013      	ands	r3, r2
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	bf0c      	ite	eq
 80098fa:	2301      	moveq	r3, #1
 80098fc:	2300      	movne	r3, #0
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	461a      	mov	r2, r3
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	429a      	cmp	r2, r3
 8009906:	d19b      	bne.n	8009840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3720      	adds	r7, #32
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	2000001c 	.word	0x2000001c

08009918 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009926:	f7fc f9f3 	bl	8005d10 <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	4413      	add	r3, r2
 8009934:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009936:	f7fc f9eb 	bl	8005d10 <HAL_GetTick>
 800993a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800993c:	4b3c      	ldr	r3, [pc, #240]	; (8009a30 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	00da      	lsls	r2, r3, #3
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	0d1b      	lsrs	r3, r3, #20
 800994c:	69fa      	ldr	r2, [r7, #28]
 800994e:	fb02 f303 	mul.w	r3, r2, r3
 8009952:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8009954:	e05f      	b.n	8009a16 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800995c:	d106      	bne.n	800996c <SPI_WaitFifoStateUntilTimeout+0x54>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d103      	bne.n	800996c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	330c      	adds	r3, #12
 800996a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009972:	d050      	beq.n	8009a16 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009974:	f7fc f9cc 	bl	8005d10 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	429a      	cmp	r2, r3
 8009982:	d902      	bls.n	800998a <SPI_WaitFifoStateUntilTimeout+0x72>
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d13d      	bne.n	8009a06 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099a2:	d111      	bne.n	80099c8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ac:	d004      	beq.n	80099b8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b6:	d107      	bne.n	80099c8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d0:	d10f      	bne.n	80099f2 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e010      	b.n	8009a28 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d197      	bne.n	8009956 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	2000001c 	.word	0x2000001c

08009a34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff ff63 	bl	8009918 <SPI_WaitFifoStateUntilTimeout>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d007      	beq.n	8009a68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a5c:	f043 0220 	orr.w	r2, r3, #32
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e027      	b.n	8009ab8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2180      	movs	r1, #128	; 0x80
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f7ff fec8 	bl	8009808 <SPI_WaitFlagStateUntilTimeout>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d007      	beq.n	8009a8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a82:	f043 0220 	orr.w	r2, r3, #32
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e014      	b.n	8009ab8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff ff3c 	bl	8009918 <SPI_WaitFifoStateUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aaa:	f043 0220 	orr.w	r2, r3, #32
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e000      	b.n	8009ab8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e054      	b.n	8009b7c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d111      	bne.n	8009b02 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 faf4 	bl	800a0d4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a23      	ldr	r2, [pc, #140]	; (8009b84 <HAL_TIM_Base_Init+0xc4>)
 8009af8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2202      	movs	r2, #2
 8009b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f000 fa43 	bl	8009fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	08002525 	.word	0x08002525

08009b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d001      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e04f      	b.n	8009c40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a23      	ldr	r2, [pc, #140]	; (8009c4c <HAL_TIM_Base_Start_IT+0xc4>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d01d      	beq.n	8009bfe <HAL_TIM_Base_Start_IT+0x76>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bca:	d018      	beq.n	8009bfe <HAL_TIM_Base_Start_IT+0x76>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a1f      	ldr	r2, [pc, #124]	; (8009c50 <HAL_TIM_Base_Start_IT+0xc8>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d013      	beq.n	8009bfe <HAL_TIM_Base_Start_IT+0x76>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <HAL_TIM_Base_Start_IT+0xcc>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d00e      	beq.n	8009bfe <HAL_TIM_Base_Start_IT+0x76>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a1c      	ldr	r2, [pc, #112]	; (8009c58 <HAL_TIM_Base_Start_IT+0xd0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d009      	beq.n	8009bfe <HAL_TIM_Base_Start_IT+0x76>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <HAL_TIM_Base_Start_IT+0xd4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d004      	beq.n	8009bfe <HAL_TIM_Base_Start_IT+0x76>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a19      	ldr	r2, [pc, #100]	; (8009c60 <HAL_TIM_Base_Start_IT+0xd8>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d115      	bne.n	8009c2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	4b17      	ldr	r3, [pc, #92]	; (8009c64 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c06:	4013      	ands	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b06      	cmp	r3, #6
 8009c0e:	d015      	beq.n	8009c3c <HAL_TIM_Base_Start_IT+0xb4>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c16:	d011      	beq.n	8009c3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0201 	orr.w	r2, r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c28:	e008      	b.n	8009c3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f042 0201 	orr.w	r2, r2, #1
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	e000      	b.n	8009c3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40012c00 	.word	0x40012c00
 8009c50:	40000400 	.word	0x40000400
 8009c54:	40000800 	.word	0x40000800
 8009c58:	40000c00 	.word	0x40000c00
 8009c5c:	40013400 	.word	0x40013400
 8009c60:	40014000 	.word	0x40014000
 8009c64:	00010007 	.word	0x00010007

08009c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	f003 0302 	and.w	r3, r3, #2
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d128      	bne.n	8009cd0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d121      	bne.n	8009cd0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f06f 0202 	mvn.w	r2, #2
 8009c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	f003 0303 	and.w	r3, r3, #3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	4798      	blx	r3
 8009cb4:	e009      	b.n	8009cca <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	f003 0304 	and.w	r3, r3, #4
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	d128      	bne.n	8009d30 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d121      	bne.n	8009d30 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f06f 0204 	mvn.w	r2, #4
 8009cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d005      	beq.n	8009d16 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	4798      	blx	r3
 8009d14:	e009      	b.n	8009d2a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	f003 0308 	and.w	r3, r3, #8
 8009d3a:	2b08      	cmp	r3, #8
 8009d3c:	d128      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d121      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f06f 0208 	mvn.w	r2, #8
 8009d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2204      	movs	r2, #4
 8009d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d005      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	4798      	blx	r3
 8009d74:	e009      	b.n	8009d8a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	f003 0310 	and.w	r3, r3, #16
 8009d9a:	2b10      	cmp	r3, #16
 8009d9c:	d128      	bne.n	8009df0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f003 0310 	and.w	r3, r3, #16
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	d121      	bne.n	8009df0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f06f 0210 	mvn.w	r2, #16
 8009db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2208      	movs	r2, #8
 8009dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d005      	beq.n	8009dd6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	4798      	blx	r3
 8009dd4:	e009      	b.n	8009dea <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d110      	bne.n	8009e20 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d109      	bne.n	8009e20 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f06f 0201 	mvn.w	r2, #1
 8009e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e2a:	2b80      	cmp	r3, #128	; 0x80
 8009e2c:	d110      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e38:	2b80      	cmp	r3, #128	; 0x80
 8009e3a:	d109      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5e:	d110      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e6a:	2b80      	cmp	r3, #128	; 0x80
 8009e6c:	d109      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8c:	2b40      	cmp	r3, #64	; 0x40
 8009e8e:	d110      	bne.n	8009eb2 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e9a:	2b40      	cmp	r3, #64	; 0x40
 8009e9c:	d109      	bne.n	8009eb2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b20      	cmp	r3, #32
 8009ebe:	d110      	bne.n	8009ee2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	d109      	bne.n	8009ee2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f06f 0220 	mvn.w	r2, #32
 8009ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009ef2:	bf00      	nop
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009f7e:	bf00      	nop
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b083      	sub	sp, #12
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009f92:	bf00      	nop
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
	...

08009fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a40      	ldr	r2, [pc, #256]	; (800a0b4 <TIM_Base_SetConfig+0x114>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d013      	beq.n	8009fe0 <TIM_Base_SetConfig+0x40>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fbe:	d00f      	beq.n	8009fe0 <TIM_Base_SetConfig+0x40>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a3d      	ldr	r2, [pc, #244]	; (800a0b8 <TIM_Base_SetConfig+0x118>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d00b      	beq.n	8009fe0 <TIM_Base_SetConfig+0x40>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a3c      	ldr	r2, [pc, #240]	; (800a0bc <TIM_Base_SetConfig+0x11c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d007      	beq.n	8009fe0 <TIM_Base_SetConfig+0x40>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a3b      	ldr	r2, [pc, #236]	; (800a0c0 <TIM_Base_SetConfig+0x120>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d003      	beq.n	8009fe0 <TIM_Base_SetConfig+0x40>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a3a      	ldr	r2, [pc, #232]	; (800a0c4 <TIM_Base_SetConfig+0x124>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d108      	bne.n	8009ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a2f      	ldr	r2, [pc, #188]	; (800a0b4 <TIM_Base_SetConfig+0x114>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d01f      	beq.n	800a03a <TIM_Base_SetConfig+0x9a>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a000:	d01b      	beq.n	800a03a <TIM_Base_SetConfig+0x9a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a2c      	ldr	r2, [pc, #176]	; (800a0b8 <TIM_Base_SetConfig+0x118>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d017      	beq.n	800a03a <TIM_Base_SetConfig+0x9a>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a2b      	ldr	r2, [pc, #172]	; (800a0bc <TIM_Base_SetConfig+0x11c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d013      	beq.n	800a03a <TIM_Base_SetConfig+0x9a>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a2a      	ldr	r2, [pc, #168]	; (800a0c0 <TIM_Base_SetConfig+0x120>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d00f      	beq.n	800a03a <TIM_Base_SetConfig+0x9a>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a29      	ldr	r2, [pc, #164]	; (800a0c4 <TIM_Base_SetConfig+0x124>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00b      	beq.n	800a03a <TIM_Base_SetConfig+0x9a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a28      	ldr	r2, [pc, #160]	; (800a0c8 <TIM_Base_SetConfig+0x128>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d007      	beq.n	800a03a <TIM_Base_SetConfig+0x9a>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a27      	ldr	r2, [pc, #156]	; (800a0cc <TIM_Base_SetConfig+0x12c>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d003      	beq.n	800a03a <TIM_Base_SetConfig+0x9a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a26      	ldr	r2, [pc, #152]	; (800a0d0 <TIM_Base_SetConfig+0x130>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d108      	bne.n	800a04c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4313      	orrs	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	695b      	ldr	r3, [r3, #20]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	689a      	ldr	r2, [r3, #8]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a10      	ldr	r2, [pc, #64]	; (800a0b4 <TIM_Base_SetConfig+0x114>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d00f      	beq.n	800a098 <TIM_Base_SetConfig+0xf8>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a12      	ldr	r2, [pc, #72]	; (800a0c4 <TIM_Base_SetConfig+0x124>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00b      	beq.n	800a098 <TIM_Base_SetConfig+0xf8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a11      	ldr	r2, [pc, #68]	; (800a0c8 <TIM_Base_SetConfig+0x128>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d007      	beq.n	800a098 <TIM_Base_SetConfig+0xf8>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a10      	ldr	r2, [pc, #64]	; (800a0cc <TIM_Base_SetConfig+0x12c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_Base_SetConfig+0xf8>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a0f      	ldr	r2, [pc, #60]	; (800a0d0 <TIM_Base_SetConfig+0x130>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d103      	bne.n	800a0a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	691a      	ldr	r2, [r3, #16]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	615a      	str	r2, [r3, #20]
}
 800a0a6:	bf00      	nop
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	40012c00 	.word	0x40012c00
 800a0b8:	40000400 	.word	0x40000400
 800a0bc:	40000800 	.word	0x40000800
 800a0c0:	40000c00 	.word	0x40000c00
 800a0c4:	40013400 	.word	0x40013400
 800a0c8:	40014000 	.word	0x40014000
 800a0cc:	40014400 	.word	0x40014400
 800a0d0:	40014800 	.word	0x40014800

0800a0d4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a1e      	ldr	r2, [pc, #120]	; (800a158 <TIM_ResetCallback+0x84>)
 800a0e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a1d      	ldr	r2, [pc, #116]	; (800a15c <TIM_ResetCallback+0x88>)
 800a0e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a1c      	ldr	r2, [pc, #112]	; (800a160 <TIM_ResetCallback+0x8c>)
 800a0f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a1b      	ldr	r2, [pc, #108]	; (800a164 <TIM_ResetCallback+0x90>)
 800a0f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a1a      	ldr	r2, [pc, #104]	; (800a168 <TIM_ResetCallback+0x94>)
 800a100:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a19      	ldr	r2, [pc, #100]	; (800a16c <TIM_ResetCallback+0x98>)
 800a108:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a18      	ldr	r2, [pc, #96]	; (800a170 <TIM_ResetCallback+0x9c>)
 800a110:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a17      	ldr	r2, [pc, #92]	; (800a174 <TIM_ResetCallback+0xa0>)
 800a118:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a16      	ldr	r2, [pc, #88]	; (800a178 <TIM_ResetCallback+0xa4>)
 800a120:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a15      	ldr	r2, [pc, #84]	; (800a17c <TIM_ResetCallback+0xa8>)
 800a128:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a14      	ldr	r2, [pc, #80]	; (800a180 <TIM_ResetCallback+0xac>)
 800a130:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a13      	ldr	r2, [pc, #76]	; (800a184 <TIM_ResetCallback+0xb0>)
 800a138:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a12      	ldr	r2, [pc, #72]	; (800a188 <TIM_ResetCallback+0xb4>)
 800a140:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a11      	ldr	r2, [pc, #68]	; (800a18c <TIM_ResetCallback+0xb8>)
 800a148:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	080017e1 	.word	0x080017e1
 800a15c:	08009eeb 	.word	0x08009eeb
 800a160:	08009f63 	.word	0x08009f63
 800a164:	08009f77 	.word	0x08009f77
 800a168:	08009f13 	.word	0x08009f13
 800a16c:	08009f27 	.word	0x08009f27
 800a170:	08009eff 	.word	0x08009eff
 800a174:	08009f3b 	.word	0x08009f3b
 800a178:	08009f4f 	.word	0x08009f4f
 800a17c:	08009f8b 	.word	0x08009f8b
 800a180:	0800a191 	.word	0x0800a191
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a1b9 	.word	0x0800a1b9
 800a18c:	0800a1cd 	.word	0x0800a1cd

0800a190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	607b      	str	r3, [r7, #4]
  
  hbusspi2.Instance  = SPI2;
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <BSP_SPI2_Init+0x40>)
 800a1ec:	4a0d      	ldr	r2, [pc, #52]	; (800a224 <BSP_SPI2_Init+0x44>)
 800a1ee:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 800a1f0:	480b      	ldr	r0, [pc, #44]	; (800a220 <BSP_SPI2_Init+0x40>)
 800a1f2:	f7ff fa65 	bl	80096c0 <HAL_SPI_GetState>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10b      	bne.n	800a214 <BSP_SPI2_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI2_MspInit(&hbusspi2);
 800a1fc:	4808      	ldr	r0, [pc, #32]	; (800a220 <BSP_SPI2_Init+0x40>)
 800a1fe:	f000 f8ed 	bl	800a3dc <SPI2_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 800a202:	4807      	ldr	r0, [pc, #28]	; (800a220 <BSP_SPI2_Init+0x40>)
 800a204:	f000 f890 	bl	800a328 <MX_SPI2_Init>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <BSP_SPI2_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800a20e:	f06f 0307 	mvn.w	r3, #7
 800a212:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 800a214:	687b      	ldr	r3, [r7, #4]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	2000bce4 	.word	0x2000bce4
 800a224:	40003800 	.word	0x40003800

0800a228 <BSP_SPI2_DeInit>:
/**
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800a22e:	f06f 0307 	mvn.w	r3, #7
 800a232:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI2_MspDeInit(&hbusspi2);
 800a234:	4807      	ldr	r0, [pc, #28]	; (800a254 <BSP_SPI2_DeInit+0x2c>)
 800a236:	f000 f907 	bl	800a448 <SPI2_MspDeInit>
#endif  
  
  if (HAL_SPI_DeInit(&hbusspi2) == HAL_OK) {
 800a23a:	4806      	ldr	r0, [pc, #24]	; (800a254 <BSP_SPI2_DeInit+0x2c>)
 800a23c:	f7fe fb94 	bl	8008968 <HAL_SPI_DeInit>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <BSP_SPI2_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 800a246:	2300      	movs	r3, #0
 800a248:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800a24a:	687b      	ldr	r3, [r7, #4]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	2000bce4 	.word	0x2000bce4

0800a258 <BSP_SPI2_Send>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t len)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a264:	f06f 0305 	mvn.w	r3, #5
 800a268:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 800a26a:	887a      	ldrh	r2, [r7, #2]
 800a26c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	4806      	ldr	r0, [pc, #24]	; (800a28c <BSP_SPI2_Send+0x34>)
 800a274:	f7fe fba0 	bl	80089b8 <HAL_SPI_Transmit>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <BSP_SPI2_Send+0x2a>
  {
      ret = len;
 800a27e:	887b      	ldrh	r3, [r7, #2]
 800a280:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a282:	68fb      	ldr	r3, [r7, #12]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	2000bce4 	.word	0x2000bce4

0800a290 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) {
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]

  hbusspi1.Instance  = SPI1;
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <BSP_SPI1_Init+0x40>)
 800a29c:	4a0d      	ldr	r2, [pc, #52]	; (800a2d4 <BSP_SPI1_Init+0x44>)
 800a29e:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET)
 800a2a0:	480b      	ldr	r0, [pc, #44]	; (800a2d0 <BSP_SPI1_Init+0x40>)
 800a2a2:	f7ff fa0d 	bl	80096c0 <HAL_SPI_GetState>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10b      	bne.n	800a2c4 <BSP_SPI1_Init+0x34>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbusspi1);
 800a2ac:	4808      	ldr	r0, [pc, #32]	; (800a2d0 <BSP_SPI1_Init+0x40>)
 800a2ae:	f000 f925 	bl	800a4fc <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 800a2b2:	4807      	ldr	r0, [pc, #28]	; (800a2d0 <BSP_SPI1_Init+0x40>)
 800a2b4:	f000 f8e0 	bl	800a478 <MX_SPI1_Init>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <BSP_SPI1_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800a2be:	f06f 0307 	mvn.w	r3, #7
 800a2c2:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800a2c4:	687b      	ldr	r3, [r7, #4]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	2000bd48 	.word	0x2000bd48
 800a2d4:	40013000 	.word	0x40013000

0800a2d8 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b088      	sub	sp, #32
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a2e6:	f06f 0305 	mvn.w	r3, #5
 800a2ea:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 800a2ec:	88fa      	ldrh	r2, [r7, #6]
 800a2ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	68f9      	ldr	r1, [r7, #12]
 800a2fa:	4806      	ldr	r0, [pc, #24]	; (800a314 <BSP_SPI1_SendRecv+0x3c>)
 800a2fc:	f7fe fcec 	bl	8008cd8 <HAL_SPI_TransmitReceive>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <BSP_SPI1_SendRecv+0x32>
  {
      ret = len;
 800a306:	88fb      	ldrh	r3, [r7, #6]
 800a308:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a30a:	697b      	ldr	r3, [r7, #20]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	2000bd48 	.word	0x2000bd48

0800a318 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a31c:	f7fb fcf8 	bl	8005d10 <HAL_GetTick>
 800a320:	4603      	mov	r3, r0
}
 800a322:	4618      	mov	r0, r3
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <MX_SPI2_Init>:

/* SPI2 init function */ 

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a28      	ldr	r2, [pc, #160]	; (800a3d8 <MX_SPI2_Init+0xb0>)
 800a338:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a340:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a348:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a350:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2202      	movs	r2, #2
 800a356:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a364:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2230      	movs	r2, #48	; 0x30
 800a36a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2207      	movs	r2, #7
 800a382:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	635a      	str	r2, [r3, #52]	; 0x34
  
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7fe fa1d 	bl	80087d0 <HAL_SPI_Init>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <MX_SPI2_Init+0x78>
  {
    ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	73fb      	strb	r3, [r7, #15]
  }
  
  HAL_Delay(5);
 800a3a0:	2005      	movs	r0, #5
 800a3a2:	f7fb fcc1 	bl	8005d28 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3b4:	601a      	str	r2, [r3, #0]
  HAL_Delay(5);
 800a3b6:	2005      	movs	r0, #5
 800a3b8:	f7fb fcb6 	bl	8005d28 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ca:	601a      	str	r2, [r3, #0]
  
  return ret;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	40003800 	.word	0x40003800

0800a3dc <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08a      	sub	sp, #40	; 0x28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a3e4:	4b16      	ldr	r3, [pc, #88]	; (800a440 <SPI2_MspInit+0x64>)
 800a3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e8:	4a15      	ldr	r2, [pc, #84]	; (800a440 <SPI2_MspInit+0x64>)
 800a3ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3ee:	6593      	str	r3, [r2, #88]	; 0x58
 800a3f0:	4b13      	ldr	r3, [pc, #76]	; (800a440 <SPI2_MspInit+0x64>)
 800a3f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3f8:	613b      	str	r3, [r7, #16]
 800a3fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3fc:	4b10      	ldr	r3, [pc, #64]	; (800a440 <SPI2_MspInit+0x64>)
 800a3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a400:	4a0f      	ldr	r2, [pc, #60]	; (800a440 <SPI2_MspInit+0x64>)
 800a402:	f043 0302 	orr.w	r3, r3, #2
 800a406:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a408:	4b0d      	ldr	r3, [pc, #52]	; (800a440 <SPI2_MspInit+0x64>)
 800a40a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a40c:	f003 0302 	and.w	r3, r3, #2
 800a410:	60fb      	str	r3, [r7, #12]
 800a412:	68fb      	ldr	r3, [r7, #12]
  
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800a414:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800a418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a41a:	2302      	movs	r3, #2
 800a41c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a41e:	2301      	movs	r3, #1
 800a420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a422:	2302      	movs	r3, #2
 800a424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a426:	2305      	movs	r3, #5
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a42a:	f107 0314 	add.w	r3, r7, #20
 800a42e:	4619      	mov	r1, r3
 800a430:	4804      	ldr	r0, [pc, #16]	; (800a444 <SPI2_MspInit+0x68>)
 800a432:	f7fc f843 	bl	80064bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 800a436:	bf00      	nop
 800a438:	3728      	adds	r7, #40	; 0x28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	40021000 	.word	0x40021000
 800a444:	48000400 	.word	0x48000400

0800a448 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <SPI2_MspDeInit+0x28>)
 800a452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a454:	4a06      	ldr	r2, [pc, #24]	; (800a470 <SPI2_MspDeInit+0x28>)
 800a456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a45a:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 800a45c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800a460:	4804      	ldr	r0, [pc, #16]	; (800a474 <SPI2_MspDeInit+0x2c>)
 800a462:	f7fc f9d3 	bl	800680c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	40021000 	.word	0x40021000
 800a474:	48000400 	.word	0x48000400

0800a478 <MX_SPI1_Init>:


/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a1c      	ldr	r2, [pc, #112]	; (800a4f8 <MX_SPI1_Init+0x80>)
 800a488:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a490:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a49e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4b2:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2218      	movs	r2, #24
 800a4b8:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2207      	movs	r2, #7
 800a4d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2208      	movs	r2, #8
 800a4dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7fe f976 	bl	80087d0 <HAL_SPI_Init>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	40013000 	.word	0x40013000

0800a4fc <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08a      	sub	sp, #40	; 0x28
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a504:	4b16      	ldr	r3, [pc, #88]	; (800a560 <SPI1_MspInit+0x64>)
 800a506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a508:	4a15      	ldr	r2, [pc, #84]	; (800a560 <SPI1_MspInit+0x64>)
 800a50a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a50e:	6613      	str	r3, [r2, #96]	; 0x60
 800a510:	4b13      	ldr	r3, [pc, #76]	; (800a560 <SPI1_MspInit+0x64>)
 800a512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a518:	613b      	str	r3, [r7, #16]
 800a51a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <SPI1_MspInit+0x64>)
 800a51e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a520:	4a0f      	ldr	r2, [pc, #60]	; (800a560 <SPI1_MspInit+0x64>)
 800a522:	f043 0301 	orr.w	r3, r3, #1
 800a526:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a528:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <SPI1_MspInit+0x64>)
 800a52a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800a534:	23e0      	movs	r3, #224	; 0xe0
 800a536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a538:	2302      	movs	r3, #2
 800a53a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a53c:	2301      	movs	r3, #1
 800a53e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a540:	2303      	movs	r3, #3
 800a542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a544:	2305      	movs	r3, #5
 800a546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a548:	f107 0314 	add.w	r3, r7, #20
 800a54c:	4619      	mov	r1, r3
 800a54e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a552:	f7fb ffb3 	bl	80064bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800a556:	bf00      	nop
 800a558:	3728      	adds	r7, #40	; 0x28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	40021000 	.word	0x40021000

0800a564 <parsear_comandos_json>:
 * */

#define parsear_comandos_json_MSG_ON 0

int parsear_comandos_json(const char * json_file, const char ** vector_comandos, const int numero_comandos)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08a      	sub	sp, #40	; 0x28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]

	int status_Comando_Json = -1;
 800a570:	f04f 33ff 	mov.w	r3, #4294967295
 800a574:	627b      	str	r3, [r7, #36]	; 0x24

	JSON_Value * val_1;
	val_1 = json_parse_string(json_file);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f001 facc 	bl	800bb14 <json_parse_string>
 800a57c:	61f8      	str	r0, [r7, #28]

	//Chequear si es un objeto
	JSON_Object *root_object;
	root_object = json_value_get_object(val_1);
 800a57e:	69f8      	ldr	r0, [r7, #28]
 800a580:	f001 fb91 	bl	800bca6 <json_value_get_object>
 800a584:	61b8      	str	r0, [r7, #24]

	if(json_object_has_value(root_object, "c") != 0 )
 800a586:	491c      	ldr	r1, [pc, #112]	; (800a5f8 <parsear_comandos_json+0x94>)
 800a588:	69b8      	ldr	r0, [r7, #24]
 800a58a:	f001 fb4a 	bl	800bc22 <json_object_has_value>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d028      	beq.n	800a5e6 <parsear_comandos_json+0x82>
	{
		JSON_Value  * valor_2 = json_object_dotget_value(root_object, "c");
 800a594:	4918      	ldr	r1, [pc, #96]	; (800a5f8 <parsear_comandos_json+0x94>)
 800a596:	69b8      	ldr	r0, [r7, #24]
 800a598:	f001 fafb 	bl	800bb92 <json_object_dotget_value>
 800a59c:	6178      	str	r0, [r7, #20]

		//Falta un IF de solo si es una cadena!!!!!!!!!!!!!!!!!!!!!!!!!!!
		 const char * buffer_ptr = json_value_get_string (valor_2);
 800a59e:	6978      	ldr	r0, [r7, #20]
 800a5a0:	f001 fbb7 	bl	800bd12 <json_value_get_string>
 800a5a4:	6138      	str	r0, [r7, #16]

		for(int i = 0; i<numero_comandos;i++ )
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	623b      	str	r3, [r7, #32]
 800a5aa:	e011      	b.n	800a5d0 <parsear_comandos_json+0x6c>
		{
			if(strcmp(vector_comandos[i],buffer_ptr) == 0)
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6939      	ldr	r1, [r7, #16]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7f5 fe09 	bl	80001d0 <strcmp>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <parsear_comandos_json+0x66>
			{

				status_Comando_Json = i;
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800a5c8:	e006      	b.n	800a5d8 <parsear_comandos_json+0x74>
		for(int i = 0; i<numero_comandos;i++ )
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	623b      	str	r3, [r7, #32]
 800a5d0:	6a3a      	ldr	r2, [r7, #32]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	dbe9      	blt.n	800a5ac <parsear_comandos_json+0x48>
			}
		}
		if(status_Comando_Json < 0)
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da06      	bge.n	800a5ec <parsear_comandos_json+0x88>
		{
			#if parsear_comandos_json_MSG_ON
				PRINT("COMANDO NO VALIDO\r\n")
			#endif
			status_Comando_Json = -2;
 800a5de:	f06f 0301 	mvn.w	r3, #1
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5e4:	e002      	b.n	800a5ec <parsear_comandos_json+0x88>
	else
	{
		#if parsear_comandos_json_MSG_ON
			PRINT("NO COMANDO RECIBIDO\r\n")
		#endif
		status_Comando_Json = -1;
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24
	}
	return status_Comando_Json;
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3728      	adds	r7, #40	; 0x28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	08019038 	.word	0x08019038

0800a5fc <check_JSON>:
 * */

#define check_JSON_MSG_ON 0

int check_JSON(const char pData, const int maximum_len, const int resetear)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	73fb      	strb	r3, [r7, #15]
		static int num_llaves_abiertas = 0;	// Contador de llaves abiertas
		static int num_llaves_cerradas = 0; // Contador de llaves cerradas
		static int index_buffer = 0;		// Contador de tamaño de buffer
		int Json_current_status = 1; // JSON está en curso
 800a60a:	2301      	movs	r3, #1
 800a60c:	617b      	str	r3, [r7, #20]

		if(resetear != 1)			// Si no hay un reset por parte del usuario...
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d03d      	beq.n	800a690 <check_JSON+0x94>
		{

			if((char)pData == '{')
 800a614:	7bfb      	ldrb	r3, [r7, #15]
 800a616:	2b7b      	cmp	r3, #123	; 0x7b
 800a618:	d104      	bne.n	800a624 <check_JSON+0x28>
			{
				num_llaves_abiertas++;
 800a61a:	4b26      	ldr	r3, [pc, #152]	; (800a6b4 <check_JSON+0xb8>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3301      	adds	r3, #1
 800a620:	4a24      	ldr	r2, [pc, #144]	; (800a6b4 <check_JSON+0xb8>)
 800a622:	6013      	str	r3, [r2, #0]
			}

			if(num_llaves_abiertas > 0)
 800a624:	4b23      	ldr	r3, [pc, #140]	; (800a6b4 <check_JSON+0xb8>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dd2e      	ble.n	800a68a <check_JSON+0x8e>
			{
				index_buffer++ ;
 800a62c:	4b22      	ldr	r3, [pc, #136]	; (800a6b8 <check_JSON+0xbc>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3301      	adds	r3, #1
 800a632:	4a21      	ldr	r2, [pc, #132]	; (800a6b8 <check_JSON+0xbc>)
 800a634:	6013      	str	r3, [r2, #0]

				if((char)pData == '}')
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	2b7d      	cmp	r3, #125	; 0x7d
 800a63a:	d115      	bne.n	800a668 <check_JSON+0x6c>
				{
					num_llaves_cerradas++;
 800a63c:	4b1f      	ldr	r3, [pc, #124]	; (800a6bc <check_JSON+0xc0>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	4a1e      	ldr	r2, [pc, #120]	; (800a6bc <check_JSON+0xc0>)
 800a644:	6013      	str	r3, [r2, #0]
					if(num_llaves_cerradas == num_llaves_abiertas)
 800a646:	4b1d      	ldr	r3, [pc, #116]	; (800a6bc <check_JSON+0xc0>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4b1a      	ldr	r3, [pc, #104]	; (800a6b4 <check_JSON+0xb8>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d10a      	bne.n	800a668 <check_JSON+0x6c>
					{
						#if check_JSON_MSG_ON
							PRINT("CJ: JSON  COMPLETO\r\n");
						#endif
						index_buffer = 0;
 800a652:	4b19      	ldr	r3, [pc, #100]	; (800a6b8 <check_JSON+0xbc>)
 800a654:	2200      	movs	r2, #0
 800a656:	601a      	str	r2, [r3, #0]
						num_llaves_abiertas = 0;
 800a658:	4b16      	ldr	r3, [pc, #88]	; (800a6b4 <check_JSON+0xb8>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	601a      	str	r2, [r3, #0]
						num_llaves_cerradas = 0;
 800a65e:	4b17      	ldr	r3, [pc, #92]	; (800a6bc <check_JSON+0xc0>)
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
						Json_current_status = 2;  // JSON completo
 800a664:	2302      	movs	r3, #2
 800a666:	617b      	str	r3, [r7, #20]
					}
				}

				if(index_buffer == maximum_len)
 800a668:	4b13      	ldr	r3, [pc, #76]	; (800a6b8 <check_JSON+0xbc>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d119      	bne.n	800a6a6 <check_JSON+0xaa>
				{
					#if check_JSON_MSG_ON
						PRINT("CJ: JSON EXCESIVO GRANDE\r\n");
					#endif
					index_buffer = 0;
 800a672:	4b11      	ldr	r3, [pc, #68]	; (800a6b8 <check_JSON+0xbc>)
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]
					num_llaves_abiertas = 0;
 800a678:	4b0e      	ldr	r3, [pc, #56]	; (800a6b4 <check_JSON+0xb8>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
					num_llaves_cerradas = 0;
 800a67e:	4b0f      	ldr	r3, [pc, #60]	; (800a6bc <check_JSON+0xc0>)
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]
					Json_current_status = 3;  // JSON demasiado grande
 800a684:	2303      	movs	r3, #3
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e00d      	b.n	800a6a6 <check_JSON+0xaa>
			else
			{
				#if check_JSON_MSG_ON
					PRINT("CJ: JSON NO ABIERTO\r\n");
				#endif
				Json_current_status = 0; // JSON no se ha abierto
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	e00a      	b.n	800a6a6 <check_JSON+0xaa>
		else
		{
			#if check_JSON_MSG_ON
				PRINT("CJ: JSON RESETEADO\r\n");
			#endif
			index_buffer = 0;
 800a690:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <check_JSON+0xbc>)
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]
			num_llaves_abiertas = 0;
 800a696:	4b07      	ldr	r3, [pc, #28]	; (800a6b4 <check_JSON+0xb8>)
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]
			num_llaves_cerradas = 0;
 800a69c:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <check_JSON+0xc0>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
			Json_current_status = 4;  // JSON Reseteado
 800a6a2:	2304      	movs	r3, #4
 800a6a4:	617b      	str	r3, [r7, #20]
		}

		return Json_current_status;
 800a6a6:	697b      	ldr	r3, [r7, #20]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	20000524 	.word	0x20000524
 800a6b8:	20000528 	.word	0x20000528
 800a6bc:	2000052c 	.word	0x2000052c

0800a6c0 <process_mesage>:
/*
* @return n Número de comando de tu vector de comandos que ha sido recibido.
*/
#define process_message_MSG_ON 0
int process_mesage(char pData,  char * buffer_json, const uint32_t buffer_size, const char ** vector_comandos, const int numero_comandos, const int resetear)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60b9      	str	r1, [r7, #8]
 800a6c8:	607a      	str	r2, [r7, #4]
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73fb      	strb	r3, [r7, #15]
	int process_message =-6; // Inicio del estado de la función
 800a6d0:	f06f 0305 	mvn.w	r3, #5
 800a6d4:	61fb      	str	r3, [r7, #28]
	static int index = 0;
	int JSON_status = check_JSON(pData, buffer_size, resetear);
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff ff8d 	bl	800a5fc <check_JSON>
 800a6e2:	61b8      	str	r0, [r7, #24]

	switch(JSON_status)
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d851      	bhi.n	800a78e <process_mesage+0xce>
 800a6ea:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <process_mesage+0x30>)
 800a6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f0:	0800a705 	.word	0x0800a705
 800a6f4:	0800a70d 	.word	0x0800a70d
 800a6f8:	0800a72d 	.word	0x0800a72d
 800a6fc:	0800a773 	.word	0x0800a773
 800a700:	0800a781 	.word	0x0800a781
	{
		case 0: //JSON NO ABIERTO
			process_message = -4;
 800a704:	f06f 0303 	mvn.w	r3, #3
 800a708:	61fb      	str	r3, [r7, #28]
#if process_message_MSG_ON
			PRINT("PM: JSON NO ABIERTO \r\n");
			#endif
		break;
 800a70a:	e040      	b.n	800a78e <process_mesage+0xce>
		case 1: //JSON ABIERTO Y EN CURS0. JSON INCOMPLETO.
#if process_message_MSG_ON
			PRINT("PM: JSON ABIERTO \r\n");
#endif
			buffer_json[index] = pData;
 800a70c:	4b22      	ldr	r3, [pc, #136]	; (800a798 <process_mesage+0xd8>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	4413      	add	r3, r2
 800a716:	7bfa      	ldrb	r2, [r7, #15]
 800a718:	701a      	strb	r2, [r3, #0]
			index++;
 800a71a:	4b1f      	ldr	r3, [pc, #124]	; (800a798 <process_mesage+0xd8>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3301      	adds	r3, #1
 800a720:	4a1d      	ldr	r2, [pc, #116]	; (800a798 <process_mesage+0xd8>)
 800a722:	6013      	str	r3, [r2, #0]
			process_message = -3;
 800a724:	f06f 0302 	mvn.w	r3, #2
 800a728:	61fb      	str	r3, [r7, #28]
		break;
 800a72a:	e030      	b.n	800a78e <process_mesage+0xce>
		case 2://JSON TERMINADO
#if process_message_MSG_ON
			PRINT("PM: JSON TERMINADO \r\n");
#endif
			buffer_json[index] = pData;
 800a72c:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <process_mesage+0xd8>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	4413      	add	r3, r2
 800a736:	7bfa      	ldrb	r2, [r7, #15]
 800a738:	701a      	strb	r2, [r3, #0]
			index = 0;
 800a73a:	4b17      	ldr	r3, [pc, #92]	; (800a798 <process_mesage+0xd8>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
			int status = parsear_comandos_json(buffer_json, vector_comandos, numero_comandos);
 800a740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	68b8      	ldr	r0, [r7, #8]
 800a746:	f7ff ff0d 	bl	800a564 <parsear_comandos_json>
 800a74a:	6178      	str	r0, [r7, #20]
			switch(status)
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f113 0f02 	cmn.w	r3, #2
 800a752:	d006      	beq.n	800a762 <process_mesage+0xa2>
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d107      	bne.n	800a76a <process_mesage+0xaa>
				case -1:
					// No contiene Instrucción "c"
#if process_message_MSG_ON
					PRINT("PM: FALTA INSTRUCCION \"C\" \r\n");
#endif
					process_message = -5;
 800a75a:	f06f 0304 	mvn.w	r3, #4
 800a75e:	61fb      	str	r3, [r7, #28]
				break;
 800a760:	e006      	b.n	800a770 <process_mesage+0xb0>
				case -2:
					// Contiene Instrucción "c" pero COMANDO NO VÁLIDO
					process_message = -6;
 800a762:	f06f 0305 	mvn.w	r3, #5
 800a766:	61fb      	str	r3, [r7, #28]
#if process_message_MSG_ON
					PRINT("PM: COMANDO NO VALIDO \r\n");
#endif
				break;
 800a768:	e002      	b.n	800a770 <process_mesage+0xb0>
				default: // Devuelve número de comando encontrado:
					process_message = status;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	61fb      	str	r3, [r7, #28]
#if process_message_MSG_ON
					PRINT("PM: COMANDO ENCONTRADO\r\n");
#endif
				break;
 800a76e:	bf00      	nop
			}

		break;
 800a770:	e00d      	b.n	800a78e <process_mesage+0xce>
		case 3://JSON DEMASIADO GRANDE
			index = 0;
 800a772:	4b09      	ldr	r3, [pc, #36]	; (800a798 <process_mesage+0xd8>)
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
			process_message = -2;
 800a778:	f06f 0301 	mvn.w	r3, #1
 800a77c:	61fb      	str	r3, [r7, #28]
#if process_message_MSG_ON
			PRINT("PM: JSON DEMASIADO GRANDE \r\n");
#endif
			break;
 800a77e:	e006      	b.n	800a78e <process_mesage+0xce>
		case 4: // Contadores reseteados
			index = 0;
 800a780:	4b05      	ldr	r3, [pc, #20]	; (800a798 <process_mesage+0xd8>)
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]
			process_message = -1;
 800a786:	f04f 33ff 	mov.w	r3, #4294967295
 800a78a:	61fb      	str	r3, [r7, #28]
#if process_message_MSG_ON
			PRINT("PM: CONTADORES RESETEADOS \r\n");
#endif
		break;
 800a78c:	bf00      	nop
		}
	return process_message;
 800a78e:	69fb      	ldr	r3, [r7, #28]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3720      	adds	r7, #32
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000530 	.word	0x20000530

0800a79c <parson_strndup>:
static int    json_serialize_string(const char *string, size_t len, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <parson_strndup+0x40>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	3201      	adds	r2, #1
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	4798      	blx	r3
 800a7b2:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <parson_strndup+0x22>
        return NULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e00a      	b.n	800a7d4 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	6879      	ldr	r1, [r7, #4]
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f00c f8dd 	bl	801698c <memcpy>
    return output_string;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	200000c8 	.word	0x200000c8

0800a7e0 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	2b2f      	cmp	r3, #47	; 0x2f
 800a7ee:	d905      	bls.n	800a7fc <hex_char_to_int+0x1c>
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	2b39      	cmp	r3, #57	; 0x39
 800a7f4:	d802      	bhi.n	800a7fc <hex_char_to_int+0x1c>
        return c - '0';
 800a7f6:	79fb      	ldrb	r3, [r7, #7]
 800a7f8:	3b30      	subs	r3, #48	; 0x30
 800a7fa:	e013      	b.n	800a824 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	2b60      	cmp	r3, #96	; 0x60
 800a800:	d905      	bls.n	800a80e <hex_char_to_int+0x2e>
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	2b66      	cmp	r3, #102	; 0x66
 800a806:	d802      	bhi.n	800a80e <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	3b57      	subs	r3, #87	; 0x57
 800a80c:	e00a      	b.n	800a824 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	2b40      	cmp	r3, #64	; 0x40
 800a812:	d905      	bls.n	800a820 <hex_char_to_int+0x40>
 800a814:	79fb      	ldrb	r3, [r7, #7]
 800a816:	2b46      	cmp	r3, #70	; 0x46
 800a818:	d802      	bhi.n	800a820 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	3b37      	subs	r3, #55	; 0x37
 800a81e:	e001      	b.n	800a824 <hex_char_to_int+0x44>
    }
    return -1;
 800a820:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a824:	4618      	mov	r0, r3
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <parse_utf16_hex>:

static int parse_utf16_hex(const char *s, unsigned int *result) {
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00e      	beq.n	800a860 <parse_utf16_hex+0x30>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	3301      	adds	r3, #1
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d009      	beq.n	800a860 <parse_utf16_hex+0x30>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3302      	adds	r3, #2
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d004      	beq.n	800a860 <parse_utf16_hex+0x30>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	3303      	adds	r3, #3
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <parse_utf16_hex+0x34>
        return 0;
 800a860:	2300      	movs	r3, #0
 800a862:	e03a      	b.n	800a8da <parse_utf16_hex+0xaa>
    }
    x1 = hex_char_to_int(s[0]);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff ffb9 	bl	800a7e0 <hex_char_to_int>
 800a86e:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3301      	adds	r3, #1
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff ffb2 	bl	800a7e0 <hex_char_to_int>
 800a87c:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3302      	adds	r3, #2
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff ffab 	bl	800a7e0 <hex_char_to_int>
 800a88a:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3303      	adds	r3, #3
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff ffa4 	bl	800a7e0 <hex_char_to_int>
 800a898:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a0:	d00b      	beq.n	800a8ba <parse_utf16_hex+0x8a>
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d007      	beq.n	800a8ba <parse_utf16_hex+0x8a>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b0:	d003      	beq.n	800a8ba <parse_utf16_hex+0x8a>
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b8:	d101      	bne.n	800a8be <parse_utf16_hex+0x8e>
        return 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e00d      	b.n	800a8da <parse_utf16_hex+0xaa>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	031a      	lsls	r2, r3, #12
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	021b      	lsls	r3, r3, #8
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	011b      	lsls	r3, r3, #4
 800a8cc:	431a      	orrs	r2, r3
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	601a      	str	r2, [r3, #0]
    return 1;
 800a8d8:	2301      	movs	r3, #1
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <is_decimal>:
        string += len;
    }
    return 1;
}

static int is_decimal(const char *string, size_t length) {
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d90a      	bls.n	800a90a <is_decimal+0x26>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b30      	cmp	r3, #48	; 0x30
 800a8fa:	d106      	bne.n	800a90a <is_decimal+0x26>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3301      	adds	r3, #1
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2b2e      	cmp	r3, #46	; 0x2e
 800a904:	d001      	beq.n	800a90a <is_decimal+0x26>
        return 0;
 800a906:	2300      	movs	r3, #0
 800a908:	e024      	b.n	800a954 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d91b      	bls.n	800a948 <is_decimal+0x64>
 800a910:	2202      	movs	r2, #2
 800a912:	4912      	ldr	r1, [pc, #72]	; (800a95c <is_decimal+0x78>)
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f00c f952 	bl	8016bbe <strncmp>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d113      	bne.n	800a948 <is_decimal+0x64>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3302      	adds	r3, #2
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b2e      	cmp	r3, #46	; 0x2e
 800a928:	d00e      	beq.n	800a948 <is_decimal+0x64>
        return 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	e012      	b.n	800a954 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	4413      	add	r3, r2
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	4619      	mov	r1, r3
 800a938:	4809      	ldr	r0, [pc, #36]	; (800a960 <is_decimal+0x7c>)
 800a93a:	f00c f92b 	bl	8016b94 <strchr>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <is_decimal+0x64>
            return 0;
 800a944:	2300      	movs	r3, #0
 800a946:	e005      	b.n	800a954 <is_decimal+0x70>
    while (length--) {
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	1e5a      	subs	r2, r3, #1
 800a94c:	603a      	str	r2, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1ed      	bne.n	800a92e <is_decimal+0x4a>
        }
    }
    return 1;
 800a952:	2301      	movs	r3, #1
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	0801903c 	.word	0x0801903c
 800a960:	08019040 	.word	0x08019040

0800a964 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(JSON_Value *wrapping_value) {
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 800a96c:	4b0e      	ldr	r3, [pc, #56]	; (800a9a8 <json_object_init+0x44>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2014      	movs	r0, #20
 800a972:	4798      	blx	r3
 800a974:	60f8      	str	r0, [r7, #12]
    if (new_obj == NULL) {
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <json_object_init+0x1c>
        return NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	e00f      	b.n	800a9a0 <json_object_init+0x3c>
    }
    new_obj->wrapping_value = wrapping_value;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	601a      	str	r2, [r3, #0]
    new_obj->names = (char**)NULL;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	605a      	str	r2, [r3, #4]
    new_obj->values = (JSON_Value**)NULL;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	609a      	str	r2, [r3, #8]
    new_obj->capacity = 0;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	611a      	str	r2, [r3, #16]
    new_obj->count = 0;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	60da      	str	r2, [r3, #12]
    return new_obj;
 800a99e:	68fb      	ldr	r3, [r7, #12]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	200000c8 	.word	0x200000c8

0800a9ac <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
    if (name == NULL) {
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <json_object_add+0x18>
        return JSONFailure;
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c2:	e009      	b.n	800a9d8 <json_object_add+0x2c>
    }
    return json_object_addn(object, name, strlen(name), value);
 800a9c4:	68b8      	ldr	r0, [r7, #8]
 800a9c6:	f7f5 fc0d 	bl	80001e4 <strlen>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 f805 	bl	800a9e0 <json_object_addn>
 800a9d6:	4603      	mov	r3, r0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <json_object_addn>:

static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 800a9e0:	b590      	push	{r4, r7, lr}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
    size_t index = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d005      	beq.n	800aa04 <json_object_addn+0x24>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <json_object_addn+0x24>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d102      	bne.n	800aa0a <json_object_addn+0x2a>
        return JSONFailure;
 800aa04:	f04f 33ff 	mov.w	r3, #4294967295
 800aa08:	e04e      	b.n	800aaa8 <json_object_addn+0xc8>
    }
    if (json_object_getn_value(object, name, name_len) != NULL) {
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 f8c8 	bl	800aba4 <json_object_getn_value>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <json_object_addn+0x40>
        return JSONFailure;
 800aa1a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1e:	e043      	b.n	800aaa8 <json_object_addn+0xc8>
    }
    if (object->count >= object->capacity) {
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	68da      	ldr	r2, [r3, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d311      	bcc.n	800aa50 <json_object_addn+0x70>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	2b10      	cmp	r3, #16
 800aa34:	bf38      	it	cc
 800aa36:	2310      	movcc	r3, #16
 800aa38:	613b      	str	r3, [r7, #16]
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 800aa3a:	6939      	ldr	r1, [r7, #16]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f837 	bl	800aab0 <json_object_resize>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa48:	d102      	bne.n	800aa50 <json_object_addn+0x70>
            return JSONFailure;
 800aa4a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4e:	e02b      	b.n	800aaa8 <json_object_addn+0xc8>
        }
    }
    index = object->count;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strndup(name, name_len);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	18d4      	adds	r4, r2, r3
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	68b8      	ldr	r0, [r7, #8]
 800aa64:	f7ff fe9a 	bl	800a79c <parson_strndup>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL) {
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d102      	bne.n	800aa82 <json_object_addn+0xa2>
        return JSONFailure;
 800aa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa80:	e012      	b.n	800aaa8 <json_object_addn+0xc8>
    }
    value->parent = json_object_get_wrapping_value(object);
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f001 f8c1 	bl	800bc0a <json_object_get_wrapping_value>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	601a      	str	r2, [r3, #0]
    object->values[index] = value;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	689a      	ldr	r2, [r3, #8]
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	601a      	str	r2, [r3, #0]
    object->count++;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd90      	pop	{r4, r7, pc}

0800aab0 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d103      	bne.n	800aad2 <json_object_resize+0x22>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
    if ((object->names == NULL && object->values != NULL) ||
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <json_object_resize+0x38>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
 800aae8:	f04f 33ff 	mov.w	r3, #4294967295
 800aaec:	e051      	b.n	800ab92 <json_object_resize+0xe2>
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 800aaee:	4b2b      	ldr	r3, [pc, #172]	; (800ab9c <json_object_resize+0xec>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	0092      	lsls	r2, r2, #2
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	4798      	blx	r3
 800aafa:	60f8      	str	r0, [r7, #12]
    if (temp_names == NULL) {
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d102      	bne.n	800ab08 <json_object_resize+0x58>
        return JSONFailure;
 800ab02:	f04f 33ff 	mov.w	r3, #4294967295
 800ab06:	e044      	b.n	800ab92 <json_object_resize+0xe2>
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 800ab08:	4b24      	ldr	r3, [pc, #144]	; (800ab9c <json_object_resize+0xec>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	0092      	lsls	r2, r2, #2
 800ab10:	4610      	mov	r0, r2
 800ab12:	4798      	blx	r3
 800ab14:	60b8      	str	r0, [r7, #8]
    if (temp_values == NULL) {
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <json_object_resize+0x7a>
        parson_free(temp_names);
 800ab1c:	4b20      	ldr	r3, [pc, #128]	; (800aba0 <json_object_resize+0xf0>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	4798      	blx	r3
        return JSONFailure;
 800ab24:	f04f 33ff 	mov.w	r3, #4294967295
 800ab28:	e033      	b.n	800ab92 <json_object_resize+0xe2>
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d019      	beq.n	800ab66 <json_object_resize+0xb6>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d015      	beq.n	800ab66 <json_object_resize+0xb6>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d011      	beq.n	800ab66 <json_object_resize+0xb6>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6859      	ldr	r1, [r3, #4]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f00b ff1c 	bl	801698c <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6899      	ldr	r1, [r3, #8]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	461a      	mov	r2, r3
 800ab60:	68b8      	ldr	r0, [r7, #8]
 800ab62:	f00b ff13 	bl	801698c <memcpy>
    }
    parson_free(object->names);
 800ab66:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <json_object_resize+0xf0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	6852      	ldr	r2, [r2, #4]
 800ab6e:	4610      	mov	r0, r2
 800ab70:	4798      	blx	r3
    parson_free(object->values);
 800ab72:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <json_object_resize+0xf0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6892      	ldr	r2, [r2, #8]
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	4798      	blx	r3
    object->names = temp_names;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	605a      	str	r2, [r3, #4]
    object->values = temp_values;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	609a      	str	r2, [r3, #8]
    object->capacity = new_capacity;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	611a      	str	r2, [r3, #16]
    return JSONSuccess;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200000c8 	.word	0x200000c8
 800aba0:	200000cc 	.word	0x200000cc

0800aba4 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
 800abb0:	2300      	movs	r3, #0
 800abb2:	617b      	str	r3, [r7, #20]
 800abb4:	e026      	b.n	800ac04 <json_object_getn_value+0x60>
        name_length = strlen(object->names[i]);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f5 fb0e 	bl	80001e4 <strlen>
 800abc8:	6138      	str	r0, [r7, #16]
        if (name_length != name_len) {
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d114      	bne.n	800abfc <json_object_getn_value+0x58>
            continue;
        }
        if (strncmp(object->names[i], name, name_len) == 0) {
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f00b ffeb 	bl	8016bbe <strncmp>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d107      	bne.n	800abfe <json_object_getn_value+0x5a>
            return object->values[i];
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	689a      	ldr	r2, [r3, #8]
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	e00b      	b.n	800ac14 <json_object_getn_value+0x70>
            continue;
 800abfc:	bf00      	nop
    for (i = 0; i < json_object_get_count(object); i++) {
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	3301      	adds	r3, #1
 800ac02:	617b      	str	r3, [r7, #20]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 ffef 	bl	800bbe8 <json_object_get_count>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d3d1      	bcc.n	800abb6 <json_object_getn_value+0x12>
        }
    }
    return NULL;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3718      	adds	r7, #24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < object->count; i++) {
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	e015      	b.n	800ac56 <json_object_free+0x3a>
        parson_free(object->names[i]);
 800ac2a:	4b17      	ldr	r3, [pc, #92]	; (800ac88 <json_object_free+0x6c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	6851      	ldr	r1, [r2, #4]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	0092      	lsls	r2, r2, #2
 800ac36:	440a      	add	r2, r1
 800ac38:	6812      	ldr	r2, [r2, #0]
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4798      	blx	r3
        json_value_free(object->values[i]);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	689a      	ldr	r2, [r3, #8]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 f874 	bl	800bd38 <json_value_free>
    for (i = 0; i < object->count; i++) {
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3301      	adds	r3, #1
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d3e4      	bcc.n	800ac2a <json_object_free+0xe>
    }
    parson_free(object->names);
 800ac60:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <json_object_free+0x6c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	6852      	ldr	r2, [r2, #4]
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
    parson_free(object->values);
 800ac6c:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <json_object_free+0x6c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	6892      	ldr	r2, [r2, #8]
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
    parson_free(object);
 800ac78:	4b03      	ldr	r3, [pc, #12]	; (800ac88 <json_object_free+0x6c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	4798      	blx	r3
}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	200000cc 	.word	0x200000cc

0800ac8c <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(JSON_Value *wrapping_value) {
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 800ac94:	4b0d      	ldr	r3, [pc, #52]	; (800accc <json_array_init+0x40>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2010      	movs	r0, #16
 800ac9a:	4798      	blx	r3
 800ac9c:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <json_array_init+0x1c>
        return NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	e00c      	b.n	800acc2 <json_array_init+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	609a      	str	r2, [r3, #8]
    return new_array;
 800acc0:	68fb      	ldr	r3, [r7, #12]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	200000c8 	.word	0x200000c8

0800acd0 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689a      	ldr	r2, [r3, #8]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d311      	bcc.n	800ad0a <json_array_add+0x3a>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	2b10      	cmp	r3, #16
 800acee:	bf38      	it	cc
 800acf0:	2310      	movcc	r3, #16
 800acf2:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 800acf4:	68f9      	ldr	r1, [r7, #12]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f820 	bl	800ad3c <json_array_resize>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad02:	d102      	bne.n	800ad0a <json_array_add+0x3a>
            return JSONFailure;
 800ad04:	f04f 33ff 	mov.w	r3, #4294967295
 800ad08:	e013      	b.n	800ad32 <json_array_add+0x62>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 ffad 	bl	800bc6a <json_array_get_wrapping_value>
 800ad10:	4602      	mov	r2, r0
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	601a      	str	r2, [r3, #0]
    array->count++;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <json_array_resize+0x1a>
        return JSONFailure;
 800ad50:	f04f 33ff 	mov.w	r3, #4294967295
 800ad54:	e02a      	b.n	800adac <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 800ad56:	4b17      	ldr	r3, [pc, #92]	; (800adb4 <json_array_resize+0x78>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	0092      	lsls	r2, r2, #2
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4798      	blx	r3
 800ad62:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d102      	bne.n	800ad70 <json_array_resize+0x34>
        return JSONFailure;
 800ad6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6e:	e01d      	b.n	800adac <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00c      	beq.n	800ad92 <json_array_resize+0x56>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d008      	beq.n	800ad92 <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6859      	ldr	r1, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f00b fdfd 	bl	801698c <memcpy>
    }
    parson_free(array->items);
 800ad92:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <json_array_resize+0x7c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6852      	ldr	r2, [r2, #4]
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	4798      	blx	r3
    array->items = new_items;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	200000c8 	.word	0x200000c8
 800adb8:	200000cc 	.word	0x200000cc

0800adbc <json_array_free>:

static void json_array_free(JSON_Array *array) {
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 800adc4:	2300      	movs	r3, #0
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	e00b      	b.n	800ade2 <json_array_free+0x26>
        json_value_free(array->items[i]);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 ffae 	bl	800bd38 <json_value_free>
    for (i = 0; i < array->count; i++) {
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3301      	adds	r3, #1
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d3ee      	bcc.n	800adca <json_array_free+0xe>
    }
    parson_free(array->items);
 800adec:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <json_array_free+0x4c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	6852      	ldr	r2, [r2, #4]
 800adf4:	4610      	mov	r0, r2
 800adf6:	4798      	blx	r3
    parson_free(array);
 800adf8:	4b03      	ldr	r3, [pc, #12]	; (800ae08 <json_array_free+0x4c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	4798      	blx	r3
}
 800ae00:	bf00      	nop
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	200000cc 	.word	0x200000cc

0800ae0c <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800ae16:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <json_value_init_string_no_copy+0x40>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2010      	movs	r0, #16
 800ae1c:	4798      	blx	r3
 800ae1e:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <json_value_init_string_no_copy+0x1e>
        return NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	e00c      	b.n	800ae44 <json_value_init_string_no_copy+0x38>
    }
    new_value->parent = NULL;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2202      	movs	r2, #2
 800ae34:	605a      	str	r2, [r3, #4]
    new_value->value.string.chars = string;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	609a      	str	r2, [r3, #8]
    new_value->value.string.length = length;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	60da      	str	r2, [r3, #12]
    return new_value;
 800ae42:	68fb      	ldr	r3, [r7, #12]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	200000c8 	.word	0x200000c8

0800ae50 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	2b22      	cmp	r3, #34	; 0x22
 800ae60:	d002      	beq.n	800ae68 <skip_quotes+0x18>
        return JSONFailure;
 800ae62:	f04f 33ff 	mov.w	r3, #4294967295
 800ae66:	e02f      	b.n	800aec8 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	1c5a      	adds	r2, r3, #1
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 800ae72:	e01e      	b.n	800aeb2 <skip_quotes+0x62>
        if (**string == '\0') {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d102      	bne.n	800ae84 <skip_quotes+0x34>
            return JSONFailure;
 800ae7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae82:	e021      	b.n	800aec8 <skip_quotes+0x78>
        } else if (**string == '\\') {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	2b5c      	cmp	r3, #92	; 0x5c
 800ae8c:	d10c      	bne.n	800aea8 <skip_quotes+0x58>
            SKIP_CHAR(string);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d102      	bne.n	800aea8 <skip_quotes+0x58>
                return JSONFailure;
 800aea2:	f04f 33ff 	mov.w	r3, #4294967295
 800aea6:	e00f      	b.n	800aec8 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b22      	cmp	r3, #34	; 0x22
 800aeba:	d1db      	bne.n	800ae74 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	1c5a      	adds	r2, r3, #1
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <parse_utf16>:

static int parse_utf16(const char **unprocessed, char **processed) {
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    int parse_succeeded = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	617b      	str	r3, [r7, #20]
    char *processed_ptr = *processed;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	3301      	adds	r3, #1
 800aef2:	61bb      	str	r3, [r7, #24]
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 800aef4:	f107 030c 	add.w	r3, r7, #12
 800aef8:	4619      	mov	r1, r3
 800aefa:	69b8      	ldr	r0, [r7, #24]
 800aefc:	f7ff fc98 	bl	800a830 <parse_utf16_hex>
 800af00:	6178      	str	r0, [r7, #20]
    if (!parse_succeeded) {
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d102      	bne.n	800af0e <parse_utf16+0x3a>
        return JSONFailure;
 800af08:	f04f 33ff 	mov.w	r3, #4294967295
 800af0c:	e0ce      	b.n	800b0ac <parse_utf16+0x1d8>
    }
    if (cp < 0x80) {
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b7f      	cmp	r3, #127	; 0x7f
 800af12:	d804      	bhi.n	800af1e <parse_utf16+0x4a>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	b2da      	uxtb	r2, r3
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	701a      	strb	r2, [r3, #0]
 800af1c:	e0bc      	b.n	800b098 <parse_utf16+0x1c4>
    } else if (cp < 0x800) {
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af24:	d219      	bcs.n	800af5a <parse_utf16+0x86>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	099b      	lsrs	r3, r3, #6
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	f003 031f 	and.w	r3, r3, #31
 800af30:	b2db      	uxtb	r3, r3
 800af32:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800af36:	b2da      	uxtb	r2, r3
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af44:	b2da      	uxtb	r2, r3
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	3301      	adds	r3, #1
 800af4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af4e:	b2d2      	uxtb	r2, r2
 800af50:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	3301      	adds	r3, #1
 800af56:	61fb      	str	r3, [r7, #28]
 800af58:	e09e      	b.n	800b098 <parse_utf16+0x1c4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800af60:	d303      	bcc.n	800af6a <parse_utf16+0x96>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800af68:	d325      	bcc.n	800afb6 <parse_utf16+0xe2>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	0b1b      	lsrs	r3, r3, #12
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f003 030f 	and.w	r3, r3, #15
 800af74:	b2db      	uxtb	r3, r3
 800af76:	f063 031f 	orn	r3, r3, #31
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	099b      	lsrs	r3, r3, #6
 800af84:	b2db      	uxtb	r3, r3
 800af86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	3301      	adds	r3, #1
 800af90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af94:	b2d2      	uxtb	r2, r2
 800af96:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	3302      	adds	r3, #2
 800afa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	3302      	adds	r3, #2
 800afb2:	61fb      	str	r3, [r7, #28]
 800afb4:	e070      	b.n	800b098 <parse_utf16+0x1c4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800afbc:	d369      	bcc.n	800b092 <parse_utf16+0x1be>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800afc4:	d265      	bcs.n	800b092 <parse_utf16+0x1be>
        lead = cp;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	3304      	adds	r3, #4
 800afce:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	61ba      	str	r2, [r7, #24]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	2b5c      	cmp	r3, #92	; 0x5c
 800afda:	d105      	bne.n	800afe8 <parse_utf16+0x114>
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	61ba      	str	r2, [r7, #24]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b75      	cmp	r3, #117	; 0x75
 800afe6:	d002      	beq.n	800afee <parse_utf16+0x11a>
            return JSONFailure;
 800afe8:	f04f 33ff 	mov.w	r3, #4294967295
 800afec:	e05e      	b.n	800b0ac <parse_utf16+0x1d8>
        }
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 800afee:	f107 0308 	add.w	r3, r7, #8
 800aff2:	4619      	mov	r1, r3
 800aff4:	69b8      	ldr	r0, [r7, #24]
 800aff6:	f7ff fc1b 	bl	800a830 <parse_utf16_hex>
 800affa:	6178      	str	r0, [r7, #20]
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d007      	beq.n	800b012 <parse_utf16+0x13e>
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800b008:	d303      	bcc.n	800b012 <parse_utf16+0x13e>
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800b010:	d302      	bcc.n	800b018 <parse_utf16+0x144>
            return JSONFailure;
 800b012:	f04f 33ff 	mov.w	r3, #4294967295
 800b016:	e049      	b.n	800b0ac <parse_utf16+0x1d8>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	029a      	lsls	r2, r3, #10
 800b01c:	4b25      	ldr	r3, [pc, #148]	; (800b0b4 <parse_utf16+0x1e0>)
 800b01e:	4013      	ands	r3, r2
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b026:	4313      	orrs	r3, r2
 800b028:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b02c:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	0c9b      	lsrs	r3, r3, #18
 800b032:	b2db      	uxtb	r3, r3
 800b034:	f003 0307 	and.w	r3, r3, #7
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	f063 030f 	orn	r3, r3, #15
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	0b1b      	lsrs	r3, r3, #12
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	3301      	adds	r3, #1
 800b054:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b058:	b2d2      	uxtb	r2, r2
 800b05a:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	099b      	lsrs	r3, r3, #6
 800b060:	b2db      	uxtb	r3, r3
 800b062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b066:	b2da      	uxtb	r2, r3
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	3302      	adds	r3, #2
 800b06c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b070:	b2d2      	uxtb	r2, r2
 800b072:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	3303      	adds	r3, #3
 800b082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b086:	b2d2      	uxtb	r2, r2
 800b088:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	3303      	adds	r3, #3
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	e002      	b.n	800b098 <parse_utf16+0x1c4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 800b092:	f04f 33ff 	mov.w	r3, #4294967295
 800b096:	e009      	b.n	800b0ac <parse_utf16+0x1d8>
    }
    unprocessed_ptr += 3;
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	3303      	adds	r3, #3
 800b09c:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	69fa      	ldr	r2, [r7, #28]
 800b0a2:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3720      	adds	r7, #32
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	000ffc00 	.word	0x000ffc00

0800b0b8 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t input_len, size_t *output_len) {
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08a      	sub	sp, #40	; 0x28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
    const char *input_ptr = input;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	617b      	str	r3, [r7, #20]
    size_t initial_size = (input_len + 1) * sizeof(char);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24
    size_t final_size = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	623b      	str	r3, [r7, #32]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61fb      	str	r3, [r7, #28]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	613b      	str	r3, [r7, #16]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61bb      	str	r3, [r7, #24]
    output = (char*)parson_malloc(initial_size);
 800b0de:	4b9f      	ldr	r3, [pc, #636]	; (800b35c <process_string+0x2a4>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0e4:	4798      	blx	r3
 800b0e6:	61f8      	str	r0, [r7, #28]
    if (output == NULL) {
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f000 8126 	beq.w	800b33c <process_string+0x284>
        goto error;
    }
    output_ptr = output;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 800b0f4:	e0f5      	b.n	800b2e2 <process_string+0x22a>
        if (*input_ptr == '\\') {
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	2b5c      	cmp	r3, #92	; 0x5c
 800b0fc:	f040 80e1 	bne.w	800b2c2 <process_string+0x20a>
            input_ptr++;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	3301      	adds	r3, #1
 800b104:	617b      	str	r3, [r7, #20]
            switch (*input_ptr) {
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	3b22      	subs	r3, #34	; 0x22
 800b10c:	2b53      	cmp	r3, #83	; 0x53
 800b10e:	f200 8117 	bhi.w	800b340 <process_string+0x288>
 800b112:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <process_string+0x60>)
 800b114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b118:	0800b269 	.word	0x0800b269
 800b11c:	0800b341 	.word	0x0800b341
 800b120:	0800b341 	.word	0x0800b341
 800b124:	0800b341 	.word	0x0800b341
 800b128:	0800b341 	.word	0x0800b341
 800b12c:	0800b341 	.word	0x0800b341
 800b130:	0800b341 	.word	0x0800b341
 800b134:	0800b341 	.word	0x0800b341
 800b138:	0800b341 	.word	0x0800b341
 800b13c:	0800b341 	.word	0x0800b341
 800b140:	0800b341 	.word	0x0800b341
 800b144:	0800b341 	.word	0x0800b341
 800b148:	0800b341 	.word	0x0800b341
 800b14c:	0800b279 	.word	0x0800b279
 800b150:	0800b341 	.word	0x0800b341
 800b154:	0800b341 	.word	0x0800b341
 800b158:	0800b341 	.word	0x0800b341
 800b15c:	0800b341 	.word	0x0800b341
 800b160:	0800b341 	.word	0x0800b341
 800b164:	0800b341 	.word	0x0800b341
 800b168:	0800b341 	.word	0x0800b341
 800b16c:	0800b341 	.word	0x0800b341
 800b170:	0800b341 	.word	0x0800b341
 800b174:	0800b341 	.word	0x0800b341
 800b178:	0800b341 	.word	0x0800b341
 800b17c:	0800b341 	.word	0x0800b341
 800b180:	0800b341 	.word	0x0800b341
 800b184:	0800b341 	.word	0x0800b341
 800b188:	0800b341 	.word	0x0800b341
 800b18c:	0800b341 	.word	0x0800b341
 800b190:	0800b341 	.word	0x0800b341
 800b194:	0800b341 	.word	0x0800b341
 800b198:	0800b341 	.word	0x0800b341
 800b19c:	0800b341 	.word	0x0800b341
 800b1a0:	0800b341 	.word	0x0800b341
 800b1a4:	0800b341 	.word	0x0800b341
 800b1a8:	0800b341 	.word	0x0800b341
 800b1ac:	0800b341 	.word	0x0800b341
 800b1b0:	0800b341 	.word	0x0800b341
 800b1b4:	0800b341 	.word	0x0800b341
 800b1b8:	0800b341 	.word	0x0800b341
 800b1bc:	0800b341 	.word	0x0800b341
 800b1c0:	0800b341 	.word	0x0800b341
 800b1c4:	0800b341 	.word	0x0800b341
 800b1c8:	0800b341 	.word	0x0800b341
 800b1cc:	0800b341 	.word	0x0800b341
 800b1d0:	0800b341 	.word	0x0800b341
 800b1d4:	0800b341 	.word	0x0800b341
 800b1d8:	0800b341 	.word	0x0800b341
 800b1dc:	0800b341 	.word	0x0800b341
 800b1e0:	0800b341 	.word	0x0800b341
 800b1e4:	0800b341 	.word	0x0800b341
 800b1e8:	0800b341 	.word	0x0800b341
 800b1ec:	0800b341 	.word	0x0800b341
 800b1f0:	0800b341 	.word	0x0800b341
 800b1f4:	0800b341 	.word	0x0800b341
 800b1f8:	0800b341 	.word	0x0800b341
 800b1fc:	0800b341 	.word	0x0800b341
 800b200:	0800b271 	.word	0x0800b271
 800b204:	0800b341 	.word	0x0800b341
 800b208:	0800b341 	.word	0x0800b341
 800b20c:	0800b341 	.word	0x0800b341
 800b210:	0800b341 	.word	0x0800b341
 800b214:	0800b341 	.word	0x0800b341
 800b218:	0800b281 	.word	0x0800b281
 800b21c:	0800b341 	.word	0x0800b341
 800b220:	0800b341 	.word	0x0800b341
 800b224:	0800b341 	.word	0x0800b341
 800b228:	0800b289 	.word	0x0800b289
 800b22c:	0800b341 	.word	0x0800b341
 800b230:	0800b341 	.word	0x0800b341
 800b234:	0800b341 	.word	0x0800b341
 800b238:	0800b341 	.word	0x0800b341
 800b23c:	0800b341 	.word	0x0800b341
 800b240:	0800b341 	.word	0x0800b341
 800b244:	0800b341 	.word	0x0800b341
 800b248:	0800b291 	.word	0x0800b291
 800b24c:	0800b341 	.word	0x0800b341
 800b250:	0800b341 	.word	0x0800b341
 800b254:	0800b341 	.word	0x0800b341
 800b258:	0800b299 	.word	0x0800b299
 800b25c:	0800b341 	.word	0x0800b341
 800b260:	0800b2a1 	.word	0x0800b2a1
 800b264:	0800b2a9 	.word	0x0800b2a9
                case '\"': *output_ptr = '\"'; break;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	2222      	movs	r2, #34	; 0x22
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	e032      	b.n	800b2d6 <process_string+0x21e>
                case '\\': *output_ptr = '\\'; break;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	225c      	movs	r2, #92	; 0x5c
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	e02e      	b.n	800b2d6 <process_string+0x21e>
                case '/':  *output_ptr = '/';  break;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	222f      	movs	r2, #47	; 0x2f
 800b27c:	701a      	strb	r2, [r3, #0]
 800b27e:	e02a      	b.n	800b2d6 <process_string+0x21e>
                case 'b':  *output_ptr = '\b'; break;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2208      	movs	r2, #8
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e026      	b.n	800b2d6 <process_string+0x21e>
                case 'f':  *output_ptr = '\f'; break;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	220c      	movs	r2, #12
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	e022      	b.n	800b2d6 <process_string+0x21e>
                case 'n':  *output_ptr = '\n'; break;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	220a      	movs	r2, #10
 800b294:	701a      	strb	r2, [r3, #0]
 800b296:	e01e      	b.n	800b2d6 <process_string+0x21e>
                case 'r':  *output_ptr = '\r'; break;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	220d      	movs	r2, #13
 800b29c:	701a      	strb	r2, [r3, #0]
 800b29e:	e01a      	b.n	800b2d6 <process_string+0x21e>
                case 't':  *output_ptr = '\t'; break;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	2209      	movs	r2, #9
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	e016      	b.n	800b2d6 <process_string+0x21e>
                case 'u':
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
 800b2a8:	f107 0210 	add.w	r2, r7, #16
 800b2ac:	f107 0314 	add.w	r3, r7, #20
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff fe0e 	bl	800aed4 <parse_utf16>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2be:	d109      	bne.n	800b2d4 <process_string+0x21c>
                        goto error;
 800b2c0:	e043      	b.n	800b34a <process_string+0x292>
                    }
                    break;
                default:
                    goto error;
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	2b1f      	cmp	r3, #31
 800b2c8:	d93c      	bls.n	800b344 <process_string+0x28c>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	7812      	ldrb	r2, [r2, #0]
 800b2d0:	701a      	strb	r2, [r3, #0]
 800b2d2:	e000      	b.n	800b2d6 <process_string+0x21e>
                    break;
 800b2d4:	bf00      	nop
        }
        output_ptr++;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	613b      	str	r3, [r7, #16]
        input_ptr++;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	617b      	str	r3, [r7, #20]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d008      	beq.n	800b2fc <process_string+0x244>
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	f63f aefd 	bhi.w	800b0f6 <process_string+0x3e>
    }
    *output_ptr = '\0';
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2200      	movs	r2, #0
 800b300:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	461a      	mov	r2, r3
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	3301      	adds	r3, #1
 800b30c:	623b      	str	r3, [r7, #32]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 800b30e:	4b13      	ldr	r3, [pc, #76]	; (800b35c <process_string+0x2a4>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6a38      	ldr	r0, [r7, #32]
 800b314:	4798      	blx	r3
 800b316:	61b8      	str	r0, [r7, #24]
    if (resized_output == NULL) {
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d014      	beq.n	800b348 <process_string+0x290>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 800b31e:	6a3a      	ldr	r2, [r7, #32]
 800b320:	69f9      	ldr	r1, [r7, #28]
 800b322:	69b8      	ldr	r0, [r7, #24]
 800b324:	f00b fb32 	bl	801698c <memcpy>
    *output_len = final_size - 1;
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	1e5a      	subs	r2, r3, #1
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	601a      	str	r2, [r3, #0]
    parson_free(output);
 800b330:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <process_string+0x2a8>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	69f8      	ldr	r0, [r7, #28]
 800b336:	4798      	blx	r3
    return resized_output;
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	e00b      	b.n	800b354 <process_string+0x29c>
        goto error;
 800b33c:	bf00      	nop
 800b33e:	e004      	b.n	800b34a <process_string+0x292>
                    goto error;
 800b340:	bf00      	nop
 800b342:	e002      	b.n	800b34a <process_string+0x292>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 800b344:	bf00      	nop
 800b346:	e000      	b.n	800b34a <process_string+0x292>
        goto error;
 800b348:	bf00      	nop
error:
    parson_free(output);
 800b34a:	4b05      	ldr	r3, [pc, #20]	; (800b360 <process_string+0x2a8>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	69f8      	ldr	r0, [r7, #28]
 800b350:	4798      	blx	r3
    return NULL;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3728      	adds	r7, #40	; 0x28
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	200000c8 	.word	0x200000c8
 800b360:	200000cc 	.word	0x200000cc

0800b364 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
    const char *string_start = *string;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	617b      	str	r3, [r7, #20]
    size_t input_string_len = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff fd69 	bl	800ae50 <skip_quotes>
 800b37e:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <get_quoted_string+0x26>
        return NULL;
 800b386:	2300      	movs	r3, #0
 800b388:	e00e      	b.n	800b3a8 <get_quoted_string+0x44>
    }
    input_string_len = *string - string_start - 2; /* length without quotes */
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	3b02      	subs	r3, #2
 800b396:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, input_string_len, output_string_len);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	3301      	adds	r3, #1
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	6939      	ldr	r1, [r7, #16]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff fe89 	bl	800b0b8 <process_string>
 800b3a6:	4603      	mov	r3, r0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3c0:	d906      	bls.n	800b3d0 <parse_value+0x20>
        return NULL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	e0f5      	b.n	800b5b2 <parse_value+0x202>
    }
    SKIP_WHITESPACES(string);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	f00b faac 	bl	801692c <__locale_ctype_ptr>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	4413      	add	r3, r2
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	f003 0308 	and.w	r3, r3, #8
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1ed      	bne.n	800b3c6 <parse_value+0x16>
    switch (**string) {
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	3b22      	subs	r3, #34	; 0x22
 800b3f2:	2b59      	cmp	r3, #89	; 0x59
 800b3f4:	f200 80dc 	bhi.w	800b5b0 <parse_value+0x200>
 800b3f8:	a201      	add	r2, pc, #4	; (adr r2, 800b400 <parse_value+0x50>)
 800b3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fe:	bf00      	nop
 800b400:	0800b589 	.word	0x0800b589
 800b404:	0800b5b1 	.word	0x0800b5b1
 800b408:	0800b5b1 	.word	0x0800b5b1
 800b40c:	0800b5b1 	.word	0x0800b5b1
 800b410:	0800b5b1 	.word	0x0800b5b1
 800b414:	0800b5b1 	.word	0x0800b5b1
 800b418:	0800b5b1 	.word	0x0800b5b1
 800b41c:	0800b5b1 	.word	0x0800b5b1
 800b420:	0800b5b1 	.word	0x0800b5b1
 800b424:	0800b5b1 	.word	0x0800b5b1
 800b428:	0800b5b1 	.word	0x0800b5b1
 800b42c:	0800b59d 	.word	0x0800b59d
 800b430:	0800b5b1 	.word	0x0800b5b1
 800b434:	0800b5b1 	.word	0x0800b5b1
 800b438:	0800b59d 	.word	0x0800b59d
 800b43c:	0800b59d 	.word	0x0800b59d
 800b440:	0800b59d 	.word	0x0800b59d
 800b444:	0800b59d 	.word	0x0800b59d
 800b448:	0800b59d 	.word	0x0800b59d
 800b44c:	0800b59d 	.word	0x0800b59d
 800b450:	0800b59d 	.word	0x0800b59d
 800b454:	0800b59d 	.word	0x0800b59d
 800b458:	0800b59d 	.word	0x0800b59d
 800b45c:	0800b59d 	.word	0x0800b59d
 800b460:	0800b5b1 	.word	0x0800b5b1
 800b464:	0800b5b1 	.word	0x0800b5b1
 800b468:	0800b5b1 	.word	0x0800b5b1
 800b46c:	0800b5b1 	.word	0x0800b5b1
 800b470:	0800b5b1 	.word	0x0800b5b1
 800b474:	0800b5b1 	.word	0x0800b5b1
 800b478:	0800b5b1 	.word	0x0800b5b1
 800b47c:	0800b5b1 	.word	0x0800b5b1
 800b480:	0800b5b1 	.word	0x0800b5b1
 800b484:	0800b5b1 	.word	0x0800b5b1
 800b488:	0800b5b1 	.word	0x0800b5b1
 800b48c:	0800b5b1 	.word	0x0800b5b1
 800b490:	0800b5b1 	.word	0x0800b5b1
 800b494:	0800b5b1 	.word	0x0800b5b1
 800b498:	0800b5b1 	.word	0x0800b5b1
 800b49c:	0800b5b1 	.word	0x0800b5b1
 800b4a0:	0800b5b1 	.word	0x0800b5b1
 800b4a4:	0800b5b1 	.word	0x0800b5b1
 800b4a8:	0800b5b1 	.word	0x0800b5b1
 800b4ac:	0800b5b1 	.word	0x0800b5b1
 800b4b0:	0800b5b1 	.word	0x0800b5b1
 800b4b4:	0800b5b1 	.word	0x0800b5b1
 800b4b8:	0800b5b1 	.word	0x0800b5b1
 800b4bc:	0800b5b1 	.word	0x0800b5b1
 800b4c0:	0800b5b1 	.word	0x0800b5b1
 800b4c4:	0800b5b1 	.word	0x0800b5b1
 800b4c8:	0800b5b1 	.word	0x0800b5b1
 800b4cc:	0800b5b1 	.word	0x0800b5b1
 800b4d0:	0800b5b1 	.word	0x0800b5b1
 800b4d4:	0800b5b1 	.word	0x0800b5b1
 800b4d8:	0800b5b1 	.word	0x0800b5b1
 800b4dc:	0800b5b1 	.word	0x0800b5b1
 800b4e0:	0800b5b1 	.word	0x0800b5b1
 800b4e4:	0800b579 	.word	0x0800b579
 800b4e8:	0800b5b1 	.word	0x0800b5b1
 800b4ec:	0800b5b1 	.word	0x0800b5b1
 800b4f0:	0800b5b1 	.word	0x0800b5b1
 800b4f4:	0800b5b1 	.word	0x0800b5b1
 800b4f8:	0800b5b1 	.word	0x0800b5b1
 800b4fc:	0800b5b1 	.word	0x0800b5b1
 800b500:	0800b5b1 	.word	0x0800b5b1
 800b504:	0800b5b1 	.word	0x0800b5b1
 800b508:	0800b5b1 	.word	0x0800b5b1
 800b50c:	0800b5b1 	.word	0x0800b5b1
 800b510:	0800b593 	.word	0x0800b593
 800b514:	0800b5b1 	.word	0x0800b5b1
 800b518:	0800b5b1 	.word	0x0800b5b1
 800b51c:	0800b5b1 	.word	0x0800b5b1
 800b520:	0800b5b1 	.word	0x0800b5b1
 800b524:	0800b5b1 	.word	0x0800b5b1
 800b528:	0800b5b1 	.word	0x0800b5b1
 800b52c:	0800b5b1 	.word	0x0800b5b1
 800b530:	0800b5a7 	.word	0x0800b5a7
 800b534:	0800b5b1 	.word	0x0800b5b1
 800b538:	0800b5b1 	.word	0x0800b5b1
 800b53c:	0800b5b1 	.word	0x0800b5b1
 800b540:	0800b5b1 	.word	0x0800b5b1
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b593 	.word	0x0800b593
 800b54c:	0800b5b1 	.word	0x0800b5b1
 800b550:	0800b5b1 	.word	0x0800b5b1
 800b554:	0800b5b1 	.word	0x0800b5b1
 800b558:	0800b5b1 	.word	0x0800b5b1
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b5b1 	.word	0x0800b5b1
 800b564:	0800b569 	.word	0x0800b569
        case '{':
            return parse_object_value(string, nesting + 1);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	3301      	adds	r3, #1
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f824 	bl	800b5bc <parse_object_value>
 800b574:	4603      	mov	r3, r0
 800b576:	e01c      	b.n	800b5b2 <parse_value+0x202>
        case '[':
            return parse_array_value(string, nesting + 1);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	3301      	adds	r3, #1
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f938 	bl	800b7f4 <parse_array_value>
 800b584:	4603      	mov	r3, r0
 800b586:	e014      	b.n	800b5b2 <parse_value+0x202>
        case '\"':
            return parse_string_value(string);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f9ff 	bl	800b98c <parse_string_value>
 800b58e:	4603      	mov	r3, r0
 800b590:	e00f      	b.n	800b5b2 <parse_value+0x202>
        case 'f': case 't':
            return parse_boolean_value(string);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa24 	bl	800b9e0 <parse_boolean_value>
 800b598:	4603      	mov	r3, r0
 800b59a:	e00a      	b.n	800b5b2 <parse_value+0x202>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fa5b 	bl	800ba58 <parse_number_value>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	e005      	b.n	800b5b2 <parse_value+0x202>
        case 'n':
            return parse_null_value(string);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa92 	bl	800bad0 <parse_null_value>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	e000      	b.n	800b5b2 <parse_value+0x202>
        default:
            return NULL;
 800b5b0:	2300      	movs	r3, #0
    }
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop

0800b5bc <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_value = NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	61fb      	str	r3, [r7, #28]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61bb      	str	r3, [r7, #24]
    JSON_Object *output_object = NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	617b      	str	r3, [r7, #20]
    char *new_key = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	613b      	str	r3, [r7, #16]
    output_value = json_value_init_object();
 800b5d6:	f000 fbdb 	bl	800bd90 <json_value_init_object>
 800b5da:	61f8      	str	r0, [r7, #28]
    if (output_value == NULL) {
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <parse_object_value+0x2a>
        return NULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e100      	b.n	800b7e8 <parse_object_value+0x22c>
    }
    if (**string != '{') {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	2b7b      	cmp	r3, #123	; 0x7b
 800b5ee:	d004      	beq.n	800b5fa <parse_object_value+0x3e>
        json_value_free(output_value);
 800b5f0:	69f8      	ldr	r0, [r7, #28]
 800b5f2:	f000 fba1 	bl	800bd38 <json_value_free>
        return NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e0f6      	b.n	800b7e8 <parse_object_value+0x22c>
    }
    output_object = json_value_get_object(output_value);
 800b5fa:	69f8      	ldr	r0, [r7, #28]
 800b5fc:	f000 fb53 	bl	800bca6 <json_value_get_object>
 800b600:	6178      	str	r0, [r7, #20]
    SKIP_CHAR(string);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 800b60c:	e004      	b.n	800b618 <parse_object_value+0x5c>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	f00b f988 	bl	801692c <__locale_ctype_ptr>
 800b61c:	4602      	mov	r2, r0
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	4413      	add	r3, r2
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	f003 0308 	and.w	r3, r3, #8
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1ed      	bne.n	800b60e <parse_object_value+0x52>
    if (**string == '}') { /* empty object */
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b7d      	cmp	r3, #125	; 0x7d
 800b63a:	f040 809e 	bne.w	800b77a <parse_object_value+0x1be>
        SKIP_CHAR(string);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	601a      	str	r2, [r3, #0]
        return output_value;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	e0cd      	b.n	800b7e8 <parse_object_value+0x22c>
    }
    while (**string != '\0') {
        size_t key_len = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	60fb      	str	r3, [r7, #12]
        new_key = get_quoted_string(string, &key_len);
 800b650:	f107 030c 	add.w	r3, r7, #12
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7ff fe84 	bl	800b364 <get_quoted_string>
 800b65c:	6138      	str	r0, [r7, #16]
        /* We do not support key names with embedded \0 chars */
        if (new_key == NULL || key_len != strlen(new_key)) {
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d006      	beq.n	800b672 <parse_object_value+0xb6>
 800b664:	6938      	ldr	r0, [r7, #16]
 800b666:	f7f4 fdbd 	bl	80001e4 <strlen>
 800b66a:	4602      	mov	r2, r0
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d009      	beq.n	800b686 <parse_object_value+0xca>
            json_value_free(output_value);
 800b672:	69f8      	ldr	r0, [r7, #28]
 800b674:	f000 fb60 	bl	800bd38 <json_value_free>
            return NULL;
 800b678:	2300      	movs	r3, #0
 800b67a:	e0b5      	b.n	800b7e8 <parse_object_value+0x22c>
        }
        SKIP_WHITESPACES(string);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	601a      	str	r2, [r3, #0]
 800b686:	f00b f951 	bl	801692c <__locale_ctype_ptr>
 800b68a:	4602      	mov	r2, r0
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	3301      	adds	r3, #1
 800b694:	4413      	add	r3, r2
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	f003 0308 	and.w	r3, r3, #8
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1ed      	bne.n	800b67c <parse_object_value+0xc0>
        if (**string != ':') {
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b3a      	cmp	r3, #58	; 0x3a
 800b6a8:	d008      	beq.n	800b6bc <parse_object_value+0x100>
            parson_free(new_key);
 800b6aa:	4b51      	ldr	r3, [pc, #324]	; (800b7f0 <parse_object_value+0x234>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6938      	ldr	r0, [r7, #16]
 800b6b0:	4798      	blx	r3
            json_value_free(output_value);
 800b6b2:	69f8      	ldr	r0, [r7, #28]
 800b6b4:	f000 fb40 	bl	800bd38 <json_value_free>
            return NULL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	e095      	b.n	800b7e8 <parse_object_value+0x22c>
        }
        SKIP_CHAR(string);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff fe71 	bl	800b3b0 <parse_value>
 800b6ce:	61b8      	str	r0, [r7, #24]
        if (new_value == NULL) {
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d108      	bne.n	800b6e8 <parse_object_value+0x12c>
            parson_free(new_key);
 800b6d6:	4b46      	ldr	r3, [pc, #280]	; (800b7f0 <parse_object_value+0x234>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6938      	ldr	r0, [r7, #16]
 800b6dc:	4798      	blx	r3
            json_value_free(output_value);
 800b6de:	69f8      	ldr	r0, [r7, #28]
 800b6e0:	f000 fb2a 	bl	800bd38 <json_value_free>
            return NULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e07f      	b.n	800b7e8 <parse_object_value+0x22c>
        }
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 800b6e8:	69ba      	ldr	r2, [r7, #24]
 800b6ea:	6939      	ldr	r1, [r7, #16]
 800b6ec:	6978      	ldr	r0, [r7, #20]
 800b6ee:	f7ff f95d 	bl	800a9ac <json_object_add>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f8:	d10b      	bne.n	800b712 <parse_object_value+0x156>
            parson_free(new_key);
 800b6fa:	4b3d      	ldr	r3, [pc, #244]	; (800b7f0 <parse_object_value+0x234>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6938      	ldr	r0, [r7, #16]
 800b700:	4798      	blx	r3
            json_value_free(new_value);
 800b702:	69b8      	ldr	r0, [r7, #24]
 800b704:	f000 fb18 	bl	800bd38 <json_value_free>
            json_value_free(output_value);
 800b708:	69f8      	ldr	r0, [r7, #28]
 800b70a:	f000 fb15 	bl	800bd38 <json_value_free>
            return NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	e06a      	b.n	800b7e8 <parse_object_value+0x22c>
        }
        parson_free(new_key);
 800b712:	4b37      	ldr	r3, [pc, #220]	; (800b7f0 <parse_object_value+0x234>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6938      	ldr	r0, [r7, #16]
 800b718:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 800b71a:	e004      	b.n	800b726 <parse_object_value+0x16a>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	f00b f901 	bl	801692c <__locale_ctype_ptr>
 800b72a:	4602      	mov	r2, r0
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	3301      	adds	r3, #1
 800b734:	4413      	add	r3, r2
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	f003 0308 	and.w	r3, r3, #8
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1ed      	bne.n	800b71c <parse_object_value+0x160>
        if (**string != ',') {
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	2b2c      	cmp	r3, #44	; 0x2c
 800b748:	d11e      	bne.n	800b788 <parse_object_value+0x1cc>
            break;
        }
        SKIP_CHAR(string);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	1c5a      	adds	r2, r3, #1
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 800b754:	e004      	b.n	800b760 <parse_object_value+0x1a4>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	1c5a      	adds	r2, r3, #1
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	f00b f8e4 	bl	801692c <__locale_ctype_ptr>
 800b764:	4602      	mov	r2, r0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	4413      	add	r3, r2
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	f003 0308 	and.w	r3, r3, #8
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1ed      	bne.n	800b756 <parse_object_value+0x19a>
    while (**string != '\0') {
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	f47f af63 	bne.w	800b64c <parse_object_value+0x90>
 800b786:	e006      	b.n	800b796 <parse_object_value+0x1da>
            break;
 800b788:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 800b78a:	e004      	b.n	800b796 <parse_object_value+0x1da>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	601a      	str	r2, [r3, #0]
 800b796:	f00b f8c9 	bl	801692c <__locale_ctype_ptr>
 800b79a:	4602      	mov	r2, r0
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	4413      	add	r3, r2
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f003 0308 	and.w	r3, r3, #8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1ed      	bne.n	800b78c <parse_object_value+0x1d0>
    if (**string != '}' || /* Trim object after parsing is over */
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	2b7d      	cmp	r3, #125	; 0x7d
 800b7b8:	d10b      	bne.n	800b7d2 <parse_object_value+0x216>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 800b7ba:	6978      	ldr	r0, [r7, #20]
 800b7bc:	f000 fa14 	bl	800bbe8 <json_object_get_count>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6978      	ldr	r0, [r7, #20]
 800b7c6:	f7ff f973 	bl	800aab0 <json_object_resize>
 800b7ca:	4603      	mov	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
 800b7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d0:	d104      	bne.n	800b7dc <parse_object_value+0x220>
            json_value_free(output_value);
 800b7d2:	69f8      	ldr	r0, [r7, #28]
 800b7d4:	f000 fab0 	bl	800bd38 <json_value_free>
            return NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e005      	b.n	800b7e8 <parse_object_value+0x22c>
    }
    SKIP_CHAR(string);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	601a      	str	r2, [r3, #0]
    return output_value;
 800b7e6:	69fb      	ldr	r3, [r7, #28]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3720      	adds	r7, #32
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	200000cc 	.word	0x200000cc

0800b7f4 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 800b7fe:	2300      	movs	r3, #0
 800b800:	617b      	str	r3, [r7, #20]
 800b802:	2300      	movs	r3, #0
 800b804:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 800b806:	2300      	movs	r3, #0
 800b808:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 800b80a:	f000 faed 	bl	800bde8 <json_value_init_array>
 800b80e:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <parse_array_value+0x26>
        return NULL;
 800b816:	2300      	movs	r3, #0
 800b818:	e0b3      	b.n	800b982 <parse_array_value+0x18e>
    }
    if (**string != '[') {
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	2b5b      	cmp	r3, #91	; 0x5b
 800b822:	d004      	beq.n	800b82e <parse_array_value+0x3a>
        json_value_free(output_value);
 800b824:	6978      	ldr	r0, [r7, #20]
 800b826:	f000 fa87 	bl	800bd38 <json_value_free>
        return NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	e0a9      	b.n	800b982 <parse_array_value+0x18e>
    }
    output_array = json_value_get_array(output_value);
 800b82e:	6978      	ldr	r0, [r7, #20]
 800b830:	f000 fa4b 	bl	800bcca <json_value_get_array>
 800b834:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 800b840:	e004      	b.n	800b84c <parse_array_value+0x58>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	1c5a      	adds	r2, r3, #1
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	f00b f86e 	bl	801692c <__locale_ctype_ptr>
 800b850:	4602      	mov	r2, r0
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	3301      	adds	r3, #1
 800b85a:	4413      	add	r3, r2
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	f003 0308 	and.w	r3, r3, #8
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1ed      	bne.n	800b842 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b5d      	cmp	r3, #93	; 0x5d
 800b86e:	d152      	bne.n	800b916 <parse_array_value+0x122>
        SKIP_CHAR(string);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	601a      	str	r2, [r3, #0]
        return output_value;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	e081      	b.n	800b982 <parse_array_value+0x18e>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7ff fd95 	bl	800b3b0 <parse_value>
 800b886:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d104      	bne.n	800b898 <parse_array_value+0xa4>
            json_value_free(output_value);
 800b88e:	6978      	ldr	r0, [r7, #20]
 800b890:	f000 fa52 	bl	800bd38 <json_value_free>
            return NULL;
 800b894:	2300      	movs	r3, #0
 800b896:	e074      	b.n	800b982 <parse_array_value+0x18e>
        }
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 800b898:	6939      	ldr	r1, [r7, #16]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f7ff fa18 	bl	800acd0 <json_array_add>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a6:	d10c      	bne.n	800b8c2 <parse_array_value+0xce>
            json_value_free(new_array_value);
 800b8a8:	6938      	ldr	r0, [r7, #16]
 800b8aa:	f000 fa45 	bl	800bd38 <json_value_free>
            json_value_free(output_value);
 800b8ae:	6978      	ldr	r0, [r7, #20]
 800b8b0:	f000 fa42 	bl	800bd38 <json_value_free>
            return NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e064      	b.n	800b982 <parse_array_value+0x18e>
        }
        SKIP_WHITESPACES(string);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	f00b f833 	bl	801692c <__locale_ctype_ptr>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	4413      	add	r3, r2
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	f003 0308 	and.w	r3, r3, #8
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1ed      	bne.n	800b8b8 <parse_array_value+0xc4>
        if (**string != ',') {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	2b2c      	cmp	r3, #44	; 0x2c
 800b8e4:	d11d      	bne.n	800b922 <parse_array_value+0x12e>
            break;
        }
        SKIP_CHAR(string);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 800b8f0:	e004      	b.n	800b8fc <parse_array_value+0x108>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	1c5a      	adds	r2, r3, #1
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	f00b f816 	bl	801692c <__locale_ctype_ptr>
 800b900:	4602      	mov	r2, r0
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	3301      	adds	r3, #1
 800b90a:	4413      	add	r3, r2
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	f003 0308 	and.w	r3, r3, #8
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1ed      	bne.n	800b8f2 <parse_array_value+0xfe>
    while (**string != '\0') {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1ae      	bne.n	800b87e <parse_array_value+0x8a>
 800b920:	e006      	b.n	800b930 <parse_array_value+0x13c>
            break;
 800b922:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 800b924:	e004      	b.n	800b930 <parse_array_value+0x13c>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	601a      	str	r2, [r3, #0]
 800b930:	f00a fffc 	bl	801692c <__locale_ctype_ptr>
 800b934:	4602      	mov	r2, r0
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	3301      	adds	r3, #1
 800b93e:	4413      	add	r3, r2
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	f003 0308 	and.w	r3, r3, #8
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1ed      	bne.n	800b926 <parse_array_value+0x132>
    if (**string != ']' || /* Trim array after parsing is over */
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b5d      	cmp	r3, #93	; 0x5d
 800b952:	d10b      	bne.n	800b96c <parse_array_value+0x178>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f977 	bl	800bc48 <json_array_get_count>
 800b95a:	4603      	mov	r3, r0
 800b95c:	4619      	mov	r1, r3
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f7ff f9ec 	bl	800ad3c <json_array_resize>
 800b964:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 800b966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96a:	d104      	bne.n	800b976 <parse_array_value+0x182>
            json_value_free(output_value);
 800b96c:	6978      	ldr	r0, [r7, #20]
 800b96e:	f000 f9e3 	bl	800bd38 <json_value_free>
            return NULL;
 800b972:	2300      	movs	r3, #0
 800b974:	e005      	b.n	800b982 <parse_array_value+0x18e>
    }
    SKIP_CHAR(string);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	601a      	str	r2, [r3, #0]
    return output_value;
 800b980:	697b      	ldr	r3, [r7, #20]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 800b994:	2300      	movs	r3, #0
 800b996:	617b      	str	r3, [r7, #20]
    size_t new_string_len = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 800b99c:	f107 030c 	add.w	r3, r7, #12
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7ff fcde 	bl	800b364 <get_quoted_string>
 800b9a8:	6138      	str	r0, [r7, #16]
    if (new_string == NULL) {
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d101      	bne.n	800b9b4 <parse_string_value+0x28>
        return NULL;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e00f      	b.n	800b9d4 <parse_string_value+0x48>
    }
    value = json_value_init_string_no_copy(new_string, new_string_len);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6938      	ldr	r0, [r7, #16]
 800b9ba:	f7ff fa27 	bl	800ae0c <json_value_init_string_no_copy>
 800b9be:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d105      	bne.n	800b9d2 <parse_string_value+0x46>
        parson_free(new_string);
 800b9c6:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <parse_string_value+0x50>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	4798      	blx	r3
        return NULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e000      	b.n	800b9d4 <parse_string_value+0x48>
    }
    return value;
 800b9d2:	697b      	ldr	r3, [r7, #20]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3718      	adds	r7, #24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	200000cc 	.word	0x200000cc

0800b9e0 <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 800b9e8:	2304      	movs	r3, #4
 800b9ea:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 800b9ec:	2305      	movs	r3, #5
 800b9ee:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4815      	ldr	r0, [pc, #84]	; (800ba50 <parse_boolean_value+0x70>)
 800b9fa:	f00b f8e0 	bl	8016bbe <strncmp>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10a      	bne.n	800ba1a <parse_boolean_value+0x3a>
        *string += true_token_size;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	441a      	add	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 800ba10:	2001      	movs	r0, #1
 800ba12:	f000 fa67 	bl	800bee4 <json_value_init_boolean>
 800ba16:	4603      	mov	r3, r0
 800ba18:	e015      	b.n	800ba46 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	4619      	mov	r1, r3
 800ba22:	480c      	ldr	r0, [pc, #48]	; (800ba54 <parse_boolean_value+0x74>)
 800ba24:	f00b f8cb 	bl	8016bbe <strncmp>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <parse_boolean_value+0x64>
        *string += false_token_size;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	441a      	add	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	f000 fa52 	bl	800bee4 <json_value_init_boolean>
 800ba40:	4603      	mov	r3, r0
 800ba42:	e000      	b.n	800ba46 <parse_boolean_value+0x66>
    }
    return NULL;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	08019050 	.word	0x08019050
 800ba54:	08019058 	.word	0x08019058

0800ba58 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 800ba58:	b590      	push	{r4, r7, lr}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 800ba60:	f04f 0300 	mov.w	r3, #0
 800ba64:	f04f 0400 	mov.w	r4, #0
 800ba68:	e9c7 3404 	strd	r3, r4, [r7, #16]
    errno = 0;
 800ba6c:	f00a ff30 	bl	80168d0 <__errno>
 800ba70:	4602      	mov	r2, r0
 800ba72:	2300      	movs	r3, #0
 800ba74:	6013      	str	r3, [r2, #0]
    number = strtod(*string, &end);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f107 020c 	add.w	r2, r7, #12
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f00b fec1 	bl	8017808 <strtod>
 800ba86:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno || !is_decimal(*string, end - *string)) {
 800ba8a:	f00a ff21 	bl	80168d0 <__errno>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10d      	bne.n	800bab2 <parse_number_value+0x5a>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	1acb      	subs	r3, r1, r3
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f7fe ff1c 	bl	800a8e4 <is_decimal>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d101      	bne.n	800bab6 <parse_number_value+0x5e>
        return NULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	e007      	b.n	800bac6 <parse_number_value+0x6e>
    }
    *string = end;
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 800babc:	ed97 0b04 	vldr	d0, [r7, #16]
 800bac0:	f000 f9be 	bl	800be40 <json_value_init_number>
 800bac4:	4603      	mov	r3, r0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	371c      	adds	r7, #28
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd90      	pop	{r4, r7, pc}
	...

0800bad0 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 800bad8:	2304      	movs	r3, #4
 800bada:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	4619      	mov	r1, r3
 800bae4:	480a      	ldr	r0, [pc, #40]	; (800bb10 <parse_null_value+0x40>)
 800bae6:	f00b f86a 	bl	8016bbe <strncmp>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <parse_null_value+0x34>
        *string += token_size;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	441a      	add	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 800bafc:	f000 fa16 	bl	800bf2c <json_value_init_null>
 800bb00:	4603      	mov	r3, r0
 800bb02:	e000      	b.n	800bb06 <parse_null_value+0x36>
    }
    return NULL;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	08019060 	.word	0x08019060

0800bb14 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <json_parse_string+0x12>
        return NULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	e016      	b.n	800bb54 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	2bef      	cmp	r3, #239	; 0xef
 800bb2c:	d10c      	bne.n	800bb48 <json_parse_string+0x34>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3301      	adds	r3, #1
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	2bbb      	cmp	r3, #187	; 0xbb
 800bb36:	d107      	bne.n	800bb48 <json_parse_string+0x34>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3302      	adds	r3, #2
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2bbf      	cmp	r3, #191	; 0xbf
 800bb40:	d102      	bne.n	800bb48 <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	3303      	adds	r3, #3
 800bb46:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 800bb48:	1d3b      	adds	r3, r7, #4
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff fc2f 	bl	800b3b0 <parse_value>
 800bb52:	4603      	mov	r3, r0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <json_object_get_value+0x16>
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <json_object_get_value+0x1a>
        return NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	e009      	b.n	800bb8a <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 800bb76:	6838      	ldr	r0, [r7, #0]
 800bb78:	f7f4 fb34 	bl	80001e4 <strlen>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	461a      	mov	r2, r3
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7ff f80e 	bl	800aba4 <json_object_getn_value>
 800bb88:	4603      	mov	r3, r0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b084      	sub	sp, #16
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 800bb9c:	212e      	movs	r1, #46	; 0x2e
 800bb9e:	6838      	ldr	r0, [r7, #0]
 800bba0:	f00a fff8 	bl	8016b94 <strchr>
 800bba4:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d105      	bne.n	800bbb8 <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7ff ffd4 	bl	800bb5c <json_object_get_value>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	e013      	b.n	800bbe0 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7fe ffee 	bl	800aba4 <json_object_getn_value>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 f86b 	bl	800bca6 <json_value_get_object>
 800bbd0:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff ffda 	bl	800bb92 <json_object_dotget_value>
 800bbde:	4603      	mov	r3, r0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d002      	beq.n	800bbfc <json_object_get_count+0x14>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	e000      	b.n	800bbfe <json_object_get_count+0x16>
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	370c      	adds	r7, #12
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 800bc0a:	b480      	push	{r7}
 800bc0c:	b083      	sub	sp, #12
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
    return object->wrapping_value;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <json_object_has_value>:

int json_object_has_value (const JSON_Object *object, const char *name) {
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
    return json_object_get_value(object, name) != NULL;
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7ff ff94 	bl	800bb5c <json_object_get_value>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	bf14      	ite	ne
 800bc3a:	2301      	movne	r3, #1
 800bc3c:	2300      	moveq	r3, #0
 800bc3e:	b2db      	uxtb	r3, r3
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d002      	beq.n	800bc5c <json_array_get_count+0x14>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	e000      	b.n	800bc5e <json_array_get_count+0x16>
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 800bc6a:	b480      	push	{r7}
 800bc6c:	b083      	sub	sp, #12
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
    return array->wrapping_value;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 800bc82:	b480      	push	{r7}
 800bc84:	b083      	sub	sp, #12
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <json_value_get_type+0x14>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	e001      	b.n	800bc9a <json_value_get_type+0x18>
 800bc96:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff ffe7 	bl	800bc82 <json_value_get_type>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d102      	bne.n	800bcc0 <json_value_get_object+0x1a>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	e000      	b.n	800bcc2 <json_value_get_object+0x1c>
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7ff ffd5 	bl	800bc82 <json_value_get_type>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b05      	cmp	r3, #5
 800bcdc:	d102      	bne.n	800bce4 <json_value_get_array+0x1a>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	e000      	b.n	800bce6 <json_value_get_array+0x1c>
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff ffc3 	bl	800bc82 <json_value_get_type>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d102      	bne.n	800bd08 <json_value_get_string_desc+0x1a>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	3308      	adds	r3, #8
 800bd06:	e000      	b.n	800bd0a <json_value_get_string_desc+0x1c>
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff ffe7 	bl	800bcee <json_value_get_string_desc>
 800bd20:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <json_value_get_string+0x1c>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	e000      	b.n	800bd30 <json_value_get_string+0x1e>
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff ff9e 	bl	800bc82 <json_value_get_type>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d004      	beq.n	800bd56 <json_value_free+0x1e>
 800bd4c:	2b05      	cmp	r3, #5
 800bd4e:	d00f      	beq.n	800bd70 <json_value_free+0x38>
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d006      	beq.n	800bd62 <json_value_free+0x2a>
            break;
        case JSONArray:
            json_array_free(value->value.array);
            break;
        default:
            break;
 800bd54:	e012      	b.n	800bd7c <json_value_free+0x44>
            json_object_free(value->value.object);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe ff5e 	bl	800ac1c <json_object_free>
            break;
 800bd60:	e00c      	b.n	800bd7c <json_value_free+0x44>
            parson_free(value->value.string.chars);
 800bd62:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <json_value_free+0x54>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	6892      	ldr	r2, [r2, #8]
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	4798      	blx	r3
            break;
 800bd6e:	e005      	b.n	800bd7c <json_value_free+0x44>
            json_array_free(value->value.array);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7ff f821 	bl	800adbc <json_array_free>
            break;
 800bd7a:	bf00      	nop
    }
    parson_free(value);
 800bd7c:	4b03      	ldr	r3, [pc, #12]	; (800bd8c <json_value_free+0x54>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	4798      	blx	r3
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	200000cc 	.word	0x200000cc

0800bd90 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800bd96:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <json_value_init_object+0x50>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2010      	movs	r0, #16
 800bd9c:	4798      	blx	r3
 800bd9e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d101      	bne.n	800bdaa <json_value_init_object+0x1a>
        return NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	e016      	b.n	800bdd8 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2204      	movs	r2, #4
 800bdb4:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_init(new_value);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7fe fdd4 	bl	800a964 <json_object_init>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d105      	bne.n	800bdd6 <json_value_init_object+0x46>
        parson_free(new_value);
 800bdca:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <json_value_init_object+0x54>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	4798      	blx	r3
        return NULL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e000      	b.n	800bdd8 <json_value_init_object+0x48>
    }
    return new_value;
 800bdd6:	687b      	ldr	r3, [r7, #4]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	200000c8 	.word	0x200000c8
 800bde4:	200000cc 	.word	0x200000cc

0800bde8 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800bdee:	4b12      	ldr	r3, [pc, #72]	; (800be38 <json_value_init_array+0x50>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2010      	movs	r0, #16
 800bdf4:	4798      	blx	r3
 800bdf6:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d101      	bne.n	800be02 <json_value_init_array+0x1a>
        return NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	e016      	b.n	800be30 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2205      	movs	r2, #5
 800be0c:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_init(new_value);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7fe ff3c 	bl	800ac8c <json_array_init>
 800be14:	4602      	mov	r2, r0
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d105      	bne.n	800be2e <json_value_init_array+0x46>
        parson_free(new_value);
 800be22:	4b06      	ldr	r3, [pc, #24]	; (800be3c <json_value_init_array+0x54>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	4798      	blx	r3
        return NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	e000      	b.n	800be30 <json_value_init_array+0x48>
    }
    return new_value;
 800be2e:	687b      	ldr	r3, [r7, #4]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	200000c8 	.word	0x200000c8
 800be3c:	200000cc 	.word	0x200000cc

0800be40 <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 800be40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 800be4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be52:	e9d7 0100 	ldrd	r0, r1, [r7]
 800be56:	f7f4 fe79 	bl	8000b4c <__aeabi_dcmpun>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d121      	bne.n	800bea4 <json_value_init_number+0x64>
 800be60:	683c      	ldr	r4, [r7, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800be68:	2301      	movs	r3, #1
 800be6a:	461e      	mov	r6, r3
 800be6c:	f04f 32ff 	mov.w	r2, #4294967295
 800be70:	4b1a      	ldr	r3, [pc, #104]	; (800bedc <json_value_init_number+0x9c>)
 800be72:	4620      	mov	r0, r4
 800be74:	4629      	mov	r1, r5
 800be76:	f7f4 fe69 	bl	8000b4c <__aeabi_dcmpun>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10b      	bne.n	800be98 <json_value_init_number+0x58>
 800be80:	f04f 32ff 	mov.w	r2, #4294967295
 800be84:	4b15      	ldr	r3, [pc, #84]	; (800bedc <json_value_init_number+0x9c>)
 800be86:	4620      	mov	r0, r4
 800be88:	4629      	mov	r1, r5
 800be8a:	f7f4 fe41 	bl	8000b10 <__aeabi_dcmple>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <json_value_init_number+0x58>
 800be94:	2300      	movs	r3, #0
 800be96:	461e      	mov	r6, r3
 800be98:	b2f3      	uxtb	r3, r6
 800be9a:	f083 0301 	eor.w	r3, r3, #1
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <json_value_init_number+0x68>
        return NULL;
 800bea4:	2300      	movs	r3, #0
 800bea6:	e015      	b.n	800bed4 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800bea8:	4b0d      	ldr	r3, [pc, #52]	; (800bee0 <json_value_init_number+0xa0>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2010      	movs	r0, #16
 800beae:	4798      	blx	r3
 800beb0:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <json_value_init_number+0x7c>
        return NULL;
 800beb8:	2300      	movs	r3, #0
 800beba:	e00b      	b.n	800bed4 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2203      	movs	r2, #3
 800bec6:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bece:	e9c2 3402 	strd	r3, r4, [r2, #8]
    return new_value;
 800bed2:	68fb      	ldr	r3, [r7, #12]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bedc:	7fefffff 	.word	0x7fefffff
 800bee0:	200000c8 	.word	0x200000c8

0800bee4 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800beec:	4b0e      	ldr	r3, [pc, #56]	; (800bf28 <json_value_init_boolean+0x44>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2010      	movs	r0, #16
 800bef2:	4798      	blx	r3
 800bef4:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <json_value_init_boolean+0x1c>
        return NULL;
 800befc:	2300      	movs	r3, #0
 800befe:	e00f      	b.n	800bf20 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2206      	movs	r2, #6
 800bf0a:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	bf14      	ite	ne
 800bf12:	2301      	movne	r3, #1
 800bf14:	2300      	moveq	r3, #0
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	461a      	mov	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	609a      	str	r2, [r3, #8]
    return new_value;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	200000c8 	.word	0x200000c8

0800bf2c <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800bf32:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <json_value_init_null+0x30>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2010      	movs	r0, #16
 800bf38:	4798      	blx	r3
 800bf3a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <json_value_init_null+0x1a>
        return NULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e006      	b.n	800bf54 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	605a      	str	r2, [r3, #4]
    return new_value;
 800bf52:	687b      	ldr	r3, [r7, #4]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	200000c8 	.word	0x200000c8

0800bf60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	4a08      	ldr	r2, [pc, #32]	; (800bf90 <disk_status+0x30>)
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	79fa      	ldrb	r2, [r7, #7]
 800bf78:	4905      	ldr	r1, [pc, #20]	; (800bf90 <disk_status+0x30>)
 800bf7a:	440a      	add	r2, r1
 800bf7c:	7a12      	ldrb	r2, [r2, #8]
 800bf7e:	4610      	mov	r0, r2
 800bf80:	4798      	blx	r3
 800bf82:	4603      	mov	r3, r0
 800bf84:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	2000055c 	.word	0x2000055c

0800bf94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	4a0d      	ldr	r2, [pc, #52]	; (800bfdc <disk_initialize+0x48>)
 800bfa6:	5cd3      	ldrb	r3, [r2, r3]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d111      	bne.n	800bfd0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bfac:	79fb      	ldrb	r3, [r7, #7]
 800bfae:	4a0b      	ldr	r2, [pc, #44]	; (800bfdc <disk_initialize+0x48>)
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	4a09      	ldr	r2, [pc, #36]	; (800bfdc <disk_initialize+0x48>)
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	79fa      	ldrb	r2, [r7, #7]
 800bfc2:	4906      	ldr	r1, [pc, #24]	; (800bfdc <disk_initialize+0x48>)
 800bfc4:	440a      	add	r2, r1
 800bfc6:	7a12      	ldrb	r2, [r2, #8]
 800bfc8:	4610      	mov	r0, r2
 800bfca:	4798      	blx	r3
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	2000055c 	.word	0x2000055c

0800bfe0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bfe0:	b590      	push	{r4, r7, lr}
 800bfe2:	b087      	sub	sp, #28
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
 800bfea:	603b      	str	r3, [r7, #0]
 800bfec:	4603      	mov	r3, r0
 800bfee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
 800bff2:	4a0a      	ldr	r2, [pc, #40]	; (800c01c <disk_read+0x3c>)
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	689c      	ldr	r4, [r3, #8]
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
 800bffe:	4a07      	ldr	r2, [pc, #28]	; (800c01c <disk_read+0x3c>)
 800c000:	4413      	add	r3, r2
 800c002:	7a18      	ldrb	r0, [r3, #8]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	47a0      	blx	r4
 800c00c:	4603      	mov	r3, r0
 800c00e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c010:	7dfb      	ldrb	r3, [r7, #23]
}
 800c012:	4618      	mov	r0, r3
 800c014:	371c      	adds	r7, #28
 800c016:	46bd      	mov	sp, r7
 800c018:	bd90      	pop	{r4, r7, pc}
 800c01a:	bf00      	nop
 800c01c:	2000055c 	.word	0x2000055c

0800c020 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	607a      	str	r2, [r7, #4]
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	4a0a      	ldr	r2, [pc, #40]	; (800c05c <disk_write+0x3c>)
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	68dc      	ldr	r4, [r3, #12]
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
 800c03e:	4a07      	ldr	r2, [pc, #28]	; (800c05c <disk_write+0x3c>)
 800c040:	4413      	add	r3, r2
 800c042:	7a18      	ldrb	r0, [r3, #8]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	68b9      	ldr	r1, [r7, #8]
 800c04a:	47a0      	blx	r4
 800c04c:	4603      	mov	r3, r0
 800c04e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c050:	7dfb      	ldrb	r3, [r7, #23]
}
 800c052:	4618      	mov	r0, r3
 800c054:	371c      	adds	r7, #28
 800c056:	46bd      	mov	sp, r7
 800c058:	bd90      	pop	{r4, r7, pc}
 800c05a:	bf00      	nop
 800c05c:	2000055c 	.word	0x2000055c

0800c060 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	603a      	str	r2, [r7, #0]
 800c06a:	71fb      	strb	r3, [r7, #7]
 800c06c:	460b      	mov	r3, r1
 800c06e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c070:	79fb      	ldrb	r3, [r7, #7]
 800c072:	4a09      	ldr	r2, [pc, #36]	; (800c098 <disk_ioctl+0x38>)
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	79fa      	ldrb	r2, [r7, #7]
 800c07e:	4906      	ldr	r1, [pc, #24]	; (800c098 <disk_ioctl+0x38>)
 800c080:	440a      	add	r2, r1
 800c082:	7a10      	ldrb	r0, [r2, #8]
 800c084:	79b9      	ldrb	r1, [r7, #6]
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	4798      	blx	r3
 800c08a:	4603      	mov	r3, r0
 800c08c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	2000055c 	.word	0x2000055c

0800c09c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
  return 0;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c0bc:	89fb      	ldrh	r3, [r7, #14]
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	b21a      	sxth	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	b21b      	sxth	r3, r3
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	b21b      	sxth	r3, r3
 800c0cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c0ce:	89fb      	ldrh	r3, [r7, #14]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3303      	adds	r3, #3
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	021b      	lsls	r3, r3, #8
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	3202      	adds	r2, #2
 800c0f4:	7812      	ldrb	r2, [r2, #0]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	021b      	lsls	r3, r3, #8
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	3201      	adds	r2, #1
 800c102:	7812      	ldrb	r2, [r2, #0]
 800c104:	4313      	orrs	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	021b      	lsls	r3, r3, #8
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	7812      	ldrb	r2, [r2, #0]
 800c110:	4313      	orrs	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]
	return rv;
 800c114:	68fb      	ldr	r3, [r7, #12]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c122:	b480      	push	{r7}
 800c124:	b083      	sub	sp, #12
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	460b      	mov	r3, r1
 800c12c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	1c5a      	adds	r2, r3, #1
 800c132:	607a      	str	r2, [r7, #4]
 800c134:	887a      	ldrh	r2, [r7, #2]
 800c136:	b2d2      	uxtb	r2, r2
 800c138:	701a      	strb	r2, [r3, #0]
 800c13a:	887b      	ldrh	r3, [r7, #2]
 800c13c:	0a1b      	lsrs	r3, r3, #8
 800c13e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	1c5a      	adds	r2, r3, #1
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	887a      	ldrh	r2, [r7, #2]
 800c148:	b2d2      	uxtb	r2, r2
 800c14a:	701a      	strb	r2, [r3, #0]
}
 800c14c:	bf00      	nop
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	b2d2      	uxtb	r2, r2
 800c16c:	701a      	strb	r2, [r3, #0]
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	0a1b      	lsrs	r3, r3, #8
 800c172:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	607a      	str	r2, [r7, #4]
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	b2d2      	uxtb	r2, r2
 800c17e:	701a      	strb	r2, [r3, #0]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	0a1b      	lsrs	r3, r3, #8
 800c184:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	1c5a      	adds	r2, r3, #1
 800c18a:	607a      	str	r2, [r7, #4]
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	b2d2      	uxtb	r2, r2
 800c190:	701a      	strb	r2, [r3, #0]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	0a1b      	lsrs	r3, r3, #8
 800c196:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	607a      	str	r2, [r7, #4]
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	701a      	strb	r2, [r3, #0]
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c1b0:	b480      	push	{r7}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00d      	beq.n	800c1e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c1ca:	693a      	ldr	r2, [r7, #16]
 800c1cc:	1c53      	adds	r3, r2, #1
 800c1ce:	613b      	str	r3, [r7, #16]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	1c59      	adds	r1, r3, #1
 800c1d4:	6179      	str	r1, [r7, #20]
 800c1d6:	7812      	ldrb	r2, [r2, #0]
 800c1d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	607b      	str	r3, [r7, #4]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1f1      	bne.n	800c1ca <mem_cpy+0x1a>
	}
}
 800c1e6:	bf00      	nop
 800c1e8:	371c      	adds	r7, #28
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c1f2:	b480      	push	{r7}
 800c1f4:	b087      	sub	sp, #28
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	60f8      	str	r0, [r7, #12]
 800c1fa:	60b9      	str	r1, [r7, #8]
 800c1fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	1c5a      	adds	r2, r3, #1
 800c206:	617a      	str	r2, [r7, #20]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	b2d2      	uxtb	r2, r2
 800c20c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	3b01      	subs	r3, #1
 800c212:	607b      	str	r3, [r7, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f3      	bne.n	800c202 <mem_set+0x10>
}
 800c21a:	bf00      	nop
 800c21c:	371c      	adds	r7, #28
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c226:	b480      	push	{r7}
 800c228:	b089      	sub	sp, #36	; 0x24
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	61fb      	str	r3, [r7, #28]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	61fa      	str	r2, [r7, #28]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	4619      	mov	r1, r3
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	61ba      	str	r2, [r7, #24]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	1acb      	subs	r3, r1, r3
 800c252:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	3b01      	subs	r3, #1
 800c258:	607b      	str	r3, [r7, #4]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <mem_cmp+0x40>
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0eb      	beq.n	800c23e <mem_cmp+0x18>

	return r;
 800c266:	697b      	ldr	r3, [r7, #20]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3724      	adds	r7, #36	; 0x24
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c27e:	e002      	b.n	800c286 <chk_chr+0x12>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3301      	adds	r3, #1
 800c284:	607b      	str	r3, [r7, #4]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d005      	beq.n	800c29a <chk_chr+0x26>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	461a      	mov	r2, r3
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	4293      	cmp	r3, r2
 800c298:	d1f2      	bne.n	800c280 <chk_chr+0xc>
	return *str;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	781b      	ldrb	r3, [r3, #0]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
	...

0800c2ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60bb      	str	r3, [r7, #8]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	60fb      	str	r3, [r7, #12]
 800c2be:	e029      	b.n	800c314 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c2c0:	4a27      	ldr	r2, [pc, #156]	; (800c360 <chk_lock+0xb4>)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	011b      	lsls	r3, r3, #4
 800c2c6:	4413      	add	r3, r2
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d01d      	beq.n	800c30a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c2ce:	4a24      	ldr	r2, [pc, #144]	; (800c360 <chk_lock+0xb4>)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	011b      	lsls	r3, r3, #4
 800c2d4:	4413      	add	r3, r2
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d116      	bne.n	800c30e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c2e0:	4a1f      	ldr	r2, [pc, #124]	; (800c360 <chk_lock+0xb4>)
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	011b      	lsls	r3, r3, #4
 800c2e6:	4413      	add	r3, r2
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d10c      	bne.n	800c30e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c2f4:	4a1a      	ldr	r2, [pc, #104]	; (800c360 <chk_lock+0xb4>)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	011b      	lsls	r3, r3, #4
 800c2fa:	4413      	add	r3, r2
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c304:	429a      	cmp	r2, r3
 800c306:	d102      	bne.n	800c30e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c308:	e007      	b.n	800c31a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c30a:	2301      	movs	r3, #1
 800c30c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3301      	adds	r3, #1
 800c312:	60fb      	str	r3, [r7, #12]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d9d2      	bls.n	800c2c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d109      	bne.n	800c334 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d102      	bne.n	800c32c <chk_lock+0x80>
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d101      	bne.n	800c330 <chk_lock+0x84>
 800c32c:	2300      	movs	r3, #0
 800c32e:	e010      	b.n	800c352 <chk_lock+0xa6>
 800c330:	2312      	movs	r3, #18
 800c332:	e00e      	b.n	800c352 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d108      	bne.n	800c34c <chk_lock+0xa0>
 800c33a:	4a09      	ldr	r2, [pc, #36]	; (800c360 <chk_lock+0xb4>)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	011b      	lsls	r3, r3, #4
 800c340:	4413      	add	r3, r2
 800c342:	330c      	adds	r3, #12
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c34a:	d101      	bne.n	800c350 <chk_lock+0xa4>
 800c34c:	2310      	movs	r3, #16
 800c34e:	e000      	b.n	800c352 <chk_lock+0xa6>
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	2000053c 	.word	0x2000053c

0800c364 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c36a:	2300      	movs	r3, #0
 800c36c:	607b      	str	r3, [r7, #4]
 800c36e:	e002      	b.n	800c376 <enq_lock+0x12>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3301      	adds	r3, #1
 800c374:	607b      	str	r3, [r7, #4]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d806      	bhi.n	800c38a <enq_lock+0x26>
 800c37c:	4a09      	ldr	r2, [pc, #36]	; (800c3a4 <enq_lock+0x40>)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	011b      	lsls	r3, r3, #4
 800c382:	4413      	add	r3, r2
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1f2      	bne.n	800c370 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	bf14      	ite	ne
 800c390:	2301      	movne	r3, #1
 800c392:	2300      	moveq	r3, #0
 800c394:	b2db      	uxtb	r3, r3
}
 800c396:	4618      	mov	r0, r3
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	2000053c 	.word	0x2000053c

0800c3a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	e01f      	b.n	800c3f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c3b8:	4a41      	ldr	r2, [pc, #260]	; (800c4c0 <inc_lock+0x118>)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	4413      	add	r3, r2
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d113      	bne.n	800c3f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c3ca:	4a3d      	ldr	r2, [pc, #244]	; (800c4c0 <inc_lock+0x118>)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	011b      	lsls	r3, r3, #4
 800c3d0:	4413      	add	r3, r2
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d109      	bne.n	800c3f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c3de:	4a38      	ldr	r2, [pc, #224]	; (800c4c0 <inc_lock+0x118>)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	011b      	lsls	r3, r3, #4
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d006      	beq.n	800c400 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d9dc      	bls.n	800c3b8 <inc_lock+0x10>
 800c3fe:	e000      	b.n	800c402 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c400:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2b02      	cmp	r3, #2
 800c406:	d132      	bne.n	800c46e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c408:	2300      	movs	r3, #0
 800c40a:	60fb      	str	r3, [r7, #12]
 800c40c:	e002      	b.n	800c414 <inc_lock+0x6c>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3301      	adds	r3, #1
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2b01      	cmp	r3, #1
 800c418:	d806      	bhi.n	800c428 <inc_lock+0x80>
 800c41a:	4a29      	ldr	r2, [pc, #164]	; (800c4c0 <inc_lock+0x118>)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	011b      	lsls	r3, r3, #4
 800c420:	4413      	add	r3, r2
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1f2      	bne.n	800c40e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d101      	bne.n	800c432 <inc_lock+0x8a>
 800c42e:	2300      	movs	r3, #0
 800c430:	e040      	b.n	800c4b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	4922      	ldr	r1, [pc, #136]	; (800c4c0 <inc_lock+0x118>)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	011b      	lsls	r3, r3, #4
 800c43c:	440b      	add	r3, r1
 800c43e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	689a      	ldr	r2, [r3, #8]
 800c444:	491e      	ldr	r1, [pc, #120]	; (800c4c0 <inc_lock+0x118>)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	011b      	lsls	r3, r3, #4
 800c44a:	440b      	add	r3, r1
 800c44c:	3304      	adds	r3, #4
 800c44e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	695a      	ldr	r2, [r3, #20]
 800c454:	491a      	ldr	r1, [pc, #104]	; (800c4c0 <inc_lock+0x118>)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	440b      	add	r3, r1
 800c45c:	3308      	adds	r3, #8
 800c45e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c460:	4a17      	ldr	r2, [pc, #92]	; (800c4c0 <inc_lock+0x118>)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	011b      	lsls	r3, r3, #4
 800c466:	4413      	add	r3, r2
 800c468:	330c      	adds	r3, #12
 800c46a:	2200      	movs	r2, #0
 800c46c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d009      	beq.n	800c488 <inc_lock+0xe0>
 800c474:	4a12      	ldr	r2, [pc, #72]	; (800c4c0 <inc_lock+0x118>)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	011b      	lsls	r3, r3, #4
 800c47a:	4413      	add	r3, r2
 800c47c:	330c      	adds	r3, #12
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <inc_lock+0xe0>
 800c484:	2300      	movs	r3, #0
 800c486:	e015      	b.n	800c4b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d108      	bne.n	800c4a0 <inc_lock+0xf8>
 800c48e:	4a0c      	ldr	r2, [pc, #48]	; (800c4c0 <inc_lock+0x118>)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	011b      	lsls	r3, r3, #4
 800c494:	4413      	add	r3, r2
 800c496:	330c      	adds	r3, #12
 800c498:	881b      	ldrh	r3, [r3, #0]
 800c49a:	3301      	adds	r3, #1
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	e001      	b.n	800c4a4 <inc_lock+0xfc>
 800c4a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4a4:	4906      	ldr	r1, [pc, #24]	; (800c4c0 <inc_lock+0x118>)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	011b      	lsls	r3, r3, #4
 800c4aa:	440b      	add	r3, r1
 800c4ac:	330c      	adds	r3, #12
 800c4ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	3301      	adds	r3, #1
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	2000053c 	.word	0x2000053c

0800c4c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	607b      	str	r3, [r7, #4]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d825      	bhi.n	800c524 <dec_lock+0x60>
		n = Files[i].ctr;
 800c4d8:	4a17      	ldr	r2, [pc, #92]	; (800c538 <dec_lock+0x74>)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	011b      	lsls	r3, r3, #4
 800c4de:	4413      	add	r3, r2
 800c4e0:	330c      	adds	r3, #12
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c4e6:	89fb      	ldrh	r3, [r7, #14]
 800c4e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ec:	d101      	bne.n	800c4f2 <dec_lock+0x2e>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c4f2:	89fb      	ldrh	r3, [r7, #14]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <dec_lock+0x3a>
 800c4f8:	89fb      	ldrh	r3, [r7, #14]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c4fe:	4a0e      	ldr	r2, [pc, #56]	; (800c538 <dec_lock+0x74>)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	011b      	lsls	r3, r3, #4
 800c504:	4413      	add	r3, r2
 800c506:	330c      	adds	r3, #12
 800c508:	89fa      	ldrh	r2, [r7, #14]
 800c50a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c50c:	89fb      	ldrh	r3, [r7, #14]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d105      	bne.n	800c51e <dec_lock+0x5a>
 800c512:	4a09      	ldr	r2, [pc, #36]	; (800c538 <dec_lock+0x74>)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	011b      	lsls	r3, r3, #4
 800c518:	4413      	add	r3, r2
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	737b      	strb	r3, [r7, #13]
 800c522:	e001      	b.n	800c528 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c524:	2302      	movs	r3, #2
 800c526:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c528:	7b7b      	ldrb	r3, [r7, #13]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	2000053c 	.word	0x2000053c

0800c53c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c544:	2300      	movs	r3, #0
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	e010      	b.n	800c56c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c54a:	4a0d      	ldr	r2, [pc, #52]	; (800c580 <clear_lock+0x44>)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	011b      	lsls	r3, r3, #4
 800c550:	4413      	add	r3, r2
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	429a      	cmp	r2, r3
 800c558:	d105      	bne.n	800c566 <clear_lock+0x2a>
 800c55a:	4a09      	ldr	r2, [pc, #36]	; (800c580 <clear_lock+0x44>)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	011b      	lsls	r3, r3, #4
 800c560:	4413      	add	r3, r2
 800c562:	2200      	movs	r2, #0
 800c564:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3301      	adds	r3, #1
 800c56a:	60fb      	str	r3, [r7, #12]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d9eb      	bls.n	800c54a <clear_lock+0xe>
	}
}
 800c572:	bf00      	nop
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	2000053c 	.word	0x2000053c

0800c584 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	78db      	ldrb	r3, [r3, #3]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d034      	beq.n	800c602 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	7858      	ldrb	r0, [r3, #1]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	f7ff fd38 	bl	800c020 <disk_write>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d002      	beq.n	800c5bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	73fb      	strb	r3, [r7, #15]
 800c5ba:	e022      	b.n	800c602 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	1ad2      	subs	r2, r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	69db      	ldr	r3, [r3, #28]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d217      	bcs.n	800c602 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	789b      	ldrb	r3, [r3, #2]
 800c5d6:	613b      	str	r3, [r7, #16]
 800c5d8:	e010      	b.n	800c5fc <sync_window+0x78>
					wsect += fs->fsize;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	69db      	ldr	r3, [r3, #28]
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	7858      	ldrb	r0, [r3, #1]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	697a      	ldr	r2, [r7, #20]
 800c5f2:	f7ff fd15 	bl	800c020 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	613b      	str	r3, [r7, #16]
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d8eb      	bhi.n	800c5da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c602:	7bfb      	ldrb	r3, [r7, #15]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3718      	adds	r7, #24
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d01b      	beq.n	800c65c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7ff ffad 	bl	800c584 <sync_window>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d113      	bne.n	800c65c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	7858      	ldrb	r0, [r3, #1]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c63e:	2301      	movs	r3, #1
 800c640:	683a      	ldr	r2, [r7, #0]
 800c642:	f7ff fccd 	bl	800bfe0 <disk_read>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d004      	beq.n	800c656 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295
 800c650:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c652:	2301      	movs	r3, #1
 800c654:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
	...

0800c668 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff ff87 	bl	800c584 <sync_window>
 800c676:	4603      	mov	r3, r0
 800c678:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d158      	bne.n	800c732 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2b03      	cmp	r3, #3
 800c686:	d148      	bne.n	800c71a <sync_fs+0xb2>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	791b      	ldrb	r3, [r3, #4]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d144      	bne.n	800c71a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3334      	adds	r3, #52	; 0x34
 800c694:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c698:	2100      	movs	r1, #0
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7ff fda9 	bl	800c1f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3334      	adds	r3, #52	; 0x34
 800c6a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c6a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff fd38 	bl	800c122 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3334      	adds	r3, #52	; 0x34
 800c6b6:	4921      	ldr	r1, [pc, #132]	; (800c73c <sync_fs+0xd4>)
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff fd4d 	bl	800c158 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	3334      	adds	r3, #52	; 0x34
 800c6c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c6c6:	491e      	ldr	r1, [pc, #120]	; (800c740 <sync_fs+0xd8>)
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff fd45 	bl	800c158 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3334      	adds	r3, #52	; 0x34
 800c6d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4610      	mov	r0, r2
 800c6de:	f7ff fd3b 	bl	800c158 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3334      	adds	r3, #52	; 0x34
 800c6e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f7ff fd31 	bl	800c158 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	1c5a      	adds	r2, r3, #1
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7858      	ldrb	r0, [r3, #1]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c70e:	2301      	movs	r3, #1
 800c710:	f7ff fc86 	bl	800c020 <disk_write>
			fs->fsi_flag = 0;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	785b      	ldrb	r3, [r3, #1]
 800c71e:	2200      	movs	r2, #0
 800c720:	2100      	movs	r1, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f7ff fc9c 	bl	800c060 <disk_ioctl>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <sync_fs+0xca>
 800c72e:	2301      	movs	r3, #1
 800c730:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c732:	7bfb      	ldrb	r3, [r7, #15]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	41615252 	.word	0x41615252
 800c740:	61417272 	.word	0x61417272

0800c744 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	3b02      	subs	r3, #2
 800c752:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	3b02      	subs	r3, #2
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d301      	bcc.n	800c764 <clust2sect+0x20>
 800c760:	2300      	movs	r3, #0
 800c762:	e008      	b.n	800c776 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	895b      	ldrh	r3, [r3, #10]
 800c768:	461a      	mov	r2, r3
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	fb03 f202 	mul.w	r2, r3, r2
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c774:	4413      	add	r3, r2
}
 800c776:	4618      	mov	r0, r3
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b086      	sub	sp, #24
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d904      	bls.n	800c7a2 <get_fat+0x20>
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d302      	bcc.n	800c7a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	617b      	str	r3, [r7, #20]
 800c7a6:	e08c      	b.n	800c8c2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d045      	beq.n	800c842 <get_fat+0xc0>
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	d05d      	beq.n	800c876 <get_fat+0xf4>
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d177      	bne.n	800c8ae <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	085b      	lsrs	r3, r3, #1
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	0a5b      	lsrs	r3, r3, #9
 800c7d4:	4413      	add	r3, r2
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6938      	ldr	r0, [r7, #16]
 800c7da:	f7ff ff17 	bl	800c60c <move_window>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d167      	bne.n	800c8b4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	1c5a      	adds	r2, r3, #1
 800c7e8:	60fa      	str	r2, [r7, #12]
 800c7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ee:	693a      	ldr	r2, [r7, #16]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	0a5b      	lsrs	r3, r3, #9
 800c800:	4413      	add	r3, r2
 800c802:	4619      	mov	r1, r3
 800c804:	6938      	ldr	r0, [r7, #16]
 800c806:	f7ff ff01 	bl	800c60c <move_window>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d153      	bne.n	800c8b8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	4413      	add	r3, r2
 800c81a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c81e:	021b      	lsls	r3, r3, #8
 800c820:	461a      	mov	r2, r3
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	4313      	orrs	r3, r2
 800c826:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	f003 0301 	and.w	r3, r3, #1
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d002      	beq.n	800c838 <get_fat+0xb6>
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	091b      	lsrs	r3, r3, #4
 800c836:	e002      	b.n	800c83e <get_fat+0xbc>
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c83e:	617b      	str	r3, [r7, #20]
			break;
 800c840:	e03f      	b.n	800c8c2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	0a1b      	lsrs	r3, r3, #8
 800c84a:	4413      	add	r3, r2
 800c84c:	4619      	mov	r1, r3
 800c84e:	6938      	ldr	r0, [r7, #16]
 800c850:	f7ff fedc 	bl	800c60c <move_window>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d130      	bne.n	800c8bc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	005b      	lsls	r3, r3, #1
 800c864:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c868:	4413      	add	r3, r2
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff fc1e 	bl	800c0ac <ld_word>
 800c870:	4603      	mov	r3, r0
 800c872:	617b      	str	r3, [r7, #20]
			break;
 800c874:	e025      	b.n	800c8c2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	09db      	lsrs	r3, r3, #7
 800c87e:	4413      	add	r3, r2
 800c880:	4619      	mov	r1, r3
 800c882:	6938      	ldr	r0, [r7, #16]
 800c884:	f7ff fec2 	bl	800c60c <move_window>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d118      	bne.n	800c8c0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c89c:	4413      	add	r3, r2
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff fc1c 	bl	800c0dc <ld_dword>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c8aa:	617b      	str	r3, [r7, #20]
			break;
 800c8ac:	e009      	b.n	800c8c2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	e006      	b.n	800c8c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8b4:	bf00      	nop
 800c8b6:	e004      	b.n	800c8c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8b8:	bf00      	nop
 800c8ba:	e002      	b.n	800c8c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c8bc:	bf00      	nop
 800c8be:	e000      	b.n	800c8c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c8c0:	bf00      	nop
		}
	}

	return val;
 800c8c2:	697b      	ldr	r3, [r7, #20]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c8cc:	b590      	push	{r4, r7, lr}
 800c8ce:	b089      	sub	sp, #36	; 0x24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c8d8:	2302      	movs	r3, #2
 800c8da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	f240 80d6 	bls.w	800ca90 <put_fat+0x1c4>
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	699b      	ldr	r3, [r3, #24]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	f080 80d0 	bcs.w	800ca90 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d073      	beq.n	800c9e0 <put_fat+0x114>
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	f000 8091 	beq.w	800ca20 <put_fat+0x154>
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	f040 80c6 	bne.w	800ca90 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	61bb      	str	r3, [r7, #24]
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	085b      	lsrs	r3, r3, #1
 800c90c:	69ba      	ldr	r2, [r7, #24]
 800c90e:	4413      	add	r3, r2
 800c910:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	0a5b      	lsrs	r3, r3, #9
 800c91a:	4413      	add	r3, r2
 800c91c:	4619      	mov	r1, r3
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f7ff fe74 	bl	800c60c <move_window>
 800c924:	4603      	mov	r3, r0
 800c926:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c928:	7ffb      	ldrb	r3, [r7, #31]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f040 80a9 	bne.w	800ca82 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	1c59      	adds	r1, r3, #1
 800c93a:	61b9      	str	r1, [r7, #24]
 800c93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c940:	4413      	add	r3, r2
 800c942:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00d      	beq.n	800c96a <put_fat+0x9e>
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	b25b      	sxtb	r3, r3
 800c954:	f003 030f 	and.w	r3, r3, #15
 800c958:	b25a      	sxtb	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	b25b      	sxtb	r3, r3
 800c962:	4313      	orrs	r3, r2
 800c964:	b25b      	sxtb	r3, r3
 800c966:	b2db      	uxtb	r3, r3
 800c968:	e001      	b.n	800c96e <put_fat+0xa2>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2201      	movs	r2, #1
 800c976:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	0a5b      	lsrs	r3, r3, #9
 800c980:	4413      	add	r3, r2
 800c982:	4619      	mov	r1, r3
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f7ff fe41 	bl	800c60c <move_window>
 800c98a:	4603      	mov	r3, r0
 800c98c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c98e:	7ffb      	ldrb	r3, [r7, #31]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d178      	bne.n	800ca86 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9a0:	4413      	add	r3, r2
 800c9a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d003      	beq.n	800c9b6 <put_fat+0xea>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	091b      	lsrs	r3, r3, #4
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	e00e      	b.n	800c9d4 <put_fat+0x108>
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	b25b      	sxtb	r3, r3
 800c9bc:	f023 030f 	bic.w	r3, r3, #15
 800c9c0:	b25a      	sxtb	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	0a1b      	lsrs	r3, r3, #8
 800c9c6:	b25b      	sxtb	r3, r3
 800c9c8:	f003 030f 	and.w	r3, r3, #15
 800c9cc:	b25b      	sxtb	r3, r3
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	b25b      	sxtb	r3, r3
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	70da      	strb	r2, [r3, #3]
			break;
 800c9de:	e057      	b.n	800ca90 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	0a1b      	lsrs	r3, r3, #8
 800c9e8:	4413      	add	r3, r2
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f7ff fe0d 	bl	800c60c <move_window>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9f6:	7ffb      	ldrb	r3, [r7, #31]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d146      	bne.n	800ca8a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ca0a:	4413      	add	r3, r2
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	b292      	uxth	r2, r2
 800ca10:	4611      	mov	r1, r2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fb85 	bl	800c122 <st_word>
			fs->wflag = 1;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	70da      	strb	r2, [r3, #3]
			break;
 800ca1e:	e037      	b.n	800ca90 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	09db      	lsrs	r3, r3, #7
 800ca28:	4413      	add	r3, r2
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f7ff fded 	bl	800c60c <move_window>
 800ca32:	4603      	mov	r3, r0
 800ca34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca36:	7ffb      	ldrb	r3, [r7, #31]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d128      	bne.n	800ca8e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ca50:	4413      	add	r3, r2
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff fb42 	bl	800c0dc <ld_dword>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca5e:	4323      	orrs	r3, r4
 800ca60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ca70:	4413      	add	r3, r2
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff fb6f 	bl	800c158 <st_dword>
			fs->wflag = 1;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	70da      	strb	r2, [r3, #3]
			break;
 800ca80:	e006      	b.n	800ca90 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ca82:	bf00      	nop
 800ca84:	e004      	b.n	800ca90 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ca86:	bf00      	nop
 800ca88:	e002      	b.n	800ca90 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ca8a:	bf00      	nop
 800ca8c:	e000      	b.n	800ca90 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ca8e:	bf00      	nop
		}
	}
	return res;
 800ca90:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3724      	adds	r7, #36	; 0x24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd90      	pop	{r4, r7, pc}

0800ca9a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b088      	sub	sp, #32
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	60f8      	str	r0, [r7, #12]
 800caa2:	60b9      	str	r1, [r7, #8]
 800caa4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d904      	bls.n	800cac0 <remove_chain+0x26>
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	699b      	ldr	r3, [r3, #24]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d301      	bcc.n	800cac4 <remove_chain+0x2a>
 800cac0:	2302      	movs	r3, #2
 800cac2:	e04b      	b.n	800cb5c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00c      	beq.n	800cae4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800caca:	f04f 32ff 	mov.w	r2, #4294967295
 800cace:	6879      	ldr	r1, [r7, #4]
 800cad0:	69b8      	ldr	r0, [r7, #24]
 800cad2:	f7ff fefb 	bl	800c8cc <put_fat>
 800cad6:	4603      	mov	r3, r0
 800cad8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cada:	7ffb      	ldrb	r3, [r7, #31]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <remove_chain+0x4a>
 800cae0:	7ffb      	ldrb	r3, [r7, #31]
 800cae2:	e03b      	b.n	800cb5c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cae4:	68b9      	ldr	r1, [r7, #8]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f7ff fe4b 	bl	800c782 <get_fat>
 800caec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d031      	beq.n	800cb58 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d101      	bne.n	800cafe <remove_chain+0x64>
 800cafa:	2302      	movs	r3, #2
 800cafc:	e02e      	b.n	800cb5c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb04:	d101      	bne.n	800cb0a <remove_chain+0x70>
 800cb06:	2301      	movs	r3, #1
 800cb08:	e028      	b.n	800cb5c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	69b8      	ldr	r0, [r7, #24]
 800cb10:	f7ff fedc 	bl	800c8cc <put_fat>
 800cb14:	4603      	mov	r3, r0
 800cb16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cb18:	7ffb      	ldrb	r3, [r7, #31]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <remove_chain+0x88>
 800cb1e:	7ffb      	ldrb	r3, [r7, #31]
 800cb20:	e01c      	b.n	800cb5c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	695a      	ldr	r2, [r3, #20]
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	699b      	ldr	r3, [r3, #24]
 800cb2a:	3b02      	subs	r3, #2
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d20b      	bcs.n	800cb48 <remove_chain+0xae>
			fs->free_clst++;
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	791b      	ldrb	r3, [r3, #4]
 800cb3e:	f043 0301 	orr.w	r3, r3, #1
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d3c6      	bcc.n	800cae4 <remove_chain+0x4a>
 800cb56:	e000      	b.n	800cb5a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb58:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10d      	bne.n	800cb96 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d004      	beq.n	800cb90 <create_chain+0x2c>
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	699b      	ldr	r3, [r3, #24]
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d31b      	bcc.n	800cbc8 <create_chain+0x64>
 800cb90:	2301      	movs	r3, #1
 800cb92:	61bb      	str	r3, [r7, #24]
 800cb94:	e018      	b.n	800cbc8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb96:	6839      	ldr	r1, [r7, #0]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff fdf2 	bl	800c782 <get_fat>
 800cb9e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d801      	bhi.n	800cbaa <create_chain+0x46>
 800cba6:	2301      	movs	r3, #1
 800cba8:	e070      	b.n	800cc8c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb0:	d101      	bne.n	800cbb6 <create_chain+0x52>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	e06a      	b.n	800cc8c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d201      	bcs.n	800cbc4 <create_chain+0x60>
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	e063      	b.n	800cc8c <create_chain+0x128>
		scl = clst;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	69fa      	ldr	r2, [r7, #28]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d307      	bcc.n	800cbec <create_chain+0x88>
				ncl = 2;
 800cbdc:	2302      	movs	r3, #2
 800cbde:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cbe0:	69fa      	ldr	r2, [r7, #28]
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d901      	bls.n	800cbec <create_chain+0x88>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	e04f      	b.n	800cc8c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cbec:	69f9      	ldr	r1, [r7, #28]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff fdc7 	bl	800c782 <get_fat>
 800cbf4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00e      	beq.n	800cc1a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d003      	beq.n	800cc0a <create_chain+0xa6>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc08:	d101      	bne.n	800cc0e <create_chain+0xaa>
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	e03e      	b.n	800cc8c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cc0e:	69fa      	ldr	r2, [r7, #28]
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d1da      	bne.n	800cbcc <create_chain+0x68>
 800cc16:	2300      	movs	r3, #0
 800cc18:	e038      	b.n	800cc8c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cc1a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc20:	69f9      	ldr	r1, [r7, #28]
 800cc22:	6938      	ldr	r0, [r7, #16]
 800cc24:	f7ff fe52 	bl	800c8cc <put_fat>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d109      	bne.n	800cc46 <create_chain+0xe2>
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d006      	beq.n	800cc46 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cc38:	69fa      	ldr	r2, [r7, #28]
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6938      	ldr	r0, [r7, #16]
 800cc3e:	f7ff fe45 	bl	800c8cc <put_fat>
 800cc42:	4603      	mov	r3, r0
 800cc44:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d116      	bne.n	800cc7a <create_chain+0x116>
		fs->last_clst = ncl;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	69fa      	ldr	r2, [r7, #28]
 800cc50:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	695a      	ldr	r2, [r3, #20]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	3b02      	subs	r3, #2
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d804      	bhi.n	800cc6a <create_chain+0x106>
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	1e5a      	subs	r2, r3, #1
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	791b      	ldrb	r3, [r3, #4]
 800cc6e:	f043 0301 	orr.w	r3, r3, #1
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	711a      	strb	r2, [r3, #4]
 800cc78:	e007      	b.n	800cc8a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cc7a:	7dfb      	ldrb	r3, [r7, #23]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d102      	bne.n	800cc86 <create_chain+0x122>
 800cc80:	f04f 33ff 	mov.w	r3, #4294967295
 800cc84:	e000      	b.n	800cc88 <create_chain+0x124>
 800cc86:	2301      	movs	r3, #1
 800cc88:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc8a:	69fb      	ldr	r3, [r7, #28]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3720      	adds	r7, #32
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca8:	3304      	adds	r3, #4
 800ccaa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	0a5b      	lsrs	r3, r3, #9
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	8952      	ldrh	r2, [r2, #10]
 800ccb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	1d1a      	adds	r2, r3, #4
 800ccbe:	613a      	str	r2, [r7, #16]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d101      	bne.n	800ccce <clmt_clust+0x3a>
 800ccca:	2300      	movs	r3, #0
 800cccc:	e010      	b.n	800ccf0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d307      	bcc.n	800cce6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	3304      	adds	r3, #4
 800cce2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cce4:	e7e9      	b.n	800ccba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cce6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	4413      	add	r3, r2
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	371c      	adds	r7, #28
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd12:	d204      	bcs.n	800cd1e <dir_sdi+0x22>
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	f003 031f 	and.w	r3, r3, #31
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cd1e:	2302      	movs	r3, #2
 800cd20:	e063      	b.n	800cdea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d106      	bne.n	800cd42 <dir_sdi+0x46>
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d902      	bls.n	800cd42 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd40:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10c      	bne.n	800cd62 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	095b      	lsrs	r3, r3, #5
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	8912      	ldrh	r2, [r2, #8]
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d301      	bcc.n	800cd58 <dir_sdi+0x5c>
 800cd54:	2302      	movs	r3, #2
 800cd56:	e048      	b.n	800cdea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	61da      	str	r2, [r3, #28]
 800cd60:	e029      	b.n	800cdb6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	895b      	ldrh	r3, [r3, #10]
 800cd66:	025b      	lsls	r3, r3, #9
 800cd68:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd6a:	e019      	b.n	800cda0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6979      	ldr	r1, [r7, #20]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff fd06 	bl	800c782 <get_fat>
 800cd76:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7e:	d101      	bne.n	800cd84 <dir_sdi+0x88>
 800cd80:	2301      	movs	r3, #1
 800cd82:	e032      	b.n	800cdea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d904      	bls.n	800cd94 <dir_sdi+0x98>
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	697a      	ldr	r2, [r7, #20]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d301      	bcc.n	800cd98 <dir_sdi+0x9c>
 800cd94:	2302      	movs	r3, #2
 800cd96:	e028      	b.n	800cdea <dir_sdi+0xee>
			ofs -= csz;
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d2e1      	bcs.n	800cd6c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cda8:	6979      	ldr	r1, [r7, #20]
 800cdaa:	6938      	ldr	r0, [r7, #16]
 800cdac:	f7ff fcca 	bl	800c744 <clust2sect>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	697a      	ldr	r2, [r7, #20]
 800cdba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <dir_sdi+0xcc>
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	e010      	b.n	800cdea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	69da      	ldr	r2, [r3, #28]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	0a5b      	lsrs	r3, r3, #9
 800cdd0:	441a      	add	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde2:	441a      	add	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b086      	sub	sp, #24
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	3320      	adds	r3, #32
 800ce08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	69db      	ldr	r3, [r3, #28]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <dir_next+0x28>
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce18:	d301      	bcc.n	800ce1e <dir_next+0x2c>
 800ce1a:	2304      	movs	r3, #4
 800ce1c:	e0aa      	b.n	800cf74 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f040 8098 	bne.w	800cf5a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	1c5a      	adds	r2, r3, #1
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	699b      	ldr	r3, [r3, #24]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10b      	bne.n	800ce54 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	095b      	lsrs	r3, r3, #5
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	8912      	ldrh	r2, [r2, #8]
 800ce44:	4293      	cmp	r3, r2
 800ce46:	f0c0 8088 	bcc.w	800cf5a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	61da      	str	r2, [r3, #28]
 800ce50:	2304      	movs	r3, #4
 800ce52:	e08f      	b.n	800cf74 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	0a5b      	lsrs	r3, r3, #9
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	8952      	ldrh	r2, [r2, #10]
 800ce5c:	3a01      	subs	r2, #1
 800ce5e:	4013      	ands	r3, r2
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d17a      	bne.n	800cf5a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	699b      	ldr	r3, [r3, #24]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	f7ff fc88 	bl	800c782 <get_fat>
 800ce72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d801      	bhi.n	800ce7e <dir_next+0x8c>
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e07a      	b.n	800cf74 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce84:	d101      	bne.n	800ce8a <dir_next+0x98>
 800ce86:	2301      	movs	r3, #1
 800ce88:	e074      	b.n	800cf74 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	699b      	ldr	r3, [r3, #24]
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d358      	bcc.n	800cf46 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d104      	bne.n	800cea4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	61da      	str	r2, [r3, #28]
 800cea0:	2304      	movs	r3, #4
 800cea2:	e067      	b.n	800cf74 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f7ff fe59 	bl	800cb64 <create_chain>
 800ceb2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <dir_next+0xcc>
 800ceba:	2307      	movs	r3, #7
 800cebc:	e05a      	b.n	800cf74 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d101      	bne.n	800cec8 <dir_next+0xd6>
 800cec4:	2302      	movs	r3, #2
 800cec6:	e055      	b.n	800cf74 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cece:	d101      	bne.n	800ced4 <dir_next+0xe2>
 800ced0:	2301      	movs	r3, #1
 800ced2:	e04f      	b.n	800cf74 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f7ff fb55 	bl	800c584 <sync_window>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <dir_next+0xf2>
 800cee0:	2301      	movs	r3, #1
 800cee2:	e047      	b.n	800cf74 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3334      	adds	r3, #52	; 0x34
 800cee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceec:	2100      	movs	r1, #0
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff f97f 	bl	800c1f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cef4:	2300      	movs	r3, #0
 800cef6:	613b      	str	r3, [r7, #16]
 800cef8:	6979      	ldr	r1, [r7, #20]
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f7ff fc22 	bl	800c744 <clust2sect>
 800cf00:	4602      	mov	r2, r0
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	631a      	str	r2, [r3, #48]	; 0x30
 800cf06:	e012      	b.n	800cf2e <dir_next+0x13c>
						fs->wflag = 1;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f7ff fb38 	bl	800c584 <sync_window>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <dir_next+0x12c>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e02a      	b.n	800cf74 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	3301      	adds	r3, #1
 800cf22:	613b      	str	r3, [r7, #16]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	631a      	str	r2, [r3, #48]	; 0x30
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	895b      	ldrh	r3, [r3, #10]
 800cf32:	461a      	mov	r2, r3
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d3e6      	bcc.n	800cf08 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	1ad2      	subs	r2, r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cf4c:	6979      	ldr	r1, [r7, #20]
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f7ff fbf8 	bl	800c744 <clust2sect>
 800cf54:	4602      	mov	r2, r0
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6c:	441a      	add	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7ff feb4 	bl	800ccfc <dir_sdi>
 800cf94:	4603      	mov	r3, r0
 800cf96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d12b      	bne.n	800cff6 <dir_alloc+0x7a>
		n = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	69db      	ldr	r3, [r3, #28]
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f7ff fb2f 	bl	800c60c <move_window>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cfb2:	7dfb      	ldrb	r3, [r7, #23]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d11d      	bne.n	800cff4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a1b      	ldr	r3, [r3, #32]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	2be5      	cmp	r3, #229	; 0xe5
 800cfc0:	d004      	beq.n	800cfcc <dir_alloc+0x50>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d107      	bne.n	800cfdc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	613b      	str	r3, [r7, #16]
 800cfd2:	693a      	ldr	r2, [r7, #16]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d102      	bne.n	800cfe0 <dir_alloc+0x64>
 800cfda:	e00c      	b.n	800cff6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cfdc:	2300      	movs	r3, #0
 800cfde:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cfe0:	2101      	movs	r1, #1
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7ff ff05 	bl	800cdf2 <dir_next>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cfec:	7dfb      	ldrb	r3, [r7, #23]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d0d7      	beq.n	800cfa2 <dir_alloc+0x26>
 800cff2:	e000      	b.n	800cff6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cff4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cff6:	7dfb      	ldrb	r3, [r7, #23]
 800cff8:	2b04      	cmp	r3, #4
 800cffa:	d101      	bne.n	800d000 <dir_alloc+0x84>
 800cffc:	2307      	movs	r3, #7
 800cffe:	75fb      	strb	r3, [r7, #23]
	return res;
 800d000:	7dfb      	ldrb	r3, [r7, #23]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	331a      	adds	r3, #26
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff f847 	bl	800c0ac <ld_word>
 800d01e:	4603      	mov	r3, r0
 800d020:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b03      	cmp	r3, #3
 800d028:	d109      	bne.n	800d03e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	3314      	adds	r3, #20
 800d02e:	4618      	mov	r0, r3
 800d030:	f7ff f83c 	bl	800c0ac <ld_word>
 800d034:	4603      	mov	r3, r0
 800d036:	041b      	lsls	r3, r3, #16
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d03e:	68fb      	ldr	r3, [r7, #12]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	331a      	adds	r3, #26
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	b292      	uxth	r2, r2
 800d05c:	4611      	mov	r1, r2
 800d05e:	4618      	mov	r0, r3
 800d060:	f7ff f85f 	bl	800c122 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	2b03      	cmp	r3, #3
 800d06a:	d109      	bne.n	800d080 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	f103 0214 	add.w	r2, r3, #20
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	0c1b      	lsrs	r3, r3, #16
 800d076:	b29b      	uxth	r3, r3
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f7ff f851 	bl	800c122 <st_word>
	}
}
 800d080:	bf00      	nop
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d088:	b590      	push	{r4, r7, lr}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	331a      	adds	r3, #26
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff f808 	bl	800c0ac <ld_word>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <cmp_lfn+0x1e>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e059      	b.n	800d15a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0ae:	1e5a      	subs	r2, r3, #1
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	4413      	add	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4413      	add	r3, r2
 800d0ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d0bc:	2301      	movs	r3, #1
 800d0be:	81fb      	strh	r3, [r7, #14]
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	613b      	str	r3, [r7, #16]
 800d0c4:	e033      	b.n	800d12e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d0c6:	4a27      	ldr	r2, [pc, #156]	; (800d164 <cmp_lfn+0xdc>)
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fe ffe9 	bl	800c0ac <ld_word>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d0de:	89fb      	ldrh	r3, [r7, #14]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d01a      	beq.n	800d11a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	2bfe      	cmp	r3, #254	; 0xfe
 800d0e8:	d812      	bhi.n	800d110 <cmp_lfn+0x88>
 800d0ea:	89bb      	ldrh	r3, [r7, #12]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f002 fc79 	bl	800f9e4 <ff_wtoupper>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	461c      	mov	r4, r3
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	1c5a      	adds	r2, r3, #1
 800d0fa:	617a      	str	r2, [r7, #20]
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4413      	add	r3, r2
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	4618      	mov	r0, r3
 800d106:	f002 fc6d 	bl	800f9e4 <ff_wtoupper>
 800d10a:	4603      	mov	r3, r0
 800d10c:	429c      	cmp	r4, r3
 800d10e:	d001      	beq.n	800d114 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d110:	2300      	movs	r3, #0
 800d112:	e022      	b.n	800d15a <cmp_lfn+0xd2>
			}
			wc = uc;
 800d114:	89bb      	ldrh	r3, [r7, #12]
 800d116:	81fb      	strh	r3, [r7, #14]
 800d118:	e006      	b.n	800d128 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d11a:	89bb      	ldrh	r3, [r7, #12]
 800d11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d120:	4293      	cmp	r3, r2
 800d122:	d001      	beq.n	800d128 <cmp_lfn+0xa0>
 800d124:	2300      	movs	r3, #0
 800d126:	e018      	b.n	800d15a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	3301      	adds	r3, #1
 800d12c:	613b      	str	r3, [r7, #16]
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	2b0c      	cmp	r3, #12
 800d132:	d9c8      	bls.n	800d0c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00b      	beq.n	800d158 <cmp_lfn+0xd0>
 800d140:	89fb      	ldrh	r3, [r7, #14]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d008      	beq.n	800d158 <cmp_lfn+0xd0>
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	4413      	add	r3, r2
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d001      	beq.n	800d158 <cmp_lfn+0xd0>
 800d154:	2300      	movs	r3, #0
 800d156:	e000      	b.n	800d15a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d158:	2301      	movs	r3, #1
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	371c      	adds	r7, #28
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd90      	pop	{r4, r7, pc}
 800d162:	bf00      	nop
 800d164:	080194b8 	.word	0x080194b8

0800d168 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	331a      	adds	r3, #26
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe ff98 	bl	800c0ac <ld_word>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <pick_lfn+0x1e>
 800d182:	2300      	movs	r3, #0
 800d184:	e04d      	b.n	800d222 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d18e:	1e5a      	subs	r2, r3, #1
 800d190:	4613      	mov	r3, r2
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	4413      	add	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d19c:	2301      	movs	r3, #1
 800d19e:	81fb      	strh	r3, [r7, #14]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	613b      	str	r3, [r7, #16]
 800d1a4:	e028      	b.n	800d1f8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d1a6:	4a21      	ldr	r2, [pc, #132]	; (800d22c <pick_lfn+0xc4>)
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fe ff79 	bl	800c0ac <ld_word>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d1be:	89fb      	ldrh	r3, [r7, #14]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00f      	beq.n	800d1e4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2bfe      	cmp	r3, #254	; 0xfe
 800d1c8:	d901      	bls.n	800d1ce <pick_lfn+0x66>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	e029      	b.n	800d222 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d1ce:	89bb      	ldrh	r3, [r7, #12]
 800d1d0:	81fb      	strh	r3, [r7, #14]
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	617a      	str	r2, [r7, #20]
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	4413      	add	r3, r2
 800d1de:	89fa      	ldrh	r2, [r7, #14]
 800d1e0:	801a      	strh	r2, [r3, #0]
 800d1e2:	e006      	b.n	800d1f2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d1e4:	89bb      	ldrh	r3, [r7, #12]
 800d1e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d001      	beq.n	800d1f2 <pick_lfn+0x8a>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	e017      	b.n	800d222 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	613b      	str	r3, [r7, #16]
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	2b0c      	cmp	r3, #12
 800d1fc:	d9d3      	bls.n	800d1a6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00a      	beq.n	800d220 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2bfe      	cmp	r3, #254	; 0xfe
 800d20e:	d901      	bls.n	800d214 <pick_lfn+0xac>
 800d210:	2300      	movs	r3, #0
 800d212:	e006      	b.n	800d222 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	005b      	lsls	r3, r3, #1
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	4413      	add	r3, r2
 800d21c:	2200      	movs	r2, #0
 800d21e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d220:	2301      	movs	r3, #1
}
 800d222:	4618      	mov	r0, r3
 800d224:	3718      	adds	r7, #24
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	080194b8 	.word	0x080194b8

0800d230 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	4611      	mov	r1, r2
 800d23c:	461a      	mov	r2, r3
 800d23e:	460b      	mov	r3, r1
 800d240:	71fb      	strb	r3, [r7, #7]
 800d242:	4613      	mov	r3, r2
 800d244:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	330d      	adds	r3, #13
 800d24a:	79ba      	ldrb	r2, [r7, #6]
 800d24c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	330b      	adds	r3, #11
 800d252:	220f      	movs	r2, #15
 800d254:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	330c      	adds	r3, #12
 800d25a:	2200      	movs	r2, #0
 800d25c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	331a      	adds	r3, #26
 800d262:	2100      	movs	r1, #0
 800d264:	4618      	mov	r0, r3
 800d266:	f7fe ff5c 	bl	800c122 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	1e5a      	subs	r2, r3, #1
 800d26e:	4613      	mov	r3, r2
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4413      	add	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	82fb      	strh	r3, [r7, #22]
 800d27e:	2300      	movs	r3, #0
 800d280:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d282:	8afb      	ldrh	r3, [r7, #22]
 800d284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d288:	4293      	cmp	r3, r2
 800d28a:	d007      	beq.n	800d29c <put_lfn+0x6c>
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	61fa      	str	r2, [r7, #28]
 800d292:	005b      	lsls	r3, r3, #1
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	4413      	add	r3, r2
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d29c:	4a17      	ldr	r2, [pc, #92]	; (800d2fc <put_lfn+0xcc>)
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	8afa      	ldrh	r2, [r7, #22]
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fe ff37 	bl	800c122 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d2b4:	8afb      	ldrh	r3, [r7, #22]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d102      	bne.n	800d2c0 <put_lfn+0x90>
 800d2ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2be:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	61bb      	str	r3, [r7, #24]
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	2b0c      	cmp	r3, #12
 800d2ca:	d9da      	bls.n	800d282 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d2cc:	8afb      	ldrh	r3, [r7, #22]
 800d2ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d006      	beq.n	800d2e4 <put_lfn+0xb4>
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	4413      	add	r3, r2
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d103      	bne.n	800d2ec <put_lfn+0xbc>
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	79fa      	ldrb	r2, [r7, #7]
 800d2f0:	701a      	strb	r2, [r3, #0]
}
 800d2f2:	bf00      	nop
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	080194b8 	.word	0x080194b8

0800d300 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08c      	sub	sp, #48	; 0x30
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
 800d30c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d30e:	220b      	movs	r2, #11
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f7fe ff4c 	bl	800c1b0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b05      	cmp	r3, #5
 800d31c:	d92b      	bls.n	800d376 <gen_numname+0x76>
		sr = seq;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d322:	e022      	b.n	800d36a <gen_numname+0x6a>
			wc = *lfn++;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	1c9a      	adds	r2, r3, #2
 800d328:	607a      	str	r2, [r7, #4]
 800d32a:	881b      	ldrh	r3, [r3, #0]
 800d32c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d32e:	2300      	movs	r3, #0
 800d330:	62bb      	str	r3, [r7, #40]	; 0x28
 800d332:	e017      	b.n	800d364 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	005a      	lsls	r2, r3, #1
 800d338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d33a:	f003 0301 	and.w	r3, r3, #1
 800d33e:	4413      	add	r3, r2
 800d340:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d344:	085b      	lsrs	r3, r3, #1
 800d346:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d005      	beq.n	800d35e <gen_numname+0x5e>
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d358:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d35c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d360:	3301      	adds	r3, #1
 800d362:	62bb      	str	r3, [r7, #40]	; 0x28
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	2b0f      	cmp	r3, #15
 800d368:	d9e4      	bls.n	800d334 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1d8      	bne.n	800d324 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d376:	2307      	movs	r3, #7
 800d378:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	b2db      	uxtb	r3, r3
 800d384:	3330      	adds	r3, #48	; 0x30
 800d386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d38a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d38e:	2b39      	cmp	r3, #57	; 0x39
 800d390:	d904      	bls.n	800d39c <gen_numname+0x9c>
 800d392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d396:	3307      	adds	r3, #7
 800d398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39e:	1e5a      	subs	r2, r3, #1
 800d3a0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d3a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d3ac:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	091b      	lsrs	r3, r3, #4
 800d3b4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1de      	bne.n	800d37a <gen_numname+0x7a>
	ns[i] = '~';
 800d3bc:	f107 0214 	add.w	r2, r7, #20
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	4413      	add	r3, r2
 800d3c4:	227e      	movs	r2, #126	; 0x7e
 800d3c6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d3cc:	e002      	b.n	800d3d4 <gen_numname+0xd4>
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d205      	bcs.n	800d3e8 <gen_numname+0xe8>
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e0:	4413      	add	r3, r2
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	2b20      	cmp	r3, #32
 800d3e6:	d1f2      	bne.n	800d3ce <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ea:	2b07      	cmp	r3, #7
 800d3ec:	d808      	bhi.n	800d400 <gen_numname+0x100>
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	1c5a      	adds	r2, r3, #1
 800d3f2:	62ba      	str	r2, [r7, #40]	; 0x28
 800d3f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d3fe:	e000      	b.n	800d402 <gen_numname+0x102>
 800d400:	2120      	movs	r1, #32
 800d402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	627a      	str	r2, [r7, #36]	; 0x24
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	4413      	add	r3, r2
 800d40c:	460a      	mov	r2, r1
 800d40e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	2b07      	cmp	r3, #7
 800d414:	d9e8      	bls.n	800d3e8 <gen_numname+0xe8>
}
 800d416:	bf00      	nop
 800d418:	3730      	adds	r7, #48	; 0x30
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d41e:	b480      	push	{r7}
 800d420:	b085      	sub	sp, #20
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d42a:	230b      	movs	r3, #11
 800d42c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
 800d430:	b2da      	uxtb	r2, r3
 800d432:	0852      	lsrs	r2, r2, #1
 800d434:	01db      	lsls	r3, r3, #7
 800d436:	4313      	orrs	r3, r2
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	1c59      	adds	r1, r3, #1
 800d43e:	6079      	str	r1, [r7, #4]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	4413      	add	r3, r2
 800d444:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	3b01      	subs	r3, #1
 800d44a:	60bb      	str	r3, [r7, #8]
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1ed      	bne.n	800d42e <sum_sfn+0x10>
	return sum;
 800d452:	7bfb      	ldrb	r3, [r7, #15]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d46a:	2304      	movs	r3, #4
 800d46c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d474:	23ff      	movs	r3, #255	; 0xff
 800d476:	757b      	strb	r3, [r7, #21]
 800d478:	23ff      	movs	r3, #255	; 0xff
 800d47a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d47c:	e081      	b.n	800d582 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	69db      	ldr	r3, [r3, #28]
 800d482:	4619      	mov	r1, r3
 800d484:	6938      	ldr	r0, [r7, #16]
 800d486:	f7ff f8c1 	bl	800c60c <move_window>
 800d48a:	4603      	mov	r3, r0
 800d48c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d17c      	bne.n	800d58e <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a1b      	ldr	r3, [r3, #32]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d49c:	7dbb      	ldrb	r3, [r7, #22]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d102      	bne.n	800d4a8 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d4a2:	2304      	movs	r3, #4
 800d4a4:	75fb      	strb	r3, [r7, #23]
 800d4a6:	e077      	b.n	800d598 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a1b      	ldr	r3, [r3, #32]
 800d4ac:	330b      	adds	r3, #11
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4b4:	73fb      	strb	r3, [r7, #15]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7bfa      	ldrb	r2, [r7, #15]
 800d4ba:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d4bc:	7dbb      	ldrb	r3, [r7, #22]
 800d4be:	2be5      	cmp	r3, #229	; 0xe5
 800d4c0:	d00e      	beq.n	800d4e0 <dir_read+0x80>
 800d4c2:	7dbb      	ldrb	r3, [r7, #22]
 800d4c4:	2b2e      	cmp	r3, #46	; 0x2e
 800d4c6:	d00b      	beq.n	800d4e0 <dir_read+0x80>
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	f023 0320 	bic.w	r3, r3, #32
 800d4ce:	2b08      	cmp	r3, #8
 800d4d0:	bf0c      	ite	eq
 800d4d2:	2301      	moveq	r3, #1
 800d4d4:	2300      	movne	r3, #0
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	461a      	mov	r2, r3
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d002      	beq.n	800d4e6 <dir_read+0x86>
				ord = 0xFF;
 800d4e0:	23ff      	movs	r3, #255	; 0xff
 800d4e2:	757b      	strb	r3, [r7, #21]
 800d4e4:	e044      	b.n	800d570 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
 800d4e8:	2b0f      	cmp	r3, #15
 800d4ea:	d12f      	bne.n	800d54c <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d4ec:	7dbb      	ldrb	r3, [r7, #22]
 800d4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00d      	beq.n	800d512 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	7b5b      	ldrb	r3, [r3, #13]
 800d4fc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d4fe:	7dbb      	ldrb	r3, [r7, #22]
 800d500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d504:	75bb      	strb	r3, [r7, #22]
 800d506:	7dbb      	ldrb	r3, [r7, #22]
 800d508:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	695a      	ldr	r2, [r3, #20]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d512:	7dba      	ldrb	r2, [r7, #22]
 800d514:	7d7b      	ldrb	r3, [r7, #21]
 800d516:	429a      	cmp	r2, r3
 800d518:	d115      	bne.n	800d546 <dir_read+0xe6>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	330d      	adds	r3, #13
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	7d3a      	ldrb	r2, [r7, #20]
 800d524:	429a      	cmp	r2, r3
 800d526:	d10e      	bne.n	800d546 <dir_read+0xe6>
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	68da      	ldr	r2, [r3, #12]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6a1b      	ldr	r3, [r3, #32]
 800d530:	4619      	mov	r1, r3
 800d532:	4610      	mov	r0, r2
 800d534:	f7ff fe18 	bl	800d168 <pick_lfn>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d003      	beq.n	800d546 <dir_read+0xe6>
 800d53e:	7d7b      	ldrb	r3, [r7, #21]
 800d540:	3b01      	subs	r3, #1
 800d542:	b2db      	uxtb	r3, r3
 800d544:	e000      	b.n	800d548 <dir_read+0xe8>
 800d546:	23ff      	movs	r3, #255	; 0xff
 800d548:	757b      	strb	r3, [r7, #21]
 800d54a:	e011      	b.n	800d570 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d54c:	7d7b      	ldrb	r3, [r7, #21]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d109      	bne.n	800d566 <dir_read+0x106>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff ff61 	bl	800d41e <sum_sfn>
 800d55c:	4603      	mov	r3, r0
 800d55e:	461a      	mov	r2, r3
 800d560:	7d3b      	ldrb	r3, [r7, #20]
 800d562:	4293      	cmp	r3, r2
 800d564:	d015      	beq.n	800d592 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f04f 32ff 	mov.w	r2, #4294967295
 800d56c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d56e:	e010      	b.n	800d592 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d570:	2100      	movs	r1, #0
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fc3d 	bl	800cdf2 <dir_next>
 800d578:	4603      	mov	r3, r0
 800d57a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d109      	bne.n	800d596 <dir_read+0x136>
	while (dp->sect) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	2b00      	cmp	r3, #0
 800d588:	f47f af79 	bne.w	800d47e <dir_read+0x1e>
 800d58c:	e004      	b.n	800d598 <dir_read+0x138>
		if (res != FR_OK) break;
 800d58e:	bf00      	nop
 800d590:	e002      	b.n	800d598 <dir_read+0x138>
					break;
 800d592:	bf00      	nop
 800d594:	e000      	b.n	800d598 <dir_read+0x138>
		if (res != FR_OK) break;
 800d596:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d598:	7dfb      	ldrb	r3, [r7, #23]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d002      	beq.n	800d5a4 <dir_read+0x144>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	61da      	str	r2, [r3, #28]
	return res;
 800d5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3718      	adds	r7, #24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b086      	sub	sp, #24
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d5bc:	2100      	movs	r1, #0
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff fb9c 	bl	800ccfc <dir_sdi>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d001      	beq.n	800d5d2 <dir_find+0x24>
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
 800d5d0:	e0a9      	b.n	800d726 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d5d2:	23ff      	movs	r3, #255	; 0xff
 800d5d4:	753b      	strb	r3, [r7, #20]
 800d5d6:	7d3b      	ldrb	r3, [r7, #20]
 800d5d8:	757b      	strb	r3, [r7, #21]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	69db      	ldr	r3, [r3, #28]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6938      	ldr	r0, [r7, #16]
 800d5ea:	f7ff f80f 	bl	800c60c <move_window>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f040 8090 	bne.w	800d71a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d602:	7dbb      	ldrb	r3, [r7, #22]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d102      	bne.n	800d60e <dir_find+0x60>
 800d608:	2304      	movs	r3, #4
 800d60a:	75fb      	strb	r3, [r7, #23]
 800d60c:	e08a      	b.n	800d724 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	330b      	adds	r3, #11
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d61a:	73fb      	strb	r3, [r7, #15]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	7bfa      	ldrb	r2, [r7, #15]
 800d620:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d622:	7dbb      	ldrb	r3, [r7, #22]
 800d624:	2be5      	cmp	r3, #229	; 0xe5
 800d626:	d007      	beq.n	800d638 <dir_find+0x8a>
 800d628:	7bfb      	ldrb	r3, [r7, #15]
 800d62a:	f003 0308 	and.w	r3, r3, #8
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d009      	beq.n	800d646 <dir_find+0x98>
 800d632:	7bfb      	ldrb	r3, [r7, #15]
 800d634:	2b0f      	cmp	r3, #15
 800d636:	d006      	beq.n	800d646 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d638:	23ff      	movs	r3, #255	; 0xff
 800d63a:	757b      	strb	r3, [r7, #21]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f04f 32ff 	mov.w	r2, #4294967295
 800d642:	631a      	str	r2, [r3, #48]	; 0x30
 800d644:	e05e      	b.n	800d704 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	2b0f      	cmp	r3, #15
 800d64a:	d136      	bne.n	800d6ba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d656:	2b00      	cmp	r3, #0
 800d658:	d154      	bne.n	800d704 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d65a:	7dbb      	ldrb	r3, [r7, #22]
 800d65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00d      	beq.n	800d680 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	7b5b      	ldrb	r3, [r3, #13]
 800d66a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d66c:	7dbb      	ldrb	r3, [r7, #22]
 800d66e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d672:	75bb      	strb	r3, [r7, #22]
 800d674:	7dbb      	ldrb	r3, [r7, #22]
 800d676:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	695a      	ldr	r2, [r3, #20]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d680:	7dba      	ldrb	r2, [r7, #22]
 800d682:	7d7b      	ldrb	r3, [r7, #21]
 800d684:	429a      	cmp	r2, r3
 800d686:	d115      	bne.n	800d6b4 <dir_find+0x106>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	330d      	adds	r3, #13
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	7d3a      	ldrb	r2, [r7, #20]
 800d692:	429a      	cmp	r2, r3
 800d694:	d10e      	bne.n	800d6b4 <dir_find+0x106>
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6a1b      	ldr	r3, [r3, #32]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f7ff fcf1 	bl	800d088 <cmp_lfn>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <dir_find+0x106>
 800d6ac:	7d7b      	ldrb	r3, [r7, #21]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	e000      	b.n	800d6b6 <dir_find+0x108>
 800d6b4:	23ff      	movs	r3, #255	; 0xff
 800d6b6:	757b      	strb	r3, [r7, #21]
 800d6b8:	e024      	b.n	800d704 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d6ba:	7d7b      	ldrb	r3, [r7, #21]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d109      	bne.n	800d6d4 <dir_find+0x126>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7ff feaa 	bl	800d41e <sum_sfn>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	7d3b      	ldrb	r3, [r7, #20]
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d024      	beq.n	800d71e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10a      	bne.n	800d6f8 <dir_find+0x14a>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a18      	ldr	r0, [r3, #32]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	3324      	adds	r3, #36	; 0x24
 800d6ea:	220b      	movs	r2, #11
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	f7fe fd9a 	bl	800c226 <mem_cmp>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d014      	beq.n	800d722 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d6f8:	23ff      	movs	r3, #255	; 0xff
 800d6fa:	757b      	strb	r3, [r7, #21]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d702:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d704:	2100      	movs	r1, #0
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff fb73 	bl	800cdf2 <dir_next>
 800d70c:	4603      	mov	r3, r0
 800d70e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d710:	7dfb      	ldrb	r3, [r7, #23]
 800d712:	2b00      	cmp	r3, #0
 800d714:	f43f af65 	beq.w	800d5e2 <dir_find+0x34>
 800d718:	e004      	b.n	800d724 <dir_find+0x176>
		if (res != FR_OK) break;
 800d71a:	bf00      	nop
 800d71c:	e002      	b.n	800d724 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d71e:	bf00      	nop
 800d720:	e000      	b.n	800d724 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d722:	bf00      	nop

	return res;
 800d724:	7dfb      	ldrb	r3, [r7, #23]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3718      	adds	r7, #24
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
	...

0800d730 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b08c      	sub	sp, #48	; 0x30
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d744:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <dir_register+0x20>
 800d74c:	2306      	movs	r3, #6
 800d74e:	e0e0      	b.n	800d912 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d750:	2300      	movs	r3, #0
 800d752:	627b      	str	r3, [r7, #36]	; 0x24
 800d754:	e002      	b.n	800d75c <dir_register+0x2c>
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	3301      	adds	r3, #1
 800d75a:	627b      	str	r3, [r7, #36]	; 0x24
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	68da      	ldr	r2, [r3, #12]
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	4413      	add	r3, r2
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1f4      	bne.n	800d756 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d772:	f107 030c 	add.w	r3, r7, #12
 800d776:	220c      	movs	r2, #12
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fe fd19 	bl	800c1b0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
 800d780:	f003 0301 	and.w	r3, r3, #1
 800d784:	2b00      	cmp	r3, #0
 800d786:	d032      	beq.n	800d7ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2240      	movs	r2, #64	; 0x40
 800d78c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d790:	2301      	movs	r3, #1
 800d792:	62bb      	str	r3, [r7, #40]	; 0x28
 800d794:	e016      	b.n	800d7c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	68da      	ldr	r2, [r3, #12]
 800d7a0:	f107 010c 	add.w	r1, r7, #12
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	f7ff fdab 	bl	800d300 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff feff 	bl	800d5ae <dir_find>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	2b63      	cmp	r3, #99	; 0x63
 800d7c8:	d9e5      	bls.n	800d796 <dir_register+0x66>
 800d7ca:	e000      	b.n	800d7ce <dir_register+0x9e>
			if (res != FR_OK) break;
 800d7cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d0:	2b64      	cmp	r3, #100	; 0x64
 800d7d2:	d101      	bne.n	800d7d8 <dir_register+0xa8>
 800d7d4:	2307      	movs	r3, #7
 800d7d6:	e09c      	b.n	800d912 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d7d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7dc:	2b04      	cmp	r3, #4
 800d7de:	d002      	beq.n	800d7e6 <dir_register+0xb6>
 800d7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7e4:	e095      	b.n	800d912 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d7e6:	7dfa      	ldrb	r2, [r7, #23]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	f003 0302 	and.w	r3, r3, #2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d007      	beq.n	800d808 <dir_register+0xd8>
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	330c      	adds	r3, #12
 800d7fc:	4a47      	ldr	r2, [pc, #284]	; (800d91c <dir_register+0x1ec>)
 800d7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d802:	089b      	lsrs	r3, r3, #2
 800d804:	3301      	adds	r3, #1
 800d806:	e000      	b.n	800d80a <dir_register+0xda>
 800d808:	2301      	movs	r3, #1
 800d80a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d80c:	6a39      	ldr	r1, [r7, #32]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fbb4 	bl	800cf7c <dir_alloc>
 800d814:	4603      	mov	r3, r0
 800d816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d148      	bne.n	800d8b4 <dir_register+0x184>
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	3b01      	subs	r3, #1
 800d826:	623b      	str	r3, [r7, #32]
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d042      	beq.n	800d8b4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	695a      	ldr	r2, [r3, #20]
 800d832:	6a3b      	ldr	r3, [r7, #32]
 800d834:	015b      	lsls	r3, r3, #5
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	4619      	mov	r1, r3
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7ff fa5e 	bl	800ccfc <dir_sdi>
 800d840:	4603      	mov	r3, r0
 800d842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d132      	bne.n	800d8b4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	3324      	adds	r3, #36	; 0x24
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff fde3 	bl	800d41e <sum_sfn>
 800d858:	4603      	mov	r3, r0
 800d85a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	4619      	mov	r1, r3
 800d862:	69f8      	ldr	r0, [r7, #28]
 800d864:	f7fe fed2 	bl	800c60c <move_window>
 800d868:	4603      	mov	r3, r0
 800d86a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d86e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d872:	2b00      	cmp	r3, #0
 800d874:	d11d      	bne.n	800d8b2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	68d8      	ldr	r0, [r3, #12]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a19      	ldr	r1, [r3, #32]
 800d87e:	6a3b      	ldr	r3, [r7, #32]
 800d880:	b2da      	uxtb	r2, r3
 800d882:	7efb      	ldrb	r3, [r7, #27]
 800d884:	f7ff fcd4 	bl	800d230 <put_lfn>
				fs->wflag = 1;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	2201      	movs	r2, #1
 800d88c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d88e:	2100      	movs	r1, #0
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff faae 	bl	800cdf2 <dir_next>
 800d896:	4603      	mov	r3, r0
 800d898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d89c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d107      	bne.n	800d8b4 <dir_register+0x184>
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	623b      	str	r3, [r7, #32]
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1d5      	bne.n	800d85c <dir_register+0x12c>
 800d8b0:	e000      	b.n	800d8b4 <dir_register+0x184>
				if (res != FR_OK) break;
 800d8b2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d8b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d128      	bne.n	800d90e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	69db      	ldr	r3, [r3, #28]
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	69f8      	ldr	r0, [r7, #28]
 800d8c4:	f7fe fea2 	bl	800c60c <move_window>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d11b      	bne.n	800d90e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	2100      	movs	r1, #0
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fe fc87 	bl	800c1f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a18      	ldr	r0, [r3, #32]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3324      	adds	r3, #36	; 0x24
 800d8ec:	220b      	movs	r2, #11
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	f7fe fc5e 	bl	800c1b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a1b      	ldr	r3, [r3, #32]
 800d8fe:	330c      	adds	r3, #12
 800d900:	f002 0218 	and.w	r2, r2, #24
 800d904:	b2d2      	uxtb	r2, r2
 800d906:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2201      	movs	r2, #1
 800d90c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d90e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d912:	4618      	mov	r0, r3
 800d914:	3730      	adds	r7, #48	; 0x30
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	4ec4ec4f 	.word	0x4ec4ec4f

0800d920 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	695b      	ldr	r3, [r3, #20]
 800d932:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93c:	d007      	beq.n	800d94e <dir_remove+0x2e>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7ff f9d9 	bl	800ccfc <dir_sdi>
 800d94a:	4603      	mov	r3, r0
 800d94c:	e000      	b.n	800d950 <dir_remove+0x30>
 800d94e:	2300      	movs	r3, #0
 800d950:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d952:	7dfb      	ldrb	r3, [r7, #23]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d128      	bne.n	800d9aa <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	69db      	ldr	r3, [r3, #28]
 800d95c:	4619      	mov	r1, r3
 800d95e:	6938      	ldr	r0, [r7, #16]
 800d960:	f7fe fe54 	bl	800c60c <move_window>
 800d964:	4603      	mov	r3, r0
 800d966:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d968:	7dfb      	ldrb	r3, [r7, #23]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d115      	bne.n	800d99a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	22e5      	movs	r2, #229	; 0xe5
 800d974:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	2201      	movs	r2, #1
 800d97a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	429a      	cmp	r2, r3
 800d984:	d90b      	bls.n	800d99e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800d986:	2100      	movs	r1, #0
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff fa32 	bl	800cdf2 <dir_next>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d0df      	beq.n	800d958 <dir_remove+0x38>
 800d998:	e002      	b.n	800d9a0 <dir_remove+0x80>
			if (res != FR_OK) break;
 800d99a:	bf00      	nop
 800d99c:	e000      	b.n	800d9a0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d99e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800d9a0:	7dfb      	ldrb	r3, [r7, #23]
 800d9a2:	2b04      	cmp	r3, #4
 800d9a4:	d101      	bne.n	800d9aa <dir_remove+0x8a>
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 80c9 	beq.w	800db66 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9dc:	d032      	beq.n	800da44 <get_fileinfo+0x90>
			i = j = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	61bb      	str	r3, [r7, #24]
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d9e6:	e01b      	b.n	800da20 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d9e8:	89fb      	ldrh	r3, [r7, #14]
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f001 ffbd 	bl	800f96c <ff_convert>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d9f6:	89fb      	ldrh	r3, [r7, #14]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d102      	bne.n	800da02 <get_fileinfo+0x4e>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	61fb      	str	r3, [r7, #28]
 800da00:	e01a      	b.n	800da38 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	2bfe      	cmp	r3, #254	; 0xfe
 800da06:	d902      	bls.n	800da0e <get_fileinfo+0x5a>
 800da08:	2300      	movs	r3, #0
 800da0a:	61fb      	str	r3, [r7, #28]
 800da0c:	e014      	b.n	800da38 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	61fa      	str	r2, [r7, #28]
 800da14:	89fa      	ldrh	r2, [r7, #14]
 800da16:	b2d1      	uxtb	r1, r2
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	4413      	add	r3, r2
 800da1c:	460a      	mov	r2, r1
 800da1e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	68da      	ldr	r2, [r3, #12]
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	1c59      	adds	r1, r3, #1
 800da28:	61b9      	str	r1, [r7, #24]
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	4413      	add	r3, r2
 800da2e:	881b      	ldrh	r3, [r3, #0]
 800da30:	81fb      	strh	r3, [r7, #14]
 800da32:	89fb      	ldrh	r3, [r7, #14]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1d7      	bne.n	800d9e8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800da38:	683a      	ldr	r2, [r7, #0]
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	4413      	add	r3, r2
 800da3e:	3316      	adds	r3, #22
 800da40:	2200      	movs	r2, #0
 800da42:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	61bb      	str	r3, [r7, #24]
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	4413      	add	r3, r2
 800da52:	3316      	adds	r3, #22
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800da58:	e04c      	b.n	800daf4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a1a      	ldr	r2, [r3, #32]
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	1c59      	adds	r1, r3, #1
 800da62:	61f9      	str	r1, [r7, #28]
 800da64:	4413      	add	r3, r2
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800da6a:	7dfb      	ldrb	r3, [r7, #23]
 800da6c:	2b20      	cmp	r3, #32
 800da6e:	d100      	bne.n	800da72 <get_fileinfo+0xbe>
 800da70:	e040      	b.n	800daf4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800da72:	7dfb      	ldrb	r3, [r7, #23]
 800da74:	2b05      	cmp	r3, #5
 800da76:	d101      	bne.n	800da7c <get_fileinfo+0xc8>
 800da78:	23e5      	movs	r3, #229	; 0xe5
 800da7a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	2b09      	cmp	r3, #9
 800da80:	d10f      	bne.n	800daa2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800da82:	89bb      	ldrh	r3, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d105      	bne.n	800da94 <get_fileinfo+0xe0>
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	4413      	add	r3, r2
 800da8e:	3316      	adds	r3, #22
 800da90:	222e      	movs	r2, #46	; 0x2e
 800da92:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	1c5a      	adds	r2, r3, #1
 800da98:	61ba      	str	r2, [r7, #24]
 800da9a:	683a      	ldr	r2, [r7, #0]
 800da9c:	4413      	add	r3, r2
 800da9e:	222e      	movs	r2, #46	; 0x2e
 800daa0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	4413      	add	r3, r2
 800daa8:	3309      	adds	r3, #9
 800daaa:	7dfa      	ldrb	r2, [r7, #23]
 800daac:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800daae:	89bb      	ldrh	r3, [r7, #12]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d11c      	bne.n	800daee <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800dab4:	7dfb      	ldrb	r3, [r7, #23]
 800dab6:	2b40      	cmp	r3, #64	; 0x40
 800dab8:	d913      	bls.n	800dae2 <get_fileinfo+0x12e>
 800daba:	7dfb      	ldrb	r3, [r7, #23]
 800dabc:	2b5a      	cmp	r3, #90	; 0x5a
 800dabe:	d810      	bhi.n	800dae2 <get_fileinfo+0x12e>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a1b      	ldr	r3, [r3, #32]
 800dac4:	330c      	adds	r3, #12
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	461a      	mov	r2, r3
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	2b08      	cmp	r3, #8
 800dace:	d901      	bls.n	800dad4 <get_fileinfo+0x120>
 800dad0:	2310      	movs	r3, #16
 800dad2:	e000      	b.n	800dad6 <get_fileinfo+0x122>
 800dad4:	2308      	movs	r3, #8
 800dad6:	4013      	ands	r3, r2
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	3320      	adds	r3, #32
 800dae0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	4413      	add	r3, r2
 800dae8:	3316      	adds	r3, #22
 800daea:	7dfa      	ldrb	r2, [r7, #23]
 800daec:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	3301      	adds	r3, #1
 800daf2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	2b0a      	cmp	r3, #10
 800daf8:	d9af      	bls.n	800da5a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800dafa:	89bb      	ldrh	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10d      	bne.n	800db1c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	4413      	add	r3, r2
 800db06:	3316      	adds	r3, #22
 800db08:	2200      	movs	r2, #0
 800db0a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	330c      	adds	r3, #12
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d101      	bne.n	800db1c <get_fileinfo+0x168>
 800db18:	2300      	movs	r3, #0
 800db1a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800db1c:	683a      	ldr	r2, [r7, #0]
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	4413      	add	r3, r2
 800db22:	3309      	adds	r3, #9
 800db24:	2200      	movs	r2, #0
 800db26:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a1b      	ldr	r3, [r3, #32]
 800db2c:	7ada      	ldrb	r2, [r3, #11]
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a1b      	ldr	r3, [r3, #32]
 800db36:	331c      	adds	r3, #28
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fe facf 	bl	800c0dc <ld_dword>
 800db3e:	4602      	mov	r2, r0
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	3316      	adds	r3, #22
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe fac6 	bl	800c0dc <ld_dword>
 800db50:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	b29a      	uxth	r2, r3
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	80da      	strh	r2, [r3, #6]
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	0c1b      	lsrs	r3, r3, #16
 800db5e:	b29a      	uxth	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	809a      	strh	r2, [r3, #4]
 800db64:	e000      	b.n	800db68 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800db66:	bf00      	nop
}
 800db68:	3720      	adds	r7, #32
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
	...

0800db70 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	1c59      	adds	r1, r3, #1
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	6011      	str	r1, [r2, #0]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800db86:	89fb      	ldrh	r3, [r7, #14]
 800db88:	2b60      	cmp	r3, #96	; 0x60
 800db8a:	d905      	bls.n	800db98 <get_achar+0x28>
 800db8c:	89fb      	ldrh	r3, [r7, #14]
 800db8e:	2b7a      	cmp	r3, #122	; 0x7a
 800db90:	d802      	bhi.n	800db98 <get_achar+0x28>
 800db92:	89fb      	ldrh	r3, [r7, #14]
 800db94:	3b20      	subs	r3, #32
 800db96:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800db98:	89fb      	ldrh	r3, [r7, #14]
 800db9a:	2b7f      	cmp	r3, #127	; 0x7f
 800db9c:	d904      	bls.n	800dba8 <get_achar+0x38>
 800db9e:	89fb      	ldrh	r3, [r7, #14]
 800dba0:	3b80      	subs	r3, #128	; 0x80
 800dba2:	4a05      	ldr	r2, [pc, #20]	; (800dbb8 <get_achar+0x48>)
 800dba4:	5cd3      	ldrb	r3, [r2, r3]
 800dba6:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800dba8:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3714      	adds	r7, #20
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	08019438 	.word	0x08019438

0800dbbc <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08a      	sub	sp, #40	; 0x28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800dbca:	e009      	b.n	800dbe0 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800dbcc:	f107 0308 	add.w	r3, r7, #8
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7ff ffcd 	bl	800db70 <get_achar>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d101      	bne.n	800dbe0 <pattern_matching+0x24>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	e064      	b.n	800dcaa <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	1e5a      	subs	r2, r3, #1
 800dbe4:	607a      	str	r2, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d1f0      	bne.n	800dbcc <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d104      	bne.n	800dbfc <pattern_matching+0x40>
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <pattern_matching+0x40>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e056      	b.n	800dcaa <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	617b      	str	r3, [r7, #20]
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b3f      	cmp	r3, #63	; 0x3f
 800dc0a:	d003      	beq.n	800dc14 <pattern_matching+0x58>
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2b2a      	cmp	r3, #42	; 0x2a
 800dc12:	d126      	bne.n	800dc62 <pattern_matching+0xa6>
				nm = nx = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	61fb      	str	r3, [r7, #28]
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	1c5a      	adds	r2, r3, #1
 800dc20:	617a      	str	r2, [r7, #20]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b3f      	cmp	r3, #63	; 0x3f
 800dc26:	d103      	bne.n	800dc30 <pattern_matching+0x74>
 800dc28:	6a3b      	ldr	r3, [r7, #32]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	623b      	str	r3, [r7, #32]
 800dc2e:	e001      	b.n	800dc34 <pattern_matching+0x78>
 800dc30:	2301      	movs	r3, #1
 800dc32:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b3f      	cmp	r3, #63	; 0x3f
 800dc3a:	d0ef      	beq.n	800dc1c <pattern_matching+0x60>
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	2b2a      	cmp	r3, #42	; 0x2a
 800dc42:	d0eb      	beq.n	800dc1c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800dc44:	6978      	ldr	r0, [r7, #20]
 800dc46:	6939      	ldr	r1, [r7, #16]
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	6a3a      	ldr	r2, [r7, #32]
 800dc4c:	f7ff ffb6 	bl	800dbbc <pattern_matching>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d001      	beq.n	800dc5a <pattern_matching+0x9e>
 800dc56:	2301      	movs	r3, #1
 800dc58:	e027      	b.n	800dcaa <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dc60:	e017      	b.n	800dc92 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800dc62:	f107 0314 	add.w	r3, r7, #20
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff ff82 	bl	800db70 <get_achar>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800dc70:	f107 0310 	add.w	r3, r7, #16
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff ff7b 	bl	800db70 <get_achar>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800dc7e:	8b7a      	ldrh	r2, [r7, #26]
 800dc80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d104      	bne.n	800dc90 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800dc86:	8b7b      	ldrh	r3, [r7, #26]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1bb      	bne.n	800dc04 <pattern_matching+0x48>
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e00c      	b.n	800dcaa <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800dc90:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800dc92:	f107 0308 	add.w	r3, r7, #8
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff ff6a 	bl	800db70 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d002      	beq.n	800dca8 <pattern_matching+0xec>
 800dca2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1a9      	bne.n	800dbfc <pattern_matching+0x40>

	return 0;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3728      	adds	r7, #40	; 0x28
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
	...

0800dcb4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b08a      	sub	sp, #40	; 0x28
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	613b      	str	r3, [r7, #16]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	60fb      	str	r3, [r7, #12]
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	1c5a      	adds	r2, r3, #1
 800dcd8:	61ba      	str	r2, [r7, #24]
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	4413      	add	r3, r2
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dce4:	2b1f      	cmp	r3, #31
 800dce6:	d940      	bls.n	800dd6a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcea:	2b2f      	cmp	r3, #47	; 0x2f
 800dcec:	d006      	beq.n	800dcfc <create_name+0x48>
 800dcee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcf0:	2b5c      	cmp	r3, #92	; 0x5c
 800dcf2:	d110      	bne.n	800dd16 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dcf4:	e002      	b.n	800dcfc <create_name+0x48>
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	61bb      	str	r3, [r7, #24]
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	4413      	add	r3, r2
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	2b2f      	cmp	r3, #47	; 0x2f
 800dd06:	d0f6      	beq.n	800dcf6 <create_name+0x42>
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	2b5c      	cmp	r3, #92	; 0x5c
 800dd12:	d0f0      	beq.n	800dcf6 <create_name+0x42>
			break;
 800dd14:	e02a      	b.n	800dd6c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	2bfe      	cmp	r3, #254	; 0xfe
 800dd1a:	d901      	bls.n	800dd20 <create_name+0x6c>
 800dd1c:	2306      	movs	r3, #6
 800dd1e:	e177      	b.n	800e010 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dd20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dd26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd28:	2101      	movs	r1, #1
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f001 fe1e 	bl	800f96c <ff_convert>
 800dd30:	4603      	mov	r3, r0
 800dd32:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dd34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <create_name+0x8a>
 800dd3a:	2306      	movs	r3, #6
 800dd3c:	e168      	b.n	800e010 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dd3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd40:	2b7f      	cmp	r3, #127	; 0x7f
 800dd42:	d809      	bhi.n	800dd58 <create_name+0xa4>
 800dd44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd46:	4619      	mov	r1, r3
 800dd48:	48b3      	ldr	r0, [pc, #716]	; (800e018 <create_name+0x364>)
 800dd4a:	f7fe fa93 	bl	800c274 <chk_chr>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <create_name+0xa4>
 800dd54:	2306      	movs	r3, #6
 800dd56:	e15b      	b.n	800e010 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	1c5a      	adds	r2, r3, #1
 800dd5c:	617a      	str	r2, [r7, #20]
 800dd5e:	005b      	lsls	r3, r3, #1
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	4413      	add	r3, r2
 800dd64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd66:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dd68:	e7b4      	b.n	800dcd4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dd6a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dd6c:	693a      	ldr	r2, [r7, #16]
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	441a      	add	r2, r3
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd78:	2b1f      	cmp	r3, #31
 800dd7a:	d801      	bhi.n	800dd80 <create_name+0xcc>
 800dd7c:	2304      	movs	r3, #4
 800dd7e:	e000      	b.n	800dd82 <create_name+0xce>
 800dd80:	2300      	movs	r3, #0
 800dd82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd86:	e011      	b.n	800ddac <create_name+0xf8>
		w = lfn[di - 1];
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	4413      	add	r3, r2
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dd9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd9c:	2b20      	cmp	r3, #32
 800dd9e:	d002      	beq.n	800dda6 <create_name+0xf2>
 800dda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dda2:	2b2e      	cmp	r3, #46	; 0x2e
 800dda4:	d106      	bne.n	800ddb4 <create_name+0x100>
		di--;
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1ea      	bne.n	800dd88 <create_name+0xd4>
 800ddb2:	e000      	b.n	800ddb6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ddb4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	005b      	lsls	r3, r3, #1
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d101      	bne.n	800ddcc <create_name+0x118>
 800ddc8:	2306      	movs	r3, #6
 800ddca:	e121      	b.n	800e010 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3324      	adds	r3, #36	; 0x24
 800ddd0:	220b      	movs	r2, #11
 800ddd2:	2120      	movs	r1, #32
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fa0c 	bl	800c1f2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ddda:	2300      	movs	r3, #0
 800dddc:	61bb      	str	r3, [r7, #24]
 800ddde:	e002      	b.n	800dde6 <create_name+0x132>
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	3301      	adds	r3, #1
 800dde4:	61bb      	str	r3, [r7, #24]
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	4413      	add	r3, r2
 800ddee:	881b      	ldrh	r3, [r3, #0]
 800ddf0:	2b20      	cmp	r3, #32
 800ddf2:	d0f5      	beq.n	800dde0 <create_name+0x12c>
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	2b2e      	cmp	r3, #46	; 0x2e
 800de00:	d0ee      	beq.n	800dde0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d009      	beq.n	800de1c <create_name+0x168>
 800de08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de0c:	f043 0303 	orr.w	r3, r3, #3
 800de10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800de14:	e002      	b.n	800de1c <create_name+0x168>
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	3b01      	subs	r3, #1
 800de1a:	617b      	str	r3, [r7, #20]
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d009      	beq.n	800de36 <create_name+0x182>
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de28:	3b01      	subs	r3, #1
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	4413      	add	r3, r2
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	2b2e      	cmp	r3, #46	; 0x2e
 800de34:	d1ef      	bne.n	800de16 <create_name+0x162>

	i = b = 0; ni = 8;
 800de36:	2300      	movs	r3, #0
 800de38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de3c:	2300      	movs	r3, #0
 800de3e:	623b      	str	r3, [r7, #32]
 800de40:	2308      	movs	r3, #8
 800de42:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	1c5a      	adds	r2, r3, #1
 800de48:	61ba      	str	r2, [r7, #24]
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	4413      	add	r3, r2
 800de50:	881b      	ldrh	r3, [r3, #0]
 800de52:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800de54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 8090 	beq.w	800df7c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800de5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de5e:	2b20      	cmp	r3, #32
 800de60:	d006      	beq.n	800de70 <create_name+0x1bc>
 800de62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de64:	2b2e      	cmp	r3, #46	; 0x2e
 800de66:	d10a      	bne.n	800de7e <create_name+0x1ca>
 800de68:	69ba      	ldr	r2, [r7, #24]
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d006      	beq.n	800de7e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800de70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de74:	f043 0303 	orr.w	r3, r3, #3
 800de78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de7c:	e07d      	b.n	800df7a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800de7e:	6a3a      	ldr	r2, [r7, #32]
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	429a      	cmp	r2, r3
 800de84:	d203      	bcs.n	800de8e <create_name+0x1da>
 800de86:	69ba      	ldr	r2, [r7, #24]
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d123      	bne.n	800ded6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	2b0b      	cmp	r3, #11
 800de92:	d106      	bne.n	800dea2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800de94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de98:	f043 0303 	orr.w	r3, r3, #3
 800de9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dea0:	e06f      	b.n	800df82 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dea2:	69ba      	ldr	r2, [r7, #24]
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d005      	beq.n	800deb6 <create_name+0x202>
 800deaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deae:	f043 0303 	orr.w	r3, r3, #3
 800deb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800deb6:	69ba      	ldr	r2, [r7, #24]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	429a      	cmp	r2, r3
 800debc:	d860      	bhi.n	800df80 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	61bb      	str	r3, [r7, #24]
 800dec2:	2308      	movs	r3, #8
 800dec4:	623b      	str	r3, [r7, #32]
 800dec6:	230b      	movs	r3, #11
 800dec8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800deca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ded4:	e051      	b.n	800df7a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ded6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ded8:	2b7f      	cmp	r3, #127	; 0x7f
 800deda:	d914      	bls.n	800df06 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dedc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dede:	2100      	movs	r1, #0
 800dee0:	4618      	mov	r0, r3
 800dee2:	f001 fd43 	bl	800f96c <ff_convert>
 800dee6:	4603      	mov	r3, r0
 800dee8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800deea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deec:	2b00      	cmp	r3, #0
 800deee:	d004      	beq.n	800defa <create_name+0x246>
 800def0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800def2:	3b80      	subs	r3, #128	; 0x80
 800def4:	4a49      	ldr	r2, [pc, #292]	; (800e01c <create_name+0x368>)
 800def6:	5cd3      	ldrb	r3, [r2, r3]
 800def8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800defa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800defe:	f043 0302 	orr.w	r3, r3, #2
 800df02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800df06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d007      	beq.n	800df1c <create_name+0x268>
 800df0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df0e:	4619      	mov	r1, r3
 800df10:	4843      	ldr	r0, [pc, #268]	; (800e020 <create_name+0x36c>)
 800df12:	f7fe f9af 	bl	800c274 <chk_chr>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d008      	beq.n	800df2e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800df1c:	235f      	movs	r3, #95	; 0x5f
 800df1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800df20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df24:	f043 0303 	orr.w	r3, r3, #3
 800df28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df2c:	e01b      	b.n	800df66 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800df2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df30:	2b40      	cmp	r3, #64	; 0x40
 800df32:	d909      	bls.n	800df48 <create_name+0x294>
 800df34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df36:	2b5a      	cmp	r3, #90	; 0x5a
 800df38:	d806      	bhi.n	800df48 <create_name+0x294>
					b |= 2;
 800df3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df3e:	f043 0302 	orr.w	r3, r3, #2
 800df42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df46:	e00e      	b.n	800df66 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800df48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df4a:	2b60      	cmp	r3, #96	; 0x60
 800df4c:	d90b      	bls.n	800df66 <create_name+0x2b2>
 800df4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df50:	2b7a      	cmp	r3, #122	; 0x7a
 800df52:	d808      	bhi.n	800df66 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800df54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df58:	f043 0301 	orr.w	r3, r3, #1
 800df5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df62:	3b20      	subs	r3, #32
 800df64:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	1c5a      	adds	r2, r3, #1
 800df6a:	623a      	str	r2, [r7, #32]
 800df6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df6e:	b2d1      	uxtb	r1, r2
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	4413      	add	r3, r2
 800df74:	460a      	mov	r2, r1
 800df76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800df7a:	e763      	b.n	800de44 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800df7c:	bf00      	nop
 800df7e:	e000      	b.n	800df82 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800df80:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df88:	2be5      	cmp	r3, #229	; 0xe5
 800df8a:	d103      	bne.n	800df94 <create_name+0x2e0>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2205      	movs	r2, #5
 800df90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2b08      	cmp	r3, #8
 800df98:	d104      	bne.n	800dfa4 <create_name+0x2f0>
 800df9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dfa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfa8:	f003 030c 	and.w	r3, r3, #12
 800dfac:	2b0c      	cmp	r3, #12
 800dfae:	d005      	beq.n	800dfbc <create_name+0x308>
 800dfb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfb4:	f003 0303 	and.w	r3, r3, #3
 800dfb8:	2b03      	cmp	r3, #3
 800dfba:	d105      	bne.n	800dfc8 <create_name+0x314>
 800dfbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfc0:	f043 0302 	orr.w	r3, r3, #2
 800dfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfcc:	f003 0302 	and.w	r3, r3, #2
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d117      	bne.n	800e004 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dfd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfd8:	f003 0303 	and.w	r3, r3, #3
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d105      	bne.n	800dfec <create_name+0x338>
 800dfe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfe4:	f043 0310 	orr.w	r3, r3, #16
 800dfe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dfec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dff0:	f003 030c 	and.w	r3, r3, #12
 800dff4:	2b04      	cmp	r3, #4
 800dff6:	d105      	bne.n	800e004 <create_name+0x350>
 800dff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dffc:	f043 0308 	orr.w	r3, r3, #8
 800e000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e00a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e00e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e010:	4618      	mov	r0, r3
 800e012:	3728      	adds	r7, #40	; 0x28
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	080191ac 	.word	0x080191ac
 800e01c:	08019438 	.word	0x08019438
 800e020:	080191b8 	.word	0x080191b8

0800e024 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e038:	e002      	b.n	800e040 <follow_path+0x1c>
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	3301      	adds	r3, #1
 800e03e:	603b      	str	r3, [r7, #0]
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	2b2f      	cmp	r3, #47	; 0x2f
 800e046:	d0f8      	beq.n	800e03a <follow_path+0x16>
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	2b5c      	cmp	r3, #92	; 0x5c
 800e04e:	d0f4      	beq.n	800e03a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2200      	movs	r2, #0
 800e054:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	2b1f      	cmp	r3, #31
 800e05c:	d80a      	bhi.n	800e074 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2280      	movs	r2, #128	; 0x80
 800e062:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e066:	2100      	movs	r1, #0
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7fe fe47 	bl	800ccfc <dir_sdi>
 800e06e:	4603      	mov	r3, r0
 800e070:	75fb      	strb	r3, [r7, #23]
 800e072:	e043      	b.n	800e0fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e074:	463b      	mov	r3, r7
 800e076:	4619      	mov	r1, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7ff fe1b 	bl	800dcb4 <create_name>
 800e07e:	4603      	mov	r3, r0
 800e080:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e082:	7dfb      	ldrb	r3, [r7, #23]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d134      	bne.n	800e0f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7ff fa90 	bl	800d5ae <dir_find>
 800e08e:	4603      	mov	r3, r0
 800e090:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e098:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00a      	beq.n	800e0b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	2b04      	cmp	r3, #4
 800e0a4:	d127      	bne.n	800e0f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e0a6:	7afb      	ldrb	r3, [r7, #11]
 800e0a8:	f003 0304 	and.w	r3, r3, #4
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d122      	bne.n	800e0f6 <follow_path+0xd2>
 800e0b0:	2305      	movs	r3, #5
 800e0b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e0b4:	e01f      	b.n	800e0f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0b6:	7afb      	ldrb	r3, [r7, #11]
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d11c      	bne.n	800e0fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	799b      	ldrb	r3, [r3, #6]
 800e0c4:	f003 0310 	and.w	r3, r3, #16
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d102      	bne.n	800e0d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e0cc:	2305      	movs	r3, #5
 800e0ce:	75fb      	strb	r3, [r7, #23]
 800e0d0:	e014      	b.n	800e0fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	695b      	ldr	r3, [r3, #20]
 800e0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0e0:	4413      	add	r3, r2
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7fe ff90 	bl	800d00a <ld_clust>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e0f0:	e7c0      	b.n	800e074 <follow_path+0x50>
			if (res != FR_OK) break;
 800e0f2:	bf00      	nop
 800e0f4:	e002      	b.n	800e0fc <follow_path+0xd8>
				break;
 800e0f6:	bf00      	nop
 800e0f8:	e000      	b.n	800e0fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0fa:	bf00      	nop
			}
		}
	}

	return res;
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e106:	b480      	push	{r7}
 800e108:	b087      	sub	sp, #28
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e10e:	f04f 33ff 	mov.w	r3, #4294967295
 800e112:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d031      	beq.n	800e180 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	617b      	str	r3, [r7, #20]
 800e122:	e002      	b.n	800e12a <get_ldnumber+0x24>
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	3301      	adds	r3, #1
 800e128:	617b      	str	r3, [r7, #20]
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	2b1f      	cmp	r3, #31
 800e130:	d903      	bls.n	800e13a <get_ldnumber+0x34>
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	2b3a      	cmp	r3, #58	; 0x3a
 800e138:	d1f4      	bne.n	800e124 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	2b3a      	cmp	r3, #58	; 0x3a
 800e140:	d11c      	bne.n	800e17c <get_ldnumber+0x76>
			tp = *path;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	60fa      	str	r2, [r7, #12]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	3b30      	subs	r3, #48	; 0x30
 800e152:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	2b09      	cmp	r3, #9
 800e158:	d80e      	bhi.n	800e178 <get_ldnumber+0x72>
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d10a      	bne.n	800e178 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d107      	bne.n	800e178 <get_ldnumber+0x72>
					vol = (int)i;
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	3301      	adds	r3, #1
 800e170:	617b      	str	r3, [r7, #20]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	697a      	ldr	r2, [r7, #20]
 800e176:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	e002      	b.n	800e182 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e17c:	2300      	movs	r3, #0
 800e17e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e180:	693b      	ldr	r3, [r7, #16]
}
 800e182:	4618      	mov	r0, r3
 800e184:	371c      	adds	r7, #28
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
	...

0800e190 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	70da      	strb	r2, [r3, #3]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e1a8:	6839      	ldr	r1, [r7, #0]
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f7fe fa2e 	bl	800c60c <move_window>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <check_fs+0x2a>
 800e1b6:	2304      	movs	r3, #4
 800e1b8:	e038      	b.n	800e22c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3334      	adds	r3, #52	; 0x34
 800e1be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fd ff72 	bl	800c0ac <ld_word>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d001      	beq.n	800e1d8 <check_fs+0x48>
 800e1d4:	2303      	movs	r3, #3
 800e1d6:	e029      	b.n	800e22c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1de:	2be9      	cmp	r3, #233	; 0xe9
 800e1e0:	d009      	beq.n	800e1f6 <check_fs+0x66>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1e8:	2beb      	cmp	r3, #235	; 0xeb
 800e1ea:	d11e      	bne.n	800e22a <check_fs+0x9a>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e1f2:	2b90      	cmp	r3, #144	; 0x90
 800e1f4:	d119      	bne.n	800e22a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3334      	adds	r3, #52	; 0x34
 800e1fa:	3336      	adds	r3, #54	; 0x36
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fd ff6d 	bl	800c0dc <ld_dword>
 800e202:	4603      	mov	r3, r0
 800e204:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e208:	4a0a      	ldr	r2, [pc, #40]	; (800e234 <check_fs+0xa4>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d101      	bne.n	800e212 <check_fs+0x82>
 800e20e:	2300      	movs	r3, #0
 800e210:	e00c      	b.n	800e22c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	3334      	adds	r3, #52	; 0x34
 800e216:	3352      	adds	r3, #82	; 0x52
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fd ff5f 	bl	800c0dc <ld_dword>
 800e21e:	4602      	mov	r2, r0
 800e220:	4b05      	ldr	r3, [pc, #20]	; (800e238 <check_fs+0xa8>)
 800e222:	429a      	cmp	r2, r3
 800e224:	d101      	bne.n	800e22a <check_fs+0x9a>
 800e226:	2300      	movs	r3, #0
 800e228:	e000      	b.n	800e22c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e22a:	2302      	movs	r3, #2
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	00544146 	.word	0x00544146
 800e238:	33544146 	.word	0x33544146

0800e23c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b096      	sub	sp, #88	; 0x58
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	4613      	mov	r3, r2
 800e248:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	2200      	movs	r2, #0
 800e24e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f7ff ff58 	bl	800e106 <get_ldnumber>
 800e256:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	da01      	bge.n	800e262 <find_volume+0x26>
 800e25e:	230b      	movs	r3, #11
 800e260:	e22e      	b.n	800e6c0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e262:	4aa8      	ldr	r2, [pc, #672]	; (800e504 <find_volume+0x2c8>)
 800e264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e26a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d101      	bne.n	800e276 <find_volume+0x3a>
 800e272:	230c      	movs	r3, #12
 800e274:	e224      	b.n	800e6c0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e27a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e27c:	79fb      	ldrb	r3, [r7, #7]
 800e27e:	f023 0301 	bic.w	r3, r3, #1
 800e282:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d01a      	beq.n	800e2c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	785b      	ldrb	r3, [r3, #1]
 800e290:	4618      	mov	r0, r3
 800e292:	f7fd fe65 	bl	800bf60 <disk_status>
 800e296:	4603      	mov	r3, r0
 800e298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e29c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10c      	bne.n	800e2c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e2a8:	79fb      	ldrb	r3, [r7, #7]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d007      	beq.n	800e2be <find_volume+0x82>
 800e2ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2b2:	f003 0304 	and.w	r3, r3, #4
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e2ba:	230a      	movs	r3, #10
 800e2bc:	e200      	b.n	800e6c0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e1fe      	b.n	800e6c0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d2:	785b      	ldrb	r3, [r3, #1]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fd fe5d 	bl	800bf94 <disk_initialize>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e2e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2e4:	f003 0301 	and.w	r3, r3, #1
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d001      	beq.n	800e2f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	e1e7      	b.n	800e6c0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e2f0:	79fb      	ldrb	r3, [r7, #7]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d007      	beq.n	800e306 <find_volume+0xca>
 800e2f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2fa:	f003 0304 	and.w	r3, r3, #4
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e302:	230a      	movs	r3, #10
 800e304:	e1dc      	b.n	800e6c0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e306:	2300      	movs	r3, #0
 800e308:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e30a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e30c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e30e:	f7ff ff3f 	bl	800e190 <check_fs>
 800e312:	4603      	mov	r3, r0
 800e314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	d14b      	bne.n	800e3b8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e320:	2300      	movs	r3, #0
 800e322:	643b      	str	r3, [r7, #64]	; 0x40
 800e324:	e01f      	b.n	800e366 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e328:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e32e:	011b      	lsls	r3, r3, #4
 800e330:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e334:	4413      	add	r3, r2
 800e336:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33a:	3304      	adds	r3, #4
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d006      	beq.n	800e350 <find_volume+0x114>
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	3308      	adds	r3, #8
 800e346:	4618      	mov	r0, r3
 800e348:	f7fd fec8 	bl	800c0dc <ld_dword>
 800e34c:	4602      	mov	r2, r0
 800e34e:	e000      	b.n	800e352 <find_volume+0x116>
 800e350:	2200      	movs	r2, #0
 800e352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e35a:	440b      	add	r3, r1
 800e35c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e362:	3301      	adds	r3, #1
 800e364:	643b      	str	r3, [r7, #64]	; 0x40
 800e366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e368:	2b03      	cmp	r3, #3
 800e36a:	d9dc      	bls.n	800e326 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e36c:	2300      	movs	r3, #0
 800e36e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <find_volume+0x140>
 800e376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e378:	3b01      	subs	r3, #1
 800e37a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e384:	4413      	add	r3, r2
 800e386:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e38a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d005      	beq.n	800e39e <find_volume+0x162>
 800e392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e396:	f7ff fefb 	bl	800e190 <check_fs>
 800e39a:	4603      	mov	r3, r0
 800e39c:	e000      	b.n	800e3a0 <find_volume+0x164>
 800e39e:	2303      	movs	r3, #3
 800e3a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d905      	bls.n	800e3b8 <find_volume+0x17c>
 800e3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	643b      	str	r3, [r7, #64]	; 0x40
 800e3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b4:	2b03      	cmp	r3, #3
 800e3b6:	d9e1      	bls.n	800e37c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e3b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3bc:	2b04      	cmp	r3, #4
 800e3be:	d101      	bne.n	800e3c4 <find_volume+0x188>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e17d      	b.n	800e6c0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e3c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d901      	bls.n	800e3d0 <find_volume+0x194>
 800e3cc:	230d      	movs	r3, #13
 800e3ce:	e177      	b.n	800e6c0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	3334      	adds	r3, #52	; 0x34
 800e3d4:	330b      	adds	r3, #11
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fd fe68 	bl	800c0ac <ld_word>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3e2:	d001      	beq.n	800e3e8 <find_volume+0x1ac>
 800e3e4:	230d      	movs	r3, #13
 800e3e6:	e16b      	b.n	800e6c0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ea:	3334      	adds	r3, #52	; 0x34
 800e3ec:	3316      	adds	r3, #22
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fd fe5c 	bl	800c0ac <ld_word>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d106      	bne.n	800e40c <find_volume+0x1d0>
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e400:	3334      	adds	r3, #52	; 0x34
 800e402:	3324      	adds	r3, #36	; 0x24
 800e404:	4618      	mov	r0, r3
 800e406:	f7fd fe69 	bl	800c0dc <ld_dword>
 800e40a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e410:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e414:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	789b      	ldrb	r3, [r3, #2]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d005      	beq.n	800e430 <find_volume+0x1f4>
 800e424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e426:	789b      	ldrb	r3, [r3, #2]
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d001      	beq.n	800e430 <find_volume+0x1f4>
 800e42c:	230d      	movs	r3, #13
 800e42e:	e147      	b.n	800e6c0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e432:	789b      	ldrb	r3, [r3, #2]
 800e434:	461a      	mov	r2, r3
 800e436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e438:	fb02 f303 	mul.w	r3, r2, r3
 800e43c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e444:	b29a      	uxth	r2, r3
 800e446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e448:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44c:	895b      	ldrh	r3, [r3, #10]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d008      	beq.n	800e464 <find_volume+0x228>
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	895b      	ldrh	r3, [r3, #10]
 800e456:	461a      	mov	r2, r3
 800e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45a:	895b      	ldrh	r3, [r3, #10]
 800e45c:	3b01      	subs	r3, #1
 800e45e:	4013      	ands	r3, r2
 800e460:	2b00      	cmp	r3, #0
 800e462:	d001      	beq.n	800e468 <find_volume+0x22c>
 800e464:	230d      	movs	r3, #13
 800e466:	e12b      	b.n	800e6c0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46a:	3334      	adds	r3, #52	; 0x34
 800e46c:	3311      	adds	r3, #17
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fd fe1c 	bl	800c0ac <ld_word>
 800e474:	4603      	mov	r3, r0
 800e476:	461a      	mov	r2, r3
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	891b      	ldrh	r3, [r3, #8]
 800e480:	f003 030f 	and.w	r3, r3, #15
 800e484:	b29b      	uxth	r3, r3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <find_volume+0x252>
 800e48a:	230d      	movs	r3, #13
 800e48c:	e118      	b.n	800e6c0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e490:	3334      	adds	r3, #52	; 0x34
 800e492:	3313      	adds	r3, #19
 800e494:	4618      	mov	r0, r3
 800e496:	f7fd fe09 	bl	800c0ac <ld_word>
 800e49a:	4603      	mov	r3, r0
 800e49c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e49e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d106      	bne.n	800e4b2 <find_volume+0x276>
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a6:	3334      	adds	r3, #52	; 0x34
 800e4a8:	3320      	adds	r3, #32
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fd fe16 	bl	800c0dc <ld_dword>
 800e4b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	3334      	adds	r3, #52	; 0x34
 800e4b6:	330e      	adds	r3, #14
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fd fdf7 	bl	800c0ac <ld_word>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e4c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <find_volume+0x290>
 800e4c8:	230d      	movs	r3, #13
 800e4ca:	e0f9      	b.n	800e6c0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d0:	4413      	add	r3, r2
 800e4d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4d4:	8912      	ldrh	r2, [r2, #8]
 800e4d6:	0912      	lsrs	r2, r2, #4
 800e4d8:	b292      	uxth	r2, r2
 800e4da:	4413      	add	r3, r2
 800e4dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d201      	bcs.n	800e4ea <find_volume+0x2ae>
 800e4e6:	230d      	movs	r3, #13
 800e4e8:	e0ea      	b.n	800e6c0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e4ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4f2:	8952      	ldrh	r2, [r2, #10]
 800e4f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d103      	bne.n	800e508 <find_volume+0x2cc>
 800e500:	230d      	movs	r3, #13
 800e502:	e0dd      	b.n	800e6c0 <find_volume+0x484>
 800e504:	20000534 	.word	0x20000534
		fmt = FS_FAT32;
 800e508:	2303      	movs	r3, #3
 800e50a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e514:	4293      	cmp	r3, r2
 800e516:	d802      	bhi.n	800e51e <find_volume+0x2e2>
 800e518:	2302      	movs	r3, #2
 800e51a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e520:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e524:	4293      	cmp	r3, r2
 800e526:	d802      	bhi.n	800e52e <find_volume+0x2f2>
 800e528:	2301      	movs	r3, #1
 800e52a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	1c9a      	adds	r2, r3, #2
 800e532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e534:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e538:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e53a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e53c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e53e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e540:	441a      	add	r2, r3
 800e542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e544:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e546:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	441a      	add	r2, r3
 800e54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e554:	2b03      	cmp	r3, #3
 800e556:	d11e      	bne.n	800e596 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55a:	3334      	adds	r3, #52	; 0x34
 800e55c:	332a      	adds	r3, #42	; 0x2a
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fd fda4 	bl	800c0ac <ld_word>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d001      	beq.n	800e56e <find_volume+0x332>
 800e56a:	230d      	movs	r3, #13
 800e56c:	e0a8      	b.n	800e6c0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e570:	891b      	ldrh	r3, [r3, #8]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <find_volume+0x33e>
 800e576:	230d      	movs	r3, #13
 800e578:	e0a2      	b.n	800e6c0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57c:	3334      	adds	r3, #52	; 0x34
 800e57e:	332c      	adds	r3, #44	; 0x2c
 800e580:	4618      	mov	r0, r3
 800e582:	f7fd fdab 	bl	800c0dc <ld_dword>
 800e586:	4602      	mov	r2, r0
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	647b      	str	r3, [r7, #68]	; 0x44
 800e594:	e01f      	b.n	800e5d6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	891b      	ldrh	r3, [r3, #8]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d101      	bne.n	800e5a2 <find_volume+0x366>
 800e59e:	230d      	movs	r3, #13
 800e5a0:	e08e      	b.n	800e6c0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5a8:	441a      	add	r2, r3
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e5ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5b2:	2b02      	cmp	r3, #2
 800e5b4:	d103      	bne.n	800e5be <find_volume+0x382>
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b8:	699b      	ldr	r3, [r3, #24]
 800e5ba:	005b      	lsls	r3, r3, #1
 800e5bc:	e00a      	b.n	800e5d4 <find_volume+0x398>
 800e5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c0:	699a      	ldr	r2, [r3, #24]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	005b      	lsls	r3, r3, #1
 800e5c6:	4413      	add	r3, r2
 800e5c8:	085a      	lsrs	r2, r3, #1
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5cc:	699b      	ldr	r3, [r3, #24]
 800e5ce:	f003 0301 	and.w	r3, r3, #1
 800e5d2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e5d4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	69da      	ldr	r2, [r3, #28]
 800e5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e5e0:	0a5b      	lsrs	r3, r3, #9
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d201      	bcs.n	800e5ea <find_volume+0x3ae>
 800e5e6:	230d      	movs	r3, #13
 800e5e8:	e06a      	b.n	800e6c0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f0:	615a      	str	r2, [r3, #20]
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	695a      	ldr	r2, [r3, #20]
 800e5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fc:	2280      	movs	r2, #128	; 0x80
 800e5fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e604:	2b03      	cmp	r3, #3
 800e606:	d149      	bne.n	800e69c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60a:	3334      	adds	r3, #52	; 0x34
 800e60c:	3330      	adds	r3, #48	; 0x30
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fd fd4c 	bl	800c0ac <ld_word>
 800e614:	4603      	mov	r3, r0
 800e616:	2b01      	cmp	r3, #1
 800e618:	d140      	bne.n	800e69c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e61a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e61c:	3301      	adds	r3, #1
 800e61e:	4619      	mov	r1, r3
 800e620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e622:	f7fd fff3 	bl	800c60c <move_window>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d137      	bne.n	800e69c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62e:	2200      	movs	r2, #0
 800e630:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e634:	3334      	adds	r3, #52	; 0x34
 800e636:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fd fd36 	bl	800c0ac <ld_word>
 800e640:	4603      	mov	r3, r0
 800e642:	461a      	mov	r2, r3
 800e644:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e648:	429a      	cmp	r2, r3
 800e64a:	d127      	bne.n	800e69c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64e:	3334      	adds	r3, #52	; 0x34
 800e650:	4618      	mov	r0, r3
 800e652:	f7fd fd43 	bl	800c0dc <ld_dword>
 800e656:	4602      	mov	r2, r0
 800e658:	4b1b      	ldr	r3, [pc, #108]	; (800e6c8 <find_volume+0x48c>)
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d11e      	bne.n	800e69c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e660:	3334      	adds	r3, #52	; 0x34
 800e662:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e666:	4618      	mov	r0, r3
 800e668:	f7fd fd38 	bl	800c0dc <ld_dword>
 800e66c:	4602      	mov	r2, r0
 800e66e:	4b17      	ldr	r3, [pc, #92]	; (800e6cc <find_volume+0x490>)
 800e670:	429a      	cmp	r2, r3
 800e672:	d113      	bne.n	800e69c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e676:	3334      	adds	r3, #52	; 0x34
 800e678:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fd fd2d 	bl	800c0dc <ld_dword>
 800e682:	4602      	mov	r2, r0
 800e684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e686:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68a:	3334      	adds	r3, #52	; 0x34
 800e68c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e690:	4618      	mov	r0, r3
 800e692:	f7fd fd23 	bl	800c0dc <ld_dword>
 800e696:	4602      	mov	r2, r0
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e6a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e6a4:	4b0a      	ldr	r3, [pc, #40]	; (800e6d0 <find_volume+0x494>)
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	4b08      	ldr	r3, [pc, #32]	; (800e6d0 <find_volume+0x494>)
 800e6ae:	801a      	strh	r2, [r3, #0]
 800e6b0:	4b07      	ldr	r3, [pc, #28]	; (800e6d0 <find_volume+0x494>)
 800e6b2:	881a      	ldrh	r2, [r3, #0]
 800e6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e6b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e6ba:	f7fd ff3f 	bl	800c53c <clear_lock>
#endif
	return FR_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3758      	adds	r7, #88	; 0x58
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	41615252 	.word	0x41615252
 800e6cc:	61417272 	.word	0x61417272
 800e6d0:	20000538 	.word	0x20000538

0800e6d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e6de:	2309      	movs	r3, #9
 800e6e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d01c      	beq.n	800e722 <validate+0x4e>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d018      	beq.n	800e722 <validate+0x4e>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d013      	beq.n	800e722 <validate+0x4e>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	889a      	ldrh	r2, [r3, #4]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	88db      	ldrh	r3, [r3, #6]
 800e704:	429a      	cmp	r2, r3
 800e706:	d10c      	bne.n	800e722 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	785b      	ldrb	r3, [r3, #1]
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fd fc26 	bl	800bf60 <disk_status>
 800e714:	4603      	mov	r3, r0
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d101      	bne.n	800e722 <validate+0x4e>
			res = FR_OK;
 800e71e:	2300      	movs	r3, #0
 800e720:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e722:	7bfb      	ldrb	r3, [r7, #15]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d102      	bne.n	800e72e <validate+0x5a>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	e000      	b.n	800e730 <validate+0x5c>
 800e72e:	2300      	movs	r3, #0
 800e730:	683a      	ldr	r2, [r7, #0]
 800e732:	6013      	str	r3, [r2, #0]
	return res;
 800e734:	7bfb      	ldrb	r3, [r7, #15]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
	...

0800e740 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b088      	sub	sp, #32
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	4613      	mov	r3, r2
 800e74c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e752:	f107 0310 	add.w	r3, r7, #16
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff fcd5 	bl	800e106 <get_ldnumber>
 800e75c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	2b00      	cmp	r3, #0
 800e762:	da01      	bge.n	800e768 <f_mount+0x28>
 800e764:	230b      	movs	r3, #11
 800e766:	e02b      	b.n	800e7c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e768:	4a17      	ldr	r2, [pc, #92]	; (800e7c8 <f_mount+0x88>)
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e770:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d005      	beq.n	800e784 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e778:	69b8      	ldr	r0, [r7, #24]
 800e77a:	f7fd fedf 	bl	800c53c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	2200      	movs	r2, #0
 800e782:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d002      	beq.n	800e790 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	490d      	ldr	r1, [pc, #52]	; (800e7c8 <f_mount+0x88>)
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <f_mount+0x66>
 800e7a0:	79fb      	ldrb	r3, [r7, #7]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d001      	beq.n	800e7aa <f_mount+0x6a>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	e00a      	b.n	800e7c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e7aa:	f107 010c 	add.w	r1, r7, #12
 800e7ae:	f107 0308 	add.w	r3, r7, #8
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7ff fd41 	bl	800e23c <find_volume>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3720      	adds	r7, #32
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	20000534 	.word	0x20000534

0800e7cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b09c      	sub	sp, #112	; 0x70
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d101      	bne.n	800e7e4 <f_open+0x18>
 800e7e0:	2309      	movs	r3, #9
 800e7e2:	e1bd      	b.n	800eb60 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e7e4:	79fb      	ldrb	r3, [r7, #7]
 800e7e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e7ec:	79fa      	ldrb	r2, [r7, #7]
 800e7ee:	f107 0114 	add.w	r1, r7, #20
 800e7f2:	f107 0308 	add.w	r3, r7, #8
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7ff fd20 	bl	800e23c <find_volume>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800e802:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e806:	2b00      	cmp	r3, #0
 800e808:	f040 81a1 	bne.w	800eb4e <f_open+0x382>
		dj.obj.fs = fs;
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 800e810:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e814:	f001 f893 	bl	800f93e <ff_memalloc>
 800e818:	6638      	str	r0, [r7, #96]	; 0x60
 800e81a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <f_open+0x58>
 800e820:	2311      	movs	r3, #17
 800e822:	e19d      	b.n	800eb60 <f_open+0x394>
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e828:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	f107 0318 	add.w	r3, r7, #24
 800e830:	4611      	mov	r1, r2
 800e832:	4618      	mov	r0, r3
 800e834:	f7ff fbf6 	bl	800e024 <follow_path>
 800e838:	4603      	mov	r3, r0
 800e83a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e83e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e842:	2b00      	cmp	r3, #0
 800e844:	d11a      	bne.n	800e87c <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e846:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e84a:	b25b      	sxtb	r3, r3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	da03      	bge.n	800e858 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800e850:	2306      	movs	r3, #6
 800e852:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e856:	e011      	b.n	800e87c <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e858:	79fb      	ldrb	r3, [r7, #7]
 800e85a:	f023 0301 	bic.w	r3, r3, #1
 800e85e:	2b00      	cmp	r3, #0
 800e860:	bf14      	ite	ne
 800e862:	2301      	movne	r3, #1
 800e864:	2300      	moveq	r3, #0
 800e866:	b2db      	uxtb	r3, r3
 800e868:	461a      	mov	r2, r3
 800e86a:	f107 0318 	add.w	r3, r7, #24
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f7fd fd1b 	bl	800c2ac <chk_lock>
 800e876:	4603      	mov	r3, r0
 800e878:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e87c:	79fb      	ldrb	r3, [r7, #7]
 800e87e:	f003 031c 	and.w	r3, r3, #28
 800e882:	2b00      	cmp	r3, #0
 800e884:	d07f      	beq.n	800e986 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800e886:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d017      	beq.n	800e8be <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e88e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e892:	2b04      	cmp	r3, #4
 800e894:	d10e      	bne.n	800e8b4 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e896:	f7fd fd65 	bl	800c364 <enq_lock>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d006      	beq.n	800e8ae <f_open+0xe2>
 800e8a0:	f107 0318 	add.w	r3, r7, #24
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe ff43 	bl	800d730 <dir_register>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	e000      	b.n	800e8b0 <f_open+0xe4>
 800e8ae:	2312      	movs	r3, #18
 800e8b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e8b4:	79fb      	ldrb	r3, [r7, #7]
 800e8b6:	f043 0308 	orr.w	r3, r3, #8
 800e8ba:	71fb      	strb	r3, [r7, #7]
 800e8bc:	e010      	b.n	800e8e0 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e8be:	7fbb      	ldrb	r3, [r7, #30]
 800e8c0:	f003 0311 	and.w	r3, r3, #17
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d003      	beq.n	800e8d0 <f_open+0x104>
					res = FR_DENIED;
 800e8c8:	2307      	movs	r3, #7
 800e8ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e8ce:	e007      	b.n	800e8e0 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e8d0:	79fb      	ldrb	r3, [r7, #7]
 800e8d2:	f003 0304 	and.w	r3, r3, #4
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d002      	beq.n	800e8e0 <f_open+0x114>
 800e8da:	2308      	movs	r3, #8
 800e8dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e8e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d168      	bne.n	800e9ba <f_open+0x1ee>
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	f003 0308 	and.w	r3, r3, #8
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d063      	beq.n	800e9ba <f_open+0x1ee>
				dw = GET_FATTIME();
 800e8f2:	f7fd fbd3 	bl	800c09c <get_fattime>
 800e8f6:	65f8      	str	r0, [r7, #92]	; 0x5c
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fa:	330e      	adds	r3, #14
 800e8fc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fd fc2a 	bl	800c158 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e906:	3316      	adds	r3, #22
 800e908:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fd fc24 	bl	800c158 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e912:	330b      	adds	r3, #11
 800e914:	2220      	movs	r2, #32
 800e916:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e91c:	4611      	mov	r1, r2
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe fb73 	bl	800d00a <ld_clust>
 800e924:	65b8      	str	r0, [r7, #88]	; 0x58
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e92a:	2200      	movs	r2, #0
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fe fb8b 	bl	800d048 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e934:	331c      	adds	r3, #28
 800e936:	2100      	movs	r1, #0
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fd fc0d 	bl	800c158 <st_dword>
					fs->wflag = 1;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	2201      	movs	r2, #1
 800e942:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e946:	2b00      	cmp	r3, #0
 800e948:	d037      	beq.n	800e9ba <f_open+0x1ee>
						dw = fs->winsect;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e94e:	65fb      	str	r3, [r7, #92]	; 0x5c
						res = remove_chain(&dj.obj, cl, 0);
 800e950:	f107 0318 	add.w	r3, r7, #24
 800e954:	2200      	movs	r2, #0
 800e956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fe f89e 	bl	800ca9a <remove_chain>
 800e95e:	4603      	mov	r3, r0
 800e960:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800e964:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d126      	bne.n	800e9ba <f_open+0x1ee>
							res = move_window(fs, dw);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e970:	4618      	mov	r0, r3
 800e972:	f7fd fe4b 	bl	800c60c <move_window>
 800e976:	4603      	mov	r3, r0
 800e978:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e980:	3a01      	subs	r2, #1
 800e982:	611a      	str	r2, [r3, #16]
 800e984:	e019      	b.n	800e9ba <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e986:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d115      	bne.n	800e9ba <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e98e:	7fbb      	ldrb	r3, [r7, #30]
 800e990:	f003 0310 	and.w	r3, r3, #16
 800e994:	2b00      	cmp	r3, #0
 800e996:	d003      	beq.n	800e9a0 <f_open+0x1d4>
					res = FR_NO_FILE;
 800e998:	2304      	movs	r3, #4
 800e99a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e99e:	e00c      	b.n	800e9ba <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e9a0:	79fb      	ldrb	r3, [r7, #7]
 800e9a2:	f003 0302 	and.w	r3, r3, #2
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d007      	beq.n	800e9ba <f_open+0x1ee>
 800e9aa:	7fbb      	ldrb	r3, [r7, #30]
 800e9ac:	f003 0301 	and.w	r3, r3, #1
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <f_open+0x1ee>
						res = FR_DENIED;
 800e9b4:	2307      	movs	r3, #7
 800e9b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e9ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d128      	bne.n	800ea14 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e9c2:	79fb      	ldrb	r3, [r7, #7]
 800e9c4:	f003 0308 	and.w	r3, r3, #8
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d003      	beq.n	800e9d4 <f_open+0x208>
				mode |= FA_MODIFIED;
 800e9cc:	79fb      	ldrb	r3, [r7, #7]
 800e9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9d2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e9dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e9e2:	79fb      	ldrb	r3, [r7, #7]
 800e9e4:	f023 0301 	bic.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	bf14      	ite	ne
 800e9ec:	2301      	movne	r3, #1
 800e9ee:	2300      	moveq	r3, #0
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	f107 0318 	add.w	r3, r7, #24
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fd fcd4 	bl	800c3a8 <inc_lock>
 800ea00:	4602      	mov	r2, r0
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	691b      	ldr	r3, [r3, #16]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d102      	bne.n	800ea14 <f_open+0x248>
 800ea0e:	2302      	movs	r3, #2
 800ea10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ea14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f040 8095 	bne.w	800eb48 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea22:	4611      	mov	r1, r2
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fe faf0 	bl	800d00a <ld_clust>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ea30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea32:	331c      	adds	r3, #28
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fd fb51 	bl	800c0dc <ld_dword>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ea46:	697a      	ldr	r2, [r7, #20]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	88da      	ldrh	r2, [r3, #6]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	79fa      	ldrb	r2, [r7, #7]
 800ea58:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2200      	movs	r2, #0
 800ea64:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	3330      	adds	r3, #48	; 0x30
 800ea70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea74:	2100      	movs	r1, #0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fd fbbb 	bl	800c1f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ea7c:	79fb      	ldrb	r3, [r7, #7]
 800ea7e:	f003 0320 	and.w	r3, r3, #32
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d060      	beq.n	800eb48 <f_open+0x37c>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d05c      	beq.n	800eb48 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	68da      	ldr	r2, [r3, #12]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	895b      	ldrh	r3, [r3, #10]
 800ea9a:	025b      	lsls	r3, r3, #9
 800ea9c:	657b      	str	r3, [r7, #84]	; 0x54
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	66bb      	str	r3, [r7, #104]	; 0x68
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	667b      	str	r3, [r7, #100]	; 0x64
 800eaaa:	e016      	b.n	800eada <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fd fe66 	bl	800c782 <get_fat>
 800eab6:	66b8      	str	r0, [r7, #104]	; 0x68
					if (clst <= 1) res = FR_INT_ERR;
 800eab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d802      	bhi.n	800eac4 <f_open+0x2f8>
 800eabe:	2302      	movs	r3, #2
 800eac0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaca:	d102      	bne.n	800ead2 <f_open+0x306>
 800eacc:	2301      	movs	r3, #1
 800eace:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ead2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ead4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	667b      	str	r3, [r7, #100]	; 0x64
 800eada:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d103      	bne.n	800eaea <f_open+0x31e>
 800eae2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d8e0      	bhi.n	800eaac <f_open+0x2e0>
				}
				fp->clust = clst;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eaee:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eaf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d127      	bne.n	800eb48 <f_open+0x37c>
 800eaf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d022      	beq.n	800eb48 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fd fe1c 	bl	800c744 <clust2sect>
 800eb0c:	6538      	str	r0, [r7, #80]	; 0x50
 800eb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d103      	bne.n	800eb1c <f_open+0x350>
						res = FR_INT_ERR;
 800eb14:	2302      	movs	r3, #2
 800eb16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800eb1a:	e015      	b.n	800eb48 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eb1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb1e:	0a5a      	lsrs	r2, r3, #9
 800eb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb22:	441a      	add	r2, r3
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	7858      	ldrb	r0, [r3, #1]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6a1a      	ldr	r2, [r3, #32]
 800eb36:	2301      	movs	r3, #1
 800eb38:	f7fd fa52 	bl	800bfe0 <disk_read>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d002      	beq.n	800eb48 <f_open+0x37c>
 800eb42:	2301      	movs	r3, #1
 800eb44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800eb48:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800eb4a:	f000 ff04 	bl	800f956 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eb4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <f_open+0x390>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3770      	adds	r7, #112	; 0x70
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08e      	sub	sp, #56	; 0x38
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
 800eb74:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f107 0214 	add.w	r2, r7, #20
 800eb86:	4611      	mov	r1, r2
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7ff fda3 	bl	800e6d4 <validate>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d107      	bne.n	800ebac <f_read+0x44>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	7d5b      	ldrb	r3, [r3, #21]
 800eba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d002      	beq.n	800ebb2 <f_read+0x4a>
 800ebac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebb0:	e115      	b.n	800edde <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	7d1b      	ldrb	r3, [r3, #20]
 800ebb6:	f003 0301 	and.w	r3, r3, #1
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d101      	bne.n	800ebc2 <f_read+0x5a>
 800ebbe:	2307      	movs	r3, #7
 800ebc0:	e10d      	b.n	800edde <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	68da      	ldr	r2, [r3, #12]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	1ad3      	subs	r3, r2, r3
 800ebcc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	6a3b      	ldr	r3, [r7, #32]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	f240 80fe 	bls.w	800edd4 <f_read+0x26c>
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ebdc:	e0fa      	b.n	800edd4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f040 80c6 	bne.w	800ed78 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	699b      	ldr	r3, [r3, #24]
 800ebf0:	0a5b      	lsrs	r3, r3, #9
 800ebf2:	697a      	ldr	r2, [r7, #20]
 800ebf4:	8952      	ldrh	r2, [r2, #10]
 800ebf6:	3a01      	subs	r2, #1
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d12f      	bne.n	800ec62 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	699b      	ldr	r3, [r3, #24]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d103      	bne.n	800ec12 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ec10:	e013      	b.n	800ec3a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d007      	beq.n	800ec2a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	699b      	ldr	r3, [r3, #24]
 800ec1e:	4619      	mov	r1, r3
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f7fe f837 	bl	800cc94 <clmt_clust>
 800ec26:	6338      	str	r0, [r7, #48]	; 0x30
 800ec28:	e007      	b.n	800ec3a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	69db      	ldr	r3, [r3, #28]
 800ec30:	4619      	mov	r1, r3
 800ec32:	4610      	mov	r0, r2
 800ec34:	f7fd fda5 	bl	800c782 <get_fat>
 800ec38:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d804      	bhi.n	800ec4a <f_read+0xe2>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2202      	movs	r2, #2
 800ec44:	755a      	strb	r2, [r3, #21]
 800ec46:	2302      	movs	r3, #2
 800ec48:	e0c9      	b.n	800edde <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec50:	d104      	bne.n	800ec5c <f_read+0xf4>
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2201      	movs	r2, #1
 800ec56:	755a      	strb	r2, [r3, #21]
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e0c0      	b.n	800edde <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec60:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	69db      	ldr	r3, [r3, #28]
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	f7fd fd6a 	bl	800c744 <clust2sect>
 800ec70:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d104      	bne.n	800ec82 <f_read+0x11a>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	755a      	strb	r2, [r3, #21]
 800ec7e:	2302      	movs	r3, #2
 800ec80:	e0ad      	b.n	800edde <f_read+0x276>
			sect += csect;
 800ec82:	69ba      	ldr	r2, [r7, #24]
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	4413      	add	r3, r2
 800ec88:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	0a5b      	lsrs	r3, r3, #9
 800ec8e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ec90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d039      	beq.n	800ed0a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec96:	69fa      	ldr	r2, [r7, #28]
 800ec98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9a:	4413      	add	r3, r2
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	8952      	ldrh	r2, [r2, #10]
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d905      	bls.n	800ecb0 <f_read+0x148>
					cc = fs->csize - csect;
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	895b      	ldrh	r3, [r3, #10]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	7858      	ldrb	r0, [r3, #1]
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb6:	69ba      	ldr	r2, [r7, #24]
 800ecb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ecba:	f7fd f991 	bl	800bfe0 <disk_read>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d004      	beq.n	800ecce <f_read+0x166>
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	755a      	strb	r2, [r3, #21]
 800ecca:	2301      	movs	r3, #1
 800eccc:	e087      	b.n	800edde <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	7d1b      	ldrb	r3, [r3, #20]
 800ecd2:	b25b      	sxtb	r3, r3
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	da14      	bge.n	800ed02 <f_read+0x19a>
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6a1a      	ldr	r2, [r3, #32]
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d90d      	bls.n	800ed02 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6a1a      	ldr	r2, [r3, #32]
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	1ad3      	subs	r3, r2, r3
 800ecee:	025b      	lsls	r3, r3, #9
 800ecf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecf2:	18d0      	adds	r0, r2, r3
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	3330      	adds	r3, #48	; 0x30
 800ecf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	f7fd fa57 	bl	800c1b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	025b      	lsls	r3, r3, #9
 800ed06:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ed08:	e050      	b.n	800edac <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6a1b      	ldr	r3, [r3, #32]
 800ed0e:	69ba      	ldr	r2, [r7, #24]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d02e      	beq.n	800ed72 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	7d1b      	ldrb	r3, [r3, #20]
 800ed18:	b25b      	sxtb	r3, r3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	da18      	bge.n	800ed50 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	7858      	ldrb	r0, [r3, #1]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6a1a      	ldr	r2, [r3, #32]
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	f7fd f977 	bl	800c020 <disk_write>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d004      	beq.n	800ed42 <f_read+0x1da>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	755a      	strb	r2, [r3, #21]
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e04d      	b.n	800edde <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	7d1b      	ldrb	r3, [r3, #20]
 800ed46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	7858      	ldrb	r0, [r3, #1]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	69ba      	ldr	r2, [r7, #24]
 800ed5e:	f7fd f93f 	bl	800bfe0 <disk_read>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d004      	beq.n	800ed72 <f_read+0x20a>
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	755a      	strb	r2, [r3, #21]
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e035      	b.n	800edde <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	69ba      	ldr	r2, [r7, #24]
 800ed76:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	699b      	ldr	r3, [r3, #24]
 800ed7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ed84:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ed86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d901      	bls.n	800ed92 <f_read+0x22a>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	699b      	ldr	r3, [r3, #24]
 800ed9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eda0:	4413      	add	r3, r2
 800eda2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eda4:	4619      	mov	r1, r3
 800eda6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eda8:	f7fd fa02 	bl	800c1b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800edac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb0:	4413      	add	r3, r2
 800edb2:	627b      	str	r3, [r7, #36]	; 0x24
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	699a      	ldr	r2, [r3, #24]
 800edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edba:	441a      	add	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	619a      	str	r2, [r3, #24]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc6:	441a      	add	r2, r3
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f47f af01 	bne.w	800ebde <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eddc:	2300      	movs	r3, #0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3738      	adds	r7, #56	; 0x38
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b08c      	sub	sp, #48	; 0x30
 800edea:	af00      	add	r7, sp, #0
 800edec:	60f8      	str	r0, [r7, #12]
 800edee:	60b9      	str	r1, [r7, #8]
 800edf0:	607a      	str	r2, [r7, #4]
 800edf2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	2200      	movs	r2, #0
 800edfc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f107 0210 	add.w	r2, r7, #16
 800ee04:	4611      	mov	r1, r2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fc64 	bl	800e6d4 <validate>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ee12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d107      	bne.n	800ee2a <f_write+0x44>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	7d5b      	ldrb	r3, [r3, #21]
 800ee1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ee22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d002      	beq.n	800ee30 <f_write+0x4a>
 800ee2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee2e:	e14b      	b.n	800f0c8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	7d1b      	ldrb	r3, [r3, #20]
 800ee34:	f003 0302 	and.w	r3, r3, #2
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d101      	bne.n	800ee40 <f_write+0x5a>
 800ee3c:	2307      	movs	r3, #7
 800ee3e:	e143      	b.n	800f0c8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	699a      	ldr	r2, [r3, #24]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	441a      	add	r2, r3
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	699b      	ldr	r3, [r3, #24]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	f080 812d 	bcs.w	800f0ac <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	43db      	mvns	r3, r3
 800ee58:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee5a:	e127      	b.n	800f0ac <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f040 80e3 	bne.w	800f030 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	0a5b      	lsrs	r3, r3, #9
 800ee70:	693a      	ldr	r2, [r7, #16]
 800ee72:	8952      	ldrh	r2, [r2, #10]
 800ee74:	3a01      	subs	r2, #1
 800ee76:	4013      	ands	r3, r2
 800ee78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d143      	bne.n	800ef08 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	699b      	ldr	r3, [r3, #24]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d10c      	bne.n	800eea2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d11a      	bne.n	800eeca <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2100      	movs	r1, #0
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fd fe63 	bl	800cb64 <create_chain>
 800ee9e:	62b8      	str	r0, [r7, #40]	; 0x28
 800eea0:	e013      	b.n	800eeca <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d007      	beq.n	800eeba <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f7fd feef 	bl	800cc94 <clmt_clust>
 800eeb6:	62b8      	str	r0, [r7, #40]	; 0x28
 800eeb8:	e007      	b.n	800eeca <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eeba:	68fa      	ldr	r2, [r7, #12]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	69db      	ldr	r3, [r3, #28]
 800eec0:	4619      	mov	r1, r3
 800eec2:	4610      	mov	r0, r2
 800eec4:	f7fd fe4e 	bl	800cb64 <create_chain>
 800eec8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f000 80f2 	beq.w	800f0b6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d104      	bne.n	800eee2 <f_write+0xfc>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2202      	movs	r2, #2
 800eedc:	755a      	strb	r2, [r3, #21]
 800eede:	2302      	movs	r3, #2
 800eee0:	e0f2      	b.n	800f0c8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee8:	d104      	bne.n	800eef4 <f_write+0x10e>
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2201      	movs	r2, #1
 800eeee:	755a      	strb	r2, [r3, #21]
 800eef0:	2301      	movs	r3, #1
 800eef2:	e0e9      	b.n	800f0c8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eef8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d102      	bne.n	800ef08 <f_write+0x122>
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef06:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	7d1b      	ldrb	r3, [r3, #20]
 800ef0c:	b25b      	sxtb	r3, r3
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	da18      	bge.n	800ef44 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	7858      	ldrb	r0, [r3, #1]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6a1a      	ldr	r2, [r3, #32]
 800ef20:	2301      	movs	r3, #1
 800ef22:	f7fd f87d 	bl	800c020 <disk_write>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d004      	beq.n	800ef36 <f_write+0x150>
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	755a      	strb	r2, [r3, #21]
 800ef32:	2301      	movs	r3, #1
 800ef34:	e0c8      	b.n	800f0c8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	7d1b      	ldrb	r3, [r3, #20]
 800ef3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef44:	693a      	ldr	r2, [r7, #16]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	69db      	ldr	r3, [r3, #28]
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	f7fd fbf9 	bl	800c744 <clust2sect>
 800ef52:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d104      	bne.n	800ef64 <f_write+0x17e>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2202      	movs	r2, #2
 800ef5e:	755a      	strb	r2, [r3, #21]
 800ef60:	2302      	movs	r3, #2
 800ef62:	e0b1      	b.n	800f0c8 <f_write+0x2e2>
			sect += csect;
 800ef64:	697a      	ldr	r2, [r7, #20]
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	4413      	add	r3, r2
 800ef6a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	0a5b      	lsrs	r3, r3, #9
 800ef70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ef72:	6a3b      	ldr	r3, [r7, #32]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d03c      	beq.n	800eff2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ef78:	69ba      	ldr	r2, [r7, #24]
 800ef7a:	6a3b      	ldr	r3, [r7, #32]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	693a      	ldr	r2, [r7, #16]
 800ef80:	8952      	ldrh	r2, [r2, #10]
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d905      	bls.n	800ef92 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	895b      	ldrh	r3, [r3, #10]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	7858      	ldrb	r0, [r3, #1]
 800ef96:	6a3b      	ldr	r3, [r7, #32]
 800ef98:	697a      	ldr	r2, [r7, #20]
 800ef9a:	69f9      	ldr	r1, [r7, #28]
 800ef9c:	f7fd f840 	bl	800c020 <disk_write>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d004      	beq.n	800efb0 <f_write+0x1ca>
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2201      	movs	r2, #1
 800efaa:	755a      	strb	r2, [r3, #21]
 800efac:	2301      	movs	r3, #1
 800efae:	e08b      	b.n	800f0c8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6a1a      	ldr	r2, [r3, #32]
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	1ad3      	subs	r3, r2, r3
 800efb8:	6a3a      	ldr	r2, [r7, #32]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d915      	bls.n	800efea <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	6a1a      	ldr	r2, [r3, #32]
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	1ad3      	subs	r3, r2, r3
 800efcc:	025b      	lsls	r3, r3, #9
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	4413      	add	r3, r2
 800efd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efd6:	4619      	mov	r1, r3
 800efd8:	f7fd f8ea 	bl	800c1b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	7d1b      	ldrb	r3, [r3, #20]
 800efe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efe4:	b2da      	uxtb	r2, r3
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800efea:	6a3b      	ldr	r3, [r7, #32]
 800efec:	025b      	lsls	r3, r3, #9
 800efee:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800eff0:	e03f      	b.n	800f072 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6a1b      	ldr	r3, [r3, #32]
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d016      	beq.n	800f02a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	699a      	ldr	r2, [r3, #24]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f004:	429a      	cmp	r2, r3
 800f006:	d210      	bcs.n	800f02a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	7858      	ldrb	r0, [r3, #1]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f012:	2301      	movs	r3, #1
 800f014:	697a      	ldr	r2, [r7, #20]
 800f016:	f7fc ffe3 	bl	800bfe0 <disk_read>
 800f01a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d004      	beq.n	800f02a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2201      	movs	r2, #1
 800f024:	755a      	strb	r2, [r3, #21]
 800f026:	2301      	movs	r3, #1
 800f028:	e04e      	b.n	800f0c8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	697a      	ldr	r2, [r7, #20]
 800f02e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	699b      	ldr	r3, [r3, #24]
 800f034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f038:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f03c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	429a      	cmp	r2, r3
 800f044:	d901      	bls.n	800f04a <f_write+0x264>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f058:	4413      	add	r3, r2
 800f05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f05c:	69f9      	ldr	r1, [r7, #28]
 800f05e:	4618      	mov	r0, r3
 800f060:	f7fd f8a6 	bl	800c1b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	7d1b      	ldrb	r3, [r3, #20]
 800f068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f06c:	b2da      	uxtb	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f072:	69fa      	ldr	r2, [r7, #28]
 800f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f076:	4413      	add	r3, r2
 800f078:	61fb      	str	r3, [r7, #28]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	699a      	ldr	r2, [r3, #24]
 800f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f080:	441a      	add	r2, r3
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	619a      	str	r2, [r3, #24]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	68da      	ldr	r2, [r3, #12]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	699b      	ldr	r3, [r3, #24]
 800f08e:	429a      	cmp	r2, r3
 800f090:	bf38      	it	cc
 800f092:	461a      	movcc	r2, r3
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	60da      	str	r2, [r3, #12]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	441a      	add	r2, r3
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	601a      	str	r2, [r3, #0]
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f47f aed4 	bne.w	800ee5c <f_write+0x76>
 800f0b4:	e000      	b.n	800f0b8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f0b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	7d1b      	ldrb	r3, [r3, #20]
 800f0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0c0:	b2da      	uxtb	r2, r3
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3730      	adds	r7, #48	; 0x30
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b086      	sub	sp, #24
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f107 0208 	add.w	r2, r7, #8
 800f0de:	4611      	mov	r1, r2
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff faf7 	bl	800e6d4 <validate>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f0ea:	7dfb      	ldrb	r3, [r7, #23]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d168      	bne.n	800f1c2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	7d1b      	ldrb	r3, [r3, #20]
 800f0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d062      	beq.n	800f1c2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7d1b      	ldrb	r3, [r3, #20]
 800f100:	b25b      	sxtb	r3, r3
 800f102:	2b00      	cmp	r3, #0
 800f104:	da15      	bge.n	800f132 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	7858      	ldrb	r0, [r3, #1]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a1a      	ldr	r2, [r3, #32]
 800f114:	2301      	movs	r3, #1
 800f116:	f7fc ff83 	bl	800c020 <disk_write>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d001      	beq.n	800f124 <f_sync+0x54>
 800f120:	2301      	movs	r3, #1
 800f122:	e04f      	b.n	800f1c4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	7d1b      	ldrb	r3, [r3, #20]
 800f128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f12c:	b2da      	uxtb	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f132:	f7fc ffb3 	bl	800c09c <get_fattime>
 800f136:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13e:	4619      	mov	r1, r3
 800f140:	4610      	mov	r0, r2
 800f142:	f7fd fa63 	bl	800c60c <move_window>
 800f146:	4603      	mov	r3, r0
 800f148:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f14a:	7dfb      	ldrb	r3, [r7, #23]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d138      	bne.n	800f1c2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f154:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	330b      	adds	r3, #11
 800f15a:	781a      	ldrb	r2, [r3, #0]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	330b      	adds	r3, #11
 800f160:	f042 0220 	orr.w	r2, r2, #32
 800f164:	b2d2      	uxtb	r2, r2
 800f166:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6818      	ldr	r0, [r3, #0]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	461a      	mov	r2, r3
 800f172:	68f9      	ldr	r1, [r7, #12]
 800f174:	f7fd ff68 	bl	800d048 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f103 021c 	add.w	r2, r3, #28
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	4619      	mov	r1, r3
 800f184:	4610      	mov	r0, r2
 800f186:	f7fc ffe7 	bl	800c158 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	3316      	adds	r3, #22
 800f18e:	6939      	ldr	r1, [r7, #16]
 800f190:	4618      	mov	r0, r3
 800f192:	f7fc ffe1 	bl	800c158 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	3312      	adds	r3, #18
 800f19a:	2100      	movs	r1, #0
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fc ffc0 	bl	800c122 <st_word>
					fs->wflag = 1;
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fd fa5c 	bl	800c668 <sync_fs>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	7d1b      	ldrb	r3, [r3, #20]
 800f1b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1bc:	b2da      	uxtb	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3718      	adds	r7, #24
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff ff7b 	bl	800f0d0 <f_sync>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f1de:	7bfb      	ldrb	r3, [r7, #15]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d118      	bne.n	800f216 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f107 0208 	add.w	r2, r7, #8
 800f1ea:	4611      	mov	r1, r2
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7ff fa71 	bl	800e6d4 <validate>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f1f6:	7bfb      	ldrb	r3, [r7, #15]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d10c      	bne.n	800f216 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	4618      	mov	r0, r3
 800f202:	f7fd f95f 	bl	800c4c4 <dec_lock>
 800f206:	4603      	mov	r3, r0
 800f208:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d102      	bne.n	800f216 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f216:	7bfb      	ldrb	r3, [r7, #15]
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <f_opendir+0x14>
 800f230:	2309      	movs	r3, #9
 800f232:	e074      	b.n	800f31e <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f238:	f107 0108 	add.w	r1, r7, #8
 800f23c:	463b      	mov	r3, r7
 800f23e:	2200      	movs	r2, #0
 800f240:	4618      	mov	r0, r3
 800f242:	f7fe fffb 	bl	800e23c <find_volume>
 800f246:	4603      	mov	r3, r0
 800f248:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f24a:	7dfb      	ldrb	r3, [r7, #23]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d15f      	bne.n	800f310 <f_opendir+0xf0>
		obj->fs = fs;
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800f256:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f25a:	f000 fb70 	bl	800f93e <ff_memalloc>
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d101      	bne.n	800f26a <f_opendir+0x4a>
 800f266:	2311      	movs	r3, #17
 800f268:	e059      	b.n	800f31e <f_opendir+0xfe>
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	4619      	mov	r1, r3
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7fe fed5 	bl	800e024 <follow_path>
 800f27a:	4603      	mov	r3, r0
 800f27c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f27e:	7dfb      	ldrb	r3, [r7, #23]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d13d      	bne.n	800f300 <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f28a:	b25b      	sxtb	r3, r3
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	db12      	blt.n	800f2b6 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	799b      	ldrb	r3, [r3, #6]
 800f294:	f003 0310 	and.w	r3, r3, #16
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d00a      	beq.n	800f2b2 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f29c:	68ba      	ldr	r2, [r7, #8]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a1b      	ldr	r3, [r3, #32]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	f7fd feb0 	bl	800d00a <ld_clust>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	609a      	str	r2, [r3, #8]
 800f2b0:	e001      	b.n	800f2b6 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f2b2:	2305      	movs	r3, #5
 800f2b4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f2b6:	7dfb      	ldrb	r3, [r7, #23]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d121      	bne.n	800f300 <f_opendir+0xe0>
				obj->id = fs->id;
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	88da      	ldrh	r2, [r3, #6]
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7fd fd18 	bl	800ccfc <dir_sdi>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f2d0:	7dfb      	ldrb	r3, [r7, #23]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d114      	bne.n	800f300 <f_opendir+0xe0>
					if (obj->sclust) {
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00d      	beq.n	800f2fa <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f2de:	2100      	movs	r1, #0
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7fd f861 	bl	800c3a8 <inc_lock>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d105      	bne.n	800f300 <f_opendir+0xe0>
 800f2f4:	2312      	movs	r3, #18
 800f2f6:	75fb      	strb	r3, [r7, #23]
 800f2f8:	e002      	b.n	800f300 <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f000 fb28 	bl	800f956 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f306:	7dfb      	ldrb	r3, [r7, #23]
 800f308:	2b04      	cmp	r3, #4
 800f30a:	d101      	bne.n	800f310 <f_opendir+0xf0>
 800f30c:	2305      	movs	r3, #5
 800f30e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f310:	7dfb      	ldrb	r3, [r7, #23]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d002      	beq.n	800f31c <f_opendir+0xfc>
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	2200      	movs	r2, #0
 800f31a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b086      	sub	sp, #24
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f107 020c 	add.w	r2, r7, #12
 800f336:	4611      	mov	r1, r2
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff f9cb 	bl	800e6d4 <validate>
 800f33e:	4603      	mov	r3, r0
 800f340:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f342:	7dfb      	ldrb	r3, [r7, #23]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d136      	bne.n	800f3b6 <f_readdir+0x90>
		if (!fno) {
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d106      	bne.n	800f35c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f34e:	2100      	movs	r1, #0
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7fd fcd3 	bl	800ccfc <dir_sdi>
 800f356:	4603      	mov	r3, r0
 800f358:	75fb      	strb	r3, [r7, #23]
 800f35a:	e02c      	b.n	800f3b6 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800f35c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f360:	f000 faed 	bl	800f93e <ff_memalloc>
 800f364:	6138      	str	r0, [r7, #16]
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <f_readdir+0x4a>
 800f36c:	2311      	movs	r3, #17
 800f36e:	e023      	b.n	800f3b8 <f_readdir+0x92>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800f376:	2100      	movs	r1, #0
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7fe f871 	bl	800d460 <dir_read>
 800f37e:	4603      	mov	r3, r0
 800f380:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f382:	7dfb      	ldrb	r3, [r7, #23]
 800f384:	2b04      	cmp	r3, #4
 800f386:	d101      	bne.n	800f38c <f_readdir+0x66>
 800f388:	2300      	movs	r3, #0
 800f38a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800f38c:	7dfb      	ldrb	r3, [r7, #23]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d10e      	bne.n	800f3b0 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7fe fb0d 	bl	800d9b4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f39a:	2100      	movs	r1, #0
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7fd fd28 	bl	800cdf2 <dir_next>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f3a6:	7dfb      	ldrb	r3, [r7, #23]
 800f3a8:	2b04      	cmp	r3, #4
 800f3aa:	d101      	bne.n	800f3b0 <f_readdir+0x8a>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800f3b0:	6938      	ldr	r0, [r7, #16]
 800f3b2:	f000 fad0 	bl	800f956 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800f3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3718      	adds	r7, #24
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800f3ca:	6839      	ldr	r1, [r7, #0]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7ff ffaa 	bl	800f326 <f_readdir>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800f3d6:	7bfb      	ldrb	r3, [r7, #15]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d114      	bne.n	800f406 <f_findnext+0x46>
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d011      	beq.n	800f406 <f_findnext+0x46>
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	7d9b      	ldrb	r3, [r3, #22]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00d      	beq.n	800f406 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	f103 0116 	add.w	r1, r3, #22
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f7fe fbe0 	bl	800dbbc <pattern_matching>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d100      	bne.n	800f404 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800f402:	e7e2      	b.n	800f3ca <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800f404:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800f406:	7bfb      	ldrb	r3, [r7, #15]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	683a      	ldr	r2, [r7, #0]
 800f422:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800f424:	6879      	ldr	r1, [r7, #4]
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f7ff fefa 	bl	800f220 <f_opendir>
 800f42c:	4603      	mov	r3, r0
 800f42e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d105      	bne.n	800f442 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800f436:	68b9      	ldr	r1, [r7, #8]
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f7ff ffc1 	bl	800f3c0 <f_findnext>
 800f43e:	4603      	mov	r3, r0
 800f440:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800f442:	7dfb      	ldrb	r3, [r7, #23]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3718      	adds	r7, #24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b0a2      	sub	sp, #136	; 0x88
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800f454:	2300      	movs	r3, #0
 800f456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f45a:	f107 0108 	add.w	r1, r7, #8
 800f45e:	1d3b      	adds	r3, r7, #4
 800f460:	2202      	movs	r2, #2
 800f462:	4618      	mov	r0, r3
 800f464:	f7fe feea 	bl	800e23c <find_volume>
 800f468:	4603      	mov	r3, r0
 800f46a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	dj.obj.fs = fs;
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800f472:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f476:	2b00      	cmp	r3, #0
 800f478:	f040 80a2 	bne.w	800f5c0 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 800f47c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f480:	f000 fa5d 	bl	800f93e <ff_memalloc>
 800f484:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d101      	bne.n	800f490 <f_unlink+0x44>
 800f48c:	2311      	movs	r3, #17
 800f48e:	e099      	b.n	800f5c4 <f_unlink+0x178>
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f494:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fdc0 	bl	800e024 <follow_path>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800f4aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d108      	bne.n	800f4c4 <f_unlink+0x78>
 800f4b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f4b6:	2102      	movs	r1, #2
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fc fef7 	bl	800c2ac <chk_lock>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800f4c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d176      	bne.n	800f5ba <f_unlink+0x16e>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f4cc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f4d0:	b25b      	sxtb	r3, r3
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	da03      	bge.n	800f4de <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f4d6:	2306      	movs	r3, #6
 800f4d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f4dc:	e008      	b.n	800f4f0 <f_unlink+0xa4>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f4de:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800f4e2:	f003 0301 	and.w	r3, r3, #1
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d002      	beq.n	800f4f0 <f_unlink+0xa4>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f4ea:	2307      	movs	r3, #7
 800f4ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK) {
 800f4f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d136      	bne.n	800f566 <f_unlink+0x11a>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fd fd83 	bl	800d00a <ld_clust>
 800f504:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f508:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800f50c:	f003 0310 	and.w	r3, r3, #16
 800f510:	2b00      	cmp	r3, #0
 800f512:	d028      	beq.n	800f566 <f_unlink+0x11a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 800f518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f51c:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800f51e:	f107 030c 	add.w	r3, r7, #12
 800f522:	2100      	movs	r1, #0
 800f524:	4618      	mov	r0, r3
 800f526:	f7fd fbe9 	bl	800ccfc <dir_sdi>
 800f52a:	4603      	mov	r3, r0
 800f52c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800f530:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f534:	2b00      	cmp	r3, #0
 800f536:	d116      	bne.n	800f566 <f_unlink+0x11a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800f538:	f107 030c 	add.w	r3, r7, #12
 800f53c:	2100      	movs	r1, #0
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fd ff8e 	bl	800d460 <dir_read>
 800f544:	4603      	mov	r3, r0
 800f546:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800f54a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d102      	bne.n	800f558 <f_unlink+0x10c>
 800f552:	2307      	movs	r3, #7
 800f554:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800f558:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f55c:	2b04      	cmp	r3, #4
 800f55e:	d102      	bne.n	800f566 <f_unlink+0x11a>
 800f560:	2300      	movs	r3, #0
 800f562:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						}
					}
				}
			}
			if (res == FR_OK) {
 800f566:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d125      	bne.n	800f5ba <f_unlink+0x16e>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800f56e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f572:	4618      	mov	r0, r3
 800f574:	f7fe f9d4 	bl	800d920 <dir_remove>
 800f578:	4603      	mov	r3, r0
 800f57a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800f57e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10e      	bne.n	800f5a4 <f_unlink+0x158>
 800f586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00a      	beq.n	800f5a4 <f_unlink+0x158>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800f58e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f592:	2200      	movs	r2, #0
 800f594:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fd fa7e 	bl	800ca9a <remove_chain>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800f5a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d106      	bne.n	800f5ba <f_unlink+0x16e>
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fd f85a 	bl	800c668 <sync_fs>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
		}
		FREE_NAMBUF();
 800f5ba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800f5bc:	f000 f9cb 	bl	800f956 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800f5c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3788      	adds	r7, #136	; 0x88
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b09a      	sub	sp, #104	; 0x68
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f5d4:	f107 010c 	add.w	r1, r7, #12
 800f5d8:	1d3b      	adds	r3, r7, #4
 800f5da:	2202      	movs	r2, #2
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fe fe2d 	bl	800e23c <find_volume>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	dj.obj.fs = fs;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800f5ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f040 80fc 	bne.w	800f7ee <f_mkdir+0x222>
		INIT_NAMBUF(fs);
 800f5f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f5fa:	f000 f9a0 	bl	800f93e <ff_memalloc>
 800f5fe:	6578      	str	r0, [r7, #84]	; 0x54
 800f600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <f_mkdir+0x3e>
 800f606:	2311      	movs	r3, #17
 800f608:	e0f3      	b.n	800f7f2 <f_mkdir+0x226>
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f60e:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	f107 0310 	add.w	r3, r7, #16
 800f616:	4611      	mov	r1, r2
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fe fd03 	bl	800e024 <follow_path>
 800f61e:	4603      	mov	r3, r0
 800f620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f624:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d102      	bne.n	800f632 <f_mkdir+0x66>
 800f62c:	2308      	movs	r3, #8
 800f62e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f632:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f636:	2b04      	cmp	r3, #4
 800f638:	f040 80d6 	bne.w	800f7e8 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f63c:	f107 0310 	add.w	r3, r7, #16
 800f640:	2100      	movs	r1, #0
 800f642:	4618      	mov	r0, r3
 800f644:	f7fd fa8e 	bl	800cb64 <create_chain>
 800f648:	6538      	str	r0, [r7, #80]	; 0x50
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	895b      	ldrh	r3, [r3, #10]
 800f64e:	025b      	lsls	r3, r3, #9
 800f650:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800f652:	2300      	movs	r3, #0
 800f654:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d102      	bne.n	800f664 <f_mkdir+0x98>
 800f65e:	2307      	movs	r3, #7
 800f660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (dcl == 1) res = FR_INT_ERR;
 800f664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f666:	2b01      	cmp	r3, #1
 800f668:	d102      	bne.n	800f670 <f_mkdir+0xa4>
 800f66a:	2302      	movs	r3, #2
 800f66c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f676:	d102      	bne.n	800f67e <f_mkdir+0xb2>
 800f678:	2301      	movs	r3, #1
 800f67a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f67e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f682:	2b00      	cmp	r3, #0
 800f684:	d106      	bne.n	800f694 <f_mkdir+0xc8>
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fc ff7b 	bl	800c584 <sync_window>
 800f68e:	4603      	mov	r3, r0
 800f690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			tm = GET_FATTIME();
 800f694:	f7fc fd02 	bl	800c09c <get_fattime>
 800f698:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f69a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d16a      	bne.n	800f778 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fd f84c 	bl	800c744 <clust2sect>
 800f6ac:	65f8      	str	r0, [r7, #92]	; 0x5c
				dir = fs->win;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	3334      	adds	r3, #52	; 0x34
 800f6b2:	64bb      	str	r3, [r7, #72]	; 0x48
				mem_set(dir, 0, SS(fs));
 800f6b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f6bc:	f7fc fd99 	bl	800c1f2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f6c0:	220b      	movs	r2, #11
 800f6c2:	2120      	movs	r1, #32
 800f6c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f6c6:	f7fc fd94 	bl	800c1f2 <mem_set>
					dir[DIR_Name] = '.';
 800f6ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6cc:	222e      	movs	r2, #46	; 0x2e
 800f6ce:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f6d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6d2:	330b      	adds	r3, #11
 800f6d4:	2210      	movs	r2, #16
 800f6d6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f6d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6da:	3316      	adds	r3, #22
 800f6dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fc fd3a 	bl	800c158 <st_dword>
					st_clust(fs, dir, dcl);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fd fcac 	bl	800d048 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f6f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6f2:	3320      	adds	r3, #32
 800f6f4:	2220      	movs	r2, #32
 800f6f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fc fd59 	bl	800c1b0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f6fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f700:	3321      	adds	r3, #33	; 0x21
 800f702:	222e      	movs	r2, #46	; 0x2e
 800f704:	701a      	strb	r2, [r3, #0]
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	65bb      	str	r3, [r7, #88]	; 0x58
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	2b03      	cmp	r3, #3
 800f710:	d106      	bne.n	800f720 <f_mkdir+0x154>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f716:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f718:	429a      	cmp	r2, r3
 800f71a:	d101      	bne.n	800f720 <f_mkdir+0x154>
 800f71c:	2300      	movs	r3, #0
 800f71e:	65bb      	str	r3, [r7, #88]	; 0x58
					st_clust(fs, dir + SZDIRE, pcl);
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f724:	3320      	adds	r3, #32
 800f726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f728:	4619      	mov	r1, r3
 800f72a:	f7fd fc8d 	bl	800d048 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	895b      	ldrh	r3, [r3, #10]
 800f732:	663b      	str	r3, [r7, #96]	; 0x60
 800f734:	e01b      	b.n	800f76e <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 800f736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f738:	1c5a      	adds	r2, r3, #1
 800f73a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2201      	movs	r2, #1
 800f744:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fc ff1b 	bl	800c584 <sync_window>
 800f74e:	4603      	mov	r3, r0
 800f750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res != FR_OK) break;
 800f754:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d10c      	bne.n	800f776 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 800f75c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f760:	2100      	movs	r1, #0
 800f762:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f764:	f7fc fd45 	bl	800c1f2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f76a:	3b01      	subs	r3, #1
 800f76c:	663b      	str	r3, [r7, #96]	; 0x60
 800f76e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1e0      	bne.n	800f736 <f_mkdir+0x16a>
 800f774:	e000      	b.n	800f778 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 800f776:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f778:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d107      	bne.n	800f790 <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f780:	f107 0310 	add.w	r3, r7, #16
 800f784:	4618      	mov	r0, r3
 800f786:	f7fd ffd3 	bl	800d730 <dir_register>
 800f78a:	4603      	mov	r3, r0
 800f78c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if (res == FR_OK) {
 800f790:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f794:	2b00      	cmp	r3, #0
 800f796:	d120      	bne.n	800f7da <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f79c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f79e:	3316      	adds	r3, #22
 800f7a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fc fcd8 	bl	800c158 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd fc4a 	bl	800d048 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7b6:	330b      	adds	r3, #11
 800f7b8:	2210      	movs	r2, #16
 800f7ba:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f7c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d10e      	bne.n	800f7e8 <f_mkdir+0x21c>
					res = sync_fs(fs);
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fc ff4b 	bl	800c668 <sync_fs>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f7d8:	e006      	b.n	800f7e8 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f7da:	f107 0310 	add.w	r3, r7, #16
 800f7de:	2200      	movs	r2, #0
 800f7e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd f959 	bl	800ca9a <remove_chain>
			}
		}
		FREE_NAMBUF();
 800f7e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f7ea:	f000 f8b4 	bl	800f956 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800f7ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3768      	adds	r7, #104	; 0x68
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
	...

0800f7fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b087      	sub	sp, #28
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	4613      	mov	r3, r2
 800f808:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f80a:	2301      	movs	r3, #1
 800f80c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f80e:	2300      	movs	r3, #0
 800f810:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f812:	4b1f      	ldr	r3, [pc, #124]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f814:	7a5b      	ldrb	r3, [r3, #9]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d131      	bne.n	800f880 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f81c:	4b1c      	ldr	r3, [pc, #112]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f81e:	7a5b      	ldrb	r3, [r3, #9]
 800f820:	b2db      	uxtb	r3, r3
 800f822:	461a      	mov	r2, r3
 800f824:	4b1a      	ldr	r3, [pc, #104]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f826:	2100      	movs	r1, #0
 800f828:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f82a:	4b19      	ldr	r3, [pc, #100]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f82c:	7a5b      	ldrb	r3, [r3, #9]
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	4a17      	ldr	r2, [pc, #92]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	4413      	add	r3, r2
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f83a:	4b15      	ldr	r3, [pc, #84]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f83c:	7a5b      	ldrb	r3, [r3, #9]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	461a      	mov	r2, r3
 800f842:	4b13      	ldr	r3, [pc, #76]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f844:	4413      	add	r3, r2
 800f846:	79fa      	ldrb	r2, [r7, #7]
 800f848:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f84a:	4b11      	ldr	r3, [pc, #68]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f84c:	7a5b      	ldrb	r3, [r3, #9]
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	1c5a      	adds	r2, r3, #1
 800f852:	b2d1      	uxtb	r1, r2
 800f854:	4a0e      	ldr	r2, [pc, #56]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f856:	7251      	strb	r1, [r2, #9]
 800f858:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f85a:	7dbb      	ldrb	r3, [r7, #22]
 800f85c:	3330      	adds	r3, #48	; 0x30
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	3301      	adds	r3, #1
 800f868:	223a      	movs	r2, #58	; 0x3a
 800f86a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	3302      	adds	r3, #2
 800f870:	222f      	movs	r2, #47	; 0x2f
 800f872:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	3303      	adds	r3, #3
 800f878:	2200      	movs	r2, #0
 800f87a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f87c:	2300      	movs	r3, #0
 800f87e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f880:	7dfb      	ldrb	r3, [r7, #23]
}
 800f882:	4618      	mov	r0, r3
 800f884:	371c      	adds	r7, #28
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop
 800f890:	2000055c 	.word	0x2000055c

0800f894 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f89e:	2200      	movs	r2, #0
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7ff ffaa 	bl	800f7fc <FATFS_LinkDriverEx>
 800f8a8:	4603      	mov	r3, r0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
	...

0800f8b4 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b085      	sub	sp, #20
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800f8c8:	4b15      	ldr	r3, [pc, #84]	; (800f920 <FATFS_UnLinkDriverEx+0x6c>)
 800f8ca:	7a5b      	ldrb	r3, [r3, #9]
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d01e      	beq.n	800f910 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	3b30      	subs	r3, #48	; 0x30
 800f8d8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800f8da:	7bbb      	ldrb	r3, [r7, #14]
 800f8dc:	4a10      	ldr	r2, [pc, #64]	; (800f920 <FATFS_UnLinkDriverEx+0x6c>)
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	4413      	add	r3, r2
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d013      	beq.n	800f910 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800f8e8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ea:	4a0d      	ldr	r2, [pc, #52]	; (800f920 <FATFS_UnLinkDriverEx+0x6c>)
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	4413      	add	r3, r2
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800f8f4:	7bbb      	ldrb	r3, [r7, #14]
 800f8f6:	4a0a      	ldr	r2, [pc, #40]	; (800f920 <FATFS_UnLinkDriverEx+0x6c>)
 800f8f8:	4413      	add	r3, r2
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800f8fe:	4b08      	ldr	r3, [pc, #32]	; (800f920 <FATFS_UnLinkDriverEx+0x6c>)
 800f900:	7a5b      	ldrb	r3, [r3, #9]
 800f902:	b2db      	uxtb	r3, r3
 800f904:	3b01      	subs	r3, #1
 800f906:	b2da      	uxtb	r2, r3
 800f908:	4b05      	ldr	r3, [pc, #20]	; (800f920 <FATFS_UnLinkDriverEx+0x6c>)
 800f90a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800f90c:	2300      	movs	r3, #0
 800f90e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f910:	7bfb      	ldrb	r3, [r7, #15]
}
 800f912:	4618      	mov	r0, r3
 800f914:	3714      	adds	r7, #20
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	2000055c 	.word	0x2000055c

0800f924 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800f92c:	2100      	movs	r1, #0
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff ffc0 	bl	800f8b4 <FATFS_UnLinkDriverEx>
 800f934:	4603      	mov	r3, r0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f93e:	b580      	push	{r7, lr}
 800f940:	b082      	sub	sp, #8
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f006 fffe 	bl	8016948 <malloc>
 800f94c:	4603      	mov	r3, r0
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f956:	b580      	push	{r7, lr}
 800f958:	b082      	sub	sp, #8
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f006 fffa 	bl	8016958 <free>
}
 800f964:	bf00      	nop
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b085      	sub	sp, #20
 800f970:	af00      	add	r7, sp, #0
 800f972:	4603      	mov	r3, r0
 800f974:	6039      	str	r1, [r7, #0]
 800f976:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f978:	88fb      	ldrh	r3, [r7, #6]
 800f97a:	2b7f      	cmp	r3, #127	; 0x7f
 800f97c:	d802      	bhi.n	800f984 <ff_convert+0x18>
		c = chr;
 800f97e:	88fb      	ldrh	r3, [r7, #6]
 800f980:	81fb      	strh	r3, [r7, #14]
 800f982:	e025      	b.n	800f9d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00b      	beq.n	800f9a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f98a:	88fb      	ldrh	r3, [r7, #6]
 800f98c:	2bff      	cmp	r3, #255	; 0xff
 800f98e:	d805      	bhi.n	800f99c <ff_convert+0x30>
 800f990:	88fb      	ldrh	r3, [r7, #6]
 800f992:	3b80      	subs	r3, #128	; 0x80
 800f994:	4a12      	ldr	r2, [pc, #72]	; (800f9e0 <ff_convert+0x74>)
 800f996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f99a:	e000      	b.n	800f99e <ff_convert+0x32>
 800f99c:	2300      	movs	r3, #0
 800f99e:	81fb      	strh	r3, [r7, #14]
 800f9a0:	e016      	b.n	800f9d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	81fb      	strh	r3, [r7, #14]
 800f9a6:	e009      	b.n	800f9bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f9a8:	89fb      	ldrh	r3, [r7, #14]
 800f9aa:	4a0d      	ldr	r2, [pc, #52]	; (800f9e0 <ff_convert+0x74>)
 800f9ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9b0:	88fa      	ldrh	r2, [r7, #6]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d006      	beq.n	800f9c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f9b6:	89fb      	ldrh	r3, [r7, #14]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	81fb      	strh	r3, [r7, #14]
 800f9bc:	89fb      	ldrh	r3, [r7, #14]
 800f9be:	2b7f      	cmp	r3, #127	; 0x7f
 800f9c0:	d9f2      	bls.n	800f9a8 <ff_convert+0x3c>
 800f9c2:	e000      	b.n	800f9c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f9c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f9c6:	89fb      	ldrh	r3, [r7, #14]
 800f9c8:	3380      	adds	r3, #128	; 0x80
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f9d0:	89fb      	ldrh	r3, [r7, #14]
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3714      	adds	r7, #20
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	080194c8 	.word	0x080194c8

0800f9e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b087      	sub	sp, #28
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f9ee:	88fb      	ldrh	r3, [r7, #6]
 800f9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9f4:	d201      	bcs.n	800f9fa <ff_wtoupper+0x16>
 800f9f6:	4b3e      	ldr	r3, [pc, #248]	; (800faf0 <ff_wtoupper+0x10c>)
 800f9f8:	e000      	b.n	800f9fc <ff_wtoupper+0x18>
 800f9fa:	4b3e      	ldr	r3, [pc, #248]	; (800faf4 <ff_wtoupper+0x110>)
 800f9fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	1c9a      	adds	r2, r3, #2
 800fa02:	617a      	str	r2, [r7, #20]
 800fa04:	881b      	ldrh	r3, [r3, #0]
 800fa06:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fa08:	8a7b      	ldrh	r3, [r7, #18]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d068      	beq.n	800fae0 <ff_wtoupper+0xfc>
 800fa0e:	88fa      	ldrh	r2, [r7, #6]
 800fa10:	8a7b      	ldrh	r3, [r7, #18]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d364      	bcc.n	800fae0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	1c9a      	adds	r2, r3, #2
 800fa1a:	617a      	str	r2, [r7, #20]
 800fa1c:	881b      	ldrh	r3, [r3, #0]
 800fa1e:	823b      	strh	r3, [r7, #16]
 800fa20:	8a3b      	ldrh	r3, [r7, #16]
 800fa22:	0a1b      	lsrs	r3, r3, #8
 800fa24:	81fb      	strh	r3, [r7, #14]
 800fa26:	8a3b      	ldrh	r3, [r7, #16]
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fa2c:	88fa      	ldrh	r2, [r7, #6]
 800fa2e:	8a79      	ldrh	r1, [r7, #18]
 800fa30:	8a3b      	ldrh	r3, [r7, #16]
 800fa32:	440b      	add	r3, r1
 800fa34:	429a      	cmp	r2, r3
 800fa36:	da49      	bge.n	800facc <ff_wtoupper+0xe8>
			switch (cmd) {
 800fa38:	89fb      	ldrh	r3, [r7, #14]
 800fa3a:	2b08      	cmp	r3, #8
 800fa3c:	d84f      	bhi.n	800fade <ff_wtoupper+0xfa>
 800fa3e:	a201      	add	r2, pc, #4	; (adr r2, 800fa44 <ff_wtoupper+0x60>)
 800fa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa44:	0800fa69 	.word	0x0800fa69
 800fa48:	0800fa7b 	.word	0x0800fa7b
 800fa4c:	0800fa91 	.word	0x0800fa91
 800fa50:	0800fa99 	.word	0x0800fa99
 800fa54:	0800faa1 	.word	0x0800faa1
 800fa58:	0800faa9 	.word	0x0800faa9
 800fa5c:	0800fab1 	.word	0x0800fab1
 800fa60:	0800fab9 	.word	0x0800fab9
 800fa64:	0800fac1 	.word	0x0800fac1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fa68:	88fa      	ldrh	r2, [r7, #6]
 800fa6a:	8a7b      	ldrh	r3, [r7, #18]
 800fa6c:	1ad3      	subs	r3, r2, r3
 800fa6e:	005b      	lsls	r3, r3, #1
 800fa70:	697a      	ldr	r2, [r7, #20]
 800fa72:	4413      	add	r3, r2
 800fa74:	881b      	ldrh	r3, [r3, #0]
 800fa76:	80fb      	strh	r3, [r7, #6]
 800fa78:	e027      	b.n	800faca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fa7a:	88fa      	ldrh	r2, [r7, #6]
 800fa7c:	8a7b      	ldrh	r3, [r7, #18]
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	f003 0301 	and.w	r3, r3, #1
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	88fa      	ldrh	r2, [r7, #6]
 800fa8a:	1ad3      	subs	r3, r2, r3
 800fa8c:	80fb      	strh	r3, [r7, #6]
 800fa8e:	e01c      	b.n	800faca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fa90:	88fb      	ldrh	r3, [r7, #6]
 800fa92:	3b10      	subs	r3, #16
 800fa94:	80fb      	strh	r3, [r7, #6]
 800fa96:	e018      	b.n	800faca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fa98:	88fb      	ldrh	r3, [r7, #6]
 800fa9a:	3b20      	subs	r3, #32
 800fa9c:	80fb      	strh	r3, [r7, #6]
 800fa9e:	e014      	b.n	800faca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800faa0:	88fb      	ldrh	r3, [r7, #6]
 800faa2:	3b30      	subs	r3, #48	; 0x30
 800faa4:	80fb      	strh	r3, [r7, #6]
 800faa6:	e010      	b.n	800faca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800faa8:	88fb      	ldrh	r3, [r7, #6]
 800faaa:	3b1a      	subs	r3, #26
 800faac:	80fb      	strh	r3, [r7, #6]
 800faae:	e00c      	b.n	800faca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fab0:	88fb      	ldrh	r3, [r7, #6]
 800fab2:	3308      	adds	r3, #8
 800fab4:	80fb      	strh	r3, [r7, #6]
 800fab6:	e008      	b.n	800faca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fab8:	88fb      	ldrh	r3, [r7, #6]
 800faba:	3b50      	subs	r3, #80	; 0x50
 800fabc:	80fb      	strh	r3, [r7, #6]
 800fabe:	e004      	b.n	800faca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fac0:	88fb      	ldrh	r3, [r7, #6]
 800fac2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fac6:	80fb      	strh	r3, [r7, #6]
 800fac8:	bf00      	nop
			}
			break;
 800faca:	e008      	b.n	800fade <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800facc:	89fb      	ldrh	r3, [r7, #14]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d195      	bne.n	800f9fe <ff_wtoupper+0x1a>
 800fad2:	8a3b      	ldrh	r3, [r7, #16]
 800fad4:	005b      	lsls	r3, r3, #1
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	4413      	add	r3, r2
 800fada:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fadc:	e78f      	b.n	800f9fe <ff_wtoupper+0x1a>
			break;
 800fade:	bf00      	nop
	}

	return chr;
 800fae0:	88fb      	ldrh	r3, [r7, #6]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	371c      	adds	r7, #28
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	080195c8 	.word	0x080195c8
 800faf4:	080197bc 	.word	0x080197bc

0800faf8 <SD_IO_SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  None
  * @retval None
  */
static void SD_IO_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b08c      	sub	sp, #48	; 0x30
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;  
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fb00:	4b50      	ldr	r3, [pc, #320]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb04:	4a4f      	ldr	r2, [pc, #316]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb0a:	6593      	str	r3, [r2, #88]	; 0x58
 800fb0c:	4b4d      	ldr	r3, [pc, #308]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb14:	61bb      	str	r3, [r7, #24]
 800fb16:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 800fb18:	f7f7 f828 	bl	8006b6c <HAL_PWREx_EnableVddIO2>
  
    /* Enable SPI clock */
  SENSORTILE_SD_SPI_CLK_ENABLE();
 800fb1c:	4b49      	ldr	r3, [pc, #292]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb20:	4a48      	ldr	r2, [pc, #288]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb26:	6593      	str	r3, [r2, #88]	; 0x58
 800fb28:	4b46      	ldr	r3, [pc, #280]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb30:	617b      	str	r3, [r7, #20]
 800fb32:	697b      	ldr	r3, [r7, #20]
  
  /* Enable DMA clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800fb34:	4b43      	ldr	r3, [pc, #268]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb38:	4a42      	ldr	r2, [pc, #264]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb3a:	f043 0302 	orr.w	r3, r3, #2
 800fb3e:	6493      	str	r3, [r2, #72]	; 0x48
 800fb40:	4b40      	ldr	r3, [pc, #256]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb44:	f003 0302 	and.w	r3, r3, #2
 800fb48:	613b      	str	r3, [r7, #16]
 800fb4a:	693b      	ldr	r3, [r7, #16]
  
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  SENSORTILE_SD_SPI_SCK_GPIO_CLK_ENABLE();
 800fb4c:	4b3d      	ldr	r3, [pc, #244]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb50:	4a3c      	ldr	r2, [pc, #240]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb56:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fb58:	4b3a      	ldr	r3, [pc, #232]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb60:	60fb      	str	r3, [r7, #12]
 800fb62:	68fb      	ldr	r3, [r7, #12]
  SENSORTILE_SD_SPI_MISO_MOSI_GPIO_CLK_ENABLE();
 800fb64:	4b37      	ldr	r3, [pc, #220]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb68:	4a36      	ldr	r2, [pc, #216]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fb70:	4b34      	ldr	r3, [pc, #208]	; (800fc44 <SD_IO_SPI_MspInit+0x14c>)
 800fb72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb78:	60bb      	str	r3, [r7, #8]
 800fb7a:	68bb      	ldr	r3, [r7, #8]
  
  /* configure SPI SCK */
  GPIO_InitStructure.Pin = SENSORTILE_SD_SPI_SCK_PIN;
 800fb7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800fb82:	2302      	movs	r3, #2
 800fb84:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800fb86:	2300      	movs	r3, #0
 800fb88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800fb8a:	2303      	movs	r3, #3
 800fb8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = SENSORTILE_SD_SPI_SCK_AF;
 800fb8e:	2306      	movs	r3, #6
 800fb90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SENSORTILE_SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800fb92:	f107 031c 	add.w	r3, r7, #28
 800fb96:	4619      	mov	r1, r3
 800fb98:	482b      	ldr	r0, [pc, #172]	; (800fc48 <SD_IO_SPI_MspInit+0x150>)
 800fb9a:	f7f6 fc8f 	bl	80064bc <HAL_GPIO_Init>

  /* configure SPI MISO and MOSI */
  GPIO_InitStructure.Pin = (SENSORTILE_SD_SPI_MOSI_PIN);
 800fb9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800fba4:	2302      	movs	r3, #2
 800fba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800fbac:	2303      	movs	r3, #3
 800fbae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = SENSORTILE_SD_SPI_MISO_MOSI_AF;
 800fbb0:	2306      	movs	r3, #6
 800fbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SENSORTILE_SD_SPI_MISO_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800fbb4:	f107 031c 	add.w	r3, r7, #28
 800fbb8:	4619      	mov	r1, r3
 800fbba:	4823      	ldr	r0, [pc, #140]	; (800fc48 <SD_IO_SPI_MspInit+0x150>)
 800fbbc:	f7f6 fc7e 	bl	80064bc <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin = (SENSORTILE_SD_SPI_MISO_PIN );
 800fbc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800fbc6:	2302      	movs	r3, #2
 800fbc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull  = GPIO_PULLUP;
 800fbca:	2301      	movs	r3, #1
 800fbcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800fbce:	2303      	movs	r3, #3
 800fbd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = SENSORTILE_SD_SPI_MISO_MOSI_AF;
 800fbd2:	2306      	movs	r3, #6
 800fbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SENSORTILE_SD_SPI_MISO_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800fbd6:	f107 031c 	add.w	r3, r7, #28
 800fbda:	4619      	mov	r1, r3
 800fbdc:	481a      	ldr	r0, [pc, #104]	; (800fc48 <SD_IO_SPI_MspInit+0x150>)
 800fbde:	f7f6 fc6d 	bl	80064bc <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = DMA2_Channel2;
 800fbe2:	4b1a      	ldr	r3, [pc, #104]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fbe4:	4a1a      	ldr	r2, [pc, #104]	; (800fc50 <SD_IO_SPI_MspInit+0x158>)
 800fbe6:	601a      	str	r2, [r3, #0]
  hdma_tx.Init.Request             = DMA_REQUEST_3;
 800fbe8:	4b18      	ldr	r3, [pc, #96]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fbea:	2203      	movs	r2, #3
 800fbec:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800fbee:	4b17      	ldr	r3, [pc, #92]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fbf0:	2210      	movs	r2, #16
 800fbf2:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800fbf4:	4b15      	ldr	r3, [pc, #84]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800fbfa:	4b14      	ldr	r3, [pc, #80]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fbfc:	2280      	movs	r2, #128	; 0x80
 800fbfe:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fc00:	4b12      	ldr	r3, [pc, #72]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800fc06:	4b11      	ldr	r3, [pc, #68]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fc08:	2200      	movs	r2, #0
 800fc0a:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 800fc0c:	4b0f      	ldr	r3, [pc, #60]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fc0e:	2200      	movs	r2, #0
 800fc10:	61da      	str	r2, [r3, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800fc12:	4b0e      	ldr	r3, [pc, #56]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fc14:	2200      	movs	r2, #0
 800fc16:	621a      	str	r2, [r3, #32]
  
  HAL_DMA_Init(&hdma_tx);
 800fc18:	480c      	ldr	r0, [pc, #48]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fc1a:	f7f6 f9b9 	bl	8005f90 <HAL_DMA_Init>
  
  /* Associate the initialized DMA handle to the the SPI handle */
  __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	4a0a      	ldr	r2, [pc, #40]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fc22:	655a      	str	r2, [r3, #84]	; 0x54
 800fc24:	4a09      	ldr	r2, [pc, #36]	; (800fc4c <SD_IO_SPI_MspInit+0x154>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6293      	str	r3, [r2, #40]	; 0x28
  
  /*##-4- Configure the NVIC for DMA #########################################*/ 
  /* NVIC configuration for DMA transfer complete interrupt (SPI1_TX) */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 2, 1);
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	2102      	movs	r1, #2
 800fc2e:	2039      	movs	r0, #57	; 0x39
 800fc30:	f7f6 f976 	bl	8005f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800fc34:	2039      	movs	r0, #57	; 0x39
 800fc36:	f7f6 f98f 	bl	8005f58 <HAL_NVIC_EnableIRQ>
    
}
 800fc3a:	bf00      	nop
 800fc3c:	3730      	adds	r7, #48	; 0x30
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	40021000 	.word	0x40021000
 800fc48:	48001800 	.word	0x48001800
 800fc4c:	2000be10 	.word	0x2000be10
 800fc50:	4002041c 	.word	0x4002041c

0800fc54 <SD_IO_SPI_Init_LS>:
* @brief  Initializes SPI HAL. Low baundrate for initializazion phase.
* @param  None
* @retval None
*/
static void SD_IO_SPI_Init_LS(void)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SPI_SD_Handle) == HAL_SPI_STATE_RESET)
 800fc58:	481a      	ldr	r0, [pc, #104]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc5a:	f7f9 fd31 	bl	80096c0 <HAL_SPI_GetState>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d12c      	bne.n	800fcbe <SD_IO_SPI_Init_LS+0x6a>
  {
    SPI_SD_Handle.Instance = SENSORTILE_SD_SPI;
 800fc64:	4b17      	ldr	r3, [pc, #92]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc66:	4a18      	ldr	r2, [pc, #96]	; (800fcc8 <SD_IO_SPI_Init_LS+0x74>)
 800fc68:	601a      	str	r2, [r3, #0]
    SPI_SD_Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;    /* SPI baudrate is PCLK2/SPI_BaudRatePrescaler */
 800fc6a:	4b16      	ldr	r3, [pc, #88]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc6c:	2230      	movs	r2, #48	; 0x30
 800fc6e:	61da      	str	r2, [r3, #28]
    SPI_SD_Handle.Init.Direction = SPI_DIRECTION_2LINES;
 800fc70:	4b14      	ldr	r3, [pc, #80]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	609a      	str	r2, [r3, #8]
    SPI_SD_Handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800fc76:	4b13      	ldr	r3, [pc, #76]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc78:	2200      	movs	r2, #0
 800fc7a:	615a      	str	r2, [r3, #20]
    SPI_SD_Handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fc7c:	4b11      	ldr	r3, [pc, #68]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	611a      	str	r2, [r3, #16]
    SPI_SD_Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800fc82:	4b10      	ldr	r3, [pc, #64]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	629a      	str	r2, [r3, #40]	; 0x28
    SPI_SD_Handle.Init.CRCPolynomial = 7;
 800fc88:	4b0e      	ldr	r3, [pc, #56]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc8a:	2207      	movs	r2, #7
 800fc8c:	62da      	str	r2, [r3, #44]	; 0x2c
    SPI_SD_Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 800fc8e:	4b0d      	ldr	r3, [pc, #52]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800fc94:	60da      	str	r2, [r3, #12]
    SPI_SD_Handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fc96:	4b0b      	ldr	r3, [pc, #44]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	621a      	str	r2, [r3, #32]
    SPI_SD_Handle.Init.NSS = SPI_NSS_SOFT;
 800fc9c:	4b09      	ldr	r3, [pc, #36]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fc9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fca2:	619a      	str	r2, [r3, #24]
    SPI_SD_Handle.Init.TIMode = SPI_TIMODE_DISABLED;
 800fca4:	4b07      	ldr	r3, [pc, #28]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fca6:	2200      	movs	r2, #0
 800fca8:	625a      	str	r2, [r3, #36]	; 0x24
    SPI_SD_Handle.Init.Mode = SPI_MODE_MASTER;
 800fcaa:	4b06      	ldr	r3, [pc, #24]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fcac:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fcb0:	605a      	str	r2, [r3, #4]
    
    SD_IO_SPI_MspInit(&SPI_SD_Handle);
 800fcb2:	4804      	ldr	r0, [pc, #16]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fcb4:	f7ff ff20 	bl	800faf8 <SD_IO_SPI_MspInit>
    HAL_SPI_Init(&SPI_SD_Handle);
 800fcb8:	4802      	ldr	r0, [pc, #8]	; (800fcc4 <SD_IO_SPI_Init_LS+0x70>)
 800fcba:	f7f8 fd89 	bl	80087d0 <HAL_SPI_Init>
  }
}
 800fcbe:	bf00      	nop
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	2000bdac 	.word	0x2000bdac
 800fcc8:	40003c00 	.word	0x40003c00

0800fccc <SD_IO_SPI_Init>:
* @brief  Initializes SPI HAL. High baundrate
* @param  None
* @retval None
*/
static void SD_IO_SPI_Init(void)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	af00      	add	r7, sp, #0
  
  HAL_SPI_DeInit(&SPI_SD_Handle);
 800fcd0:	481d      	ldr	r0, [pc, #116]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fcd2:	f7f8 fe49 	bl	8008968 <HAL_SPI_DeInit>
  
  HAL_Delay(1);
 800fcd6:	2001      	movs	r0, #1
 800fcd8:	f7f6 f826 	bl	8005d28 <HAL_Delay>
  
  if(HAL_SPI_GetState(&SPI_SD_Handle) == HAL_SPI_STATE_RESET)
 800fcdc:	481a      	ldr	r0, [pc, #104]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fcde:	f7f9 fcef 	bl	80096c0 <HAL_SPI_GetState>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d12c      	bne.n	800fd42 <SD_IO_SPI_Init+0x76>
  {
    SPI_SD_Handle.Instance = SENSORTILE_SD_SPI;
 800fce8:	4b17      	ldr	r3, [pc, #92]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fcea:	4a18      	ldr	r2, [pc, #96]	; (800fd4c <SD_IO_SPI_Init+0x80>)
 800fcec:	601a      	str	r2, [r3, #0]
    SPI_SD_Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;    /* SPI baudrate is PCLK2/SPI_BaudRatePrescaler */
 800fcee:	4b16      	ldr	r3, [pc, #88]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fcf0:	2208      	movs	r2, #8
 800fcf2:	61da      	str	r2, [r3, #28]
    SPI_SD_Handle.Init.Direction = SPI_DIRECTION_2LINES;
 800fcf4:	4b14      	ldr	r3, [pc, #80]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	609a      	str	r2, [r3, #8]
    SPI_SD_Handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800fcfa:	4b13      	ldr	r3, [pc, #76]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	615a      	str	r2, [r3, #20]
    SPI_SD_Handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fd00:	4b11      	ldr	r3, [pc, #68]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd02:	2200      	movs	r2, #0
 800fd04:	611a      	str	r2, [r3, #16]
    SPI_SD_Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800fd06:	4b10      	ldr	r3, [pc, #64]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	629a      	str	r2, [r3, #40]	; 0x28
    SPI_SD_Handle.Init.CRCPolynomial = 7;
 800fd0c:	4b0e      	ldr	r3, [pc, #56]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd0e:	2207      	movs	r2, #7
 800fd10:	62da      	str	r2, [r3, #44]	; 0x2c
    SPI_SD_Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 800fd12:	4b0d      	ldr	r3, [pc, #52]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800fd18:	60da      	str	r2, [r3, #12]
    SPI_SD_Handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fd1a:	4b0b      	ldr	r3, [pc, #44]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	621a      	str	r2, [r3, #32]
    SPI_SD_Handle.Init.NSS = SPI_NSS_SOFT;
 800fd20:	4b09      	ldr	r3, [pc, #36]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd26:	619a      	str	r2, [r3, #24]
    SPI_SD_Handle.Init.TIMode = SPI_TIMODE_DISABLED;
 800fd28:	4b07      	ldr	r3, [pc, #28]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	625a      	str	r2, [r3, #36]	; 0x24
    SPI_SD_Handle.Init.Mode = SPI_MODE_MASTER;
 800fd2e:	4b06      	ldr	r3, [pc, #24]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd30:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fd34:	605a      	str	r2, [r3, #4]
    
    SD_IO_SPI_MspInit(&SPI_SD_Handle);
 800fd36:	4804      	ldr	r0, [pc, #16]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd38:	f7ff fede 	bl	800faf8 <SD_IO_SPI_MspInit>
    HAL_SPI_Init(&SPI_SD_Handle);
 800fd3c:	4802      	ldr	r0, [pc, #8]	; (800fd48 <SD_IO_SPI_Init+0x7c>)
 800fd3e:	f7f8 fd47 	bl	80087d0 <HAL_SPI_Init>
  }
}
 800fd42:	bf00      	nop
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	2000bdac 	.word	0x2000bdac
 800fd4c:	40003c00 	.word	0x40003c00

0800fd50 <SD_IO_SPI_Read>:
  * @brief SPI Read 4 bytes from device
  * @param None
  * @retval Read data
*/
static uint32_t SD_IO_SPI_Read(void)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800fd56:	2300      	movs	r3, #0
 800fd58:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60bb      	str	r3, [r7, #8]
  uint32_t writevalue = 0xFFFFFFFF;
 800fd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd62:	607b      	str	r3, [r7, #4]
  
  status = HAL_SPI_TransmitReceive(&SPI_SD_Handle, (uint8_t*) &writevalue, (uint8_t*) &readvalue, 1, SpixTimeout);
 800fd64:	4b0a      	ldr	r3, [pc, #40]	; (800fd90 <SD_IO_SPI_Read+0x40>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f107 0208 	add.w	r2, r7, #8
 800fd6c:	1d39      	adds	r1, r7, #4
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	2301      	movs	r3, #1
 800fd72:	4808      	ldr	r0, [pc, #32]	; (800fd94 <SD_IO_SPI_Read+0x44>)
 800fd74:	f7f8 ffb0 	bl	8008cd8 <HAL_SPI_TransmitReceive>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d001      	beq.n	800fd86 <SD_IO_SPI_Read+0x36>
  {
    /* Execute user timeout callback */
    SD_IO_SPI_Error();
 800fd82:	f000 f827 	bl	800fdd4 <SD_IO_SPI_Error>
  }

  return readvalue;
 800fd86:	68bb      	ldr	r3, [r7, #8]
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3710      	adds	r7, #16
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	200000d0 	.word	0x200000d0
 800fd94:	2000bdac 	.word	0x2000bdac

0800fd98 <SD_IO_SPI_Write>:
  * @brief SPI Write a byte to device
  * @param Value: value to be written
  * @retval None
  */
static void SD_IO_SPI_Write(uint8_t Value)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	4603      	mov	r3, r0
 800fda0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800fda2:	2300      	movs	r3, #0
 800fda4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SPI_SD_Handle, (uint8_t*) &Value, 1, SpixTimeout);
 800fda6:	4b09      	ldr	r3, [pc, #36]	; (800fdcc <SD_IO_SPI_Write+0x34>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	1df9      	adds	r1, r7, #7
 800fdac:	2201      	movs	r2, #1
 800fdae:	4808      	ldr	r0, [pc, #32]	; (800fdd0 <SD_IO_SPI_Write+0x38>)
 800fdb0:	f7f8 fe02 	bl	80089b8 <HAL_SPI_Transmit>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800fdb8:	7bfb      	ldrb	r3, [r7, #15]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d001      	beq.n	800fdc2 <SD_IO_SPI_Write+0x2a>
  {
    /* Execute user timeout callback */
    SD_IO_SPI_Error();
 800fdbe:	f000 f809 	bl	800fdd4 <SD_IO_SPI_Error>
  }
}
 800fdc2:	bf00      	nop
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	200000d0 	.word	0x200000d0
 800fdd0:	2000bdac 	.word	0x2000bdac

0800fdd4 <SD_IO_SPI_Error>:
  * @brief SPI error treatment function
  * @param None
  * @retval None
  */
static void SD_IO_SPI_Error (void)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SPI_SD_Handle);
 800fdd8:	4803      	ldr	r0, [pc, #12]	; (800fde8 <SD_IO_SPI_Error+0x14>)
 800fdda:	f7f8 fdc5 	bl	8008968 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI communication BUS */
  SD_IO_SPI_Init();
 800fdde:	f7ff ff75 	bl	800fccc <SD_IO_SPI_Init>
}
 800fde2:	bf00      	nop
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	2000bdac 	.word	0x2000bdac

0800fdec <SD_IO_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_IO_Init(void)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
  uint8_t counter;

  /* SD SPI Config */
  SD_IO_CS_Init();
 800fdf2:	f000 f83b 	bl	800fe6c <SD_IO_CS_Init>
  
  /* SD SPI Config */
  SD_IO_SPI_Init();
 800fdf6:	f7ff ff69 	bl	800fccc <SD_IO_SPI_Init>
  
  SENSORTILE_SD_CS_HIGH();
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fe00:	4809      	ldr	r0, [pc, #36]	; (800fe28 <SD_IO_Init+0x3c>)
 800fe02:	f7f6 fe0f 	bl	8006a24 <HAL_GPIO_WritePin>
  
  /* Send dummy byte 0xFF, 10 times with CS high */
  /* Rise CS and MOSI for 80 clocks cycles */
  for (counter = 0; counter <= 9; counter++)
 800fe06:	2300      	movs	r3, #0
 800fe08:	71fb      	strb	r3, [r7, #7]
 800fe0a:	e005      	b.n	800fe18 <SD_IO_Init+0x2c>
  {
    /* Send dummy byte 0xFF */
    SD_IO_WriteByte(SENSORTILE_SD_DUMMY_BYTE);
 800fe0c:	20ff      	movs	r0, #255	; 0xff
 800fe0e:	f000 f853 	bl	800feb8 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 800fe12:	79fb      	ldrb	r3, [r7, #7]
 800fe14:	3301      	adds	r3, #1
 800fe16:	71fb      	strb	r3, [r7, #7]
 800fe18:	79fb      	ldrb	r3, [r7, #7]
 800fe1a:	2b09      	cmp	r3, #9
 800fe1c:	d9f6      	bls.n	800fe0c <SD_IO_Init+0x20>
  }
}
 800fe1e:	bf00      	nop
 800fe20:	3708      	adds	r7, #8
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	48001800 	.word	0x48001800

0800fe2c <SD_IO_Init_LS>:
  *         data transfer). Low baundrate
  * @param  None
  * @retval None
  */
void SD_IO_Init_LS()
{ 
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
  uint8_t counter;

  /* SD SPI Config */
  SD_IO_CS_Init();
 800fe32:	f000 f81b 	bl	800fe6c <SD_IO_CS_Init>
  
  /* SD SPI Config */
  SD_IO_SPI_Init_LS();
 800fe36:	f7ff ff0d 	bl	800fc54 <SD_IO_SPI_Init_LS>
  
  SENSORTILE_SD_CS_HIGH();
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fe40:	4809      	ldr	r0, [pc, #36]	; (800fe68 <SD_IO_Init_LS+0x3c>)
 800fe42:	f7f6 fdef 	bl	8006a24 <HAL_GPIO_WritePin>
  
  /* Send dummy byte 0xFF, 10 times with CS high */
  /* Rise CS and MOSI for 80 clocks cycles */
  for (counter = 0; counter <= 9; counter++)
 800fe46:	2300      	movs	r3, #0
 800fe48:	71fb      	strb	r3, [r7, #7]
 800fe4a:	e005      	b.n	800fe58 <SD_IO_Init_LS+0x2c>
  {
    /* Send dummy byte 0xFF */
    SD_IO_WriteByte(SENSORTILE_SD_DUMMY_BYTE);
 800fe4c:	20ff      	movs	r0, #255	; 0xff
 800fe4e:	f000 f833 	bl	800feb8 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 800fe52:	79fb      	ldrb	r3, [r7, #7]
 800fe54:	3301      	adds	r3, #1
 800fe56:	71fb      	strb	r3, [r7, #7]
 800fe58:	79fb      	ldrb	r3, [r7, #7]
 800fe5a:	2b09      	cmp	r3, #9
 800fe5c:	d9f6      	bls.n	800fe4c <SD_IO_Init_LS+0x20>
  }
}
 800fe5e:	bf00      	nop
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	48001800 	.word	0x48001800

0800fe6c <SD_IO_CS_Init>:

void SD_IO_CS_Init(void)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b086      	sub	sp, #24
 800fe70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* SD_CS_GPIO and SD_DETECT_GPIO Periph clock enable */
  SENSORTILE_SD_CS_GPIO_CLK_ENABLE();
 800fe72:	4b0f      	ldr	r3, [pc, #60]	; (800feb0 <SD_IO_CS_Init+0x44>)
 800fe74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe76:	4a0e      	ldr	r2, [pc, #56]	; (800feb0 <SD_IO_CS_Init+0x44>)
 800fe78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fe7e:	4b0c      	ldr	r3, [pc, #48]	; (800feb0 <SD_IO_CS_Init+0x44>)
 800fe80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe86:	603b      	str	r3, [r7, #0]
 800fe88:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStructure.Pin = SENSORTILE_SD_CS_PIN;
 800fe8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800fe90:	2301      	movs	r3, #1
 800fe92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 800fe94:	2301      	movs	r3, #1
 800fe96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800fe98:	2303      	movs	r3, #3
 800fe9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SENSORTILE_SD_CS_GPIO_PORT, &GPIO_InitStructure);
 800fe9c:	1d3b      	adds	r3, r7, #4
 800fe9e:	4619      	mov	r1, r3
 800fea0:	4804      	ldr	r0, [pc, #16]	; (800feb4 <SD_IO_CS_Init+0x48>)
 800fea2:	f7f6 fb0b 	bl	80064bc <HAL_GPIO_Init>
}
 800fea6:	bf00      	nop
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	40021000 	.word	0x40021000
 800feb4:	48001800 	.word	0x48001800

0800feb8 <SD_IO_WriteByte>:
  * @brief  Writes a byte on the SD.
  * @param  Data: byte to send.
  * @retval None
  */
void SD_IO_WriteByte(uint8_t Data)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	4603      	mov	r3, r0
 800fec0:	71fb      	strb	r3, [r7, #7]
  /* Send the byte */
  SD_IO_SPI_Write(Data);
 800fec2:	79fb      	ldrb	r3, [r7, #7]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff ff67 	bl	800fd98 <SD_IO_SPI_Write>
  
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
	...

0800fed4 <SD_IO_WriteDMA>:
  * @brief  Writes a block by DMA on the SD.
  * @param  Data: byte to send.
  * @retval None
  */
void SD_IO_WriteDMA(uint8_t *pData, uint16_t Size)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	460b      	mov	r3, r1
 800fede:	807b      	strh	r3, [r7, #2]
  
  if(HAL_SPI_Transmit_DMA(&SPI_SD_Handle, (uint8_t*)pData, Size) != HAL_OK)
 800fee0:	887b      	ldrh	r3, [r7, #2]
 800fee2:	461a      	mov	r2, r3
 800fee4:	6879      	ldr	r1, [r7, #4]
 800fee6:	4805      	ldr	r0, [pc, #20]	; (800fefc <SD_IO_WriteDMA+0x28>)
 800fee8:	f7f9 f9ce 	bl	8009288 <HAL_SPI_Transmit_DMA>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d000      	beq.n	800fef4 <SD_IO_WriteDMA+0x20>
  {
    /* Transfer error in transmission process */
    while(1);
 800fef2:	e7fe      	b.n	800fef2 <SD_IO_WriteDMA+0x1e>
  }
  
}
 800fef4:	bf00      	nop
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	2000bdac 	.word	0x2000bdac

0800ff00 <SD_IO_ReadByte>:
  * @brief  Reads a byte from the SD.
  * @param  None
  * @retval The received byte.
  */
uint8_t SD_IO_ReadByte(void)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 800ff06:	2300      	movs	r3, #0
 800ff08:	71fb      	strb	r3, [r7, #7]
  
  /* Get the received data */
  data = SD_IO_SPI_Read();
 800ff0a:	f7ff ff21 	bl	800fd50 <SD_IO_SPI_Read>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	71fb      	strb	r3, [r7, #7]

  /* Return the shifted data */
  return data;
 800ff12:	79fb      	ldrb	r3, [r7, #7]
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <SD_IO_WriteCmd_wResp>:
  * @param  Crc: The CRC.
  * @param  Response: Expected response from the SD card
  * @retval  HAL_StatusTypeDef HAL Status
  */
uint8_t SD_IO_WriteCmd_wResp(uint8_t Cmd, uint32_t Arg, uint8_t Crc)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b086      	sub	sp, #24
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	4603      	mov	r3, r0
 800ff24:	6039      	str	r1, [r7, #0]
 800ff26:	71fb      	strb	r3, [r7, #7]
 800ff28:	4613      	mov	r3, r2
 800ff2a:	71bb      	strb	r3, [r7, #6]
  uint32_t n = 0x00, resp;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	617b      	str	r3, [r7, #20]
  uint8_t frame[6];

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40); /* Construct byte 1 */
 800ff30:	79fb      	ldrb	r3, [r7, #7]
 800ff32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	723b      	strb	r3, [r7, #8]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	0e1b      	lsrs	r3, r3, #24
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	727b      	strb	r3, [r7, #9]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	0c1b      	lsrs	r3, r3, #16
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	72bb      	strb	r3, [r7, #10]
  frame[3] = (uint8_t)(Arg >> 8); /* Construct byte 4 */
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	0a1b      	lsrs	r3, r3, #8
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	72fb      	strb	r3, [r7, #11]
  frame[4] = (uint8_t)(Arg); /* Construct byte 5 */
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	733b      	strb	r3, [r7, #12]
  frame[5] = (Crc); /* Construct CRC: byte 6 */
 800ff58:	79bb      	ldrb	r3, [r7, #6]
 800ff5a:	737b      	strb	r3, [r7, #13]
  
  /* SD chip select low */
  SENSORTILE_SD_CS_LOW();
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ff62:	4815      	ldr	r0, [pc, #84]	; (800ffb8 <SD_IO_WriteCmd_wResp+0x9c>)
 800ff64:	f7f6 fd5e 	bl	8006a24 <HAL_GPIO_WritePin>
    
  /* Send Frame */
  for (n = 0; n < 6; n++)
 800ff68:	2300      	movs	r3, #0
 800ff6a:	617b      	str	r3, [r7, #20]
 800ff6c:	e00a      	b.n	800ff84 <SD_IO_WriteCmd_wResp+0x68>
  {
    SD_IO_WriteByte(frame[n]); /* Send the Cmd bytes */
 800ff6e:	f107 0208 	add.w	r2, r7, #8
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	4413      	add	r3, r2
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7ff ff9d 	bl	800feb8 <SD_IO_WriteByte>
  for (n = 0; n < 6; n++)
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	3301      	adds	r3, #1
 800ff82:	617b      	str	r3, [r7, #20]
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	2b05      	cmp	r3, #5
 800ff88:	d9f1      	bls.n	800ff6e <SD_IO_WriteCmd_wResp+0x52>
  }

  n = 10; /* Wait for response (10 bytes max) */
 800ff8a:	230a      	movs	r3, #10
 800ff8c:	617b      	str	r3, [r7, #20]
  do {
    resp = SD_IO_ReadByte();
 800ff8e:	f7ff ffb7 	bl	800ff00 <SD_IO_ReadByte>
 800ff92:	4603      	mov	r3, r0
 800ff94:	613b      	str	r3, [r7, #16]
  } while ((resp & 0x80) && --n);
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d005      	beq.n	800ffac <SD_IO_WriteCmd_wResp+0x90>
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	3b01      	subs	r3, #1
 800ffa4:	617b      	str	r3, [r7, #20]
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1f0      	bne.n	800ff8e <SD_IO_WriteCmd_wResp+0x72>
  
  return resp;	/* Return received response */
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	b2db      	uxtb	r3, r3
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3718      	adds	r7, #24
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	48001800 	.word	0x48001800

0800ffbc <SD_IO_WriteCmd>:
  * @param  Crc: The CRC.
  * @param  Response: Expected response from the SD card
  * @retval  HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef SD_IO_WriteCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Response)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6039      	str	r1, [r7, #0]
 800ffc4:	4611      	mov	r1, r2
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	4603      	mov	r3, r0
 800ffca:	71fb      	strb	r3, [r7, #7]
 800ffcc:	460b      	mov	r3, r1
 800ffce:	71bb      	strb	r3, [r7, #6]
 800ffd0:	4613      	mov	r3, r2
 800ffd2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0x00;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	617b      	str	r3, [r7, #20]
  uint8_t frame[6];

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40); /* Construct byte 1 */
 800ffd8:	79fb      	ldrb	r3, [r7, #7]
 800ffda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	733b      	strb	r3, [r7, #12]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	0e1b      	lsrs	r3, r3, #24
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	737b      	strb	r3, [r7, #13]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	0c1b      	lsrs	r3, r3, #16
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	73bb      	strb	r3, [r7, #14]
  frame[3] = (uint8_t)(Arg >> 8); /* Construct byte 4 */
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	0a1b      	lsrs	r3, r3, #8
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	73fb      	strb	r3, [r7, #15]
  frame[4] = (uint8_t)(Arg); /* Construct byte 5 */
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	743b      	strb	r3, [r7, #16]
  frame[5] = (Crc); /* Construct CRC: byte 6 */
 8010000:	79bb      	ldrb	r3, [r7, #6]
 8010002:	747b      	strb	r3, [r7, #17]
  
  /* SD chip select low */
  SENSORTILE_SD_CS_LOW();
 8010004:	2200      	movs	r2, #0
 8010006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801000a:	4811      	ldr	r0, [pc, #68]	; (8010050 <SD_IO_WriteCmd+0x94>)
 801000c:	f7f6 fd0a 	bl	8006a24 <HAL_GPIO_WritePin>
    
  /* Send Frame */
  for (counter = 0; counter < 6; counter++)
 8010010:	2300      	movs	r3, #0
 8010012:	617b      	str	r3, [r7, #20]
 8010014:	e00a      	b.n	801002c <SD_IO_WriteCmd+0x70>
  {
    SD_IO_WriteByte(frame[counter]); /* Send the Cmd bytes */
 8010016:	f107 020c 	add.w	r2, r7, #12
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	4413      	add	r3, r2
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	4618      	mov	r0, r3
 8010022:	f7ff ff49 	bl	800feb8 <SD_IO_WriteByte>
  for (counter = 0; counter < 6; counter++)
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	3301      	adds	r3, #1
 801002a:	617b      	str	r3, [r7, #20]
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	2b05      	cmp	r3, #5
 8010030:	d9f1      	bls.n	8010016 <SD_IO_WriteCmd+0x5a>
  }

  if(Response != SENSORTILE_SD_NO_RESPONSE_EXPECTED)
 8010032:	797b      	ldrb	r3, [r7, #5]
 8010034:	2b80      	cmp	r3, #128	; 0x80
 8010036:	d005      	beq.n	8010044 <SD_IO_WriteCmd+0x88>
  {
    return SD_IO_WaitResponse(Response);
 8010038:	797b      	ldrb	r3, [r7, #5]
 801003a:	4618      	mov	r0, r3
 801003c:	f000 f80a 	bl	8010054 <SD_IO_WaitResponse>
 8010040:	4603      	mov	r3, r0
 8010042:	e000      	b.n	8010046 <SD_IO_WriteCmd+0x8a>
  }
  
  return HAL_OK;
 8010044:	2300      	movs	r3, #0
}
 8010046:	4618      	mov	r0, r3
 8010048:	3718      	adds	r7, #24
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	48001800 	.word	0x48001800

08010054 <SD_IO_WaitResponse>:
  * @brief  Waits response from the SD card
  * @param  Response: Expected response from the SD card
  * @retval  HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef SD_IO_WaitResponse(uint8_t Response)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout = 0xFF0;//0x400;//
 801005e:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8010062:	60fb      	str	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  while ((SD_IO_ReadByte() != Response) && timeout)
 8010064:	e002      	b.n	801006c <SD_IO_WaitResponse+0x18>
  {
    timeout--;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3b01      	subs	r3, #1
 801006a:	60fb      	str	r3, [r7, #12]
  while ((SD_IO_ReadByte() != Response) && timeout)
 801006c:	f7ff ff48 	bl	800ff00 <SD_IO_ReadByte>
 8010070:	4603      	mov	r3, r0
 8010072:	461a      	mov	r2, r3
 8010074:	79fb      	ldrb	r3, [r7, #7]
 8010076:	4293      	cmp	r3, r2
 8010078:	d002      	beq.n	8010080 <SD_IO_WaitResponse+0x2c>
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1f2      	bne.n	8010066 <SD_IO_WaitResponse+0x12>
  }

  if (timeout == 0)
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d101      	bne.n	801008a <SD_IO_WaitResponse+0x36>
  {
    /* After time out */
    return HAL_TIMEOUT;
 8010086:	2303      	movs	r3, #3
 8010088:	e000      	b.n	801008c <SD_IO_WaitResponse+0x38>
  }
  else
  {
    /* Right response got */
    return HAL_OK;
 801008a:	2300      	movs	r3, #0
  }
}
 801008c:	4618      	mov	r0, r3
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <SD_IO_WriteDummy>:
  * @brief  Sends dummy byte with CS High
  * @param  None
  * @retval None
  */
void SD_IO_WriteDummy(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
    /* SD chip select high */
    SENSORTILE_SD_CS_HIGH();
 8010098:	2201      	movs	r2, #1
 801009a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801009e:	4804      	ldr	r0, [pc, #16]	; (80100b0 <SD_IO_WriteDummy+0x1c>)
 80100a0:	f7f6 fcc0 	bl	8006a24 <HAL_GPIO_WritePin>
    
    /* Send Dummy byte 0xFF */
    SD_IO_WriteByte(SENSORTILE_SD_DUMMY_BYTE);
 80100a4:	20ff      	movs	r0, #255	; 0xff
 80100a6:	f7ff ff07 	bl	800feb8 <SD_IO_WriteByte>
}
 80100aa:	bf00      	nop
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	48001800 	.word	0x48001800

080100b4 <BSP_SD_Init>:
  * @retval The SD Response: 
  *         - MSD_ERROR : Sequence failed
  *         - MSD_OK    : Sequence succeed
  */
uint8_t BSP_SD_Init(void)
{ 
 80100b4:	b580      	push	{r7, lr}
 80100b6:	af00      	add	r7, sp, #0
  /* Configure SPI in Low Speed mode for initialization */
  SD_IO_Init_LS();
 80100b8:	f7ff feb8 	bl	800fe2c <SD_IO_Init_LS>
  
  if(SD_GoIdleState() == MSD_ERROR)
 80100bc:	f000 fc20 	bl	8010900 <SD_GoIdleState>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d104      	bne.n	80100d0 <BSP_SD_Init+0x1c>
  {
    SdStatus = SD_NOT_PRESENT;
 80100c6:	4b0a      	ldr	r3, [pc, #40]	; (80100f0 <BSP_SD_Init+0x3c>)
 80100c8:	2200      	movs	r2, #0
 80100ca:	701a      	strb	r2, [r3, #0]
    return MSD_ERROR;
 80100cc:	2301      	movs	r3, #1
 80100ce:	e00c      	b.n	80100ea <BSP_SD_Init+0x36>
  }
  else
  {
    SdStatus = SD_PRESENT;
 80100d0:	4b07      	ldr	r3, [pc, #28]	; (80100f0 <BSP_SD_Init+0x3c>)
 80100d2:	2201      	movs	r2, #1
 80100d4:	701a      	strb	r2, [r3, #0]
    
    if(SD_CardType != HIGH_CAPACITY_SD_CARD)
 80100d6:	4b07      	ldr	r3, [pc, #28]	; (80100f4 <BSP_SD_Init+0x40>)
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d001      	beq.n	80100e4 <BSP_SD_Init+0x30>
    {
      /* SD Card type not supported. Please use SDHC Card */
      return MSD_ERROR;
 80100e0:	2301      	movs	r3, #1
 80100e2:	e002      	b.n	80100ea <BSP_SD_Init+0x36>
    }
    
    /* Configure SPI in High Speed mode for normal usage */
    SD_IO_Init();
 80100e4:	f7ff fe82 	bl	800fdec <SD_IO_Init>
    return MSD_OK;
 80100e8:	2300      	movs	r3, #0
  }
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	200000d4 	.word	0x200000d4
 80100f4:	20000568 	.word	0x20000568

080100f8 <BSP_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR : Sequence failed
  *         - MSD_OK    : Sequence succeed
  */
uint8_t BSP_SD_GetCardInfo(SD_CardInfo *pCardInfo)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b084      	sub	sp, #16
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  uint8_t status = MSD_ERROR;
 8010100:	2301      	movs	r3, #1
 8010102:	73fb      	strb	r3, [r7, #15]

  SD_GetCSDRegister(&(pCardInfo->Csd));
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	f000 f942 	bl	8010390 <SD_GetCSDRegister>
  status = SD_GetCIDRegister(&(pCardInfo->Cid));
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	332c      	adds	r3, #44	; 0x2c
 8010110:	4618      	mov	r0, r3
 8010112:	f000 fac3 	bl	801069c <SD_GetCIDRegister>
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]
  pCardInfo->CardCapacity = (pCardInfo->Csd.DeviceSize + 1) ;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	691b      	ldr	r3, [r3, #16]
 801011e:	1c5a      	adds	r2, r3, #1
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	645a      	str	r2, [r3, #68]	; 0x44
  pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.DeviceSizeMul + 2));
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	7e1b      	ldrb	r3, [r3, #24]
 8010128:	b2db      	uxtb	r3, r3
 801012a:	3302      	adds	r3, #2
 801012c:	2201      	movs	r2, #1
 801012e:	409a      	lsls	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010134:	fb02 f203 	mul.w	r2, r2, r3
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	645a      	str	r2, [r3, #68]	; 0x44
  pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	7a1b      	ldrb	r3, [r3, #8]
 8010140:	b2db      	uxtb	r3, r3
 8010142:	461a      	mov	r2, r3
 8010144:	2301      	movs	r3, #1
 8010146:	4093      	lsls	r3, r2
 8010148:	461a      	mov	r2, r3
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	649a      	str	r2, [r3, #72]	; 0x48
  pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010156:	fb02 f203 	mul.w	r2, r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	645a      	str	r2, [r3, #68]	; 0x44
  pCardInfo->LogBlockSize= BLOCK_SIZE;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010164:	655a      	str	r2, [r3, #84]	; 0x54
  pCardInfo->LogBlockNbr= (pCardInfo->CardCapacity)/BLOCK_SIZE;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801016a:	0a5a      	lsrs	r2, r3, #9
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Returns the reponse */
  return status;
 8010170:	7bfb      	ldrb	r3, [r7, #15]
}
 8010172:	4618      	mov	r0, r3
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
	...

0801017c <BSP_SD_ReadBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t* p32Data, uint64_t Sector, uint32_t NumberOfBlocks, uint32_t timeout)
{
 801017c:	b590      	push	{r4, r7, lr}
 801017e:	b08b      	sub	sp, #44	; 0x2c
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	e9c7 2300 	strd	r2, r3, [r7]
  uint32_t counter = 0, offset = 0;
 8010188:	2300      	movs	r3, #0
 801018a:	627b      	str	r3, [r7, #36]	; 0x24
 801018c:	2300      	movs	r3, #0
 801018e:	623b      	str	r3, [r7, #32]
  uint8_t rvalue = MSD_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	77fb      	strb	r3, [r7, #31]
  uint8_t *pData = (uint8_t *)p32Data;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	61bb      	str	r3, [r7, #24]
  
  
  uint16_t BlockSize=BLOCK_SIZE;
 8010198:	f44f 7300 	mov.w	r3, #512	; 0x200
 801019c:	82fb      	strh	r3, [r7, #22]
  /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and 
     Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
  if (SD_IO_WriteCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_RESPONSE_NO_ERROR) != HAL_OK)
 801019e:	8af9      	ldrh	r1, [r7, #22]
 80101a0:	2300      	movs	r3, #0
 80101a2:	22ff      	movs	r2, #255	; 0xff
 80101a4:	2010      	movs	r0, #16
 80101a6:	f7ff ff09 	bl	800ffbc <SD_IO_WriteCmd>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d001      	beq.n	80101b4 <BSP_SD_ReadBlocks+0x38>
  {
    return MSD_ERROR;
 80101b0:	2301      	movs	r3, #1
 80101b2:	e057      	b.n	8010264 <BSP_SD_ReadBlocks+0xe8>
  }

  if(SD_CardType != HIGH_CAPACITY_SD_CARD)
 80101b4:	4b2d      	ldr	r3, [pc, #180]	; (801026c <BSP_SD_ReadBlocks+0xf0>)
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	2b02      	cmp	r3, #2
 80101bc:	d04a      	beq.n	8010254 <BSP_SD_ReadBlocks+0xd8>
  {
    Sector *= 512;
 80101be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80101c2:	f04f 0300 	mov.w	r3, #0
 80101c6:	f04f 0400 	mov.w	r4, #0
 80101ca:	0254      	lsls	r4, r2, #9
 80101cc:	ea44 54d1 	orr.w	r4, r4, r1, lsr #23
 80101d0:	024b      	lsls	r3, r1, #9
 80101d2:	e9c7 3400 	strd	r3, r4, [r7]
  }
  
  /* Data transfer */
  while (NumberOfBlocks--)
 80101d6:	e03d      	b.n	8010254 <BSP_SD_ReadBlocks+0xd8>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_WriteDummy();
 80101d8:	f7ff ff5c 	bl	8010094 <SD_IO_WriteDummy>

    /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
    /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
    if (SD_IO_WriteCmd(SD_CMD_READ_SINGLE_BLOCK, Sector + offset, 0xFF, SD_RESPONSE_NO_ERROR) != HAL_OK)
 80101dc:	683a      	ldr	r2, [r7, #0]
 80101de:	6a3b      	ldr	r3, [r7, #32]
 80101e0:	18d1      	adds	r1, r2, r3
 80101e2:	2300      	movs	r3, #0
 80101e4:	22ff      	movs	r2, #255	; 0xff
 80101e6:	2011      	movs	r0, #17
 80101e8:	f7ff fee8 	bl	800ffbc <SD_IO_WriteCmd>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d001      	beq.n	80101f6 <BSP_SD_ReadBlocks+0x7a>
    {
      return MSD_ERROR;
 80101f2:	2301      	movs	r3, #1
 80101f4:	e036      	b.n	8010264 <BSP_SD_ReadBlocks+0xe8>
    }

    /* Now look for the data token to signify the start of the data */
    if (SD_IO_WaitResponse(SD_START_DATA_SINGLE_BLOCK_READ) == HAL_OK)
 80101f6:	20fe      	movs	r0, #254	; 0xfe
 80101f8:	f7ff ff2c 	bl	8010054 <SD_IO_WaitResponse>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d126      	bne.n	8010250 <BSP_SD_ReadBlocks+0xd4>
    {
      /* Read the SD block data : read NumByteToRead data */
      for (counter = 0; counter < BlockSize; counter++)
 8010202:	2300      	movs	r3, #0
 8010204:	627b      	str	r3, [r7, #36]	; 0x24
 8010206:	e00b      	b.n	8010220 <BSP_SD_ReadBlocks+0xa4>
      {
        /* Read the pointed data */
        *pData = SD_IO_ReadByte();
 8010208:	f7ff fe7a 	bl	800ff00 <SD_IO_ReadByte>
 801020c:	4603      	mov	r3, r0
 801020e:	461a      	mov	r2, r3
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	701a      	strb	r2, [r3, #0]
        /* Point to the next location where the byte read will be saved */
        pData++;
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	3301      	adds	r3, #1
 8010218:	61bb      	str	r3, [r7, #24]
      for (counter = 0; counter < BlockSize; counter++)
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	3301      	adds	r3, #1
 801021e:	627b      	str	r3, [r7, #36]	; 0x24
 8010220:	8afb      	ldrh	r3, [r7, #22]
 8010222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010224:	429a      	cmp	r2, r3
 8010226:	d3ef      	bcc.n	8010208 <BSP_SD_ReadBlocks+0x8c>
      }
      
      /* Set next write address */
      if(SD_CardType != HIGH_CAPACITY_SD_CARD)
 8010228:	4b10      	ldr	r3, [pc, #64]	; (801026c <BSP_SD_ReadBlocks+0xf0>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	b2db      	uxtb	r3, r3
 801022e:	2b02      	cmp	r3, #2
 8010230:	d004      	beq.n	801023c <BSP_SD_ReadBlocks+0xc0>
      {
        offset += BlockSize;
 8010232:	8afb      	ldrh	r3, [r7, #22]
 8010234:	6a3a      	ldr	r2, [r7, #32]
 8010236:	4413      	add	r3, r2
 8010238:	623b      	str	r3, [r7, #32]
 801023a:	e002      	b.n	8010242 <BSP_SD_ReadBlocks+0xc6>
      }
      else
      {
        offset += 1;
 801023c:	6a3b      	ldr	r3, [r7, #32]
 801023e:	3301      	adds	r3, #1
 8010240:	623b      	str	r3, [r7, #32]
      }
      /* get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_ReadByte();
 8010242:	f7ff fe5d 	bl	800ff00 <SD_IO_ReadByte>
      SD_IO_ReadByte();
 8010246:	f7ff fe5b 	bl	800ff00 <SD_IO_ReadByte>
      /* Set response value to success */
      rvalue = MSD_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	77fb      	strb	r3, [r7, #31]
 801024e:	e001      	b.n	8010254 <BSP_SD_ReadBlocks+0xd8>
    }
    else
    {
      /* Set response value to failure */
      rvalue = MSD_ERROR;
 8010250:	2301      	movs	r3, #1
 8010252:	77fb      	strb	r3, [r7, #31]
  while (NumberOfBlocks--)
 8010254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010256:	1e5a      	subs	r2, r3, #1
 8010258:	63ba      	str	r2, [r7, #56]	; 0x38
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1bc      	bne.n	80101d8 <BSP_SD_ReadBlocks+0x5c>
    }
  }
  
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_WriteDummy();
 801025e:	f7ff ff19 	bl	8010094 <SD_IO_WriteDummy>
  /* Returns the reponse */
  return rvalue;
 8010262:	7ffb      	ldrb	r3, [r7, #31]
}
 8010264:	4618      	mov	r0, r3
 8010266:	372c      	adds	r7, #44	; 0x2c
 8010268:	46bd      	mov	sp, r7
 801026a:	bd90      	pop	{r4, r7, pc}
 801026c:	20000568 	.word	0x20000568

08010270 <BSP_SD_WriteBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t* p32Data, uint64_t Sector, uint32_t NumberOfBlocks, uint32_t timeout )
{
 8010270:	b590      	push	{r4, r7, lr}
 8010272:	b089      	sub	sp, #36	; 0x24
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	e9c7 2300 	strd	r2, r3, [r7]
  uint32_t offset = 0;
 801027c:	2300      	movs	r3, #0
 801027e:	61fb      	str	r3, [r7, #28]
  uint8_t rvalue = MSD_ERROR;
 8010280:	2301      	movs	r3, #1
 8010282:	76fb      	strb	r3, [r7, #27]
  uint8_t *pData = (uint8_t *)p32Data;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	617b      	str	r3, [r7, #20]
  
  uint16_t BlockSize=BLOCK_SIZE;
 8010288:	f44f 7300 	mov.w	r3, #512	; 0x200
 801028c:	827b      	strh	r3, [r7, #18]
  
  SENSORTILE_SD_CS_HIGH();
 801028e:	2201      	movs	r2, #1
 8010290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010294:	4833      	ldr	r0, [pc, #204]	; (8010364 <BSP_SD_WriteBlocks+0xf4>)
 8010296:	f7f6 fbc5 	bl	8006a24 <HAL_GPIO_WritePin>
  
  if(SD_CardType != HIGH_CAPACITY_SD_CARD)
 801029a:	4b33      	ldr	r3, [pc, #204]	; (8010368 <BSP_SD_WriteBlocks+0xf8>)
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	2b02      	cmp	r3, #2
 80102a2:	d052      	beq.n	801034a <BSP_SD_WriteBlocks+0xda>
  {
    Sector *= BlockSize;
 80102a4:	8a7b      	ldrh	r3, [r7, #18]
 80102a6:	f04f 0400 	mov.w	r4, #0
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	fb03 f102 	mul.w	r1, r3, r2
 80102b0:	683a      	ldr	r2, [r7, #0]
 80102b2:	fb04 f202 	mul.w	r2, r4, r2
 80102b6:	440a      	add	r2, r1
 80102b8:	6839      	ldr	r1, [r7, #0]
 80102ba:	fba1 3403 	umull	r3, r4, r1, r3
 80102be:	4422      	add	r2, r4
 80102c0:	4614      	mov	r4, r2
 80102c2:	e9c7 3400 	strd	r3, r4, [r7]
 80102c6:	e9c7 3400 	strd	r3, r4, [r7]
  }
  
  /* Data transfer */
  while (NumberOfBlocks--)
 80102ca:	e03e      	b.n	801034a <BSP_SD_WriteBlocks+0xda>
  {
    
    /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
    Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
    if (SD_IO_WriteCmd(SD_CMD_WRITE_SINGLE_BLOCK, Sector + offset, 0xFF, SD_RESPONSE_NO_ERROR) != HAL_OK)
 80102cc:	683a      	ldr	r2, [r7, #0]
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	18d1      	adds	r1, r2, r3
 80102d2:	2300      	movs	r3, #0
 80102d4:	22ff      	movs	r2, #255	; 0xff
 80102d6:	2018      	movs	r0, #24
 80102d8:	f7ff fe70 	bl	800ffbc <SD_IO_WriteCmd>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d001      	beq.n	80102e6 <BSP_SD_WriteBlocks+0x76>
    {
      return MSD_ERROR;
 80102e2:	2301      	movs	r3, #1
 80102e4:	e039      	b.n	801035a <BSP_SD_WriteBlocks+0xea>
    }
    
    /* Send dummy byte */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80102e6:	20ff      	movs	r0, #255	; 0xff
 80102e8:	f7ff fde6 	bl	800feb8 <SD_IO_WriteByte>
    
    /* Send the data token to signify the start of the data */
    SD_IO_WriteByte(SD_START_DATA_SINGLE_BLOCK_WRITE);
 80102ec:	20fe      	movs	r0, #254	; 0xfe
 80102ee:	f7ff fde3 	bl	800feb8 <SD_IO_WriteByte>
    
    SD_IO_WriteDMA((uint8_t*)pData, BlockSize);	
 80102f2:	8a7b      	ldrh	r3, [r7, #18]
 80102f4:	4619      	mov	r1, r3
 80102f6:	6978      	ldr	r0, [r7, #20]
 80102f8:	f7ff fdec 	bl	800fed4 <SD_IO_WriteDMA>
    pData+= BLOCK_SIZE;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010302:	617b      	str	r3, [r7, #20]
    
    while (wTransferState == TRANSFER_WAIT)
 8010304:	bf00      	nop
 8010306:	4b19      	ldr	r3, [pc, #100]	; (801036c <BSP_SD_WriteBlocks+0xfc>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d0fb      	beq.n	8010306 <BSP_SD_WriteBlocks+0x96>
    {
    } 
    wTransferState = TRANSFER_WAIT;
 801030e:	4b17      	ldr	r3, [pc, #92]	; (801036c <BSP_SD_WriteBlocks+0xfc>)
 8010310:	2200      	movs	r2, #0
 8010312:	601a      	str	r2, [r3, #0]
    
    /* Set next write address */
    if(SD_CardType != HIGH_CAPACITY_SD_CARD)
 8010314:	4b14      	ldr	r3, [pc, #80]	; (8010368 <BSP_SD_WriteBlocks+0xf8>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	b2db      	uxtb	r3, r3
 801031a:	2b02      	cmp	r3, #2
 801031c:	d004      	beq.n	8010328 <BSP_SD_WriteBlocks+0xb8>
    {
      offset += BlockSize;
 801031e:	8a7b      	ldrh	r3, [r7, #18]
 8010320:	69fa      	ldr	r2, [r7, #28]
 8010322:	4413      	add	r3, r2
 8010324:	61fb      	str	r3, [r7, #28]
 8010326:	e002      	b.n	801032e <BSP_SD_WriteBlocks+0xbe>
    }
    else
    {
      offset += 1;
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	3301      	adds	r3, #1
 801032c:	61fb      	str	r3, [r7, #28]
    }
    
    /* Put CRC bytes (not really needed by us, but required by SD) */
    SD_IO_ReadByte();
 801032e:	f7ff fde7 	bl	800ff00 <SD_IO_ReadByte>
    SD_IO_ReadByte();
 8010332:	f7ff fde5 	bl	800ff00 <SD_IO_ReadByte>
    
    /* Read data response */
    if (SD_GetDataResponse() == SD_DATA_OK)
 8010336:	f000 fa8d 	bl	8010854 <SD_GetDataResponse>
 801033a:	4603      	mov	r3, r0
 801033c:	2b05      	cmp	r3, #5
 801033e:	d102      	bne.n	8010346 <BSP_SD_WriteBlocks+0xd6>
    {
      /* Set response value to success */
      rvalue = MSD_OK;
 8010340:	2300      	movs	r3, #0
 8010342:	76fb      	strb	r3, [r7, #27]
 8010344:	e001      	b.n	801034a <BSP_SD_WriteBlocks+0xda>
    }
    else
    {
      /* Set response value to failure */
      rvalue = MSD_ERROR;
 8010346:	2301      	movs	r3, #1
 8010348:	76fb      	strb	r3, [r7, #27]
  while (NumberOfBlocks--)
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	1e5a      	subs	r2, r3, #1
 801034e:	633a      	str	r2, [r7, #48]	; 0x30
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1bb      	bne.n	80102cc <BSP_SD_WriteBlocks+0x5c>
    }
    
  }  
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_WriteDummy();
 8010354:	f7ff fe9e 	bl	8010094 <SD_IO_WriteDummy>
  
  
  /* Returns the reponse */
  return rvalue;
 8010358:	7efb      	ldrb	r3, [r7, #27]
}
 801035a:	4618      	mov	r0, r3
 801035c:	3724      	adds	r7, #36	; 0x24
 801035e:	46bd      	mov	sp, r7
 8010360:	bd90      	pop	{r4, r7, pc}
 8010362:	bf00      	nop
 8010364:	48001800 	.word	0x48001800
 8010368:	20000568 	.word	0x20000568
 801036c:	2000056c 	.word	0x2000056c

08010370 <HAL_SPI_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and 
  *         you can add your own implementation. 
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010370:	b480      	push	{r7}
 8010372:	b083      	sub	sp, #12
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  /* Transfer in transmission/reception process is complete */
  wTransferState = TRANSFER_COMPLETE;
 8010378:	4b04      	ldr	r3, [pc, #16]	; (801038c <HAL_SPI_TxCpltCallback+0x1c>)
 801037a:	2201      	movs	r2, #1
 801037c:	601a      	str	r2, [r3, #0]
}
 801037e:	bf00      	nop
 8010380:	370c      	adds	r7, #12
 8010382:	46bd      	mov	sp, r7
 8010384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010388:	4770      	bx	lr
 801038a:	bf00      	nop
 801038c:	2000056c 	.word	0x2000056c

08010390 <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd: pointer on an SCD register structure
  * @retval SD status
  */
uint8_t SD_GetCSDRegister(SD_CSD* Csd)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b088      	sub	sp, #32
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 8010398:	2300      	movs	r3, #0
 801039a:	61fb      	str	r3, [r7, #28]
  uint8_t rvalue = MSD_ERROR;
 801039c:	2301      	movs	r3, #1
 801039e:	76fb      	strb	r3, [r7, #27]
  uint8_t CSD_Tab[16];

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  if (SD_IO_WriteCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_RESPONSE_NO_ERROR) == HAL_OK)
 80103a0:	2300      	movs	r3, #0
 80103a2:	22ff      	movs	r2, #255	; 0xff
 80103a4:	2100      	movs	r1, #0
 80103a6:	2009      	movs	r0, #9
 80103a8:	f7ff fe08 	bl	800ffbc <SD_IO_WriteCmd>
 80103ac:	4603      	mov	r3, r0
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d120      	bne.n	80103f4 <SD_GetCSDRegister+0x64>
  {
    if (SD_IO_WaitResponse(SD_START_DATA_SINGLE_BLOCK_READ) == HAL_OK)
 80103b2:	20fe      	movs	r0, #254	; 0xfe
 80103b4:	f7ff fe4e 	bl	8010054 <SD_IO_WaitResponse>
 80103b8:	4603      	mov	r3, r0
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d11a      	bne.n	80103f4 <SD_GetCSDRegister+0x64>
    {
      for (counter = 0; counter < 16; counter++)
 80103be:	2300      	movs	r3, #0
 80103c0:	61fb      	str	r3, [r7, #28]
 80103c2:	e00c      	b.n	80103de <SD_GetCSDRegister+0x4e>
      {
        /* Store CSD register value on CSD_Tab */
        CSD_Tab[counter] = SD_IO_ReadByte();
 80103c4:	f7ff fd9c 	bl	800ff00 <SD_IO_ReadByte>
 80103c8:	4603      	mov	r3, r0
 80103ca:	4619      	mov	r1, r3
 80103cc:	f107 0208 	add.w	r2, r7, #8
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	4413      	add	r3, r2
 80103d4:	460a      	mov	r2, r1
 80103d6:	701a      	strb	r2, [r3, #0]
      for (counter = 0; counter < 16; counter++)
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	3301      	adds	r3, #1
 80103dc:	61fb      	str	r3, [r7, #28]
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	2b0f      	cmp	r3, #15
 80103e2:	d9ef      	bls.n	80103c4 <SD_GetCSDRegister+0x34>
      }

      /* Get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80103e4:	20ff      	movs	r0, #255	; 0xff
 80103e6:	f7ff fd67 	bl	800feb8 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80103ea:	20ff      	movs	r0, #255	; 0xff
 80103ec:	f7ff fd64 	bl	800feb8 <SD_IO_WriteByte>

      /* Set response value to success */
      rvalue = MSD_OK;
 80103f0:	2300      	movs	r3, #0
 80103f2:	76fb      	strb	r3, [r7, #27]
    }
  }
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_WriteDummy();
 80103f4:	f7ff fe4e 	bl	8010094 <SD_IO_WriteDummy>

  if(rvalue == SD_RESPONSE_NO_ERROR)
 80103f8:	7efb      	ldrb	r3, [r7, #27]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f040 8147 	bne.w	801068e <SD_GetCSDRegister+0x2fe>
  {
    /* Byte 0 */
    Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8010400:	7a3b      	ldrb	r3, [r7, #8]
 8010402:	099b      	lsrs	r3, r3, #6
 8010404:	b2da      	uxtb	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	701a      	strb	r2, [r3, #0]
    Csd->SysSpecVersion = (CSD_Tab[0] & 0x3C) >> 2;
 801040a:	7a3b      	ldrb	r3, [r7, #8]
 801040c:	109b      	asrs	r3, r3, #2
 801040e:	b2db      	uxtb	r3, r3
 8010410:	f003 030f 	and.w	r3, r3, #15
 8010414:	b2da      	uxtb	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	705a      	strb	r2, [r3, #1]
    Csd->Reserved1 = CSD_Tab[0] & 0x03;
 801041a:	7a3b      	ldrb	r3, [r7, #8]
 801041c:	f003 0303 	and.w	r3, r3, #3
 8010420:	b2da      	uxtb	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	709a      	strb	r2, [r3, #2]

    /* Byte 1 */
    Csd->TAAC = CSD_Tab[1];
 8010426:	7a7a      	ldrb	r2, [r7, #9]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	70da      	strb	r2, [r3, #3]

    /* Byte 2 */
    Csd->NSAC = CSD_Tab[2];
 801042c:	7aba      	ldrb	r2, [r7, #10]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	711a      	strb	r2, [r3, #4]

    /* Byte 3 */
    Csd->MaxBusClkFrec = CSD_Tab[3];
 8010432:	7afa      	ldrb	r2, [r7, #11]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	715a      	strb	r2, [r3, #5]

    /* Byte 4 */
    Csd->CardComdClasses = CSD_Tab[4] << 4;
 8010438:	7b3b      	ldrb	r3, [r7, #12]
 801043a:	b29b      	uxth	r3, r3
 801043c:	011b      	lsls	r3, r3, #4
 801043e:	b29a      	uxth	r2, r3
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	80da      	strh	r2, [r3, #6]

    /* Byte 5 */
    Csd->CardComdClasses |= (CSD_Tab[5] & 0xF0) >> 4;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	88db      	ldrh	r3, [r3, #6]
 8010448:	b29a      	uxth	r2, r3
 801044a:	7b7b      	ldrb	r3, [r7, #13]
 801044c:	091b      	lsrs	r3, r3, #4
 801044e:	b2db      	uxtb	r3, r3
 8010450:	b29b      	uxth	r3, r3
 8010452:	4313      	orrs	r3, r2
 8010454:	b29a      	uxth	r2, r3
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	80da      	strh	r2, [r3, #6]
    Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 801045a:	7b7b      	ldrb	r3, [r7, #13]
 801045c:	f003 030f 	and.w	r3, r3, #15
 8010460:	b2da      	uxtb	r2, r3
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	721a      	strb	r2, [r3, #8]

    /* Byte 6 */
    Csd->PartBlockRead = (CSD_Tab[6] & 0x80) >> 7;
 8010466:	7bbb      	ldrb	r3, [r7, #14]
 8010468:	09db      	lsrs	r3, r3, #7
 801046a:	b2da      	uxtb	r2, r3
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	725a      	strb	r2, [r3, #9]
    Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8010470:	7bbb      	ldrb	r3, [r7, #14]
 8010472:	119b      	asrs	r3, r3, #6
 8010474:	b2db      	uxtb	r3, r3
 8010476:	f003 0301 	and.w	r3, r3, #1
 801047a:	b2da      	uxtb	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	729a      	strb	r2, [r3, #10]
    Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8010480:	7bbb      	ldrb	r3, [r7, #14]
 8010482:	115b      	asrs	r3, r3, #5
 8010484:	b2db      	uxtb	r3, r3
 8010486:	f003 0301 	and.w	r3, r3, #1
 801048a:	b2da      	uxtb	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	72da      	strb	r2, [r3, #11]
    Csd->DSRImpl = (CSD_Tab[6] & 0x10) >> 4;
 8010490:	7bbb      	ldrb	r3, [r7, #14]
 8010492:	111b      	asrs	r3, r3, #4
 8010494:	b2db      	uxtb	r3, r3
 8010496:	f003 0301 	and.w	r3, r3, #1
 801049a:	b2da      	uxtb	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	731a      	strb	r2, [r3, #12]
    Csd->Reserved2 = 0; /*!< Reserved */
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	735a      	strb	r2, [r3, #13]

    if (SD_CardType == STD_CAPACITY_SD_CARD_V1_1)
 80104a6:	4b7c      	ldr	r3, [pc, #496]	; (8010698 <SD_GetCSDRegister+0x308>)
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d142      	bne.n	8010536 <SD_GetCSDRegister+0x1a6>
    {
      Csd->DeviceSize = (CSD_Tab[6] & 0x03) << 10;
 80104b0:	7bbb      	ldrb	r3, [r7, #14]
 80104b2:	029b      	lsls	r3, r3, #10
 80104b4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	611a      	str	r2, [r3, #16]
      
      /* Byte 7 */
      Csd->DeviceSize |= (CSD_Tab[7]) << 2;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	691b      	ldr	r3, [r3, #16]
 80104c0:	7bfa      	ldrb	r2, [r7, #15]
 80104c2:	0092      	lsls	r2, r2, #2
 80104c4:	431a      	orrs	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	611a      	str	r2, [r3, #16]
      
      /* Byte 8 */
      Csd->DeviceSize |= (CSD_Tab[8] & 0xC0) >> 6;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	691b      	ldr	r3, [r3, #16]
 80104ce:	7c3a      	ldrb	r2, [r7, #16]
 80104d0:	0992      	lsrs	r2, r2, #6
 80104d2:	b2d2      	uxtb	r2, r2
 80104d4:	431a      	orrs	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	611a      	str	r2, [r3, #16]
      
      Csd->MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80104da:	7c3b      	ldrb	r3, [r7, #16]
 80104dc:	10db      	asrs	r3, r3, #3
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	f003 0307 	and.w	r3, r3, #7
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	751a      	strb	r2, [r3, #20]
      Csd->MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 80104ea:	7c3b      	ldrb	r3, [r7, #16]
 80104ec:	f003 0307 	and.w	r3, r3, #7
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	755a      	strb	r2, [r3, #21]
      
      /* Byte 9 */
      Csd->MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 80104f6:	7c7b      	ldrb	r3, [r7, #17]
 80104f8:	095b      	lsrs	r3, r3, #5
 80104fa:	b2da      	uxtb	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	759a      	strb	r2, [r3, #22]
      Csd->MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8010500:	7c7b      	ldrb	r3, [r7, #17]
 8010502:	109b      	asrs	r3, r3, #2
 8010504:	b2db      	uxtb	r3, r3
 8010506:	f003 0307 	and.w	r3, r3, #7
 801050a:	b2da      	uxtb	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	75da      	strb	r2, [r3, #23]
      Csd->DeviceSizeMul = (CSD_Tab[9] & 0x03) << 1;
 8010510:	7c7b      	ldrb	r3, [r7, #17]
 8010512:	005b      	lsls	r3, r3, #1
 8010514:	b2db      	uxtb	r3, r3
 8010516:	f003 0306 	and.w	r3, r3, #6
 801051a:	b2da      	uxtb	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	761a      	strb	r2, [r3, #24]
      /* Byte 10 */
      Csd->DeviceSizeMul |= (CSD_Tab[10] & 0x80) >> 7;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	7e1b      	ldrb	r3, [r3, #24]
 8010524:	b2da      	uxtb	r2, r3
 8010526:	7cbb      	ldrb	r3, [r7, #18]
 8010528:	09db      	lsrs	r3, r3, #7
 801052a:	b2db      	uxtb	r3, r3
 801052c:	4313      	orrs	r3, r2
 801052e:	b2da      	uxtb	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	761a      	strb	r2, [r3, #24]
 8010534:	e015      	b.n	8010562 <SD_GetCSDRegister+0x1d2>
    }
    else
    {
      /* Byte 7 */
      Csd->DeviceSize = (CSD_Tab[7] & 0x3F) << 16;
 8010536:	7bfb      	ldrb	r3, [r7, #15]
 8010538:	041b      	lsls	r3, r3, #16
 801053a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	611a      	str	r2, [r3, #16]
      
      /* Byte 8 */
      Csd->DeviceSize |= (CSD_Tab[8]) << 8;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	691b      	ldr	r3, [r3, #16]
 8010546:	7c3a      	ldrb	r2, [r7, #16]
 8010548:	0212      	lsls	r2, r2, #8
 801054a:	431a      	orrs	r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	611a      	str	r2, [r3, #16]
      
      /* Byte 9 */
      Csd->DeviceSize |= (CSD_Tab[9]);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	691b      	ldr	r3, [r3, #16]
 8010554:	7c7a      	ldrb	r2, [r7, #17]
 8010556:	431a      	orrs	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	611a      	str	r2, [r3, #16]
      
      Csd->DeviceSizeMul = 8; // 2^(8 + 2) = 1024
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2208      	movs	r2, #8
 8010560:	761a      	strb	r2, [r3, #24]
    }
    
    Csd->EraseGrSize = (CSD_Tab[10] & 0x40) >> 6;
 8010562:	7cbb      	ldrb	r3, [r7, #18]
 8010564:	119b      	asrs	r3, r3, #6
 8010566:	b2db      	uxtb	r3, r3
 8010568:	f003 0301 	and.w	r3, r3, #1
 801056c:	b2da      	uxtb	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	765a      	strb	r2, [r3, #25]
    Csd->EraseGrMul = (CSD_Tab[10] & 0x3F) << 1;
 8010572:	7cbb      	ldrb	r3, [r7, #18]
 8010574:	005b      	lsls	r3, r3, #1
 8010576:	b2db      	uxtb	r3, r3
 8010578:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 801057c:	b2da      	uxtb	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	769a      	strb	r2, [r3, #26]

    /* Byte 11 */
    Csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	7e9b      	ldrb	r3, [r3, #26]
 8010586:	b2da      	uxtb	r2, r3
 8010588:	7cfb      	ldrb	r3, [r7, #19]
 801058a:	09db      	lsrs	r3, r3, #7
 801058c:	b2db      	uxtb	r3, r3
 801058e:	4313      	orrs	r3, r2
 8010590:	b2da      	uxtb	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	769a      	strb	r2, [r3, #26]
    Csd->WrProtectGrSize = (CSD_Tab[11] & 0x7F);
 8010596:	7cfb      	ldrb	r3, [r7, #19]
 8010598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801059c:	b2da      	uxtb	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	76da      	strb	r2, [r3, #27]

    /* Byte 12 */
    Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 80105a2:	7d3b      	ldrb	r3, [r7, #20]
 80105a4:	09db      	lsrs	r3, r3, #7
 80105a6:	b2da      	uxtb	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	771a      	strb	r2, [r3, #28]
    Csd->ManDeflECC = (CSD_Tab[12] & 0x60) >> 5;
 80105ac:	7d3b      	ldrb	r3, [r7, #20]
 80105ae:	115b      	asrs	r3, r3, #5
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	f003 0303 	and.w	r3, r3, #3
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	775a      	strb	r2, [r3, #29]
    Csd->WrSpeedFact = (CSD_Tab[12] & 0x1C) >> 2;
 80105bc:	7d3b      	ldrb	r3, [r7, #20]
 80105be:	109b      	asrs	r3, r3, #2
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	f003 0307 	and.w	r3, r3, #7
 80105c6:	b2da      	uxtb	r2, r3
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	779a      	strb	r2, [r3, #30]
    Csd->MaxWrBlockLen = (CSD_Tab[12] & 0x03) << 2;
 80105cc:	7d3b      	ldrb	r3, [r7, #20]
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	f003 030c 	and.w	r3, r3, #12
 80105d6:	b2da      	uxtb	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	77da      	strb	r2, [r3, #31]

    /* Byte 13 */
    Csd->MaxWrBlockLen |= (CSD_Tab[13] & 0xC0) >> 6;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	7fdb      	ldrb	r3, [r3, #31]
 80105e0:	b2da      	uxtb	r2, r3
 80105e2:	7d7b      	ldrb	r3, [r7, #21]
 80105e4:	099b      	lsrs	r3, r3, #6
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	4313      	orrs	r3, r2
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	77da      	strb	r2, [r3, #31]
    Csd->WriteBlockPaPartial = (CSD_Tab[13] & 0x20) >> 5;
 80105f0:	7d7b      	ldrb	r3, [r7, #21]
 80105f2:	115b      	asrs	r3, r3, #5
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	f003 0301 	and.w	r3, r3, #1
 80105fa:	b2da      	uxtb	r2, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f883 2020 	strb.w	r2, [r3, #32]
    Csd->Reserved3 = 0;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2200      	movs	r2, #0
 8010606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    Csd->ContentProtectAppli = (CSD_Tab[13] & 0x01);
 801060a:	7d7b      	ldrb	r3, [r7, #21]
 801060c:	f003 0301 	and.w	r3, r3, #1
 8010610:	b2da      	uxtb	r2, r3
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    /* Byte 14 */
    Csd->FileFormatGrouop = (CSD_Tab[14] & 0x80) >> 7;
 8010618:	7dbb      	ldrb	r3, [r7, #22]
 801061a:	09db      	lsrs	r3, r3, #7
 801061c:	b2da      	uxtb	r2, r3
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    Csd->CopyFlag = (CSD_Tab[14] & 0x40) >> 6;
 8010624:	7dbb      	ldrb	r3, [r7, #22]
 8010626:	119b      	asrs	r3, r3, #6
 8010628:	b2db      	uxtb	r3, r3
 801062a:	f003 0301 	and.w	r3, r3, #1
 801062e:	b2da      	uxtb	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    Csd->PermWrProtect = (CSD_Tab[14] & 0x20) >> 5;
 8010636:	7dbb      	ldrb	r3, [r7, #22]
 8010638:	115b      	asrs	r3, r3, #5
 801063a:	b2db      	uxtb	r3, r3
 801063c:	f003 0301 	and.w	r3, r3, #1
 8010640:	b2da      	uxtb	r2, r3
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    Csd->TempWrProtect = (CSD_Tab[14] & 0x10) >> 4;
 8010648:	7dbb      	ldrb	r3, [r7, #22]
 801064a:	111b      	asrs	r3, r3, #4
 801064c:	b2db      	uxtb	r3, r3
 801064e:	f003 0301 	and.w	r3, r3, #1
 8010652:	b2da      	uxtb	r2, r3
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    Csd->FileFormat = (CSD_Tab[14] & 0x0C) >> 2;
 801065a:	7dbb      	ldrb	r3, [r7, #22]
 801065c:	109b      	asrs	r3, r3, #2
 801065e:	b2db      	uxtb	r3, r3
 8010660:	f003 0303 	and.w	r3, r3, #3
 8010664:	b2da      	uxtb	r2, r3
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    Csd->ECC = (CSD_Tab[14] & 0x03);
 801066c:	7dbb      	ldrb	r3, [r7, #22]
 801066e:	f003 0303 	and.w	r3, r3, #3
 8010672:	b2da      	uxtb	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /* Byte 15 */
    Csd->CSD_CRC = (CSD_Tab[15] & 0xFE) >> 1;
 801067a:	7dfb      	ldrb	r3, [r7, #23]
 801067c:	085b      	lsrs	r3, r3, #1
 801067e:	b2da      	uxtb	r2, r3
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    Csd->Reserved4 = 1;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2201      	movs	r2, #1
 801068a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  /* Return the reponse */
  return rvalue;
 801068e:	7efb      	ldrb	r3, [r7, #27]
}
 8010690:	4618      	mov	r0, r3
 8010692:	3720      	adds	r7, #32
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	20000568 	.word	0x20000568

0801069c <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static uint8_t SD_GetCIDRegister(SD_CID* Cid)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b088      	sub	sp, #32
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 80106a4:	2300      	movs	r3, #0
 80106a6:	61fb      	str	r3, [r7, #28]
  uint8_t rvalue = MSD_ERROR;
 80106a8:	2301      	movs	r3, #1
 80106aa:	76fb      	strb	r3, [r7, #27]
  uint8_t CID_Tab[16];
  
  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  if (SD_IO_WriteCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_RESPONSE_NO_ERROR) == HAL_OK)
 80106ac:	2300      	movs	r3, #0
 80106ae:	22ff      	movs	r2, #255	; 0xff
 80106b0:	2100      	movs	r1, #0
 80106b2:	200a      	movs	r0, #10
 80106b4:	f7ff fc82 	bl	800ffbc <SD_IO_WriteCmd>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d120      	bne.n	8010700 <SD_GetCIDRegister+0x64>
  {
    if (SD_IO_WaitResponse(SD_START_DATA_SINGLE_BLOCK_READ) == HAL_OK)
 80106be:	20fe      	movs	r0, #254	; 0xfe
 80106c0:	f7ff fcc8 	bl	8010054 <SD_IO_WaitResponse>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d11a      	bne.n	8010700 <SD_GetCIDRegister+0x64>
    {
      /* Store CID register value on CID_Tab */
      for (counter = 0; counter < 16; counter++)
 80106ca:	2300      	movs	r3, #0
 80106cc:	61fb      	str	r3, [r7, #28]
 80106ce:	e00c      	b.n	80106ea <SD_GetCIDRegister+0x4e>
      {
        CID_Tab[counter] = SD_IO_ReadByte();
 80106d0:	f7ff fc16 	bl	800ff00 <SD_IO_ReadByte>
 80106d4:	4603      	mov	r3, r0
 80106d6:	4619      	mov	r1, r3
 80106d8:	f107 0208 	add.w	r2, r7, #8
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	4413      	add	r3, r2
 80106e0:	460a      	mov	r2, r1
 80106e2:	701a      	strb	r2, [r3, #0]
      for (counter = 0; counter < 16; counter++)
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	3301      	adds	r3, #1
 80106e8:	61fb      	str	r3, [r7, #28]
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	2b0f      	cmp	r3, #15
 80106ee:	d9ef      	bls.n	80106d0 <SD_GetCIDRegister+0x34>
      }

      /* Get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80106f0:	20ff      	movs	r0, #255	; 0xff
 80106f2:	f7ff fbe1 	bl	800feb8 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80106f6:	20ff      	movs	r0, #255	; 0xff
 80106f8:	f7ff fbde 	bl	800feb8 <SD_IO_WriteByte>

      /* Set response value to success */
      rvalue = MSD_OK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_WriteDummy();
 8010700:	f7ff fcc8 	bl	8010094 <SD_IO_WriteDummy>

  if(rvalue == MSD_OK)
 8010704:	7efb      	ldrb	r3, [r7, #27]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d16c      	bne.n	80107e4 <SD_GetCIDRegister+0x148>
  {
    /* Byte 0 */
    Cid->ManufacturerID = CID_Tab[0];
 801070a:	7a3a      	ldrb	r2, [r7, #8]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	701a      	strb	r2, [r3, #0]

    /* Byte 1 */
    Cid->OEM_AppliID = CID_Tab[1] << 8;
 8010710:	7a7b      	ldrb	r3, [r7, #9]
 8010712:	b29b      	uxth	r3, r3
 8010714:	021b      	lsls	r3, r3, #8
 8010716:	b29a      	uxth	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	805a      	strh	r2, [r3, #2]

    /* Byte 2 */
    Cid->OEM_AppliID |= CID_Tab[2];
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	885b      	ldrh	r3, [r3, #2]
 8010720:	b29a      	uxth	r2, r3
 8010722:	7abb      	ldrb	r3, [r7, #10]
 8010724:	b29b      	uxth	r3, r3
 8010726:	4313      	orrs	r3, r2
 8010728:	b29a      	uxth	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	805a      	strh	r2, [r3, #2]

    /* Byte 3 */
    Cid->ProdName1 = CID_Tab[3] << 24;
 801072e:	7afb      	ldrb	r3, [r7, #11]
 8010730:	061b      	lsls	r3, r3, #24
 8010732:	461a      	mov	r2, r3
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	605a      	str	r2, [r3, #4]

    /* Byte 4 */
    Cid->ProdName1 |= CID_Tab[4] << 16;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	7b3a      	ldrb	r2, [r7, #12]
 801073e:	0412      	lsls	r2, r2, #16
 8010740:	431a      	orrs	r2, r3
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	605a      	str	r2, [r3, #4]

    /* Byte 5 */
    Cid->ProdName1 |= CID_Tab[5] << 8;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	7b7a      	ldrb	r2, [r7, #13]
 801074c:	0212      	lsls	r2, r2, #8
 801074e:	431a      	orrs	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	605a      	str	r2, [r3, #4]

    /* Byte 6 */
    Cid->ProdName1 |= CID_Tab[6];
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	7bba      	ldrb	r2, [r7, #14]
 801075a:	431a      	orrs	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	605a      	str	r2, [r3, #4]

    /* Byte 7 */
    Cid->ProdName2 = CID_Tab[7];
 8010760:	7bfa      	ldrb	r2, [r7, #15]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	721a      	strb	r2, [r3, #8]

    /* Byte 8 */
    Cid->ProdRev = CID_Tab[8];
 8010766:	7c3a      	ldrb	r2, [r7, #16]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	725a      	strb	r2, [r3, #9]

    /* Byte 9 */
    Cid->ProdSN = CID_Tab[9] << 24;
 801076c:	7c7b      	ldrb	r3, [r7, #17]
 801076e:	061b      	lsls	r3, r3, #24
 8010770:	461a      	mov	r2, r3
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	60da      	str	r2, [r3, #12]

    /* Byte 10 */
    Cid->ProdSN |= CID_Tab[10] << 16;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	7cba      	ldrb	r2, [r7, #18]
 801077c:	0412      	lsls	r2, r2, #16
 801077e:	431a      	orrs	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	60da      	str	r2, [r3, #12]

    /* Byte 11 */
    Cid->ProdSN |= CID_Tab[11] << 8;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	7cfa      	ldrb	r2, [r7, #19]
 801078a:	0212      	lsls	r2, r2, #8
 801078c:	431a      	orrs	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	60da      	str	r2, [r3, #12]

    /* Byte 12 */
    Cid->ProdSN |= CID_Tab[12];
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	7d3a      	ldrb	r2, [r7, #20]
 8010798:	431a      	orrs	r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	60da      	str	r2, [r3, #12]

    /* Byte 13 */
    Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	7c1b      	ldrb	r3, [r3, #16]
 80107a2:	b2da      	uxtb	r2, r3
 80107a4:	7d7b      	ldrb	r3, [r7, #21]
 80107a6:	091b      	lsrs	r3, r3, #4
 80107a8:	b2db      	uxtb	r3, r3
 80107aa:	4313      	orrs	r3, r2
 80107ac:	b2da      	uxtb	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	741a      	strb	r2, [r3, #16]
    Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 80107b2:	7d7b      	ldrb	r3, [r7, #21]
 80107b4:	021b      	lsls	r3, r3, #8
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80107bc:	b29a      	uxth	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	825a      	strh	r2, [r3, #18]

    /* Byte 14 */
    Cid->ManufactDate |= CID_Tab[14];
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	8a5b      	ldrh	r3, [r3, #18]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	7dbb      	ldrb	r3, [r7, #22]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	4313      	orrs	r3, r2
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	825a      	strh	r2, [r3, #18]

    /* Byte 15 */
    Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 80107d4:	7dfb      	ldrb	r3, [r7, #23]
 80107d6:	085b      	lsrs	r3, r3, #1
 80107d8:	b2da      	uxtb	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	751a      	strb	r2, [r3, #20]
    Cid->Reserved2 = 1;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2201      	movs	r2, #1
 80107e2:	755a      	strb	r2, [r3, #21]
  }
  /* Return the reponse */
  return rvalue;
 80107e4:	7efb      	ldrb	r3, [r7, #27]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3720      	adds	r7, #32
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <SD_SendCmd_wResp>:
  * @param  Crc: The CRC.
  * @param  Response: Expected response from the SD card
  * @retval SD status
  */
static uint8_t SD_SendCmd_wResp(uint8_t Cmd, uint32_t Arg, uint8_t Crc)
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b082      	sub	sp, #8
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	4603      	mov	r3, r0
 80107f6:	6039      	str	r1, [r7, #0]
 80107f8:	71fb      	strb	r3, [r7, #7]
 80107fa:	4613      	mov	r3, r2
 80107fc:	71bb      	strb	r3, [r7, #6]
  return SD_IO_WriteCmd_wResp(Cmd, Arg, Crc);
 80107fe:	79ba      	ldrb	r2, [r7, #6]
 8010800:	79fb      	ldrb	r3, [r7, #7]
 8010802:	6839      	ldr	r1, [r7, #0]
 8010804:	4618      	mov	r0, r3
 8010806:	f7ff fb89 	bl	800ff1c <SD_IO_WriteCmd_wResp>
 801080a:	4603      	mov	r3, r0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <SD_SendCmd>:
  * @param  Crc: The CRC.
  * @param  Response: Expected response from the SD card
  * @retval SD status
  */
static uint8_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Response)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b084      	sub	sp, #16
 8010818:	af00      	add	r7, sp, #0
 801081a:	6039      	str	r1, [r7, #0]
 801081c:	4611      	mov	r1, r2
 801081e:	461a      	mov	r2, r3
 8010820:	4603      	mov	r3, r0
 8010822:	71fb      	strb	r3, [r7, #7]
 8010824:	460b      	mov	r3, r1
 8010826:	71bb      	strb	r3, [r7, #6]
 8010828:	4613      	mov	r3, r2
 801082a:	717b      	strb	r3, [r7, #5]
  uint8_t status = MSD_ERROR;
 801082c:	2301      	movs	r3, #1
 801082e:	73fb      	strb	r3, [r7, #15]
  
  if(SD_IO_WriteCmd(Cmd, Arg, Crc, Response) == HAL_OK)
 8010830:	797b      	ldrb	r3, [r7, #5]
 8010832:	79ba      	ldrb	r2, [r7, #6]
 8010834:	79f8      	ldrb	r0, [r7, #7]
 8010836:	6839      	ldr	r1, [r7, #0]
 8010838:	f7ff fbc0 	bl	800ffbc <SD_IO_WriteCmd>
 801083c:	4603      	mov	r3, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	d101      	bne.n	8010846 <SD_SendCmd+0x32>
  {
    status = MSD_OK;
 8010842:	2300      	movs	r3, #0
 8010844:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Send Dummy Byte */
  SD_IO_WriteDummy();
 8010846:	f7ff fc25 	bl	8010094 <SD_IO_WriteDummy>

  return status;
 801084a:	7bfb      	ldrb	r3, [r7, #15]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static SD_Info SD_GetDataResponse(void)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
  SD_Info response, rvalue= SD_DATA_OTHER_ERROR;
 801085a:	23ff      	movs	r3, #255	; 0xff
 801085c:	71bb      	strb	r3, [r7, #6]
  
  while (rvalue != SD_DATA_OK)
 801085e:	e038      	b.n	80108d2 <SD_GetDataResponse+0x7e>
  {
    
    /* Read response */
    response = (SD_Info)SD_IO_ReadByte();
 8010860:	f7ff fb4e 	bl	800ff00 <SD_IO_ReadByte>
 8010864:	4603      	mov	r3, r0
 8010866:	71fb      	strb	r3, [r7, #7]
    /* Mask unused bits */
    response &= 0x1F;
 8010868:	79fb      	ldrb	r3, [r7, #7]
 801086a:	f003 031f 	and.w	r3, r3, #31
 801086e:	71fb      	strb	r3, [r7, #7]
    switch (response)
 8010870:	79fb      	ldrb	r3, [r7, #7]
 8010872:	2b0d      	cmp	r3, #13
 8010874:	d82a      	bhi.n	80108cc <SD_GetDataResponse+0x78>
 8010876:	a201      	add	r2, pc, #4	; (adr r2, 801087c <SD_GetDataResponse+0x28>)
 8010878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087c:	080108bb 	.word	0x080108bb
 8010880:	080108cd 	.word	0x080108cd
 8010884:	080108cd 	.word	0x080108cd
 8010888:	080108cd 	.word	0x080108cd
 801088c:	080108cd 	.word	0x080108cd
 8010890:	080108b5 	.word	0x080108b5
 8010894:	080108cd 	.word	0x080108cd
 8010898:	080108cd 	.word	0x080108cd
 801089c:	080108cd 	.word	0x080108cd
 80108a0:	080108cd 	.word	0x080108cd
 80108a4:	080108cd 	.word	0x080108cd
 80108a8:	080108c5 	.word	0x080108c5
 80108ac:	080108cd 	.word	0x080108cd
 80108b0:	080108c9 	.word	0x080108c9
    {
      case SD_DATA_OK:
      {
        rvalue = SD_DATA_OK;
 80108b4:	2305      	movs	r3, #5
 80108b6:	71bb      	strb	r3, [r7, #6]
        break;
 80108b8:	e00b      	b.n	80108d2 <SD_GetDataResponse+0x7e>
      }
      case 0x00:
      {
        rvalue = SD_DATA_OK;
 80108ba:	2305      	movs	r3, #5
 80108bc:	71bb      	strb	r3, [r7, #6]
        response = SD_DATA_OK;
 80108be:	2305      	movs	r3, #5
 80108c0:	71fb      	strb	r3, [r7, #7]
        break;
 80108c2:	e006      	b.n	80108d2 <SD_GetDataResponse+0x7e>
      }
      case SD_DATA_CRC_ERROR:
        return SD_DATA_CRC_ERROR;
 80108c4:	230b      	movs	r3, #11
 80108c6:	e00e      	b.n	80108e6 <SD_GetDataResponse+0x92>
      case SD_DATA_WRITE_ERROR:
        return SD_DATA_WRITE_ERROR;
 80108c8:	230d      	movs	r3, #13
 80108ca:	e00c      	b.n	80108e6 <SD_GetDataResponse+0x92>
      default:
      {
        rvalue = SD_DATA_OTHER_ERROR;
 80108cc:	23ff      	movs	r3, #255	; 0xff
 80108ce:	71bb      	strb	r3, [r7, #6]
        break;
 80108d0:	bf00      	nop
  while (rvalue != SD_DATA_OK)
 80108d2:	79bb      	ldrb	r3, [r7, #6]
 80108d4:	2b05      	cmp	r3, #5
 80108d6:	d1c3      	bne.n	8010860 <SD_GetDataResponse+0xc>
    }
    
  }

  /* Wait null data */
  while (SD_IO_ReadByte() == 0);
 80108d8:	bf00      	nop
 80108da:	f7ff fb11 	bl	800ff00 <SD_IO_ReadByte>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d0fa      	beq.n	80108da <SD_GetDataResponse+0x86>
  /* Return response */
  return response;
 80108e4:	79fb      	ldrb	r3, [r7, #7]
  
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3708      	adds	r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop

080108f0 <BSP_SD_GetCardState>:
  * @brief  Returns the SD status.
  * @param  None
  * @retval The SD status.
  */
uint8_t BSP_SD_GetCardState(void)
{
 80108f0:	b480      	push	{r7}
 80108f2:	af00      	add	r7, sp, #0
  return MSD_OK;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <SD_GoIdleState>:
  * @brief  Put SD in Idle state.
  * @param  None
  * @retval SD status
  */
static uint8_t SD_GoIdleState(void)
{
 8010900:	b590      	push	{r4, r7, lr}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
  uint8_t n, resp[4];
  
  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and 
     Wait for In Idle State Response (R1 Format) equal to 0x01 */
  if (SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_IN_IDLE_STATE) != MSD_OK)
 8010906:	2301      	movs	r3, #1
 8010908:	2295      	movs	r2, #149	; 0x95
 801090a:	2100      	movs	r1, #0
 801090c:	2000      	movs	r0, #0
 801090e:	f7ff ff81 	bl	8010814 <SD_SendCmd>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d001      	beq.n	801091c <SD_GoIdleState+0x1c>
  {
    /* No Idle State Response: return an error */
    return MSD_ERROR;
 8010918:	2301      	movs	r3, #1
 801091a:	e070      	b.n	80109fe <SD_GoIdleState+0xfe>
  }

  /* Send CMD8 */
  if(SD_SendCmd_wResp(SD_CMD_HS_SEND_EXT_CSD, 0x000001AA, 0x87) == 1)  /* SDv2? */
 801091c:	2287      	movs	r2, #135	; 0x87
 801091e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010922:	2008      	movs	r0, #8
 8010924:	f7ff ff63 	bl	80107ee <SD_SendCmd_wResp>
 8010928:	4603      	mov	r3, r0
 801092a:	2b01      	cmp	r3, #1
 801092c:	d161      	bne.n	80109f2 <SD_GoIdleState+0xf2>
  {
    for (n = 0; n < 4; n++)
 801092e:	2300      	movs	r3, #0
 8010930:	71fb      	strb	r3, [r7, #7]
 8010932:	e00c      	b.n	801094e <SD_GoIdleState+0x4e>
    {
      resp[n] = SD_IO_ReadByte();	/* Get 32 bit return value of R7 resp */
 8010934:	79fc      	ldrb	r4, [r7, #7]
 8010936:	f7ff fae3 	bl	800ff00 <SD_IO_ReadByte>
 801093a:	4603      	mov	r3, r0
 801093c:	461a      	mov	r2, r3
 801093e:	f107 0308 	add.w	r3, r7, #8
 8010942:	4423      	add	r3, r4
 8010944:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (n = 0; n < 4; n++)
 8010948:	79fb      	ldrb	r3, [r7, #7]
 801094a:	3301      	adds	r3, #1
 801094c:	71fb      	strb	r3, [r7, #7]
 801094e:	79fb      	ldrb	r3, [r7, #7]
 8010950:	2b03      	cmp	r3, #3
 8010952:	d9ef      	bls.n	8010934 <SD_GoIdleState+0x34>
    }
    SD_IO_WriteDummy();
 8010954:	f7ff fb9e 	bl	8010094 <SD_IO_WriteDummy>
    
    if (resp[2] == 0x01 && resp[3] == 0xAA)  /* the card supports vcc of 2.7-3.6V? */
 8010958:	78bb      	ldrb	r3, [r7, #2]
 801095a:	2b01      	cmp	r3, #1
 801095c:	d14c      	bne.n	80109f8 <SD_GoIdleState+0xf8>
 801095e:	78fb      	ldrb	r3, [r7, #3]
 8010960:	2baa      	cmp	r3, #170	; 0xaa
 8010962:	d149      	bne.n	80109f8 <SD_GoIdleState+0xf8>
    {	
      do /* Wait for end of initialization with ACMD41(HCS) */
      {
        HAL_Delay(100);
 8010964:	2064      	movs	r0, #100	; 0x64
 8010966:	f7f5 f9df 	bl	8005d28 <HAL_Delay>
        if(SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, 1) != MSD_OK) /* CMD55 because following command id SD Card Specific */
 801096a:	2301      	movs	r3, #1
 801096c:	22ff      	movs	r2, #255	; 0xff
 801096e:	2100      	movs	r1, #0
 8010970:	2037      	movs	r0, #55	; 0x37
 8010972:	f7ff ff4f 	bl	8010814 <SD_SendCmd>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	d001      	beq.n	8010980 <SD_GoIdleState+0x80>
        {
          return MSD_ERROR;
 801097c:	2301      	movs	r3, #1
 801097e:	e03e      	b.n	80109fe <SD_GoIdleState+0xfe>
        }
      } while(SD_SendCmd(SD_CMD_SD_APP_OP_COND, 1UL << 30, 0xFF, SD_RESPONSE_NO_ERROR) != MSD_OK); /* ACMD41 */
 8010980:	2300      	movs	r3, #0
 8010982:	22ff      	movs	r2, #255	; 0xff
 8010984:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010988:	2029      	movs	r0, #41	; 0x29
 801098a:	f7ff ff43 	bl	8010814 <SD_SendCmd>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d1e7      	bne.n	8010964 <SD_GoIdleState+0x64>
      
      HAL_Delay(10);
 8010994:	200a      	movs	r0, #10
 8010996:	f7f5 f9c7 	bl	8005d28 <HAL_Delay>
      
      /* Read OCR register with CMD58 and check CCS flag (bit 30) */
      resp[0] = SD_SendCmd_wResp(SD_CMD_SDMMC_READ_OCR, 0, 0xFF);
 801099a:	22ff      	movs	r2, #255	; 0xff
 801099c:	2100      	movs	r1, #0
 801099e:	203a      	movs	r0, #58	; 0x3a
 80109a0:	f7ff ff25 	bl	80107ee <SD_SendCmd_wResp>
 80109a4:	4603      	mov	r3, r0
 80109a6:	703b      	strb	r3, [r7, #0]
      if(resp[0] == 0)
 80109a8:	783b      	ldrb	r3, [r7, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d11e      	bne.n	80109ec <SD_GoIdleState+0xec>
      {
        for (n = 0; n < 4; n++)
 80109ae:	2300      	movs	r3, #0
 80109b0:	71fb      	strb	r3, [r7, #7]
 80109b2:	e00c      	b.n	80109ce <SD_GoIdleState+0xce>
        {
          resp[n] = SD_IO_ReadByte();	/* Get 32 bit return value of R7 resp */
 80109b4:	79fc      	ldrb	r4, [r7, #7]
 80109b6:	f7ff faa3 	bl	800ff00 <SD_IO_ReadByte>
 80109ba:	4603      	mov	r3, r0
 80109bc:	461a      	mov	r2, r3
 80109be:	f107 0308 	add.w	r3, r7, #8
 80109c2:	4423      	add	r3, r4
 80109c4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (n = 0; n < 4; n++)
 80109c8:	79fb      	ldrb	r3, [r7, #7]
 80109ca:	3301      	adds	r3, #1
 80109cc:	71fb      	strb	r3, [r7, #7]
 80109ce:	79fb      	ldrb	r3, [r7, #7]
 80109d0:	2b03      	cmp	r3, #3
 80109d2:	d9ef      	bls.n	80109b4 <SD_GoIdleState+0xb4>
        }
        if(resp[0]&0x40)
 80109d4:	783b      	ldrb	r3, [r7, #0]
 80109d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d003      	beq.n	80109e6 <SD_GoIdleState+0xe6>
        {
          SD_CardType = HIGH_CAPACITY_SD_CARD;  /* Card id SDv2 and High Capacity */
 80109de:	4b0a      	ldr	r3, [pc, #40]	; (8010a08 <SD_GoIdleState+0x108>)
 80109e0:	2202      	movs	r2, #2
 80109e2:	701a      	strb	r2, [r3, #0]
 80109e4:	e002      	b.n	80109ec <SD_GoIdleState+0xec>
        }
        else
        {
          SD_CardType = STD_CAPACITY_SD_CARD_V2_0;  /* Card id SDv2 */
 80109e6:	4b08      	ldr	r3, [pc, #32]	; (8010a08 <SD_GoIdleState+0x108>)
 80109e8:	2201      	movs	r2, #1
 80109ea:	701a      	strb	r2, [r3, #0]
        }
      }
      SD_IO_WriteDummy();
 80109ec:	f7ff fb52 	bl	8010094 <SD_IO_WriteDummy>
 80109f0:	e002      	b.n	80109f8 <SD_GoIdleState+0xf8>
    }
  }
  else /* Not SDv2 card */
  {
    SD_CardType = STD_CAPACITY_SD_CARD_V1_1;
 80109f2:	4b05      	ldr	r3, [pc, #20]	; (8010a08 <SD_GoIdleState+0x108>)
 80109f4:	2200      	movs	r2, #0
 80109f6:	701a      	strb	r2, [r3, #0]
  }
  
  SD_IO_WriteDummy();
 80109f8:	f7ff fb4c 	bl	8010094 <SD_IO_WriteDummy>
  return MSD_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	370c      	adds	r7, #12
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd90      	pop	{r4, r7, pc}
 8010a06:	bf00      	nop
 8010a08:	20000568 	.word	0x20000568

08010a0c <get_first_file_path>:

FRESULT get_first_file_path (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	DIR * dir_out
)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b0a0      	sub	sp, #128	; 0x80
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
    /* Search a directory for objects and display it */
    FRESULT fr;     /* Return value */
    DIR dj;         /* Directory search object */

    //res = f_opendir(&dj, "/");                       /* Open the directory */
    fr = f_findfirst(&dj, &fno, "", "*");  /* Start to search for JPEG files with the name started by "dsc" */
 8010a16:	f107 000c 	add.w	r0, r7, #12
 8010a1a:	4b10      	ldr	r3, [pc, #64]	; (8010a5c <get_first_file_path+0x50>)
 8010a1c:	4a10      	ldr	r2, [pc, #64]	; (8010a60 <get_first_file_path+0x54>)
 8010a1e:	4911      	ldr	r1, [pc, #68]	; (8010a64 <get_first_file_path+0x58>)
 8010a20:	f7fe fcf6 	bl	800f410 <f_findfirst>
 8010a24:	4603      	mov	r3, r0
 8010a26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (fr == FR_OK && fno.fname[0])
 8010a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10e      	bne.n	8010a50 <get_first_file_path+0x44>
 8010a32:	4b0c      	ldr	r3, [pc, #48]	; (8010a64 <get_first_file_path+0x58>)
 8010a34:	7d9b      	ldrb	r3, [r3, #22]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d00a      	beq.n	8010a50 <get_first_file_path+0x44>
    {
    	strcpy(path,fno.fname);
 8010a3a:	490b      	ldr	r1, [pc, #44]	; (8010a68 <get_first_file_path+0x5c>)
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f006 f8b6 	bl	8016bae <strcpy>
    	memcpy(dir_out,&dj,sizeof(DIR));
 8010a42:	f107 030c 	add.w	r3, r7, #12
 8010a46:	2238      	movs	r2, #56	; 0x38
 8010a48:	4619      	mov	r1, r3
 8010a4a:	6838      	ldr	r0, [r7, #0]
 8010a4c:	f005 ff9e 	bl	801698c <memcpy>

    }

    return fr;
 8010a50:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   // f_closedir(&dj);


}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3780      	adds	r7, #128	; 0x80
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	080191f8 	.word	0x080191f8
 8010a60:	080191fc 	.word	0x080191fc
 8010a64:	20000608 	.word	0x20000608
 8010a68:	2000061e 	.word	0x2000061e

08010a6c <get_next_file_path>:

void get_next_file_path (
    char* path,       /* Start node to be scanned (***also used as work area***) */
	DIR * dir_in
)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b0d8      	sub	sp, #352	; 0x160
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	1d3b      	adds	r3, r7, #4
 8010a74:	6018      	str	r0, [r3, #0]
 8010a76:	463b      	mov	r3, r7
 8010a78:	6019      	str	r1, [r3, #0]

    /* Search a directory for objects and display it */
    FRESULT fr;     /* Return value */


    fr = f_findnext(dir_in, &fno);
 8010a7a:	f107 020c 	add.w	r2, r7, #12
 8010a7e:	463b      	mov	r3, r7
 8010a80:	4611      	mov	r1, r2
 8010a82:	6818      	ldr	r0, [r3, #0]
 8010a84:	f7fe fc9c 	bl	800f3c0 <f_findnext>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
    strcpy(path,fno.fname); //Siempre copiamos el nombre. End si Null.
 8010a8e:	f107 030c 	add.w	r3, r7, #12
 8010a92:	f103 0216 	add.w	r2, r3, #22
 8010a96:	1d3b      	adds	r3, r7, #4
 8010a98:	4611      	mov	r1, r2
 8010a9a:	6818      	ldr	r0, [r3, #0]
 8010a9c:	f006 f887 	bl	8016bae <strcpy>
    return res;
 8010aa0:	bf00      	nop
}
 8010aa2:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <contador_ficheros>:




uint32_t contador_ficheros(void)
{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b0dc      	sub	sp, #368	; 0x170
 8010aae:	af00      	add	r7, sp, #0
	char path_aux[300];
	uint32_t contador_ficheros = 0;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	FRESULT fr;
	DIR dir;
	fr = get_first_file_path(path_aux,&dir);
 8010ab6:	1d3a      	adds	r2, r7, #4
 8010ab8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010abc:	4611      	mov	r1, r2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7ff ffa4 	bl	8010a0c <get_first_file_path>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
	if(fr == FR_OK)
 8010aca:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d114      	bne.n	8010afc <contador_ficheros+0x52>
	{
		while(strcmp(path_aux,"")!= 0)
 8010ad2:	e00b      	b.n	8010aec <contador_ficheros+0x42>
		{
			get_next_file_path(path_aux,&dir);
 8010ad4:	1d3a      	adds	r2, r7, #4
 8010ad6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ada:	4611      	mov	r1, r2
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7ff ffc5 	bl	8010a6c <get_next_file_path>
			contador_ficheros++;
 8010ae2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		while(strcmp(path_aux,"")!= 0)
 8010aec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d1ee      	bne.n	8010ad4 <contador_ficheros+0x2a>
		}
		return contador_ficheros;
 8010af6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8010afa:	e001      	b.n	8010b00 <contador_ficheros+0x56>
	}
	else
	{
		return -1;
 8010afc:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
	...

08010b0c <DATALOG_SD_Init>:
#include "sensor_service.h"
extern uint16_t ConfigServW2STHandle;
extern uint16_t ConfigCharHandle;
#define COGER_FICHERO_ACTUAL 1
void DATALOG_SD_Init(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8010b12:	af00      	add	r7, sp, #0
  //char SDPath[4];
    
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8010b14:	4914      	ldr	r1, [pc, #80]	; (8010b68 <DATALOG_SD_Init+0x5c>)
 8010b16:	4815      	ldr	r0, [pc, #84]	; (8010b6c <DATALOG_SD_Init+0x60>)
 8010b18:	f7fe febc 	bl	800f894 <FATFS_LinkDriver>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d11d      	bne.n	8010b5e <DATALOG_SD_Init+0x52>
		FATFS fs;
		FRESULT res;
		char buff[256];


		 res = f_mount(&SDFatFs, (TCHAR const*)SDPath, 0);
 8010b22:	2200      	movs	r2, #0
 8010b24:	4910      	ldr	r1, [pc, #64]	; (8010b68 <DATALOG_SD_Init+0x5c>)
 8010b26:	4812      	ldr	r0, [pc, #72]	; (8010b70 <DATALOG_SD_Init+0x64>)
 8010b28:	f7fd fe0a 	bl	800e740 <f_mount>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		 if(res != FR_OK)
 8010b32:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00c      	beq.n	8010b54 <DATALOG_SD_Init+0x48>
		 {
			  while(res != FR_OK)
 8010b3a:	e007      	b.n	8010b4c <DATALOG_SD_Init+0x40>
			  {
				  res = f_mount(&SDFatFs, (TCHAR const*)SDPath, 0);
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	490a      	ldr	r1, [pc, #40]	; (8010b68 <DATALOG_SD_Init+0x5c>)
 8010b40:	480b      	ldr	r0, [pc, #44]	; (8010b70 <DATALOG_SD_Init+0x64>)
 8010b42:	f7fd fdfd 	bl	800e740 <f_mount>
 8010b46:	4603      	mov	r3, r0
 8010b48:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
			  while(res != FR_OK)
 8010b4c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1f3      	bne.n	8010b3c <DATALOG_SD_Init+0x30>
		 }else{

		}

		int a;
		a= a+ 1;
 8010b54:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010b58:	3301      	adds	r3, #1
 8010b5a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    }


  }
 8010b5e:	bf00      	nop
 8010b60:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	2000c094 	.word	0x2000c094
 8010b6c:	08019878 	.word	0x08019878
 8010b70:	2000c098 	.word	0x2000c098

08010b74 <write_SD>:

void write_SD(char * cadena)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
	{
		 //char header2[100];
		 //strcpy(header2,cadena);*/

		 uint32_t byteswritten;
		 if(f_write(&sensors_file, cadena, strlen(cadena), (void *)&byteswritten) == FR_OK)
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f7ef fb31 	bl	80001e4 <strlen>
 8010b82:	4602      	mov	r2, r0
 8010b84:	f107 0308 	add.w	r3, r7, #8
 8010b88:	6879      	ldr	r1, [r7, #4]
 8010b8a:	4806      	ldr	r0, [pc, #24]	; (8010ba4 <write_SD+0x30>)
 8010b8c:	f7fe f92b 	bl	800ede6 <f_write>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d101      	bne.n	8010b9a <write_SD+0x26>
		 {
			// f_close (&sensors_file);
			int res = 0;
 8010b96:	2300      	movs	r3, #0
 8010b98:	60fb      	str	r3, [r7, #12]
		 }
	//}

}
 8010b9a:	bf00      	nop
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	2000be60 	.word	0x2000be60

08010ba8 <cerrar_SD>:

//Cerramos la SD para guardar en ella los datos.
FRESULT cerrar_SD(void)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
	FRESULT res = f_close(&sensors_file);
 8010bae:	4806      	ldr	r0, [pc, #24]	; (8010bc8 <cerrar_SD+0x20>)
 8010bb0:	f7fe fb0c 	bl	800f1cc <f_close>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	71fb      	strb	r3, [r7, #7]
	int res2 = 0;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	603b      	str	r3, [r7, #0]
	return res;
 8010bbc:	79fb      	ldrb	r3, [r7, #7]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3708      	adds	r7, #8
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	2000be60 	.word	0x2000be60

08010bcc <abrir_SD>:
  
void abrir_SD(void)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0

	FRESULT res = f_open(&sensors_file, (char const*)sensors_file_name,  FA_OPEN_APPEND| FA_WRITE);
 8010bd2:	2232      	movs	r2, #50	; 0x32
 8010bd4:	4905      	ldr	r1, [pc, #20]	; (8010bec <abrir_SD+0x20>)
 8010bd6:	4806      	ldr	r0, [pc, #24]	; (8010bf0 <abrir_SD+0x24>)
 8010bd8:	f7fd fdf8 	bl	800e7cc <f_open>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	71fb      	strb	r3, [r7, #7]
	int res2 = 0;
 8010be0:	2300      	movs	r3, #0
 8010be2:	603b      	str	r3, [r7, #0]
}
 8010be4:	bf00      	nop
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	20000570 	.word	0x20000570
 8010bf0:	2000be60 	.word	0x2000be60

08010bf4 <abrir_SD_new>:

void abrir_SD_new(char * cadena)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]

	sprintf(sensors_file_name, "%s%s", cadena, ".csv");
 8010bfc:	4b09      	ldr	r3, [pc, #36]	; (8010c24 <abrir_SD_new+0x30>)
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	4909      	ldr	r1, [pc, #36]	; (8010c28 <abrir_SD_new+0x34>)
 8010c02:	480a      	ldr	r0, [pc, #40]	; (8010c2c <abrir_SD_new+0x38>)
 8010c04:	f005 ffa6 	bl	8016b54 <siprintf>
	FRESULT res = f_open(&sensors_file, (char const*)sensors_file_name,  FA_OPEN_APPEND| FA_WRITE);
 8010c08:	2232      	movs	r2, #50	; 0x32
 8010c0a:	4908      	ldr	r1, [pc, #32]	; (8010c2c <abrir_SD_new+0x38>)
 8010c0c:	4808      	ldr	r0, [pc, #32]	; (8010c30 <abrir_SD_new+0x3c>)
 8010c0e:	f7fd fddd 	bl	800e7cc <f_open>
 8010c12:	4603      	mov	r3, r0
 8010c14:	73fb      	strb	r3, [r7, #15]
	int res2 = 0;
 8010c16:	2300      	movs	r3, #0
 8010c18:	60bb      	str	r3, [r7, #8]
}
 8010c1a:	bf00      	nop
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	08019200 	.word	0x08019200
 8010c28:	08019208 	.word	0x08019208
 8010c2c:	20000570 	.word	0x20000570
 8010c30:	2000be60 	.word	0x2000be60

08010c34 <write_SD_BT>:
//---------------------------------------------------------------------------------------

FIL BT_file;
char BT_file_name[100] = {0};
void write_SD_BT(char * cadena)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
	{
		 //char header2[100];
		 //strcpy(header2,cadena);*/

		 uint32_t byteswritten;
		 if(f_write(&BT_file, cadena, strlen(cadena), (void *)&byteswritten) == FR_OK)
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7ef fad1 	bl	80001e4 <strlen>
 8010c42:	4602      	mov	r2, r0
 8010c44:	f107 030c 	add.w	r3, r7, #12
 8010c48:	6879      	ldr	r1, [r7, #4]
 8010c4a:	4803      	ldr	r0, [pc, #12]	; (8010c58 <write_SD_BT+0x24>)
 8010c4c:	f7fe f8cb 	bl	800ede6 <f_write>
		 {
			// f_close (&sensors_file);
		 }
	//}
}
 8010c50:	bf00      	nop
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	2000c52c 	.word	0x2000c52c

08010c5c <cerrar_SD_BT>:
void cerrar_SD_BT(void)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	af00      	add	r7, sp, #0
	f_close (&BT_file);
 8010c60:	4802      	ldr	r0, [pc, #8]	; (8010c6c <cerrar_SD_BT+0x10>)
 8010c62:	f7fe fab3 	bl	800f1cc <f_close>
}
 8010c66:	bf00      	nop
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	2000c52c 	.word	0x2000c52c

08010c70 <abrir_SD_new_BT>:

	f_open(&BT_file, (char const*)BT_file_name,  FA_OPEN_APPEND| FA_WRITE);
}

void abrir_SD_new_BT(char * cadena)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]

	sprintf(BT_file_name, "%s%s", cadena, ".csv");
 8010c78:	4b07      	ldr	r3, [pc, #28]	; (8010c98 <abrir_SD_new_BT+0x28>)
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	4907      	ldr	r1, [pc, #28]	; (8010c9c <abrir_SD_new_BT+0x2c>)
 8010c7e:	4808      	ldr	r0, [pc, #32]	; (8010ca0 <abrir_SD_new_BT+0x30>)
 8010c80:	f005 ff68 	bl	8016b54 <siprintf>
	f_open(&BT_file, (char const*)BT_file_name,  FA_OPEN_APPEND| FA_WRITE);
 8010c84:	2232      	movs	r2, #50	; 0x32
 8010c86:	4906      	ldr	r1, [pc, #24]	; (8010ca0 <abrir_SD_new_BT+0x30>)
 8010c88:	4806      	ldr	r0, [pc, #24]	; (8010ca4 <abrir_SD_new_BT+0x34>)
 8010c8a:	f7fd fd9f 	bl	800e7cc <f_open>
}
 8010c8e:	bf00      	nop
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	08019200 	.word	0x08019200
 8010c9c:	08019208 	.word	0x08019208
 8010ca0:	200005a4 	.word	0x200005a4
 8010ca4:	2000c52c 	.word	0x2000c52c

08010ca8 <write_SD_RAW>:


FIL RAW_file;
char RAW_file_name[100] = {0};
void write_SD_RAW(uint8_t * cadena, uint16_t size_of_vector)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	807b      	strh	r3, [r7, #2]
	if(fr == FR_OK)
	{
		// f_close (&sensors_file);
		int res = 0;
	}*/
}
 8010cb4:	bf00      	nop
 8010cb6:	370c      	adds	r7, #12
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr

08010cc0 <cerrar_SD_RAW>:

void cerrar_SD_RAW(void)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	af00      	add	r7, sp, #0
	//FRESULT fr = f_close(&RAW_file);
}
 8010cc4:	bf00      	nop
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr

08010cce <abrir_SD_RAW>:

void abrir_SD_RAW(void)
{
 8010cce:	b480      	push	{r7}
 8010cd0:	af00      	add	r7, sp, #0
	//FRESULT fr = f_open(&RAW_file, (char const*)RAW_file_name,  FA_OPEN_APPEND| FA_WRITE);
}
 8010cd2:	bf00      	nop
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr

08010cdc <abrir_SD_new_RAW>:

void abrir_SD_new_RAW(char * cadena)
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
	/*
	sprintf(RAW_file_name, "%s%s", cadena, ".txt");
	FRESULT fr =f_open(&RAW_file, (char const*)RAW_file_name,  FA_OPEN_APPEND| FA_WRITE);*/
}
 8010ce4:	bf00      	nop
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <DATALOG_SD_DeInit>:
  * @brief  .
  * @param  None
  * @retval None
  */
void DATALOG_SD_DeInit(void)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	af00      	add	r7, sp, #0
  FATFS_UnLinkDriver(SDPath);
 8010cf4:	4802      	ldr	r0, [pc, #8]	; (8010d00 <DATALOG_SD_DeInit+0x10>)
 8010cf6:	f7fe fe15 	bl	800f924 <FATFS_UnLinkDriver>
}
 8010cfa:	bf00      	nop
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	2000c094 	.word	0x2000c094

08010d04 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010d0e:	4b0b      	ldr	r3, [pc, #44]	; (8010d3c <SD_CheckStatus+0x38>)
 8010d10:	2201      	movs	r2, #1
 8010d12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010d14:	f7ff fdec 	bl	80108f0 <BSP_SD_GetCardState>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d107      	bne.n	8010d2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010d1e:	4b07      	ldr	r3, [pc, #28]	; (8010d3c <SD_CheckStatus+0x38>)
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	f023 0301 	bic.w	r3, r3, #1
 8010d28:	b2da      	uxtb	r2, r3
 8010d2a:	4b04      	ldr	r3, [pc, #16]	; (8010d3c <SD_CheckStatus+0x38>)
 8010d2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010d2e:	4b03      	ldr	r3, [pc, #12]	; (8010d3c <SD_CheckStatus+0x38>)
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	b2db      	uxtb	r3, r3
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	200000d5 	.word	0x200000d5

08010d40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	4603      	mov	r3, r0
 8010d48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010d4a:	4b0b      	ldr	r3, [pc, #44]	; (8010d78 <SD_initialize+0x38>)
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010d50:	f7ff f9b0 	bl	80100b4 <BSP_SD_Init>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d107      	bne.n	8010d6a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010d5a:	79fb      	ldrb	r3, [r7, #7]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7ff ffd1 	bl	8010d04 <SD_CheckStatus>
 8010d62:	4603      	mov	r3, r0
 8010d64:	461a      	mov	r2, r3
 8010d66:	4b04      	ldr	r3, [pc, #16]	; (8010d78 <SD_initialize+0x38>)
 8010d68:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8010d6a:	4b03      	ldr	r3, [pc, #12]	; (8010d78 <SD_initialize+0x38>)
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	b2db      	uxtb	r3, r3
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	200000d5 	.word	0x200000d5

08010d7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	4603      	mov	r3, r0
 8010d84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7ff ffbb 	bl	8010d04 <SD_CheckStatus>
 8010d8e:	4603      	mov	r3, r0
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010d98:	b590      	push	{r4, r7, lr}
 8010d9a:	b089      	sub	sp, #36	; 0x24
 8010d9c:	af02      	add	r7, sp, #8
 8010d9e:	60b9      	str	r1, [r7, #8]
 8010da0:	607a      	str	r2, [r7, #4]
 8010da2:	603b      	str	r3, [r7, #0]
 8010da4:	4603      	mov	r3, r0
 8010da6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010da8:	2301      	movs	r3, #1
 8010daa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f04f 0400 	mov.w	r4, #0
 8010db2:	4a0c      	ldr	r2, [pc, #48]	; (8010de4 <SD_read+0x4c>)
 8010db4:	9201      	str	r2, [sp, #4]
 8010db6:	683a      	ldr	r2, [r7, #0]
 8010db8:	9200      	str	r2, [sp, #0]
 8010dba:	461a      	mov	r2, r3
 8010dbc:	4623      	mov	r3, r4
 8010dbe:	68b8      	ldr	r0, [r7, #8]
 8010dc0:	f7ff f9dc 	bl	801017c <BSP_SD_ReadBlocks>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d107      	bne.n	8010dda <SD_read+0x42>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010dca:	bf00      	nop
 8010dcc:	f7ff fd90 	bl	80108f0 <BSP_SD_GetCardState>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1fa      	bne.n	8010dcc <SD_read+0x34>
    {
    }
    res = RES_OK;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	371c      	adds	r7, #28
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd90      	pop	{r4, r7, pc}
 8010de4:	05f5e100 	.word	0x05f5e100

08010de8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010de8:	b590      	push	{r4, r7, lr}
 8010dea:	b089      	sub	sp, #36	; 0x24
 8010dec:	af02      	add	r7, sp, #8
 8010dee:	60b9      	str	r1, [r7, #8]
 8010df0:	607a      	str	r2, [r7, #4]
 8010df2:	603b      	str	r3, [r7, #0]
 8010df4:	4603      	mov	r3, r0
 8010df6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f04f 0400 	mov.w	r4, #0
 8010e02:	4a0c      	ldr	r2, [pc, #48]	; (8010e34 <SD_write+0x4c>)
 8010e04:	9201      	str	r2, [sp, #4]
 8010e06:	683a      	ldr	r2, [r7, #0]
 8010e08:	9200      	str	r2, [sp, #0]
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	4623      	mov	r3, r4
 8010e0e:	68b8      	ldr	r0, [r7, #8]
 8010e10:	f7ff fa2e 	bl	8010270 <BSP_SD_WriteBlocks>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d107      	bne.n	8010e2a <SD_write+0x42>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010e1a:	bf00      	nop
 8010e1c:	f7ff fd68 	bl	80108f0 <BSP_SD_GetCardState>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1fa      	bne.n	8010e1c <SD_write+0x34>
    {
    }
    res = RES_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	371c      	adds	r7, #28
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd90      	pop	{r4, r7, pc}
 8010e34:	05f5e100 	.word	0x05f5e100

08010e38 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b09a      	sub	sp, #104	; 0x68
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	4603      	mov	r3, r0
 8010e40:	603a      	str	r2, [r7, #0]
 8010e42:	71fb      	strb	r3, [r7, #7]
 8010e44:	460b      	mov	r3, r1
 8010e46:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010e4e:	4b25      	ldr	r3, [pc, #148]	; (8010ee4 <SD_ioctl+0xac>)
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	f003 0301 	and.w	r3, r3, #1
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d001      	beq.n	8010e60 <SD_ioctl+0x28>
 8010e5c:	2303      	movs	r3, #3
 8010e5e:	e03c      	b.n	8010eda <SD_ioctl+0xa2>

  switch (cmd)
 8010e60:	79bb      	ldrb	r3, [r7, #6]
 8010e62:	2b03      	cmp	r3, #3
 8010e64:	d834      	bhi.n	8010ed0 <SD_ioctl+0x98>
 8010e66:	a201      	add	r2, pc, #4	; (adr r2, 8010e6c <SD_ioctl+0x34>)
 8010e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e6c:	08010e7d 	.word	0x08010e7d
 8010e70:	08010e85 	.word	0x08010e85
 8010e74:	08010e9d 	.word	0x08010e9d
 8010e78:	08010eb7 	.word	0x08010eb7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 8010e82:	e028      	b.n	8010ed6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e84:	f107 030c 	add.w	r3, r7, #12
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff f935 	bl	80100f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010e8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010e94:	2300      	movs	r3, #0
 8010e96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 8010e9a:	e01c      	b.n	8010ed6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e9c:	f107 030c 	add.w	r3, r7, #12
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff f929 	bl	80100f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 8010eb4:	e00f      	b.n	8010ed6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010eb6:	f107 030c 	add.w	r3, r7, #12
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7ff f91c 	bl	80100f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ec2:	0a5a      	lsrs	r2, r3, #9
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 8010ece:	e002      	b.n	8010ed6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010ed0:	2304      	movs	r3, #4
 8010ed2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }

  return res;
 8010ed6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3768      	adds	r7, #104	; 0x68
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	200000d5 	.word	0x200000d5

08010ee8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010ee8:	b480      	push	{r7}
 8010eea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010eec:	bf00      	nop
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef4:	4770      	bx	lr
	...

08010ef8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010ef8:	b480      	push	{r7}
 8010efa:	b085      	sub	sp, #20
 8010efc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010efe:	f3ef 8305 	mrs	r3, IPSR
 8010f02:	60bb      	str	r3, [r7, #8]
  return(result);
 8010f04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d10f      	bne.n	8010f2a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8010f0e:	607b      	str	r3, [r7, #4]
  return(result);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d105      	bne.n	8010f22 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f16:	f3ef 8311 	mrs	r3, BASEPRI
 8010f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d007      	beq.n	8010f32 <osKernelInitialize+0x3a>
 8010f22:	4b0e      	ldr	r3, [pc, #56]	; (8010f5c <osKernelInitialize+0x64>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b02      	cmp	r3, #2
 8010f28:	d103      	bne.n	8010f32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010f2a:	f06f 0305 	mvn.w	r3, #5
 8010f2e:	60fb      	str	r3, [r7, #12]
 8010f30:	e00c      	b.n	8010f4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010f32:	4b0a      	ldr	r3, [pc, #40]	; (8010f5c <osKernelInitialize+0x64>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d105      	bne.n	8010f46 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010f3a:	4b08      	ldr	r3, [pc, #32]	; (8010f5c <osKernelInitialize+0x64>)
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010f40:	2300      	movs	r3, #0
 8010f42:	60fb      	str	r3, [r7, #12]
 8010f44:	e002      	b.n	8010f4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010f46:	f04f 33ff 	mov.w	r3, #4294967295
 8010f4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3714      	adds	r7, #20
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	20000720 	.word	0x20000720

08010f60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b084      	sub	sp, #16
 8010f64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f66:	f3ef 8305 	mrs	r3, IPSR
 8010f6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010f6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d10f      	bne.n	8010f92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f72:	f3ef 8310 	mrs	r3, PRIMASK
 8010f76:	607b      	str	r3, [r7, #4]
  return(result);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d105      	bne.n	8010f8a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8010f82:	603b      	str	r3, [r7, #0]
  return(result);
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d007      	beq.n	8010f9a <osKernelStart+0x3a>
 8010f8a:	4b0f      	ldr	r3, [pc, #60]	; (8010fc8 <osKernelStart+0x68>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	d103      	bne.n	8010f9a <osKernelStart+0x3a>
    stat = osErrorISR;
 8010f92:	f06f 0305 	mvn.w	r3, #5
 8010f96:	60fb      	str	r3, [r7, #12]
 8010f98:	e010      	b.n	8010fbc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010f9a:	4b0b      	ldr	r3, [pc, #44]	; (8010fc8 <osKernelStart+0x68>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d109      	bne.n	8010fb6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010fa2:	f7ff ffa1 	bl	8010ee8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010fa6:	4b08      	ldr	r3, [pc, #32]	; (8010fc8 <osKernelStart+0x68>)
 8010fa8:	2202      	movs	r2, #2
 8010faa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010fac:	f001 ffbc 	bl	8012f28 <vTaskStartScheduler>
      stat = osOK;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	60fb      	str	r3, [r7, #12]
 8010fb4:	e002      	b.n	8010fbc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8010fba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010fbc:	68fb      	ldr	r3, [r7, #12]
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3710      	adds	r7, #16
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	20000720 	.word	0x20000720

08010fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b090      	sub	sp, #64	; 0x40
 8010fd0:	af04      	add	r7, sp, #16
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fdc:	f3ef 8305 	mrs	r3, IPSR
 8010fe0:	61fb      	str	r3, [r7, #28]
  return(result);
 8010fe2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	f040 808f 	bne.w	8011108 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fea:	f3ef 8310 	mrs	r3, PRIMASK
 8010fee:	61bb      	str	r3, [r7, #24]
  return(result);
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d105      	bne.n	8011002 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8010ffa:	617b      	str	r3, [r7, #20]
  return(result);
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d003      	beq.n	801100a <osThreadNew+0x3e>
 8011002:	4b44      	ldr	r3, [pc, #272]	; (8011114 <osThreadNew+0x148>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2b02      	cmp	r3, #2
 8011008:	d07e      	beq.n	8011108 <osThreadNew+0x13c>
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d07b      	beq.n	8011108 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011010:	2380      	movs	r3, #128	; 0x80
 8011012:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011014:	2318      	movs	r3, #24
 8011016:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011018:	2300      	movs	r3, #0
 801101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801101c:	f04f 33ff 	mov.w	r3, #4294967295
 8011020:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d045      	beq.n	80110b4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d002      	beq.n	8011036 <osThreadNew+0x6a>
        name = attr->name;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	699b      	ldr	r3, [r3, #24]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d002      	beq.n	8011044 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	699b      	ldr	r3, [r3, #24]
 8011042:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011046:	2b00      	cmp	r3, #0
 8011048:	d008      	beq.n	801105c <osThreadNew+0x90>
 801104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104c:	2b38      	cmp	r3, #56	; 0x38
 801104e:	d805      	bhi.n	801105c <osThreadNew+0x90>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	f003 0301 	and.w	r3, r3, #1
 8011058:	2b00      	cmp	r3, #0
 801105a:	d001      	beq.n	8011060 <osThreadNew+0x94>
        return (NULL);
 801105c:	2300      	movs	r3, #0
 801105e:	e054      	b.n	801110a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	695b      	ldr	r3, [r3, #20]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d003      	beq.n	8011070 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	695b      	ldr	r3, [r3, #20]
 801106c:	089b      	lsrs	r3, r3, #2
 801106e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	689b      	ldr	r3, [r3, #8]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00e      	beq.n	8011096 <osThreadNew+0xca>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	2b5b      	cmp	r3, #91	; 0x5b
 801107e:	d90a      	bls.n	8011096 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011084:	2b00      	cmp	r3, #0
 8011086:	d006      	beq.n	8011096 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	695b      	ldr	r3, [r3, #20]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <osThreadNew+0xca>
        mem = 1;
 8011090:	2301      	movs	r3, #1
 8011092:	623b      	str	r3, [r7, #32]
 8011094:	e010      	b.n	80110b8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d10c      	bne.n	80110b8 <osThreadNew+0xec>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d108      	bne.n	80110b8 <osThreadNew+0xec>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	691b      	ldr	r3, [r3, #16]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d104      	bne.n	80110b8 <osThreadNew+0xec>
          mem = 0;
 80110ae:	2300      	movs	r3, #0
 80110b0:	623b      	str	r3, [r7, #32]
 80110b2:	e001      	b.n	80110b8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80110b4:	2300      	movs	r3, #0
 80110b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80110b8:	6a3b      	ldr	r3, [r7, #32]
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d110      	bne.n	80110e0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80110c6:	9202      	str	r2, [sp, #8]
 80110c8:	9301      	str	r3, [sp, #4]
 80110ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110cc:	9300      	str	r3, [sp, #0]
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f001 fc53 	bl	8012980 <xTaskCreateStatic>
 80110da:	4603      	mov	r3, r0
 80110dc:	613b      	str	r3, [r7, #16]
 80110de:	e013      	b.n	8011108 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80110e0:	6a3b      	ldr	r3, [r7, #32]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d110      	bne.n	8011108 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80110e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	f107 0310 	add.w	r3, r7, #16
 80110ee:	9301      	str	r3, [sp, #4]
 80110f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f001 fc9b 	bl	8012a34 <xTaskCreate>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b01      	cmp	r3, #1
 8011102:	d001      	beq.n	8011108 <osThreadNew+0x13c>
          hTask = NULL;
 8011104:	2300      	movs	r3, #0
 8011106:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011108:	693b      	ldr	r3, [r7, #16]
}
 801110a:	4618      	mov	r0, r3
 801110c:	3730      	adds	r7, #48	; 0x30
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	20000720 	.word	0x20000720

08011118 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8011118:	b580      	push	{r7, lr}
 801111a:	b088      	sub	sp, #32
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011124:	f3ef 8305 	mrs	r3, IPSR
 8011128:	617b      	str	r3, [r7, #20]
  return(result);
 801112a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801112c:	2b00      	cmp	r3, #0
 801112e:	d10f      	bne.n	8011150 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011130:	f3ef 8310 	mrs	r3, PRIMASK
 8011134:	613b      	str	r3, [r7, #16]
  return(result);
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d105      	bne.n	8011148 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801113c:	f3ef 8311 	mrs	r3, BASEPRI
 8011140:	60fb      	str	r3, [r7, #12]
  return(result);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d007      	beq.n	8011158 <osThreadSuspend+0x40>
 8011148:	4b0c      	ldr	r3, [pc, #48]	; (801117c <osThreadSuspend+0x64>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b02      	cmp	r3, #2
 801114e:	d103      	bne.n	8011158 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8011150:	f06f 0305 	mvn.w	r3, #5
 8011154:	61fb      	str	r3, [r7, #28]
 8011156:	e00b      	b.n	8011170 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d103      	bne.n	8011166 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 801115e:	f06f 0303 	mvn.w	r3, #3
 8011162:	61fb      	str	r3, [r7, #28]
 8011164:	e004      	b.n	8011170 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8011166:	2300      	movs	r3, #0
 8011168:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 801116a:	69b8      	ldr	r0, [r7, #24]
 801116c:	f001 fdda 	bl	8012d24 <vTaskSuspend>
  }

  return (stat);
 8011170:	69fb      	ldr	r3, [r7, #28]
}
 8011172:	4618      	mov	r0, r3
 8011174:	3720      	adds	r7, #32
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	20000720 	.word	0x20000720

08011180 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8011180:	b580      	push	{r7, lr}
 8011182:	b088      	sub	sp, #32
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801118c:	f3ef 8305 	mrs	r3, IPSR
 8011190:	617b      	str	r3, [r7, #20]
  return(result);
 8011192:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011194:	2b00      	cmp	r3, #0
 8011196:	d10f      	bne.n	80111b8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011198:	f3ef 8310 	mrs	r3, PRIMASK
 801119c:	613b      	str	r3, [r7, #16]
  return(result);
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d105      	bne.n	80111b0 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80111a4:	f3ef 8311 	mrs	r3, BASEPRI
 80111a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d007      	beq.n	80111c0 <osThreadResume+0x40>
 80111b0:	4b0c      	ldr	r3, [pc, #48]	; (80111e4 <osThreadResume+0x64>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	d103      	bne.n	80111c0 <osThreadResume+0x40>
    stat = osErrorISR;
 80111b8:	f06f 0305 	mvn.w	r3, #5
 80111bc:	61fb      	str	r3, [r7, #28]
 80111be:	e00b      	b.n	80111d8 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d103      	bne.n	80111ce <osThreadResume+0x4e>
    stat = osErrorParameter;
 80111c6:	f06f 0303 	mvn.w	r3, #3
 80111ca:	61fb      	str	r3, [r7, #28]
 80111cc:	e004      	b.n	80111d8 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 80111ce:	2300      	movs	r3, #0
 80111d0:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 80111d2:	69b8      	ldr	r0, [r7, #24]
 80111d4:	f001 fe4a 	bl	8012e6c <vTaskResume>
  }

  return (stat);
 80111d8:	69fb      	ldr	r3, [r7, #28]
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3720      	adds	r7, #32
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	20000720 	.word	0x20000720

080111e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b086      	sub	sp, #24
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111f0:	f3ef 8305 	mrs	r3, IPSR
 80111f4:	613b      	str	r3, [r7, #16]
  return(result);
 80111f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d10f      	bne.n	801121c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111fc:	f3ef 8310 	mrs	r3, PRIMASK
 8011200:	60fb      	str	r3, [r7, #12]
  return(result);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d105      	bne.n	8011214 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011208:	f3ef 8311 	mrs	r3, BASEPRI
 801120c:	60bb      	str	r3, [r7, #8]
  return(result);
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d007      	beq.n	8011224 <osDelay+0x3c>
 8011214:	4b0a      	ldr	r3, [pc, #40]	; (8011240 <osDelay+0x58>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	2b02      	cmp	r3, #2
 801121a:	d103      	bne.n	8011224 <osDelay+0x3c>
    stat = osErrorISR;
 801121c:	f06f 0305 	mvn.w	r3, #5
 8011220:	617b      	str	r3, [r7, #20]
 8011222:	e007      	b.n	8011234 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011224:	2300      	movs	r3, #0
 8011226:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d002      	beq.n	8011234 <osDelay+0x4c>
      vTaskDelay(ticks);
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f001 fd44 	bl	8012cbc <vTaskDelay>
    }
  }

  return (stat);
 8011234:	697b      	ldr	r3, [r7, #20]
}
 8011236:	4618      	mov	r0, r3
 8011238:	3718      	adds	r7, #24
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
 801123e:	bf00      	nop
 8011240:	20000720 	.word	0x20000720

08011244 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011244:	b580      	push	{r7, lr}
 8011246:	b08c      	sub	sp, #48	; 0x30
 8011248:	af02      	add	r7, sp, #8
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011250:	2300      	movs	r3, #0
 8011252:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011254:	f3ef 8305 	mrs	r3, IPSR
 8011258:	61bb      	str	r3, [r7, #24]
  return(result);
 801125a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801125c:	2b00      	cmp	r3, #0
 801125e:	f040 8087 	bne.w	8011370 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011262:	f3ef 8310 	mrs	r3, PRIMASK
 8011266:	617b      	str	r3, [r7, #20]
  return(result);
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d105      	bne.n	801127a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801126e:	f3ef 8311 	mrs	r3, BASEPRI
 8011272:	613b      	str	r3, [r7, #16]
  return(result);
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d003      	beq.n	8011282 <osSemaphoreNew+0x3e>
 801127a:	4b40      	ldr	r3, [pc, #256]	; (801137c <osSemaphoreNew+0x138>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b02      	cmp	r3, #2
 8011280:	d076      	beq.n	8011370 <osSemaphoreNew+0x12c>
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d073      	beq.n	8011370 <osSemaphoreNew+0x12c>
 8011288:	68ba      	ldr	r2, [r7, #8]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	429a      	cmp	r2, r3
 801128e:	d86f      	bhi.n	8011370 <osSemaphoreNew+0x12c>
    mem = -1;
 8011290:	f04f 33ff 	mov.w	r3, #4294967295
 8011294:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d015      	beq.n	80112c8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d006      	beq.n	80112b2 <osSemaphoreNew+0x6e>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	2b4f      	cmp	r3, #79	; 0x4f
 80112aa:	d902      	bls.n	80112b2 <osSemaphoreNew+0x6e>
        mem = 1;
 80112ac:	2301      	movs	r3, #1
 80112ae:	623b      	str	r3, [r7, #32]
 80112b0:	e00c      	b.n	80112cc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	689b      	ldr	r3, [r3, #8]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d108      	bne.n	80112cc <osSemaphoreNew+0x88>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d104      	bne.n	80112cc <osSemaphoreNew+0x88>
          mem = 0;
 80112c2:	2300      	movs	r3, #0
 80112c4:	623b      	str	r3, [r7, #32]
 80112c6:	e001      	b.n	80112cc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80112c8:	2300      	movs	r3, #0
 80112ca:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80112cc:	6a3b      	ldr	r3, [r7, #32]
 80112ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112d2:	d04d      	beq.n	8011370 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d129      	bne.n	801132e <osSemaphoreNew+0xea>
        if (mem == 1) {
 80112da:	6a3b      	ldr	r3, [r7, #32]
 80112dc:	2b01      	cmp	r3, #1
 80112de:	d10b      	bne.n	80112f8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	689a      	ldr	r2, [r3, #8]
 80112e4:	2303      	movs	r3, #3
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	4613      	mov	r3, r2
 80112ea:	2200      	movs	r2, #0
 80112ec:	2100      	movs	r1, #0
 80112ee:	2001      	movs	r0, #1
 80112f0:	f000 fbc0 	bl	8011a74 <xQueueGenericCreateStatic>
 80112f4:	6278      	str	r0, [r7, #36]	; 0x24
 80112f6:	e005      	b.n	8011304 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80112f8:	2203      	movs	r2, #3
 80112fa:	2100      	movs	r1, #0
 80112fc:	2001      	movs	r0, #1
 80112fe:	f000 fc2c 	bl	8011b5a <xQueueGenericCreate>
 8011302:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	2b00      	cmp	r3, #0
 8011308:	d022      	beq.n	8011350 <osSemaphoreNew+0x10c>
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d01f      	beq.n	8011350 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011310:	2300      	movs	r3, #0
 8011312:	2200      	movs	r2, #0
 8011314:	2100      	movs	r1, #0
 8011316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011318:	f000 fce8 	bl	8011cec <xQueueGenericSend>
 801131c:	4603      	mov	r3, r0
 801131e:	2b01      	cmp	r3, #1
 8011320:	d016      	beq.n	8011350 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8011322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011324:	f001 f95b 	bl	80125de <vQueueDelete>
            hSemaphore = NULL;
 8011328:	2300      	movs	r3, #0
 801132a:	627b      	str	r3, [r7, #36]	; 0x24
 801132c:	e010      	b.n	8011350 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	2b01      	cmp	r3, #1
 8011332:	d108      	bne.n	8011346 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	689b      	ldr	r3, [r3, #8]
 8011338:	461a      	mov	r2, r3
 801133a:	68b9      	ldr	r1, [r7, #8]
 801133c:	68f8      	ldr	r0, [r7, #12]
 801133e:	f000 fc6e 	bl	8011c1e <xQueueCreateCountingSemaphoreStatic>
 8011342:	6278      	str	r0, [r7, #36]	; 0x24
 8011344:	e004      	b.n	8011350 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011346:	68b9      	ldr	r1, [r7, #8]
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f000 fc9d 	bl	8011c88 <xQueueCreateCountingSemaphore>
 801134e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00c      	beq.n	8011370 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d003      	beq.n	8011364 <osSemaphoreNew+0x120>
          name = attr->name;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	61fb      	str	r3, [r7, #28]
 8011362:	e001      	b.n	8011368 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8011364:	2300      	movs	r3, #0
 8011366:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011368:	69f9      	ldr	r1, [r7, #28]
 801136a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801136c:	f001 fa82 	bl	8012874 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011372:	4618      	mov	r0, r3
 8011374:	3728      	adds	r7, #40	; 0x28
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	20000720 	.word	0x20000720

08011380 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011380:	b580      	push	{r7, lr}
 8011382:	b088      	sub	sp, #32
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801138e:	2300      	movs	r3, #0
 8011390:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011392:	69bb      	ldr	r3, [r7, #24]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d103      	bne.n	80113a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011398:	f06f 0303 	mvn.w	r3, #3
 801139c:	61fb      	str	r3, [r7, #28]
 801139e:	e04b      	b.n	8011438 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113a0:	f3ef 8305 	mrs	r3, IPSR
 80113a4:	617b      	str	r3, [r7, #20]
  return(result);
 80113a6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d10f      	bne.n	80113cc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113ac:	f3ef 8310 	mrs	r3, PRIMASK
 80113b0:	613b      	str	r3, [r7, #16]
  return(result);
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d105      	bne.n	80113c4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80113b8:	f3ef 8311 	mrs	r3, BASEPRI
 80113bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d026      	beq.n	8011412 <osSemaphoreAcquire+0x92>
 80113c4:	4b1f      	ldr	r3, [pc, #124]	; (8011444 <osSemaphoreAcquire+0xc4>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b02      	cmp	r3, #2
 80113ca:	d122      	bne.n	8011412 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d003      	beq.n	80113da <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80113d2:	f06f 0303 	mvn.w	r3, #3
 80113d6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80113d8:	e02d      	b.n	8011436 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80113da:	2300      	movs	r3, #0
 80113dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80113de:	f107 0308 	add.w	r3, r7, #8
 80113e2:	461a      	mov	r2, r3
 80113e4:	2100      	movs	r1, #0
 80113e6:	69b8      	ldr	r0, [r7, #24]
 80113e8:	f001 f87c 	bl	80124e4 <xQueueReceiveFromISR>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d003      	beq.n	80113fa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80113f2:	f06f 0302 	mvn.w	r3, #2
 80113f6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80113f8:	e01d      	b.n	8011436 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d01a      	beq.n	8011436 <osSemaphoreAcquire+0xb6>
 8011400:	4b11      	ldr	r3, [pc, #68]	; (8011448 <osSemaphoreAcquire+0xc8>)
 8011402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011406:	601a      	str	r2, [r3, #0]
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8011410:	e011      	b.n	8011436 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011412:	6839      	ldr	r1, [r7, #0]
 8011414:	69b8      	ldr	r0, [r7, #24]
 8011416:	f000 ff5d 	bl	80122d4 <xQueueSemaphoreTake>
 801141a:	4603      	mov	r3, r0
 801141c:	2b01      	cmp	r3, #1
 801141e:	d00b      	beq.n	8011438 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d003      	beq.n	801142e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011426:	f06f 0301 	mvn.w	r3, #1
 801142a:	61fb      	str	r3, [r7, #28]
 801142c:	e004      	b.n	8011438 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801142e:	f06f 0302 	mvn.w	r3, #2
 8011432:	61fb      	str	r3, [r7, #28]
 8011434:	e000      	b.n	8011438 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011436:	bf00      	nop
      }
    }
  }

  return (stat);
 8011438:	69fb      	ldr	r3, [r7, #28]
}
 801143a:	4618      	mov	r0, r3
 801143c:	3720      	adds	r7, #32
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	20000720 	.word	0x20000720
 8011448:	e000ed04 	.word	0xe000ed04

0801144c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801144c:	b580      	push	{r7, lr}
 801144e:	b088      	sub	sp, #32
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011458:	2300      	movs	r3, #0
 801145a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801145c:	69bb      	ldr	r3, [r7, #24]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d103      	bne.n	801146a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011462:	f06f 0303 	mvn.w	r3, #3
 8011466:	61fb      	str	r3, [r7, #28]
 8011468:	e03e      	b.n	80114e8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801146a:	f3ef 8305 	mrs	r3, IPSR
 801146e:	617b      	str	r3, [r7, #20]
  return(result);
 8011470:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011472:	2b00      	cmp	r3, #0
 8011474:	d10f      	bne.n	8011496 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011476:	f3ef 8310 	mrs	r3, PRIMASK
 801147a:	613b      	str	r3, [r7, #16]
  return(result);
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d105      	bne.n	801148e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011482:	f3ef 8311 	mrs	r3, BASEPRI
 8011486:	60fb      	str	r3, [r7, #12]
  return(result);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d01e      	beq.n	80114cc <osSemaphoreRelease+0x80>
 801148e:	4b19      	ldr	r3, [pc, #100]	; (80114f4 <osSemaphoreRelease+0xa8>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b02      	cmp	r3, #2
 8011494:	d11a      	bne.n	80114cc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011496:	2300      	movs	r3, #0
 8011498:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801149a:	f107 0308 	add.w	r3, r7, #8
 801149e:	4619      	mov	r1, r3
 80114a0:	69b8      	ldr	r0, [r7, #24]
 80114a2:	f000 fdb1 	bl	8012008 <xQueueGiveFromISR>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d003      	beq.n	80114b4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80114ac:	f06f 0302 	mvn.w	r3, #2
 80114b0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80114b2:	e018      	b.n	80114e6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d015      	beq.n	80114e6 <osSemaphoreRelease+0x9a>
 80114ba:	4b0f      	ldr	r3, [pc, #60]	; (80114f8 <osSemaphoreRelease+0xac>)
 80114bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114c0:	601a      	str	r2, [r3, #0]
 80114c2:	f3bf 8f4f 	dsb	sy
 80114c6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80114ca:	e00c      	b.n	80114e6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80114cc:	2300      	movs	r3, #0
 80114ce:	2200      	movs	r2, #0
 80114d0:	2100      	movs	r1, #0
 80114d2:	69b8      	ldr	r0, [r7, #24]
 80114d4:	f000 fc0a 	bl	8011cec <xQueueGenericSend>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d004      	beq.n	80114e8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80114de:	f06f 0302 	mvn.w	r3, #2
 80114e2:	61fb      	str	r3, [r7, #28]
 80114e4:	e000      	b.n	80114e8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80114e6:	bf00      	nop
    }
  }

  return (stat);
 80114e8:	69fb      	ldr	r3, [r7, #28]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3720      	adds	r7, #32
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	20000720 	.word	0x20000720
 80114f8:	e000ed04 	.word	0xe000ed04

080114fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b08c      	sub	sp, #48	; 0x30
 8011500:	af02      	add	r7, sp, #8
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011508:	2300      	movs	r3, #0
 801150a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801150c:	f3ef 8305 	mrs	r3, IPSR
 8011510:	61bb      	str	r3, [r7, #24]
  return(result);
 8011512:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011514:	2b00      	cmp	r3, #0
 8011516:	d170      	bne.n	80115fa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011518:	f3ef 8310 	mrs	r3, PRIMASK
 801151c:	617b      	str	r3, [r7, #20]
  return(result);
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d105      	bne.n	8011530 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011524:	f3ef 8311 	mrs	r3, BASEPRI
 8011528:	613b      	str	r3, [r7, #16]
  return(result);
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d003      	beq.n	8011538 <osMessageQueueNew+0x3c>
 8011530:	4b34      	ldr	r3, [pc, #208]	; (8011604 <osMessageQueueNew+0x108>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b02      	cmp	r3, #2
 8011536:	d060      	beq.n	80115fa <osMessageQueueNew+0xfe>
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d05d      	beq.n	80115fa <osMessageQueueNew+0xfe>
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d05a      	beq.n	80115fa <osMessageQueueNew+0xfe>
    mem = -1;
 8011544:	f04f 33ff 	mov.w	r3, #4294967295
 8011548:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d029      	beq.n	80115a4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d012      	beq.n	801157e <osMessageQueueNew+0x82>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	2b4f      	cmp	r3, #79	; 0x4f
 801155e:	d90e      	bls.n	801157e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00a      	beq.n	801157e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	695a      	ldr	r2, [r3, #20]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	68b9      	ldr	r1, [r7, #8]
 8011570:	fb01 f303 	mul.w	r3, r1, r3
 8011574:	429a      	cmp	r2, r3
 8011576:	d302      	bcc.n	801157e <osMessageQueueNew+0x82>
        mem = 1;
 8011578:	2301      	movs	r3, #1
 801157a:	623b      	str	r3, [r7, #32]
 801157c:	e014      	b.n	80115a8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d110      	bne.n	80115a8 <osMessageQueueNew+0xac>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d10c      	bne.n	80115a8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011592:	2b00      	cmp	r3, #0
 8011594:	d108      	bne.n	80115a8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	695b      	ldr	r3, [r3, #20]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d104      	bne.n	80115a8 <osMessageQueueNew+0xac>
          mem = 0;
 801159e:	2300      	movs	r3, #0
 80115a0:	623b      	str	r3, [r7, #32]
 80115a2:	e001      	b.n	80115a8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80115a4:	2300      	movs	r3, #0
 80115a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80115a8:	6a3b      	ldr	r3, [r7, #32]
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d10c      	bne.n	80115c8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	691a      	ldr	r2, [r3, #16]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6899      	ldr	r1, [r3, #8]
 80115b6:	2300      	movs	r3, #0
 80115b8:	9300      	str	r3, [sp, #0]
 80115ba:	460b      	mov	r3, r1
 80115bc:	68b9      	ldr	r1, [r7, #8]
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f000 fa58 	bl	8011a74 <xQueueGenericCreateStatic>
 80115c4:	6278      	str	r0, [r7, #36]	; 0x24
 80115c6:	e008      	b.n	80115da <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80115c8:	6a3b      	ldr	r3, [r7, #32]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d105      	bne.n	80115da <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80115ce:	2200      	movs	r2, #0
 80115d0:	68b9      	ldr	r1, [r7, #8]
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f000 fac1 	bl	8011b5a <xQueueGenericCreate>
 80115d8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00c      	beq.n	80115fa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <osMessageQueueNew+0xf2>
        name = attr->name;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	61fb      	str	r3, [r7, #28]
 80115ec:	e001      	b.n	80115f2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80115ee:	2300      	movs	r3, #0
 80115f0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80115f2:	69f9      	ldr	r1, [r7, #28]
 80115f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115f6:	f001 f93d 	bl	8012874 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80115fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3728      	adds	r7, #40	; 0x28
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	20000720 	.word	0x20000720

08011608 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011608:	b580      	push	{r7, lr}
 801160a:	b08a      	sub	sp, #40	; 0x28
 801160c:	af00      	add	r7, sp, #0
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	603b      	str	r3, [r7, #0]
 8011614:	4613      	mov	r3, r2
 8011616:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801161c:	2300      	movs	r3, #0
 801161e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011620:	f3ef 8305 	mrs	r3, IPSR
 8011624:	61fb      	str	r3, [r7, #28]
  return(result);
 8011626:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10f      	bne.n	801164c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801162c:	f3ef 8310 	mrs	r3, PRIMASK
 8011630:	61bb      	str	r3, [r7, #24]
  return(result);
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d105      	bne.n	8011644 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011638:	f3ef 8311 	mrs	r3, BASEPRI
 801163c:	617b      	str	r3, [r7, #20]
  return(result);
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d02c      	beq.n	801169e <osMessageQueuePut+0x96>
 8011644:	4b28      	ldr	r3, [pc, #160]	; (80116e8 <osMessageQueuePut+0xe0>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b02      	cmp	r3, #2
 801164a:	d128      	bne.n	801169e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801164c:	6a3b      	ldr	r3, [r7, #32]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d005      	beq.n	801165e <osMessageQueuePut+0x56>
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d002      	beq.n	801165e <osMessageQueuePut+0x56>
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d003      	beq.n	8011666 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801165e:	f06f 0303 	mvn.w	r3, #3
 8011662:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011664:	e039      	b.n	80116da <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8011666:	2300      	movs	r3, #0
 8011668:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801166a:	f107 0210 	add.w	r2, r7, #16
 801166e:	2300      	movs	r3, #0
 8011670:	68b9      	ldr	r1, [r7, #8]
 8011672:	6a38      	ldr	r0, [r7, #32]
 8011674:	f000 fc34 	bl	8011ee0 <xQueueGenericSendFromISR>
 8011678:	4603      	mov	r3, r0
 801167a:	2b01      	cmp	r3, #1
 801167c:	d003      	beq.n	8011686 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801167e:	f06f 0302 	mvn.w	r3, #2
 8011682:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011684:	e029      	b.n	80116da <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d026      	beq.n	80116da <osMessageQueuePut+0xd2>
 801168c:	4b17      	ldr	r3, [pc, #92]	; (80116ec <osMessageQueuePut+0xe4>)
 801168e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011692:	601a      	str	r2, [r3, #0]
 8011694:	f3bf 8f4f 	dsb	sy
 8011698:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801169c:	e01d      	b.n	80116da <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801169e:	6a3b      	ldr	r3, [r7, #32]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d002      	beq.n	80116aa <osMessageQueuePut+0xa2>
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d103      	bne.n	80116b2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80116aa:	f06f 0303 	mvn.w	r3, #3
 80116ae:	627b      	str	r3, [r7, #36]	; 0x24
 80116b0:	e014      	b.n	80116dc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80116b2:	2300      	movs	r3, #0
 80116b4:	683a      	ldr	r2, [r7, #0]
 80116b6:	68b9      	ldr	r1, [r7, #8]
 80116b8:	6a38      	ldr	r0, [r7, #32]
 80116ba:	f000 fb17 	bl	8011cec <xQueueGenericSend>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d00b      	beq.n	80116dc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d003      	beq.n	80116d2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80116ca:	f06f 0301 	mvn.w	r3, #1
 80116ce:	627b      	str	r3, [r7, #36]	; 0x24
 80116d0:	e004      	b.n	80116dc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80116d2:	f06f 0302 	mvn.w	r3, #2
 80116d6:	627b      	str	r3, [r7, #36]	; 0x24
 80116d8:	e000      	b.n	80116dc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80116da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80116dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3728      	adds	r7, #40	; 0x28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	20000720 	.word	0x20000720
 80116ec:	e000ed04 	.word	0xe000ed04

080116f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b08a      	sub	sp, #40	; 0x28
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
 80116fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011702:	2300      	movs	r3, #0
 8011704:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011706:	f3ef 8305 	mrs	r3, IPSR
 801170a:	61fb      	str	r3, [r7, #28]
  return(result);
 801170c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801170e:	2b00      	cmp	r3, #0
 8011710:	d10f      	bne.n	8011732 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011712:	f3ef 8310 	mrs	r3, PRIMASK
 8011716:	61bb      	str	r3, [r7, #24]
  return(result);
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d105      	bne.n	801172a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801171e:	f3ef 8311 	mrs	r3, BASEPRI
 8011722:	617b      	str	r3, [r7, #20]
  return(result);
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d02c      	beq.n	8011784 <osMessageQueueGet+0x94>
 801172a:	4b28      	ldr	r3, [pc, #160]	; (80117cc <osMessageQueueGet+0xdc>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	2b02      	cmp	r3, #2
 8011730:	d128      	bne.n	8011784 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011732:	6a3b      	ldr	r3, [r7, #32]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d005      	beq.n	8011744 <osMessageQueueGet+0x54>
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d002      	beq.n	8011744 <osMessageQueueGet+0x54>
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d003      	beq.n	801174c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011744:	f06f 0303 	mvn.w	r3, #3
 8011748:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801174a:	e038      	b.n	80117be <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801174c:	2300      	movs	r3, #0
 801174e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011750:	f107 0310 	add.w	r3, r7, #16
 8011754:	461a      	mov	r2, r3
 8011756:	68b9      	ldr	r1, [r7, #8]
 8011758:	6a38      	ldr	r0, [r7, #32]
 801175a:	f000 fec3 	bl	80124e4 <xQueueReceiveFromISR>
 801175e:	4603      	mov	r3, r0
 8011760:	2b01      	cmp	r3, #1
 8011762:	d003      	beq.n	801176c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011764:	f06f 0302 	mvn.w	r3, #2
 8011768:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801176a:	e028      	b.n	80117be <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d025      	beq.n	80117be <osMessageQueueGet+0xce>
 8011772:	4b17      	ldr	r3, [pc, #92]	; (80117d0 <osMessageQueueGet+0xe0>)
 8011774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011778:	601a      	str	r2, [r3, #0]
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011782:	e01c      	b.n	80117be <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011784:	6a3b      	ldr	r3, [r7, #32]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d002      	beq.n	8011790 <osMessageQueueGet+0xa0>
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d103      	bne.n	8011798 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8011790:	f06f 0303 	mvn.w	r3, #3
 8011794:	627b      	str	r3, [r7, #36]	; 0x24
 8011796:	e013      	b.n	80117c0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011798:	683a      	ldr	r2, [r7, #0]
 801179a:	68b9      	ldr	r1, [r7, #8]
 801179c:	6a38      	ldr	r0, [r7, #32]
 801179e:	f000 fcbd 	bl	801211c <xQueueReceive>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d00b      	beq.n	80117c0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d003      	beq.n	80117b6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80117ae:	f06f 0301 	mvn.w	r3, #1
 80117b2:	627b      	str	r3, [r7, #36]	; 0x24
 80117b4:	e004      	b.n	80117c0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80117b6:	f06f 0302 	mvn.w	r3, #2
 80117ba:	627b      	str	r3, [r7, #36]	; 0x24
 80117bc:	e000      	b.n	80117c0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80117be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80117c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3728      	adds	r7, #40	; 0x28
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	20000720 	.word	0x20000720
 80117d0:	e000ed04 	.word	0xe000ed04

080117d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80117d4:	b480      	push	{r7}
 80117d6:	b085      	sub	sp, #20
 80117d8:	af00      	add	r7, sp, #0
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	4a07      	ldr	r2, [pc, #28]	; (8011800 <vApplicationGetIdleTaskMemory+0x2c>)
 80117e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	4a06      	ldr	r2, [pc, #24]	; (8011804 <vApplicationGetIdleTaskMemory+0x30>)
 80117ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2280      	movs	r2, #128	; 0x80
 80117f0:	601a      	str	r2, [r3, #0]
}
 80117f2:	bf00      	nop
 80117f4:	3714      	adds	r7, #20
 80117f6:	46bd      	mov	sp, r7
 80117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fc:	4770      	bx	lr
 80117fe:	bf00      	nop
 8011800:	20000724 	.word	0x20000724
 8011804:	20000780 	.word	0x20000780

08011808 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011808:	b480      	push	{r7}
 801180a:	b085      	sub	sp, #20
 801180c:	af00      	add	r7, sp, #0
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	60b9      	str	r1, [r7, #8]
 8011812:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	4a07      	ldr	r2, [pc, #28]	; (8011834 <vApplicationGetTimerTaskMemory+0x2c>)
 8011818:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	4a06      	ldr	r2, [pc, #24]	; (8011838 <vApplicationGetTimerTaskMemory+0x30>)
 801181e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011826:	601a      	str	r2, [r3, #0]
}
 8011828:	bf00      	nop
 801182a:	3714      	adds	r7, #20
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr
 8011834:	20000980 	.word	0x20000980
 8011838:	200009dc 	.word	0x200009dc

0801183c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801183c:	b480      	push	{r7}
 801183e:	b083      	sub	sp, #12
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f103 0208 	add.w	r2, r3, #8
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f04f 32ff 	mov.w	r2, #4294967295
 8011854:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f103 0208 	add.w	r2, r3, #8
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f103 0208 	add.w	r2, r3, #8
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2200      	movs	r2, #0
 801186e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011870:	bf00      	nop
 8011872:	370c      	adds	r7, #12
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801187c:	b480      	push	{r7}
 801187e:	b083      	sub	sp, #12
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2200      	movs	r2, #0
 8011888:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801188a:	bf00      	nop
 801188c:	370c      	adds	r7, #12
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr

08011896 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011896:	b480      	push	{r7}
 8011898:	b085      	sub	sp, #20
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
 801189e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	68fa      	ldr	r2, [r7, #12]
 80118aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	689a      	ldr	r2, [r3, #8]
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	689b      	ldr	r3, [r3, #8]
 80118b8:	683a      	ldr	r2, [r7, #0]
 80118ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	683a      	ldr	r2, [r7, #0]
 80118c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	1c5a      	adds	r2, r3, #1
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	601a      	str	r2, [r3, #0]
}
 80118d2:	bf00      	nop
 80118d4:	3714      	adds	r7, #20
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr

080118de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80118de:	b480      	push	{r7}
 80118e0:	b085      	sub	sp, #20
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
 80118e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f4:	d103      	bne.n	80118fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	691b      	ldr	r3, [r3, #16]
 80118fa:	60fb      	str	r3, [r7, #12]
 80118fc:	e00c      	b.n	8011918 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	3308      	adds	r3, #8
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	e002      	b.n	801190c <vListInsert+0x2e>
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	60fb      	str	r3, [r7, #12]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	68ba      	ldr	r2, [r7, #8]
 8011914:	429a      	cmp	r2, r3
 8011916:	d2f6      	bcs.n	8011906 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	685a      	ldr	r2, [r3, #4]
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	683a      	ldr	r2, [r7, #0]
 8011926:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	68fa      	ldr	r2, [r7, #12]
 801192c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	683a      	ldr	r2, [r7, #0]
 8011932:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	687a      	ldr	r2, [r7, #4]
 8011938:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	1c5a      	adds	r2, r3, #1
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	601a      	str	r2, [r3, #0]
}
 8011944:	bf00      	nop
 8011946:	3714      	adds	r7, #20
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011950:	b480      	push	{r7}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	691b      	ldr	r3, [r3, #16]
 801195c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	6892      	ldr	r2, [r2, #8]
 8011966:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	689b      	ldr	r3, [r3, #8]
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	6852      	ldr	r2, [r2, #4]
 8011970:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	429a      	cmp	r2, r3
 801197a:	d103      	bne.n	8011984 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	689a      	ldr	r2, [r3, #8]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	1e5a      	subs	r2, r3, #1
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	681b      	ldr	r3, [r3, #0]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3714      	adds	r7, #20
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr

080119a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d109      	bne.n	80119cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80119b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119bc:	f383 8811 	msr	BASEPRI, r3
 80119c0:	f3bf 8f6f 	isb	sy
 80119c4:	f3bf 8f4f 	dsb	sy
 80119c8:	60bb      	str	r3, [r7, #8]
 80119ca:	e7fe      	b.n	80119ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80119cc:	f002 fd26 	bl	801441c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119d8:	68f9      	ldr	r1, [r7, #12]
 80119da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80119dc:	fb01 f303 	mul.w	r3, r1, r3
 80119e0:	441a      	add	r2, r3
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	2200      	movs	r2, #0
 80119ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681a      	ldr	r2, [r3, #0]
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119fc:	3b01      	subs	r3, #1
 80119fe:	68f9      	ldr	r1, [r7, #12]
 8011a00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a02:	fb01 f303 	mul.w	r3, r1, r3
 8011a06:	441a      	add	r2, r3
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	22ff      	movs	r2, #255	; 0xff
 8011a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	22ff      	movs	r2, #255	; 0xff
 8011a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d114      	bne.n	8011a4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	691b      	ldr	r3, [r3, #16]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d01a      	beq.n	8011a60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	3310      	adds	r3, #16
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f001 fcfa 	bl	8013428 <xTaskRemoveFromEventList>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d012      	beq.n	8011a60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011a3a:	4b0d      	ldr	r3, [pc, #52]	; (8011a70 <xQueueGenericReset+0xcc>)
 8011a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a40:	601a      	str	r2, [r3, #0]
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	f3bf 8f6f 	isb	sy
 8011a4a:	e009      	b.n	8011a60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3310      	adds	r3, #16
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7ff fef3 	bl	801183c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	3324      	adds	r3, #36	; 0x24
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7ff feee 	bl	801183c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011a60:	f002 fd0a 	bl	8014478 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011a64:	2301      	movs	r3, #1
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	e000ed04 	.word	0xe000ed04

08011a74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b08e      	sub	sp, #56	; 0x38
 8011a78:	af02      	add	r7, sp, #8
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	607a      	str	r2, [r7, #4]
 8011a80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d109      	bne.n	8011a9c <xQueueGenericCreateStatic+0x28>
 8011a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a9a:	e7fe      	b.n	8011a9a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d109      	bne.n	8011ab6 <xQueueGenericCreateStatic+0x42>
 8011aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa6:	f383 8811 	msr	BASEPRI, r3
 8011aaa:	f3bf 8f6f 	isb	sy
 8011aae:	f3bf 8f4f 	dsb	sy
 8011ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8011ab4:	e7fe      	b.n	8011ab4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d002      	beq.n	8011ac2 <xQueueGenericCreateStatic+0x4e>
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d001      	beq.n	8011ac6 <xQueueGenericCreateStatic+0x52>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e000      	b.n	8011ac8 <xQueueGenericCreateStatic+0x54>
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d109      	bne.n	8011ae0 <xQueueGenericCreateStatic+0x6c>
 8011acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad0:	f383 8811 	msr	BASEPRI, r3
 8011ad4:	f3bf 8f6f 	isb	sy
 8011ad8:	f3bf 8f4f 	dsb	sy
 8011adc:	623b      	str	r3, [r7, #32]
 8011ade:	e7fe      	b.n	8011ade <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d102      	bne.n	8011aec <xQueueGenericCreateStatic+0x78>
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d101      	bne.n	8011af0 <xQueueGenericCreateStatic+0x7c>
 8011aec:	2301      	movs	r3, #1
 8011aee:	e000      	b.n	8011af2 <xQueueGenericCreateStatic+0x7e>
 8011af0:	2300      	movs	r3, #0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d109      	bne.n	8011b0a <xQueueGenericCreateStatic+0x96>
 8011af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afa:	f383 8811 	msr	BASEPRI, r3
 8011afe:	f3bf 8f6f 	isb	sy
 8011b02:	f3bf 8f4f 	dsb	sy
 8011b06:	61fb      	str	r3, [r7, #28]
 8011b08:	e7fe      	b.n	8011b08 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011b0a:	2350      	movs	r3, #80	; 0x50
 8011b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b50      	cmp	r3, #80	; 0x50
 8011b12:	d009      	beq.n	8011b28 <xQueueGenericCreateStatic+0xb4>
 8011b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	61bb      	str	r3, [r7, #24]
 8011b26:	e7fe      	b.n	8011b26 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011b28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d00d      	beq.n	8011b50 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b36:	2201      	movs	r2, #1
 8011b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011b3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b42:	9300      	str	r3, [sp, #0]
 8011b44:	4613      	mov	r3, r2
 8011b46:	687a      	ldr	r2, [r7, #4]
 8011b48:	68b9      	ldr	r1, [r7, #8]
 8011b4a:	68f8      	ldr	r0, [r7, #12]
 8011b4c:	f000 f844 	bl	8011bd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3730      	adds	r7, #48	; 0x30
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}

08011b5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b08a      	sub	sp, #40	; 0x28
 8011b5e:	af02      	add	r7, sp, #8
 8011b60:	60f8      	str	r0, [r7, #12]
 8011b62:	60b9      	str	r1, [r7, #8]
 8011b64:	4613      	mov	r3, r2
 8011b66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d109      	bne.n	8011b82 <xQueueGenericCreate+0x28>
 8011b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b72:	f383 8811 	msr	BASEPRI, r3
 8011b76:	f3bf 8f6f 	isb	sy
 8011b7a:	f3bf 8f4f 	dsb	sy
 8011b7e:	613b      	str	r3, [r7, #16]
 8011b80:	e7fe      	b.n	8011b80 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d102      	bne.n	8011b8e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	61fb      	str	r3, [r7, #28]
 8011b8c:	e004      	b.n	8011b98 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	fb02 f303 	mul.w	r3, r2, r3
 8011b96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	3350      	adds	r3, #80	; 0x50
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f002 fd57 	bl	8014650 <pvPortMalloc>
 8011ba2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d011      	beq.n	8011bce <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	3350      	adds	r3, #80	; 0x50
 8011bb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011bbc:	79fa      	ldrb	r2, [r7, #7]
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	697a      	ldr	r2, [r7, #20]
 8011bc6:	68b9      	ldr	r1, [r7, #8]
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f000 f805 	bl	8011bd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011bce:	69bb      	ldr	r3, [r7, #24]
	}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3720      	adds	r7, #32
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
 8011be4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d103      	bne.n	8011bf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	69ba      	ldr	r2, [r7, #24]
 8011bf0:	601a      	str	r2, [r3, #0]
 8011bf2:	e002      	b.n	8011bfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011bf4:	69bb      	ldr	r3, [r7, #24]
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	68ba      	ldr	r2, [r7, #8]
 8011c04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011c06:	2101      	movs	r1, #1
 8011c08:	69b8      	ldr	r0, [r7, #24]
 8011c0a:	f7ff fecb 	bl	80119a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	78fa      	ldrb	r2, [r7, #3]
 8011c12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011c16:	bf00      	nop
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b08a      	sub	sp, #40	; 0x28
 8011c22:	af02      	add	r7, sp, #8
 8011c24:	60f8      	str	r0, [r7, #12]
 8011c26:	60b9      	str	r1, [r7, #8]
 8011c28:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d109      	bne.n	8011c44 <xQueueCreateCountingSemaphoreStatic+0x26>
 8011c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c34:	f383 8811 	msr	BASEPRI, r3
 8011c38:	f3bf 8f6f 	isb	sy
 8011c3c:	f3bf 8f4f 	dsb	sy
 8011c40:	61bb      	str	r3, [r7, #24]
 8011c42:	e7fe      	b.n	8011c42 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011c44:	68ba      	ldr	r2, [r7, #8]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d909      	bls.n	8011c60 <xQueueCreateCountingSemaphoreStatic+0x42>
 8011c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c50:	f383 8811 	msr	BASEPRI, r3
 8011c54:	f3bf 8f6f 	isb	sy
 8011c58:	f3bf 8f4f 	dsb	sy
 8011c5c:	617b      	str	r3, [r7, #20]
 8011c5e:	e7fe      	b.n	8011c5e <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011c60:	2302      	movs	r3, #2
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2200      	movs	r2, #0
 8011c68:	2100      	movs	r1, #0
 8011c6a:	68f8      	ldr	r0, [r7, #12]
 8011c6c:	f7ff ff02 	bl	8011a74 <xQueueGenericCreateStatic>
 8011c70:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	68ba      	ldr	r2, [r7, #8]
 8011c7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011c7e:	69fb      	ldr	r3, [r7, #28]
	}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3720      	adds	r7, #32
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b086      	sub	sp, #24
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d109      	bne.n	8011cac <xQueueCreateCountingSemaphore+0x24>
 8011c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9c:	f383 8811 	msr	BASEPRI, r3
 8011ca0:	f3bf 8f6f 	isb	sy
 8011ca4:	f3bf 8f4f 	dsb	sy
 8011ca8:	613b      	str	r3, [r7, #16]
 8011caa:	e7fe      	b.n	8011caa <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011cac:	683a      	ldr	r2, [r7, #0]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d909      	bls.n	8011cc8 <xQueueCreateCountingSemaphore+0x40>
 8011cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb8:	f383 8811 	msr	BASEPRI, r3
 8011cbc:	f3bf 8f6f 	isb	sy
 8011cc0:	f3bf 8f4f 	dsb	sy
 8011cc4:	60fb      	str	r3, [r7, #12]
 8011cc6:	e7fe      	b.n	8011cc6 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011cc8:	2202      	movs	r2, #2
 8011cca:	2100      	movs	r1, #0
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7ff ff44 	bl	8011b5a <xQueueGenericCreate>
 8011cd2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d002      	beq.n	8011ce0 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011ce0:	697b      	ldr	r3, [r7, #20]
	}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3718      	adds	r7, #24
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
	...

08011cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b08e      	sub	sp, #56	; 0x38
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	607a      	str	r2, [r7, #4]
 8011cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d109      	bne.n	8011d1c <xQueueGenericSend+0x30>
 8011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d1a:	e7fe      	b.n	8011d1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d103      	bne.n	8011d2a <xQueueGenericSend+0x3e>
 8011d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d101      	bne.n	8011d2e <xQueueGenericSend+0x42>
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e000      	b.n	8011d30 <xQueueGenericSend+0x44>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d109      	bne.n	8011d48 <xQueueGenericSend+0x5c>
 8011d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d38:	f383 8811 	msr	BASEPRI, r3
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	f3bf 8f4f 	dsb	sy
 8011d44:	627b      	str	r3, [r7, #36]	; 0x24
 8011d46:	e7fe      	b.n	8011d46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2b02      	cmp	r3, #2
 8011d4c:	d103      	bne.n	8011d56 <xQueueGenericSend+0x6a>
 8011d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d101      	bne.n	8011d5a <xQueueGenericSend+0x6e>
 8011d56:	2301      	movs	r3, #1
 8011d58:	e000      	b.n	8011d5c <xQueueGenericSend+0x70>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d109      	bne.n	8011d74 <xQueueGenericSend+0x88>
 8011d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d64:	f383 8811 	msr	BASEPRI, r3
 8011d68:	f3bf 8f6f 	isb	sy
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	623b      	str	r3, [r7, #32]
 8011d72:	e7fe      	b.n	8011d72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d74:	f001 fd0e 	bl	8013794 <xTaskGetSchedulerState>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d102      	bne.n	8011d84 <xQueueGenericSend+0x98>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d101      	bne.n	8011d88 <xQueueGenericSend+0x9c>
 8011d84:	2301      	movs	r3, #1
 8011d86:	e000      	b.n	8011d8a <xQueueGenericSend+0x9e>
 8011d88:	2300      	movs	r3, #0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d109      	bne.n	8011da2 <xQueueGenericSend+0xb6>
 8011d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	61fb      	str	r3, [r7, #28]
 8011da0:	e7fe      	b.n	8011da0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011da2:	f002 fb3b 	bl	801441c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d302      	bcc.n	8011db8 <xQueueGenericSend+0xcc>
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	2b02      	cmp	r3, #2
 8011db6:	d129      	bne.n	8011e0c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011db8:	683a      	ldr	r2, [r7, #0]
 8011dba:	68b9      	ldr	r1, [r7, #8]
 8011dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dbe:	f000 fc48 	bl	8012652 <prvCopyDataToQueue>
 8011dc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d010      	beq.n	8011dee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dce:	3324      	adds	r3, #36	; 0x24
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f001 fb29 	bl	8013428 <xTaskRemoveFromEventList>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d013      	beq.n	8011e04 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011ddc:	4b3f      	ldr	r3, [pc, #252]	; (8011edc <xQueueGenericSend+0x1f0>)
 8011dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011de2:	601a      	str	r2, [r3, #0]
 8011de4:	f3bf 8f4f 	dsb	sy
 8011de8:	f3bf 8f6f 	isb	sy
 8011dec:	e00a      	b.n	8011e04 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d007      	beq.n	8011e04 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011df4:	4b39      	ldr	r3, [pc, #228]	; (8011edc <xQueueGenericSend+0x1f0>)
 8011df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dfa:	601a      	str	r2, [r3, #0]
 8011dfc:	f3bf 8f4f 	dsb	sy
 8011e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e04:	f002 fb38 	bl	8014478 <vPortExitCritical>
				return pdPASS;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	e063      	b.n	8011ed4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d103      	bne.n	8011e1a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e12:	f002 fb31 	bl	8014478 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e16:	2300      	movs	r3, #0
 8011e18:	e05c      	b.n	8011ed4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d106      	bne.n	8011e2e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e20:	f107 0314 	add.w	r3, r7, #20
 8011e24:	4618      	mov	r0, r3
 8011e26:	f001 fb61 	bl	80134ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e2e:	f002 fb23 	bl	8014478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e32:	f001 f8dd 	bl	8012ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e36:	f002 faf1 	bl	801441c <vPortEnterCritical>
 8011e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e40:	b25b      	sxtb	r3, r3
 8011e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e46:	d103      	bne.n	8011e50 <xQueueGenericSend+0x164>
 8011e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e56:	b25b      	sxtb	r3, r3
 8011e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e5c:	d103      	bne.n	8011e66 <xQueueGenericSend+0x17a>
 8011e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e60:	2200      	movs	r2, #0
 8011e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e66:	f002 fb07 	bl	8014478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e6a:	1d3a      	adds	r2, r7, #4
 8011e6c:	f107 0314 	add.w	r3, r7, #20
 8011e70:	4611      	mov	r1, r2
 8011e72:	4618      	mov	r0, r3
 8011e74:	f001 fb50 	bl	8013518 <xTaskCheckForTimeOut>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d124      	bne.n	8011ec8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e80:	f000 fcdf 	bl	8012842 <prvIsQueueFull>
 8011e84:	4603      	mov	r3, r0
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d018      	beq.n	8011ebc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8c:	3310      	adds	r3, #16
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	4611      	mov	r1, r2
 8011e92:	4618      	mov	r0, r3
 8011e94:	f001 fa7a 	bl	801338c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e9a:	f000 fc6a 	bl	8012772 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011e9e:	f001 f8b5 	bl	801300c <xTaskResumeAll>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f47f af7c 	bne.w	8011da2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011eaa:	4b0c      	ldr	r3, [pc, #48]	; (8011edc <xQueueGenericSend+0x1f0>)
 8011eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb0:	601a      	str	r2, [r3, #0]
 8011eb2:	f3bf 8f4f 	dsb	sy
 8011eb6:	f3bf 8f6f 	isb	sy
 8011eba:	e772      	b.n	8011da2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ebe:	f000 fc58 	bl	8012772 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ec2:	f001 f8a3 	bl	801300c <xTaskResumeAll>
 8011ec6:	e76c      	b.n	8011da2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eca:	f000 fc52 	bl	8012772 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ece:	f001 f89d 	bl	801300c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3738      	adds	r7, #56	; 0x38
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	e000ed04 	.word	0xe000ed04

08011ee0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b08e      	sub	sp, #56	; 0x38
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
 8011eec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d109      	bne.n	8011f0c <xQueueGenericSendFromISR+0x2c>
 8011ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011efc:	f383 8811 	msr	BASEPRI, r3
 8011f00:	f3bf 8f6f 	isb	sy
 8011f04:	f3bf 8f4f 	dsb	sy
 8011f08:	627b      	str	r3, [r7, #36]	; 0x24
 8011f0a:	e7fe      	b.n	8011f0a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d103      	bne.n	8011f1a <xQueueGenericSendFromISR+0x3a>
 8011f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d101      	bne.n	8011f1e <xQueueGenericSendFromISR+0x3e>
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	e000      	b.n	8011f20 <xQueueGenericSendFromISR+0x40>
 8011f1e:	2300      	movs	r3, #0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d109      	bne.n	8011f38 <xQueueGenericSendFromISR+0x58>
 8011f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f28:	f383 8811 	msr	BASEPRI, r3
 8011f2c:	f3bf 8f6f 	isb	sy
 8011f30:	f3bf 8f4f 	dsb	sy
 8011f34:	623b      	str	r3, [r7, #32]
 8011f36:	e7fe      	b.n	8011f36 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d103      	bne.n	8011f46 <xQueueGenericSendFromISR+0x66>
 8011f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d101      	bne.n	8011f4a <xQueueGenericSendFromISR+0x6a>
 8011f46:	2301      	movs	r3, #1
 8011f48:	e000      	b.n	8011f4c <xQueueGenericSendFromISR+0x6c>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d109      	bne.n	8011f64 <xQueueGenericSendFromISR+0x84>
 8011f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f54:	f383 8811 	msr	BASEPRI, r3
 8011f58:	f3bf 8f6f 	isb	sy
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	61fb      	str	r3, [r7, #28]
 8011f62:	e7fe      	b.n	8011f62 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f64:	f002 fb36 	bl	80145d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f68:	f3ef 8211 	mrs	r2, BASEPRI
 8011f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f70:	f383 8811 	msr	BASEPRI, r3
 8011f74:	f3bf 8f6f 	isb	sy
 8011f78:	f3bf 8f4f 	dsb	sy
 8011f7c:	61ba      	str	r2, [r7, #24]
 8011f7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011f80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d302      	bcc.n	8011f96 <xQueueGenericSendFromISR+0xb6>
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	2b02      	cmp	r3, #2
 8011f94:	d12c      	bne.n	8011ff0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011fa0:	683a      	ldr	r2, [r7, #0]
 8011fa2:	68b9      	ldr	r1, [r7, #8]
 8011fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fa6:	f000 fb54 	bl	8012652 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011faa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb2:	d112      	bne.n	8011fda <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d016      	beq.n	8011fea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fbe:	3324      	adds	r3, #36	; 0x24
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f001 fa31 	bl	8013428 <xTaskRemoveFromEventList>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d00e      	beq.n	8011fea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d00b      	beq.n	8011fea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	601a      	str	r2, [r3, #0]
 8011fd8:	e007      	b.n	8011fea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011fda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011fde:	3301      	adds	r3, #1
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	b25a      	sxtb	r2, r3
 8011fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011fea:	2301      	movs	r3, #1
 8011fec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011fee:	e001      	b.n	8011ff4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012000:	4618      	mov	r0, r3
 8012002:	3738      	adds	r7, #56	; 0x38
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b08e      	sub	sp, #56	; 0x38
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012018:	2b00      	cmp	r3, #0
 801201a:	d109      	bne.n	8012030 <xQueueGiveFromISR+0x28>
	__asm volatile
 801201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012020:	f383 8811 	msr	BASEPRI, r3
 8012024:	f3bf 8f6f 	isb	sy
 8012028:	f3bf 8f4f 	dsb	sy
 801202c:	623b      	str	r3, [r7, #32]
 801202e:	e7fe      	b.n	801202e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012034:	2b00      	cmp	r3, #0
 8012036:	d009      	beq.n	801204c <xQueueGiveFromISR+0x44>
 8012038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203c:	f383 8811 	msr	BASEPRI, r3
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	61fb      	str	r3, [r7, #28]
 801204a:	e7fe      	b.n	801204a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d103      	bne.n	801205c <xQueueGiveFromISR+0x54>
 8012054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012056:	689b      	ldr	r3, [r3, #8]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d101      	bne.n	8012060 <xQueueGiveFromISR+0x58>
 801205c:	2301      	movs	r3, #1
 801205e:	e000      	b.n	8012062 <xQueueGiveFromISR+0x5a>
 8012060:	2300      	movs	r3, #0
 8012062:	2b00      	cmp	r3, #0
 8012064:	d109      	bne.n	801207a <xQueueGiveFromISR+0x72>
 8012066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801206a:	f383 8811 	msr	BASEPRI, r3
 801206e:	f3bf 8f6f 	isb	sy
 8012072:	f3bf 8f4f 	dsb	sy
 8012076:	61bb      	str	r3, [r7, #24]
 8012078:	e7fe      	b.n	8012078 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801207a:	f002 faab 	bl	80145d4 <vPortValidateInterruptPriority>
	__asm volatile
 801207e:	f3ef 8211 	mrs	r2, BASEPRI
 8012082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012086:	f383 8811 	msr	BASEPRI, r3
 801208a:	f3bf 8f6f 	isb	sy
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	617a      	str	r2, [r7, #20]
 8012094:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012096:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012098:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801209e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80120a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d22b      	bcs.n	8012102 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80120aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b6:	1c5a      	adds	r2, r3, #1
 80120b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80120c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120c4:	d112      	bne.n	80120ec <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d016      	beq.n	80120fc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d0:	3324      	adds	r3, #36	; 0x24
 80120d2:	4618      	mov	r0, r3
 80120d4:	f001 f9a8 	bl	8013428 <xTaskRemoveFromEventList>
 80120d8:	4603      	mov	r3, r0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d00e      	beq.n	80120fc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d00b      	beq.n	80120fc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	2201      	movs	r2, #1
 80120e8:	601a      	str	r2, [r3, #0]
 80120ea:	e007      	b.n	80120fc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80120ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120f0:	3301      	adds	r3, #1
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	b25a      	sxtb	r2, r3
 80120f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80120fc:	2301      	movs	r3, #1
 80120fe:	637b      	str	r3, [r7, #52]	; 0x34
 8012100:	e001      	b.n	8012106 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012102:	2300      	movs	r3, #0
 8012104:	637b      	str	r3, [r7, #52]	; 0x34
 8012106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012108:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012112:	4618      	mov	r0, r3
 8012114:	3738      	adds	r7, #56	; 0x38
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
	...

0801211c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b08c      	sub	sp, #48	; 0x30
 8012120:	af00      	add	r7, sp, #0
 8012122:	60f8      	str	r0, [r7, #12]
 8012124:	60b9      	str	r1, [r7, #8]
 8012126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012128:	2300      	movs	r3, #0
 801212a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012132:	2b00      	cmp	r3, #0
 8012134:	d109      	bne.n	801214a <xQueueReceive+0x2e>
	__asm volatile
 8012136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213a:	f383 8811 	msr	BASEPRI, r3
 801213e:	f3bf 8f6f 	isb	sy
 8012142:	f3bf 8f4f 	dsb	sy
 8012146:	623b      	str	r3, [r7, #32]
 8012148:	e7fe      	b.n	8012148 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d103      	bne.n	8012158 <xQueueReceive+0x3c>
 8012150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012154:	2b00      	cmp	r3, #0
 8012156:	d101      	bne.n	801215c <xQueueReceive+0x40>
 8012158:	2301      	movs	r3, #1
 801215a:	e000      	b.n	801215e <xQueueReceive+0x42>
 801215c:	2300      	movs	r3, #0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d109      	bne.n	8012176 <xQueueReceive+0x5a>
 8012162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012166:	f383 8811 	msr	BASEPRI, r3
 801216a:	f3bf 8f6f 	isb	sy
 801216e:	f3bf 8f4f 	dsb	sy
 8012172:	61fb      	str	r3, [r7, #28]
 8012174:	e7fe      	b.n	8012174 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012176:	f001 fb0d 	bl	8013794 <xTaskGetSchedulerState>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d102      	bne.n	8012186 <xQueueReceive+0x6a>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d101      	bne.n	801218a <xQueueReceive+0x6e>
 8012186:	2301      	movs	r3, #1
 8012188:	e000      	b.n	801218c <xQueueReceive+0x70>
 801218a:	2300      	movs	r3, #0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d109      	bne.n	80121a4 <xQueueReceive+0x88>
 8012190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012194:	f383 8811 	msr	BASEPRI, r3
 8012198:	f3bf 8f6f 	isb	sy
 801219c:	f3bf 8f4f 	dsb	sy
 80121a0:	61bb      	str	r3, [r7, #24]
 80121a2:	e7fe      	b.n	80121a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121a4:	f002 f93a 	bl	801441c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d01f      	beq.n	80121f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80121b4:	68b9      	ldr	r1, [r7, #8]
 80121b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121b8:	f000 fab5 	bl	8012726 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121be:	1e5a      	subs	r2, r3, #1
 80121c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00f      	beq.n	80121ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ce:	3310      	adds	r3, #16
 80121d0:	4618      	mov	r0, r3
 80121d2:	f001 f929 	bl	8013428 <xTaskRemoveFromEventList>
 80121d6:	4603      	mov	r3, r0
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d007      	beq.n	80121ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80121dc:	4b3c      	ldr	r3, [pc, #240]	; (80122d0 <xQueueReceive+0x1b4>)
 80121de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121e2:	601a      	str	r2, [r3, #0]
 80121e4:	f3bf 8f4f 	dsb	sy
 80121e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80121ec:	f002 f944 	bl	8014478 <vPortExitCritical>
				return pdPASS;
 80121f0:	2301      	movs	r3, #1
 80121f2:	e069      	b.n	80122c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d103      	bne.n	8012202 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80121fa:	f002 f93d 	bl	8014478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80121fe:	2300      	movs	r3, #0
 8012200:	e062      	b.n	80122c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012204:	2b00      	cmp	r3, #0
 8012206:	d106      	bne.n	8012216 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012208:	f107 0310 	add.w	r3, r7, #16
 801220c:	4618      	mov	r0, r3
 801220e:	f001 f96d 	bl	80134ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012212:	2301      	movs	r3, #1
 8012214:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012216:	f002 f92f 	bl	8014478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801221a:	f000 fee9 	bl	8012ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801221e:	f002 f8fd 	bl	801441c <vPortEnterCritical>
 8012222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012228:	b25b      	sxtb	r3, r3
 801222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801222e:	d103      	bne.n	8012238 <xQueueReceive+0x11c>
 8012230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012232:	2200      	movs	r2, #0
 8012234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801223e:	b25b      	sxtb	r3, r3
 8012240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012244:	d103      	bne.n	801224e <xQueueReceive+0x132>
 8012246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012248:	2200      	movs	r2, #0
 801224a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801224e:	f002 f913 	bl	8014478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012252:	1d3a      	adds	r2, r7, #4
 8012254:	f107 0310 	add.w	r3, r7, #16
 8012258:	4611      	mov	r1, r2
 801225a:	4618      	mov	r0, r3
 801225c:	f001 f95c 	bl	8013518 <xTaskCheckForTimeOut>
 8012260:	4603      	mov	r3, r0
 8012262:	2b00      	cmp	r3, #0
 8012264:	d123      	bne.n	80122ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012268:	f000 fad5 	bl	8012816 <prvIsQueueEmpty>
 801226c:	4603      	mov	r3, r0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d017      	beq.n	80122a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012274:	3324      	adds	r3, #36	; 0x24
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	4611      	mov	r1, r2
 801227a:	4618      	mov	r0, r3
 801227c:	f001 f886 	bl	801338c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012282:	f000 fa76 	bl	8012772 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012286:	f000 fec1 	bl	801300c <xTaskResumeAll>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d189      	bne.n	80121a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012290:	4b0f      	ldr	r3, [pc, #60]	; (80122d0 <xQueueReceive+0x1b4>)
 8012292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012296:	601a      	str	r2, [r3, #0]
 8012298:	f3bf 8f4f 	dsb	sy
 801229c:	f3bf 8f6f 	isb	sy
 80122a0:	e780      	b.n	80121a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80122a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122a4:	f000 fa65 	bl	8012772 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122a8:	f000 feb0 	bl	801300c <xTaskResumeAll>
 80122ac:	e77a      	b.n	80121a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80122ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122b0:	f000 fa5f 	bl	8012772 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122b4:	f000 feaa 	bl	801300c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122ba:	f000 faac 	bl	8012816 <prvIsQueueEmpty>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f43f af6f 	beq.w	80121a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3730      	adds	r7, #48	; 0x30
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	e000ed04 	.word	0xe000ed04

080122d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b08e      	sub	sp, #56	; 0x38
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80122de:	2300      	movs	r3, #0
 80122e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80122e6:	2300      	movs	r3, #0
 80122e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80122ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d109      	bne.n	8012304 <xQueueSemaphoreTake+0x30>
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	623b      	str	r3, [r7, #32]
 8012302:	e7fe      	b.n	8012302 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012308:	2b00      	cmp	r3, #0
 801230a:	d009      	beq.n	8012320 <xQueueSemaphoreTake+0x4c>
 801230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012310:	f383 8811 	msr	BASEPRI, r3
 8012314:	f3bf 8f6f 	isb	sy
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	61fb      	str	r3, [r7, #28]
 801231e:	e7fe      	b.n	801231e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012320:	f001 fa38 	bl	8013794 <xTaskGetSchedulerState>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d102      	bne.n	8012330 <xQueueSemaphoreTake+0x5c>
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d101      	bne.n	8012334 <xQueueSemaphoreTake+0x60>
 8012330:	2301      	movs	r3, #1
 8012332:	e000      	b.n	8012336 <xQueueSemaphoreTake+0x62>
 8012334:	2300      	movs	r3, #0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d109      	bne.n	801234e <xQueueSemaphoreTake+0x7a>
 801233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233e:	f383 8811 	msr	BASEPRI, r3
 8012342:	f3bf 8f6f 	isb	sy
 8012346:	f3bf 8f4f 	dsb	sy
 801234a:	61bb      	str	r3, [r7, #24]
 801234c:	e7fe      	b.n	801234c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801234e:	f002 f865 	bl	801441c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012356:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235a:	2b00      	cmp	r3, #0
 801235c:	d024      	beq.n	80123a8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012360:	1e5a      	subs	r2, r3, #1
 8012362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012364:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d104      	bne.n	8012378 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801236e:	f001 fb83 	bl	8013a78 <pvTaskIncrementMutexHeldCount>
 8012372:	4602      	mov	r2, r0
 8012374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012376:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	691b      	ldr	r3, [r3, #16]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d00f      	beq.n	80123a0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012382:	3310      	adds	r3, #16
 8012384:	4618      	mov	r0, r3
 8012386:	f001 f84f 	bl	8013428 <xTaskRemoveFromEventList>
 801238a:	4603      	mov	r3, r0
 801238c:	2b00      	cmp	r3, #0
 801238e:	d007      	beq.n	80123a0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012390:	4b53      	ldr	r3, [pc, #332]	; (80124e0 <xQueueSemaphoreTake+0x20c>)
 8012392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012396:	601a      	str	r2, [r3, #0]
 8012398:	f3bf 8f4f 	dsb	sy
 801239c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80123a0:	f002 f86a 	bl	8014478 <vPortExitCritical>
				return pdPASS;
 80123a4:	2301      	movs	r3, #1
 80123a6:	e096      	b.n	80124d6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d110      	bne.n	80123d0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80123ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d009      	beq.n	80123c8 <xQueueSemaphoreTake+0xf4>
 80123b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b8:	f383 8811 	msr	BASEPRI, r3
 80123bc:	f3bf 8f6f 	isb	sy
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	617b      	str	r3, [r7, #20]
 80123c6:	e7fe      	b.n	80123c6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80123c8:	f002 f856 	bl	8014478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80123cc:	2300      	movs	r3, #0
 80123ce:	e082      	b.n	80124d6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d106      	bne.n	80123e4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123d6:	f107 030c 	add.w	r3, r7, #12
 80123da:	4618      	mov	r0, r3
 80123dc:	f001 f886 	bl	80134ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123e0:	2301      	movs	r3, #1
 80123e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123e4:	f002 f848 	bl	8014478 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123e8:	f000 fe02 	bl	8012ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123ec:	f002 f816 	bl	801441c <vPortEnterCritical>
 80123f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123f6:	b25b      	sxtb	r3, r3
 80123f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123fc:	d103      	bne.n	8012406 <xQueueSemaphoreTake+0x132>
 80123fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012400:	2200      	movs	r2, #0
 8012402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801240c:	b25b      	sxtb	r3, r3
 801240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012412:	d103      	bne.n	801241c <xQueueSemaphoreTake+0x148>
 8012414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012416:	2200      	movs	r2, #0
 8012418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801241c:	f002 f82c 	bl	8014478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012420:	463a      	mov	r2, r7
 8012422:	f107 030c 	add.w	r3, r7, #12
 8012426:	4611      	mov	r1, r2
 8012428:	4618      	mov	r0, r3
 801242a:	f001 f875 	bl	8013518 <xTaskCheckForTimeOut>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d132      	bne.n	801249a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012436:	f000 f9ee 	bl	8012816 <prvIsQueueEmpty>
 801243a:	4603      	mov	r3, r0
 801243c:	2b00      	cmp	r3, #0
 801243e:	d026      	beq.n	801248e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d109      	bne.n	801245c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012448:	f001 ffe8 	bl	801441c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244e:	689b      	ldr	r3, [r3, #8]
 8012450:	4618      	mov	r0, r3
 8012452:	f001 f9bd 	bl	80137d0 <xTaskPriorityInherit>
 8012456:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012458:	f002 f80e 	bl	8014478 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245e:	3324      	adds	r3, #36	; 0x24
 8012460:	683a      	ldr	r2, [r7, #0]
 8012462:	4611      	mov	r1, r2
 8012464:	4618      	mov	r0, r3
 8012466:	f000 ff91 	bl	801338c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801246a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801246c:	f000 f981 	bl	8012772 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012470:	f000 fdcc 	bl	801300c <xTaskResumeAll>
 8012474:	4603      	mov	r3, r0
 8012476:	2b00      	cmp	r3, #0
 8012478:	f47f af69 	bne.w	801234e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 801247c:	4b18      	ldr	r3, [pc, #96]	; (80124e0 <xQueueSemaphoreTake+0x20c>)
 801247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012482:	601a      	str	r2, [r3, #0]
 8012484:	f3bf 8f4f 	dsb	sy
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	e75f      	b.n	801234e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801248e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012490:	f000 f96f 	bl	8012772 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012494:	f000 fdba 	bl	801300c <xTaskResumeAll>
 8012498:	e759      	b.n	801234e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801249a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801249c:	f000 f969 	bl	8012772 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80124a0:	f000 fdb4 	bl	801300c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80124a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124a6:	f000 f9b6 	bl	8012816 <prvIsQueueEmpty>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	f43f af4e 	beq.w	801234e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80124b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00d      	beq.n	80124d4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80124b8:	f001 ffb0 	bl	801441c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80124bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124be:	f000 f8b0 	bl	8012622 <prvGetDisinheritPriorityAfterTimeout>
 80124c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80124c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c6:	689b      	ldr	r3, [r3, #8]
 80124c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124ca:	4618      	mov	r0, r3
 80124cc:	f001 fa54 	bl	8013978 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80124d0:	f001 ffd2 	bl	8014478 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80124d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3738      	adds	r7, #56	; 0x38
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	e000ed04 	.word	0xe000ed04

080124e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b08e      	sub	sp, #56	; 0x38
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80124f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d109      	bne.n	801250e <xQueueReceiveFromISR+0x2a>
 80124fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124fe:	f383 8811 	msr	BASEPRI, r3
 8012502:	f3bf 8f6f 	isb	sy
 8012506:	f3bf 8f4f 	dsb	sy
 801250a:	623b      	str	r3, [r7, #32]
 801250c:	e7fe      	b.n	801250c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d103      	bne.n	801251c <xQueueReceiveFromISR+0x38>
 8012514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012518:	2b00      	cmp	r3, #0
 801251a:	d101      	bne.n	8012520 <xQueueReceiveFromISR+0x3c>
 801251c:	2301      	movs	r3, #1
 801251e:	e000      	b.n	8012522 <xQueueReceiveFromISR+0x3e>
 8012520:	2300      	movs	r3, #0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d109      	bne.n	801253a <xQueueReceiveFromISR+0x56>
 8012526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252a:	f383 8811 	msr	BASEPRI, r3
 801252e:	f3bf 8f6f 	isb	sy
 8012532:	f3bf 8f4f 	dsb	sy
 8012536:	61fb      	str	r3, [r7, #28]
 8012538:	e7fe      	b.n	8012538 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801253a:	f002 f84b 	bl	80145d4 <vPortValidateInterruptPriority>
	__asm volatile
 801253e:	f3ef 8211 	mrs	r2, BASEPRI
 8012542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012546:	f383 8811 	msr	BASEPRI, r3
 801254a:	f3bf 8f6f 	isb	sy
 801254e:	f3bf 8f4f 	dsb	sy
 8012552:	61ba      	str	r2, [r7, #24]
 8012554:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012556:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012558:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801255e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012562:	2b00      	cmp	r3, #0
 8012564:	d02f      	beq.n	80125c6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801256c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012570:	68b9      	ldr	r1, [r7, #8]
 8012572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012574:	f000 f8d7 	bl	8012726 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257a:	1e5a      	subs	r2, r3, #1
 801257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012580:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012588:	d112      	bne.n	80125b0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258c:	691b      	ldr	r3, [r3, #16]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d016      	beq.n	80125c0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012594:	3310      	adds	r3, #16
 8012596:	4618      	mov	r0, r3
 8012598:	f000 ff46 	bl	8013428 <xTaskRemoveFromEventList>
 801259c:	4603      	mov	r3, r0
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d00e      	beq.n	80125c0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00b      	beq.n	80125c0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2201      	movs	r2, #1
 80125ac:	601a      	str	r2, [r3, #0]
 80125ae:	e007      	b.n	80125c0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80125b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125b4:	3301      	adds	r3, #1
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	b25a      	sxtb	r2, r3
 80125ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80125c0:	2301      	movs	r3, #1
 80125c2:	637b      	str	r3, [r7, #52]	; 0x34
 80125c4:	e001      	b.n	80125ca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80125c6:	2300      	movs	r3, #0
 80125c8:	637b      	str	r3, [r7, #52]	; 0x34
 80125ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80125d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3738      	adds	r7, #56	; 0x38
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80125de:	b580      	push	{r7, lr}
 80125e0:	b084      	sub	sp, #16
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d109      	bne.n	8012604 <vQueueDelete+0x26>
	__asm volatile
 80125f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f4:	f383 8811 	msr	BASEPRI, r3
 80125f8:	f3bf 8f6f 	isb	sy
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	60bb      	str	r3, [r7, #8]
 8012602:	e7fe      	b.n	8012602 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012604:	68f8      	ldr	r0, [r7, #12]
 8012606:	f000 f95d 	bl	80128c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012610:	2b00      	cmp	r3, #0
 8012612:	d102      	bne.n	801261a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f002 f8dd 	bl	80147d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801261a:	bf00      	nop
 801261c:	3710      	adds	r7, #16
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}

08012622 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012622:	b480      	push	{r7}
 8012624:	b085      	sub	sp, #20
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801262e:	2b00      	cmp	r3, #0
 8012630:	d006      	beq.n	8012640 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801263c:	60fb      	str	r3, [r7, #12]
 801263e:	e001      	b.n	8012644 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012640:	2300      	movs	r3, #0
 8012642:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012644:	68fb      	ldr	r3, [r7, #12]
	}
 8012646:	4618      	mov	r0, r3
 8012648:	3714      	adds	r7, #20
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr

08012652 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b086      	sub	sp, #24
 8012656:	af00      	add	r7, sp, #0
 8012658:	60f8      	str	r0, [r7, #12]
 801265a:	60b9      	str	r1, [r7, #8]
 801265c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801265e:	2300      	movs	r3, #0
 8012660:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012666:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801266c:	2b00      	cmp	r3, #0
 801266e:	d10d      	bne.n	801268c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d14d      	bne.n	8012714 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	689b      	ldr	r3, [r3, #8]
 801267c:	4618      	mov	r0, r3
 801267e:	f001 f90f 	bl	80138a0 <xTaskPriorityDisinherit>
 8012682:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2200      	movs	r2, #0
 8012688:	609a      	str	r2, [r3, #8]
 801268a:	e043      	b.n	8012714 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d119      	bne.n	80126c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	6858      	ldr	r0, [r3, #4]
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801269a:	461a      	mov	r2, r3
 801269c:	68b9      	ldr	r1, [r7, #8]
 801269e:	f004 f975 	bl	801698c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	685a      	ldr	r2, [r3, #4]
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126aa:	441a      	add	r2, r3
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	685a      	ldr	r2, [r3, #4]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d32b      	bcc.n	8012714 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	681a      	ldr	r2, [r3, #0]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	605a      	str	r2, [r3, #4]
 80126c4:	e026      	b.n	8012714 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	68d8      	ldr	r0, [r3, #12]
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ce:	461a      	mov	r2, r3
 80126d0:	68b9      	ldr	r1, [r7, #8]
 80126d2:	f004 f95b 	bl	801698c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	68da      	ldr	r2, [r3, #12]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126de:	425b      	negs	r3, r3
 80126e0:	441a      	add	r2, r3
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	68da      	ldr	r2, [r3, #12]
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d207      	bcs.n	8012702 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	689a      	ldr	r2, [r3, #8]
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126fa:	425b      	negs	r3, r3
 80126fc:	441a      	add	r2, r3
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2b02      	cmp	r3, #2
 8012706:	d105      	bne.n	8012714 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d002      	beq.n	8012714 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	3b01      	subs	r3, #1
 8012712:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	1c5a      	adds	r2, r3, #1
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801271c:	697b      	ldr	r3, [r7, #20]
}
 801271e:	4618      	mov	r0, r3
 8012720:	3718      	adds	r7, #24
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}

08012726 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012726:	b580      	push	{r7, lr}
 8012728:	b082      	sub	sp, #8
 801272a:	af00      	add	r7, sp, #0
 801272c:	6078      	str	r0, [r7, #4]
 801272e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012734:	2b00      	cmp	r3, #0
 8012736:	d018      	beq.n	801276a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	68da      	ldr	r2, [r3, #12]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012740:	441a      	add	r2, r3
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	68da      	ldr	r2, [r3, #12]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	689b      	ldr	r3, [r3, #8]
 801274e:	429a      	cmp	r2, r3
 8012750:	d303      	bcc.n	801275a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681a      	ldr	r2, [r3, #0]
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	68d9      	ldr	r1, [r3, #12]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012762:	461a      	mov	r2, r3
 8012764:	6838      	ldr	r0, [r7, #0]
 8012766:	f004 f911 	bl	801698c <memcpy>
	}
}
 801276a:	bf00      	nop
 801276c:	3708      	adds	r7, #8
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b084      	sub	sp, #16
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801277a:	f001 fe4f 	bl	801441c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012784:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012786:	e011      	b.n	80127ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801278c:	2b00      	cmp	r3, #0
 801278e:	d012      	beq.n	80127b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	3324      	adds	r3, #36	; 0x24
 8012794:	4618      	mov	r0, r3
 8012796:	f000 fe47 	bl	8013428 <xTaskRemoveFromEventList>
 801279a:	4603      	mov	r3, r0
 801279c:	2b00      	cmp	r3, #0
 801279e:	d001      	beq.n	80127a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80127a0:	f000 ff1a 	bl	80135d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80127a4:	7bfb      	ldrb	r3, [r7, #15]
 80127a6:	3b01      	subs	r3, #1
 80127a8:	b2db      	uxtb	r3, r3
 80127aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	dce9      	bgt.n	8012788 <prvUnlockQueue+0x16>
 80127b4:	e000      	b.n	80127b8 <prvUnlockQueue+0x46>
					break;
 80127b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	22ff      	movs	r2, #255	; 0xff
 80127bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80127c0:	f001 fe5a 	bl	8014478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80127c4:	f001 fe2a 	bl	801441c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127d0:	e011      	b.n	80127f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	691b      	ldr	r3, [r3, #16]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d012      	beq.n	8012800 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	3310      	adds	r3, #16
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 fe22 	bl	8013428 <xTaskRemoveFromEventList>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d001      	beq.n	80127ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80127ea:	f000 fef5 	bl	80135d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80127ee:	7bbb      	ldrb	r3, [r7, #14]
 80127f0:	3b01      	subs	r3, #1
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	dce9      	bgt.n	80127d2 <prvUnlockQueue+0x60>
 80127fe:	e000      	b.n	8012802 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012800:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	22ff      	movs	r2, #255	; 0xff
 8012806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801280a:	f001 fe35 	bl	8014478 <vPortExitCritical>
}
 801280e:	bf00      	nop
 8012810:	3710      	adds	r7, #16
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}

08012816 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012816:	b580      	push	{r7, lr}
 8012818:	b084      	sub	sp, #16
 801281a:	af00      	add	r7, sp, #0
 801281c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801281e:	f001 fdfd 	bl	801441c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012826:	2b00      	cmp	r3, #0
 8012828:	d102      	bne.n	8012830 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801282a:	2301      	movs	r3, #1
 801282c:	60fb      	str	r3, [r7, #12]
 801282e:	e001      	b.n	8012834 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012830:	2300      	movs	r3, #0
 8012832:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012834:	f001 fe20 	bl	8014478 <vPortExitCritical>

	return xReturn;
 8012838:	68fb      	ldr	r3, [r7, #12]
}
 801283a:	4618      	mov	r0, r3
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}

08012842 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012842:	b580      	push	{r7, lr}
 8012844:	b084      	sub	sp, #16
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801284a:	f001 fde7 	bl	801441c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012856:	429a      	cmp	r2, r3
 8012858:	d102      	bne.n	8012860 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801285a:	2301      	movs	r3, #1
 801285c:	60fb      	str	r3, [r7, #12]
 801285e:	e001      	b.n	8012864 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012860:	2300      	movs	r3, #0
 8012862:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012864:	f001 fe08 	bl	8014478 <vPortExitCritical>

	return xReturn;
 8012868:	68fb      	ldr	r3, [r7, #12]
}
 801286a:	4618      	mov	r0, r3
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
	...

08012874 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012874:	b480      	push	{r7}
 8012876:	b085      	sub	sp, #20
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801287e:	2300      	movs	r3, #0
 8012880:	60fb      	str	r3, [r7, #12]
 8012882:	e014      	b.n	80128ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012884:	4a0e      	ldr	r2, [pc, #56]	; (80128c0 <vQueueAddToRegistry+0x4c>)
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d10b      	bne.n	80128a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012890:	490b      	ldr	r1, [pc, #44]	; (80128c0 <vQueueAddToRegistry+0x4c>)
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	683a      	ldr	r2, [r7, #0]
 8012896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801289a:	4a09      	ldr	r2, [pc, #36]	; (80128c0 <vQueueAddToRegistry+0x4c>)
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	00db      	lsls	r3, r3, #3
 80128a0:	4413      	add	r3, r2
 80128a2:	687a      	ldr	r2, [r7, #4]
 80128a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80128a6:	e005      	b.n	80128b4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	3301      	adds	r3, #1
 80128ac:	60fb      	str	r3, [r7, #12]
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2b07      	cmp	r3, #7
 80128b2:	d9e7      	bls.n	8012884 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80128b4:	bf00      	nop
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr
 80128c0:	2000c810 	.word	0x2000c810

080128c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80128c4:	b480      	push	{r7}
 80128c6:	b085      	sub	sp, #20
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128cc:	2300      	movs	r3, #0
 80128ce:	60fb      	str	r3, [r7, #12]
 80128d0:	e016      	b.n	8012900 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80128d2:	4a10      	ldr	r2, [pc, #64]	; (8012914 <vQueueUnregisterQueue+0x50>)
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	00db      	lsls	r3, r3, #3
 80128d8:	4413      	add	r3, r2
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	429a      	cmp	r2, r3
 80128e0:	d10b      	bne.n	80128fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80128e2:	4a0c      	ldr	r2, [pc, #48]	; (8012914 <vQueueUnregisterQueue+0x50>)
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	2100      	movs	r1, #0
 80128e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80128ec:	4a09      	ldr	r2, [pc, #36]	; (8012914 <vQueueUnregisterQueue+0x50>)
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	00db      	lsls	r3, r3, #3
 80128f2:	4413      	add	r3, r2
 80128f4:	2200      	movs	r2, #0
 80128f6:	605a      	str	r2, [r3, #4]
				break;
 80128f8:	e005      	b.n	8012906 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	3301      	adds	r3, #1
 80128fe:	60fb      	str	r3, [r7, #12]
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2b07      	cmp	r3, #7
 8012904:	d9e5      	bls.n	80128d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012906:	bf00      	nop
 8012908:	3714      	adds	r7, #20
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	2000c810 	.word	0x2000c810

08012918 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012928:	f001 fd78 	bl	801441c <vPortEnterCritical>
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012932:	b25b      	sxtb	r3, r3
 8012934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012938:	d103      	bne.n	8012942 <vQueueWaitForMessageRestricted+0x2a>
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	2200      	movs	r2, #0
 801293e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012948:	b25b      	sxtb	r3, r3
 801294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801294e:	d103      	bne.n	8012958 <vQueueWaitForMessageRestricted+0x40>
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	2200      	movs	r2, #0
 8012954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012958:	f001 fd8e 	bl	8014478 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012960:	2b00      	cmp	r3, #0
 8012962:	d106      	bne.n	8012972 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	3324      	adds	r3, #36	; 0x24
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	68b9      	ldr	r1, [r7, #8]
 801296c:	4618      	mov	r0, r3
 801296e:	f000 fd31 	bl	80133d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012972:	6978      	ldr	r0, [r7, #20]
 8012974:	f7ff fefd 	bl	8012772 <prvUnlockQueue>
	}
 8012978:	bf00      	nop
 801297a:	3718      	adds	r7, #24
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012980:	b580      	push	{r7, lr}
 8012982:	b08e      	sub	sp, #56	; 0x38
 8012984:	af04      	add	r7, sp, #16
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	607a      	str	r2, [r7, #4]
 801298c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012990:	2b00      	cmp	r3, #0
 8012992:	d109      	bne.n	80129a8 <xTaskCreateStatic+0x28>
 8012994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012998:	f383 8811 	msr	BASEPRI, r3
 801299c:	f3bf 8f6f 	isb	sy
 80129a0:	f3bf 8f4f 	dsb	sy
 80129a4:	623b      	str	r3, [r7, #32]
 80129a6:	e7fe      	b.n	80129a6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80129a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d109      	bne.n	80129c2 <xTaskCreateStatic+0x42>
 80129ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	61fb      	str	r3, [r7, #28]
 80129c0:	e7fe      	b.n	80129c0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80129c2:	235c      	movs	r3, #92	; 0x5c
 80129c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	2b5c      	cmp	r3, #92	; 0x5c
 80129ca:	d009      	beq.n	80129e0 <xTaskCreateStatic+0x60>
 80129cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d0:	f383 8811 	msr	BASEPRI, r3
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	f3bf 8f4f 	dsb	sy
 80129dc:	61bb      	str	r3, [r7, #24]
 80129de:	e7fe      	b.n	80129de <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80129e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80129e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d01e      	beq.n	8012a26 <xTaskCreateStatic+0xa6>
 80129e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d01b      	beq.n	8012a26 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80129ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80129f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fa:	2202      	movs	r2, #2
 80129fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012a00:	2300      	movs	r3, #0
 8012a02:	9303      	str	r3, [sp, #12]
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	9302      	str	r3, [sp, #8]
 8012a08:	f107 0314 	add.w	r3, r7, #20
 8012a0c:	9301      	str	r3, [sp, #4]
 8012a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a10:	9300      	str	r3, [sp, #0]
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	68b9      	ldr	r1, [r7, #8]
 8012a18:	68f8      	ldr	r0, [r7, #12]
 8012a1a:	f000 f850 	bl	8012abe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a20:	f000 f8dc 	bl	8012bdc <prvAddNewTaskToReadyList>
 8012a24:	e001      	b.n	8012a2a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8012a26:	2300      	movs	r3, #0
 8012a28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012a2a:	697b      	ldr	r3, [r7, #20]
	}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3728      	adds	r7, #40	; 0x28
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b08c      	sub	sp, #48	; 0x30
 8012a38:	af04      	add	r7, sp, #16
 8012a3a:	60f8      	str	r0, [r7, #12]
 8012a3c:	60b9      	str	r1, [r7, #8]
 8012a3e:	603b      	str	r3, [r7, #0]
 8012a40:	4613      	mov	r3, r2
 8012a42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012a44:	88fb      	ldrh	r3, [r7, #6]
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f001 fe01 	bl	8014650 <pvPortMalloc>
 8012a4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00e      	beq.n	8012a74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012a56:	205c      	movs	r0, #92	; 0x5c
 8012a58:	f001 fdfa 	bl	8014650 <pvPortMalloc>
 8012a5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012a5e:	69fb      	ldr	r3, [r7, #28]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d003      	beq.n	8012a6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	697a      	ldr	r2, [r7, #20]
 8012a68:	631a      	str	r2, [r3, #48]	; 0x30
 8012a6a:	e005      	b.n	8012a78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012a6c:	6978      	ldr	r0, [r7, #20]
 8012a6e:	f001 feb1 	bl	80147d4 <vPortFree>
 8012a72:	e001      	b.n	8012a78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012a74:	2300      	movs	r3, #0
 8012a76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d017      	beq.n	8012aae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	2200      	movs	r2, #0
 8012a82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012a86:	88fa      	ldrh	r2, [r7, #6]
 8012a88:	2300      	movs	r3, #0
 8012a8a:	9303      	str	r3, [sp, #12]
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	9302      	str	r3, [sp, #8]
 8012a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a92:	9301      	str	r3, [sp, #4]
 8012a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a96:	9300      	str	r3, [sp, #0]
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	68b9      	ldr	r1, [r7, #8]
 8012a9c:	68f8      	ldr	r0, [r7, #12]
 8012a9e:	f000 f80e 	bl	8012abe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012aa2:	69f8      	ldr	r0, [r7, #28]
 8012aa4:	f000 f89a 	bl	8012bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	61bb      	str	r3, [r7, #24]
 8012aac:	e002      	b.n	8012ab4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012aae:	f04f 33ff 	mov.w	r3, #4294967295
 8012ab2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012ab4:	69bb      	ldr	r3, [r7, #24]
	}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3720      	adds	r7, #32
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}

08012abe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012abe:	b580      	push	{r7, lr}
 8012ac0:	b088      	sub	sp, #32
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	60f8      	str	r0, [r7, #12]
 8012ac6:	60b9      	str	r1, [r7, #8]
 8012ac8:	607a      	str	r2, [r7, #4]
 8012aca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ace:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	009b      	lsls	r3, r3, #2
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	21a5      	movs	r1, #165	; 0xa5
 8012ad8:	f003 ff7c 	bl	80169d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ae6:	3b01      	subs	r3, #1
 8012ae8:	009b      	lsls	r3, r3, #2
 8012aea:	4413      	add	r3, r2
 8012aec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	f023 0307 	bic.w	r3, r3, #7
 8012af4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	f003 0307 	and.w	r3, r3, #7
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d009      	beq.n	8012b14 <prvInitialiseNewTask+0x56>
 8012b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	617b      	str	r3, [r7, #20]
 8012b12:	e7fe      	b.n	8012b12 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d01f      	beq.n	8012b5a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	61fb      	str	r3, [r7, #28]
 8012b1e:	e012      	b.n	8012b46 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012b20:	68ba      	ldr	r2, [r7, #8]
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	4413      	add	r3, r2
 8012b26:	7819      	ldrb	r1, [r3, #0]
 8012b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	3334      	adds	r3, #52	; 0x34
 8012b30:	460a      	mov	r2, r1
 8012b32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012b34:	68ba      	ldr	r2, [r7, #8]
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	4413      	add	r3, r2
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d006      	beq.n	8012b4e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b40:	69fb      	ldr	r3, [r7, #28]
 8012b42:	3301      	adds	r3, #1
 8012b44:	61fb      	str	r3, [r7, #28]
 8012b46:	69fb      	ldr	r3, [r7, #28]
 8012b48:	2b0f      	cmp	r3, #15
 8012b4a:	d9e9      	bls.n	8012b20 <prvInitialiseNewTask+0x62>
 8012b4c:	e000      	b.n	8012b50 <prvInitialiseNewTask+0x92>
			{
				break;
 8012b4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b52:	2200      	movs	r2, #0
 8012b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012b58:	e003      	b.n	8012b62 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b64:	2b37      	cmp	r3, #55	; 0x37
 8012b66:	d901      	bls.n	8012b6c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012b68:	2337      	movs	r3, #55	; 0x37
 8012b6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b80:	3304      	adds	r3, #4
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7fe fe7a 	bl	801187c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8a:	3318      	adds	r3, #24
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fe fe75 	bl	801187c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ba6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012baa:	2200      	movs	r2, #0
 8012bac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	68f9      	ldr	r1, [r7, #12]
 8012bba:	69b8      	ldr	r0, [r7, #24]
 8012bbc:	f001 fb0a 	bl	80141d4 <pxPortInitialiseStack>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d002      	beq.n	8012bd2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012bd2:	bf00      	nop
 8012bd4:	3720      	adds	r7, #32
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
	...

08012bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012be4:	f001 fc1a 	bl	801441c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012be8:	4b2d      	ldr	r3, [pc, #180]	; (8012ca0 <prvAddNewTaskToReadyList+0xc4>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	3301      	adds	r3, #1
 8012bee:	4a2c      	ldr	r2, [pc, #176]	; (8012ca0 <prvAddNewTaskToReadyList+0xc4>)
 8012bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012bf2:	4b2c      	ldr	r3, [pc, #176]	; (8012ca4 <prvAddNewTaskToReadyList+0xc8>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d109      	bne.n	8012c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012bfa:	4a2a      	ldr	r2, [pc, #168]	; (8012ca4 <prvAddNewTaskToReadyList+0xc8>)
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012c00:	4b27      	ldr	r3, [pc, #156]	; (8012ca0 <prvAddNewTaskToReadyList+0xc4>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d110      	bne.n	8012c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012c08:	f000 fd0a 	bl	8013620 <prvInitialiseTaskLists>
 8012c0c:	e00d      	b.n	8012c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012c0e:	4b26      	ldr	r3, [pc, #152]	; (8012ca8 <prvAddNewTaskToReadyList+0xcc>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d109      	bne.n	8012c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012c16:	4b23      	ldr	r3, [pc, #140]	; (8012ca4 <prvAddNewTaskToReadyList+0xc8>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d802      	bhi.n	8012c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012c24:	4a1f      	ldr	r2, [pc, #124]	; (8012ca4 <prvAddNewTaskToReadyList+0xc8>)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012c2a:	4b20      	ldr	r3, [pc, #128]	; (8012cac <prvAddNewTaskToReadyList+0xd0>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	4a1e      	ldr	r2, [pc, #120]	; (8012cac <prvAddNewTaskToReadyList+0xd0>)
 8012c32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012c34:	4b1d      	ldr	r3, [pc, #116]	; (8012cac <prvAddNewTaskToReadyList+0xd0>)
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c40:	4b1b      	ldr	r3, [pc, #108]	; (8012cb0 <prvAddNewTaskToReadyList+0xd4>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d903      	bls.n	8012c50 <prvAddNewTaskToReadyList+0x74>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c4c:	4a18      	ldr	r2, [pc, #96]	; (8012cb0 <prvAddNewTaskToReadyList+0xd4>)
 8012c4e:	6013      	str	r3, [r2, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c54:	4613      	mov	r3, r2
 8012c56:	009b      	lsls	r3, r3, #2
 8012c58:	4413      	add	r3, r2
 8012c5a:	009b      	lsls	r3, r3, #2
 8012c5c:	4a15      	ldr	r2, [pc, #84]	; (8012cb4 <prvAddNewTaskToReadyList+0xd8>)
 8012c5e:	441a      	add	r2, r3
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	3304      	adds	r3, #4
 8012c64:	4619      	mov	r1, r3
 8012c66:	4610      	mov	r0, r2
 8012c68:	f7fe fe15 	bl	8011896 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012c6c:	f001 fc04 	bl	8014478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012c70:	4b0d      	ldr	r3, [pc, #52]	; (8012ca8 <prvAddNewTaskToReadyList+0xcc>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00e      	beq.n	8012c96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012c78:	4b0a      	ldr	r3, [pc, #40]	; (8012ca4 <prvAddNewTaskToReadyList+0xc8>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d207      	bcs.n	8012c96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012c86:	4b0c      	ldr	r3, [pc, #48]	; (8012cb8 <prvAddNewTaskToReadyList+0xdc>)
 8012c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c8c:	601a      	str	r2, [r3, #0]
 8012c8e:	f3bf 8f4f 	dsb	sy
 8012c92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c96:	bf00      	nop
 8012c98:	3708      	adds	r7, #8
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	200012b0 	.word	0x200012b0
 8012ca4:	20000ddc 	.word	0x20000ddc
 8012ca8:	200012bc 	.word	0x200012bc
 8012cac:	200012cc 	.word	0x200012cc
 8012cb0:	200012b8 	.word	0x200012b8
 8012cb4:	20000de0 	.word	0x20000de0
 8012cb8:	e000ed04 	.word	0xe000ed04

08012cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d016      	beq.n	8012cfc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012cce:	4b13      	ldr	r3, [pc, #76]	; (8012d1c <vTaskDelay+0x60>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d009      	beq.n	8012cea <vTaskDelay+0x2e>
 8012cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cda:	f383 8811 	msr	BASEPRI, r3
 8012cde:	f3bf 8f6f 	isb	sy
 8012ce2:	f3bf 8f4f 	dsb	sy
 8012ce6:	60bb      	str	r3, [r7, #8]
 8012ce8:	e7fe      	b.n	8012ce8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012cea:	f000 f981 	bl	8012ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012cee:	2100      	movs	r1, #0
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 fed5 	bl	8013aa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012cf6:	f000 f989 	bl	801300c <xTaskResumeAll>
 8012cfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d107      	bne.n	8012d12 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012d02:	4b07      	ldr	r3, [pc, #28]	; (8012d20 <vTaskDelay+0x64>)
 8012d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d08:	601a      	str	r2, [r3, #0]
 8012d0a:	f3bf 8f4f 	dsb	sy
 8012d0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012d12:	bf00      	nop
 8012d14:	3710      	adds	r7, #16
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	200012d8 	.word	0x200012d8
 8012d20:	e000ed04 	.word	0xe000ed04

08012d24 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b084      	sub	sp, #16
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012d2c:	f001 fb76 	bl	801441c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d102      	bne.n	8012d3c <vTaskSuspend+0x18>
 8012d36:	4b2f      	ldr	r3, [pc, #188]	; (8012df4 <vTaskSuspend+0xd0>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	e000      	b.n	8012d3e <vTaskSuspend+0x1a>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	3304      	adds	r3, #4
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fe fe03 	bl	8011950 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d004      	beq.n	8012d5c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	3318      	adds	r3, #24
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fe fdfa 	bl	8011950 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	3304      	adds	r3, #4
 8012d60:	4619      	mov	r1, r3
 8012d62:	4825      	ldr	r0, [pc, #148]	; (8012df8 <vTaskSuspend+0xd4>)
 8012d64:	f7fe fd97 	bl	8011896 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d103      	bne.n	8012d7c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2200      	movs	r2, #0
 8012d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012d7c:	f001 fb7c 	bl	8014478 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012d80:	4b1e      	ldr	r3, [pc, #120]	; (8012dfc <vTaskSuspend+0xd8>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d005      	beq.n	8012d94 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012d88:	f001 fb48 	bl	801441c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012d8c:	f000 fce2 	bl	8013754 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012d90:	f001 fb72 	bl	8014478 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012d94:	4b17      	ldr	r3, [pc, #92]	; (8012df4 <vTaskSuspend+0xd0>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	68fa      	ldr	r2, [r7, #12]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d126      	bne.n	8012dec <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8012d9e:	4b17      	ldr	r3, [pc, #92]	; (8012dfc <vTaskSuspend+0xd8>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d016      	beq.n	8012dd4 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012da6:	4b16      	ldr	r3, [pc, #88]	; (8012e00 <vTaskSuspend+0xdc>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d009      	beq.n	8012dc2 <vTaskSuspend+0x9e>
 8012dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db2:	f383 8811 	msr	BASEPRI, r3
 8012db6:	f3bf 8f6f 	isb	sy
 8012dba:	f3bf 8f4f 	dsb	sy
 8012dbe:	60bb      	str	r3, [r7, #8]
 8012dc0:	e7fe      	b.n	8012dc0 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8012dc2:	4b10      	ldr	r3, [pc, #64]	; (8012e04 <vTaskSuspend+0xe0>)
 8012dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dc8:	601a      	str	r2, [r3, #0]
 8012dca:	f3bf 8f4f 	dsb	sy
 8012dce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012dd2:	e00b      	b.n	8012dec <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012dd4:	4b08      	ldr	r3, [pc, #32]	; (8012df8 <vTaskSuspend+0xd4>)
 8012dd6:	681a      	ldr	r2, [r3, #0]
 8012dd8:	4b0b      	ldr	r3, [pc, #44]	; (8012e08 <vTaskSuspend+0xe4>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d103      	bne.n	8012de8 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8012de0:	4b04      	ldr	r3, [pc, #16]	; (8012df4 <vTaskSuspend+0xd0>)
 8012de2:	2200      	movs	r2, #0
 8012de4:	601a      	str	r2, [r3, #0]
	}
 8012de6:	e001      	b.n	8012dec <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8012de8:	f000 fa74 	bl	80132d4 <vTaskSwitchContext>
	}
 8012dec:	bf00      	nop
 8012dee:	3710      	adds	r7, #16
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	20000ddc 	.word	0x20000ddc
 8012df8:	2000129c 	.word	0x2000129c
 8012dfc:	200012bc 	.word	0x200012bc
 8012e00:	200012d8 	.word	0x200012d8
 8012e04:	e000ed04 	.word	0xe000ed04
 8012e08:	200012b0 	.word	0x200012b0

08012e0c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b087      	sub	sp, #28
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012e14:	2300      	movs	r3, #0
 8012e16:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d109      	bne.n	8012e36 <prvTaskIsTaskSuspended+0x2a>
 8012e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e26:	f383 8811 	msr	BASEPRI, r3
 8012e2a:	f3bf 8f6f 	isb	sy
 8012e2e:	f3bf 8f4f 	dsb	sy
 8012e32:	60fb      	str	r3, [r7, #12]
 8012e34:	e7fe      	b.n	8012e34 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	695b      	ldr	r3, [r3, #20]
 8012e3a:	4a0a      	ldr	r2, [pc, #40]	; (8012e64 <prvTaskIsTaskSuspended+0x58>)
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d10a      	bne.n	8012e56 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e44:	4a08      	ldr	r2, [pc, #32]	; (8012e68 <prvTaskIsTaskSuspended+0x5c>)
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d005      	beq.n	8012e56 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d101      	bne.n	8012e56 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8012e52:	2301      	movs	r3, #1
 8012e54:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012e56:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012e58:	4618      	mov	r0, r3
 8012e5a:	371c      	adds	r7, #28
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr
 8012e64:	2000129c 	.word	0x2000129c
 8012e68:	20001270 	.word	0x20001270

08012e6c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d109      	bne.n	8012e92 <vTaskResume+0x26>
 8012e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e82:	f383 8811 	msr	BASEPRI, r3
 8012e86:	f3bf 8f6f 	isb	sy
 8012e8a:	f3bf 8f4f 	dsb	sy
 8012e8e:	60bb      	str	r3, [r7, #8]
 8012e90:	e7fe      	b.n	8012e90 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8012e92:	4b21      	ldr	r3, [pc, #132]	; (8012f18 <vTaskResume+0xac>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	68fa      	ldr	r2, [r7, #12]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d038      	beq.n	8012f0e <vTaskResume+0xa2>
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d035      	beq.n	8012f0e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8012ea2:	f001 fabb 	bl	801441c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012ea6:	68f8      	ldr	r0, [r7, #12]
 8012ea8:	f7ff ffb0 	bl	8012e0c <prvTaskIsTaskSuspended>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d02b      	beq.n	8012f0a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	3304      	adds	r3, #4
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7fe fd4a 	bl	8011950 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ec0:	4b16      	ldr	r3, [pc, #88]	; (8012f1c <vTaskResume+0xb0>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d903      	bls.n	8012ed0 <vTaskResume+0x64>
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ecc:	4a13      	ldr	r2, [pc, #76]	; (8012f1c <vTaskResume+0xb0>)
 8012ece:	6013      	str	r3, [r2, #0]
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	009b      	lsls	r3, r3, #2
 8012ed8:	4413      	add	r3, r2
 8012eda:	009b      	lsls	r3, r3, #2
 8012edc:	4a10      	ldr	r2, [pc, #64]	; (8012f20 <vTaskResume+0xb4>)
 8012ede:	441a      	add	r2, r3
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	3304      	adds	r3, #4
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	4610      	mov	r0, r2
 8012ee8:	f7fe fcd5 	bl	8011896 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ef0:	4b09      	ldr	r3, [pc, #36]	; (8012f18 <vTaskResume+0xac>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d307      	bcc.n	8012f0a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012efa:	4b0a      	ldr	r3, [pc, #40]	; (8012f24 <vTaskResume+0xb8>)
 8012efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f00:	601a      	str	r2, [r3, #0]
 8012f02:	f3bf 8f4f 	dsb	sy
 8012f06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012f0a:	f001 fab5 	bl	8014478 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f0e:	bf00      	nop
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	bf00      	nop
 8012f18:	20000ddc 	.word	0x20000ddc
 8012f1c:	200012b8 	.word	0x200012b8
 8012f20:	20000de0 	.word	0x20000de0
 8012f24:	e000ed04 	.word	0xe000ed04

08012f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b08a      	sub	sp, #40	; 0x28
 8012f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f36:	463a      	mov	r2, r7
 8012f38:	1d39      	adds	r1, r7, #4
 8012f3a:	f107 0308 	add.w	r3, r7, #8
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fe fc48 	bl	80117d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f44:	6839      	ldr	r1, [r7, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	68ba      	ldr	r2, [r7, #8]
 8012f4a:	9202      	str	r2, [sp, #8]
 8012f4c:	9301      	str	r3, [sp, #4]
 8012f4e:	2300      	movs	r3, #0
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	2300      	movs	r3, #0
 8012f54:	460a      	mov	r2, r1
 8012f56:	4920      	ldr	r1, [pc, #128]	; (8012fd8 <vTaskStartScheduler+0xb0>)
 8012f58:	4820      	ldr	r0, [pc, #128]	; (8012fdc <vTaskStartScheduler+0xb4>)
 8012f5a:	f7ff fd11 	bl	8012980 <xTaskCreateStatic>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	4b1f      	ldr	r3, [pc, #124]	; (8012fe0 <vTaskStartScheduler+0xb8>)
 8012f62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f64:	4b1e      	ldr	r3, [pc, #120]	; (8012fe0 <vTaskStartScheduler+0xb8>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d002      	beq.n	8012f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	617b      	str	r3, [r7, #20]
 8012f70:	e001      	b.n	8012f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f72:	2300      	movs	r3, #0
 8012f74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	2b01      	cmp	r3, #1
 8012f7a:	d102      	bne.n	8012f82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012f7c:	f000 fde4 	bl	8013b48 <xTimerCreateTimerTask>
 8012f80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d115      	bne.n	8012fb4 <vTaskStartScheduler+0x8c>
 8012f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f8c:	f383 8811 	msr	BASEPRI, r3
 8012f90:	f3bf 8f6f 	isb	sy
 8012f94:	f3bf 8f4f 	dsb	sy
 8012f98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012f9a:	4b12      	ldr	r3, [pc, #72]	; (8012fe4 <vTaskStartScheduler+0xbc>)
 8012f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012fa2:	4b11      	ldr	r3, [pc, #68]	; (8012fe8 <vTaskStartScheduler+0xc0>)
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012fa8:	4b10      	ldr	r3, [pc, #64]	; (8012fec <vTaskStartScheduler+0xc4>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012fae:	f001 f997 	bl	80142e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012fb2:	e00d      	b.n	8012fd0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fba:	d109      	bne.n	8012fd0 <vTaskStartScheduler+0xa8>
 8012fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc0:	f383 8811 	msr	BASEPRI, r3
 8012fc4:	f3bf 8f6f 	isb	sy
 8012fc8:	f3bf 8f4f 	dsb	sy
 8012fcc:	60fb      	str	r3, [r7, #12]
 8012fce:	e7fe      	b.n	8012fce <vTaskStartScheduler+0xa6>
}
 8012fd0:	bf00      	nop
 8012fd2:	3718      	adds	r7, #24
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	08019218 	.word	0x08019218
 8012fdc:	080135f1 	.word	0x080135f1
 8012fe0:	200012d4 	.word	0x200012d4
 8012fe4:	200012d0 	.word	0x200012d0
 8012fe8:	200012bc 	.word	0x200012bc
 8012fec:	200012b4 	.word	0x200012b4

08012ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012ff4:	4b04      	ldr	r3, [pc, #16]	; (8013008 <vTaskSuspendAll+0x18>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	4a03      	ldr	r2, [pc, #12]	; (8013008 <vTaskSuspendAll+0x18>)
 8012ffc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012ffe:	bf00      	nop
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr
 8013008:	200012d8 	.word	0x200012d8

0801300c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013012:	2300      	movs	r3, #0
 8013014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013016:	2300      	movs	r3, #0
 8013018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801301a:	4b41      	ldr	r3, [pc, #260]	; (8013120 <xTaskResumeAll+0x114>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d109      	bne.n	8013036 <xTaskResumeAll+0x2a>
 8013022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013026:	f383 8811 	msr	BASEPRI, r3
 801302a:	f3bf 8f6f 	isb	sy
 801302e:	f3bf 8f4f 	dsb	sy
 8013032:	603b      	str	r3, [r7, #0]
 8013034:	e7fe      	b.n	8013034 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013036:	f001 f9f1 	bl	801441c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801303a:	4b39      	ldr	r3, [pc, #228]	; (8013120 <xTaskResumeAll+0x114>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3b01      	subs	r3, #1
 8013040:	4a37      	ldr	r2, [pc, #220]	; (8013120 <xTaskResumeAll+0x114>)
 8013042:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013044:	4b36      	ldr	r3, [pc, #216]	; (8013120 <xTaskResumeAll+0x114>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d162      	bne.n	8013112 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801304c:	4b35      	ldr	r3, [pc, #212]	; (8013124 <xTaskResumeAll+0x118>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d05e      	beq.n	8013112 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013054:	e02f      	b.n	80130b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013056:	4b34      	ldr	r3, [pc, #208]	; (8013128 <xTaskResumeAll+0x11c>)
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	68db      	ldr	r3, [r3, #12]
 801305c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	3318      	adds	r3, #24
 8013062:	4618      	mov	r0, r3
 8013064:	f7fe fc74 	bl	8011950 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	3304      	adds	r3, #4
 801306c:	4618      	mov	r0, r3
 801306e:	f7fe fc6f 	bl	8011950 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013076:	4b2d      	ldr	r3, [pc, #180]	; (801312c <xTaskResumeAll+0x120>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	429a      	cmp	r2, r3
 801307c:	d903      	bls.n	8013086 <xTaskResumeAll+0x7a>
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013082:	4a2a      	ldr	r2, [pc, #168]	; (801312c <xTaskResumeAll+0x120>)
 8013084:	6013      	str	r3, [r2, #0]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801308a:	4613      	mov	r3, r2
 801308c:	009b      	lsls	r3, r3, #2
 801308e:	4413      	add	r3, r2
 8013090:	009b      	lsls	r3, r3, #2
 8013092:	4a27      	ldr	r2, [pc, #156]	; (8013130 <xTaskResumeAll+0x124>)
 8013094:	441a      	add	r2, r3
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	3304      	adds	r3, #4
 801309a:	4619      	mov	r1, r3
 801309c:	4610      	mov	r0, r2
 801309e:	f7fe fbfa 	bl	8011896 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130a6:	4b23      	ldr	r3, [pc, #140]	; (8013134 <xTaskResumeAll+0x128>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d302      	bcc.n	80130b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80130b0:	4b21      	ldr	r3, [pc, #132]	; (8013138 <xTaskResumeAll+0x12c>)
 80130b2:	2201      	movs	r2, #1
 80130b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130b6:	4b1c      	ldr	r3, [pc, #112]	; (8013128 <xTaskResumeAll+0x11c>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d1cb      	bne.n	8013056 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d001      	beq.n	80130c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80130c4:	f000 fb46 	bl	8013754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80130c8:	4b1c      	ldr	r3, [pc, #112]	; (801313c <xTaskResumeAll+0x130>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d010      	beq.n	80130f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80130d4:	f000 f846 	bl	8013164 <xTaskIncrementTick>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d002      	beq.n	80130e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80130de:	4b16      	ldr	r3, [pc, #88]	; (8013138 <xTaskResumeAll+0x12c>)
 80130e0:	2201      	movs	r2, #1
 80130e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	3b01      	subs	r3, #1
 80130e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d1f1      	bne.n	80130d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80130f0:	4b12      	ldr	r3, [pc, #72]	; (801313c <xTaskResumeAll+0x130>)
 80130f2:	2200      	movs	r2, #0
 80130f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80130f6:	4b10      	ldr	r3, [pc, #64]	; (8013138 <xTaskResumeAll+0x12c>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d009      	beq.n	8013112 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80130fe:	2301      	movs	r3, #1
 8013100:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013102:	4b0f      	ldr	r3, [pc, #60]	; (8013140 <xTaskResumeAll+0x134>)
 8013104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013108:	601a      	str	r2, [r3, #0]
 801310a:	f3bf 8f4f 	dsb	sy
 801310e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013112:	f001 f9b1 	bl	8014478 <vPortExitCritical>

	return xAlreadyYielded;
 8013116:	68bb      	ldr	r3, [r7, #8]
}
 8013118:	4618      	mov	r0, r3
 801311a:	3710      	adds	r7, #16
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	200012d8 	.word	0x200012d8
 8013124:	200012b0 	.word	0x200012b0
 8013128:	20001270 	.word	0x20001270
 801312c:	200012b8 	.word	0x200012b8
 8013130:	20000de0 	.word	0x20000de0
 8013134:	20000ddc 	.word	0x20000ddc
 8013138:	200012c4 	.word	0x200012c4
 801313c:	200012c0 	.word	0x200012c0
 8013140:	e000ed04 	.word	0xe000ed04

08013144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013144:	b480      	push	{r7}
 8013146:	b083      	sub	sp, #12
 8013148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801314a:	4b05      	ldr	r3, [pc, #20]	; (8013160 <xTaskGetTickCount+0x1c>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013150:	687b      	ldr	r3, [r7, #4]
}
 8013152:	4618      	mov	r0, r3
 8013154:	370c      	adds	r7, #12
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	200012b4 	.word	0x200012b4

08013164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801316a:	2300      	movs	r3, #0
 801316c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801316e:	4b4e      	ldr	r3, [pc, #312]	; (80132a8 <xTaskIncrementTick+0x144>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	f040 8088 	bne.w	8013288 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013178:	4b4c      	ldr	r3, [pc, #304]	; (80132ac <xTaskIncrementTick+0x148>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	3301      	adds	r3, #1
 801317e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013180:	4a4a      	ldr	r2, [pc, #296]	; (80132ac <xTaskIncrementTick+0x148>)
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d11f      	bne.n	80131cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801318c:	4b48      	ldr	r3, [pc, #288]	; (80132b0 <xTaskIncrementTick+0x14c>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d009      	beq.n	80131aa <xTaskIncrementTick+0x46>
 8013196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319a:	f383 8811 	msr	BASEPRI, r3
 801319e:	f3bf 8f6f 	isb	sy
 80131a2:	f3bf 8f4f 	dsb	sy
 80131a6:	603b      	str	r3, [r7, #0]
 80131a8:	e7fe      	b.n	80131a8 <xTaskIncrementTick+0x44>
 80131aa:	4b41      	ldr	r3, [pc, #260]	; (80132b0 <xTaskIncrementTick+0x14c>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	60fb      	str	r3, [r7, #12]
 80131b0:	4b40      	ldr	r3, [pc, #256]	; (80132b4 <xTaskIncrementTick+0x150>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a3e      	ldr	r2, [pc, #248]	; (80132b0 <xTaskIncrementTick+0x14c>)
 80131b6:	6013      	str	r3, [r2, #0]
 80131b8:	4a3e      	ldr	r2, [pc, #248]	; (80132b4 <xTaskIncrementTick+0x150>)
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	6013      	str	r3, [r2, #0]
 80131be:	4b3e      	ldr	r3, [pc, #248]	; (80132b8 <xTaskIncrementTick+0x154>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	3301      	adds	r3, #1
 80131c4:	4a3c      	ldr	r2, [pc, #240]	; (80132b8 <xTaskIncrementTick+0x154>)
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	f000 fac4 	bl	8013754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80131cc:	4b3b      	ldr	r3, [pc, #236]	; (80132bc <xTaskIncrementTick+0x158>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	693a      	ldr	r2, [r7, #16]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d349      	bcc.n	801326a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131d6:	4b36      	ldr	r3, [pc, #216]	; (80132b0 <xTaskIncrementTick+0x14c>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d104      	bne.n	80131ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131e0:	4b36      	ldr	r3, [pc, #216]	; (80132bc <xTaskIncrementTick+0x158>)
 80131e2:	f04f 32ff 	mov.w	r2, #4294967295
 80131e6:	601a      	str	r2, [r3, #0]
					break;
 80131e8:	e03f      	b.n	801326a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131ea:	4b31      	ldr	r3, [pc, #196]	; (80132b0 <xTaskIncrementTick+0x14c>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80131fa:	693a      	ldr	r2, [r7, #16]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d203      	bcs.n	801320a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013202:	4a2e      	ldr	r2, [pc, #184]	; (80132bc <xTaskIncrementTick+0x158>)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013208:	e02f      	b.n	801326a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	3304      	adds	r3, #4
 801320e:	4618      	mov	r0, r3
 8013210:	f7fe fb9e 	bl	8011950 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013218:	2b00      	cmp	r3, #0
 801321a:	d004      	beq.n	8013226 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	3318      	adds	r3, #24
 8013220:	4618      	mov	r0, r3
 8013222:	f7fe fb95 	bl	8011950 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801322a:	4b25      	ldr	r3, [pc, #148]	; (80132c0 <xTaskIncrementTick+0x15c>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	429a      	cmp	r2, r3
 8013230:	d903      	bls.n	801323a <xTaskIncrementTick+0xd6>
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013236:	4a22      	ldr	r2, [pc, #136]	; (80132c0 <xTaskIncrementTick+0x15c>)
 8013238:	6013      	str	r3, [r2, #0]
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801323e:	4613      	mov	r3, r2
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	4413      	add	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	4a1f      	ldr	r2, [pc, #124]	; (80132c4 <xTaskIncrementTick+0x160>)
 8013248:	441a      	add	r2, r3
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	3304      	adds	r3, #4
 801324e:	4619      	mov	r1, r3
 8013250:	4610      	mov	r0, r2
 8013252:	f7fe fb20 	bl	8011896 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325a:	4b1b      	ldr	r3, [pc, #108]	; (80132c8 <xTaskIncrementTick+0x164>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013260:	429a      	cmp	r2, r3
 8013262:	d3b8      	bcc.n	80131d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013264:	2301      	movs	r3, #1
 8013266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013268:	e7b5      	b.n	80131d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801326a:	4b17      	ldr	r3, [pc, #92]	; (80132c8 <xTaskIncrementTick+0x164>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013270:	4914      	ldr	r1, [pc, #80]	; (80132c4 <xTaskIncrementTick+0x160>)
 8013272:	4613      	mov	r3, r2
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	4413      	add	r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	440b      	add	r3, r1
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d907      	bls.n	8013292 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8013282:	2301      	movs	r3, #1
 8013284:	617b      	str	r3, [r7, #20]
 8013286:	e004      	b.n	8013292 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013288:	4b10      	ldr	r3, [pc, #64]	; (80132cc <xTaskIncrementTick+0x168>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	3301      	adds	r3, #1
 801328e:	4a0f      	ldr	r2, [pc, #60]	; (80132cc <xTaskIncrementTick+0x168>)
 8013290:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013292:	4b0f      	ldr	r3, [pc, #60]	; (80132d0 <xTaskIncrementTick+0x16c>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d001      	beq.n	801329e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801329a:	2301      	movs	r3, #1
 801329c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801329e:	697b      	ldr	r3, [r7, #20]
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3718      	adds	r7, #24
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	200012d8 	.word	0x200012d8
 80132ac:	200012b4 	.word	0x200012b4
 80132b0:	20001268 	.word	0x20001268
 80132b4:	2000126c 	.word	0x2000126c
 80132b8:	200012c8 	.word	0x200012c8
 80132bc:	200012d0 	.word	0x200012d0
 80132c0:	200012b8 	.word	0x200012b8
 80132c4:	20000de0 	.word	0x20000de0
 80132c8:	20000ddc 	.word	0x20000ddc
 80132cc:	200012c0 	.word	0x200012c0
 80132d0:	200012c4 	.word	0x200012c4

080132d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80132d4:	b480      	push	{r7}
 80132d6:	b085      	sub	sp, #20
 80132d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132da:	4b27      	ldr	r3, [pc, #156]	; (8013378 <vTaskSwitchContext+0xa4>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d003      	beq.n	80132ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80132e2:	4b26      	ldr	r3, [pc, #152]	; (801337c <vTaskSwitchContext+0xa8>)
 80132e4:	2201      	movs	r2, #1
 80132e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80132e8:	e040      	b.n	801336c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80132ea:	4b24      	ldr	r3, [pc, #144]	; (801337c <vTaskSwitchContext+0xa8>)
 80132ec:	2200      	movs	r2, #0
 80132ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132f0:	4b23      	ldr	r3, [pc, #140]	; (8013380 <vTaskSwitchContext+0xac>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	60fb      	str	r3, [r7, #12]
 80132f6:	e00f      	b.n	8013318 <vTaskSwitchContext+0x44>
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d109      	bne.n	8013312 <vTaskSwitchContext+0x3e>
 80132fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013302:	f383 8811 	msr	BASEPRI, r3
 8013306:	f3bf 8f6f 	isb	sy
 801330a:	f3bf 8f4f 	dsb	sy
 801330e:	607b      	str	r3, [r7, #4]
 8013310:	e7fe      	b.n	8013310 <vTaskSwitchContext+0x3c>
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	3b01      	subs	r3, #1
 8013316:	60fb      	str	r3, [r7, #12]
 8013318:	491a      	ldr	r1, [pc, #104]	; (8013384 <vTaskSwitchContext+0xb0>)
 801331a:	68fa      	ldr	r2, [r7, #12]
 801331c:	4613      	mov	r3, r2
 801331e:	009b      	lsls	r3, r3, #2
 8013320:	4413      	add	r3, r2
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	440b      	add	r3, r1
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d0e5      	beq.n	80132f8 <vTaskSwitchContext+0x24>
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	4613      	mov	r3, r2
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	4413      	add	r3, r2
 8013334:	009b      	lsls	r3, r3, #2
 8013336:	4a13      	ldr	r2, [pc, #76]	; (8013384 <vTaskSwitchContext+0xb0>)
 8013338:	4413      	add	r3, r2
 801333a:	60bb      	str	r3, [r7, #8]
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	685b      	ldr	r3, [r3, #4]
 8013340:	685a      	ldr	r2, [r3, #4]
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	605a      	str	r2, [r3, #4]
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	685a      	ldr	r2, [r3, #4]
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	3308      	adds	r3, #8
 801334e:	429a      	cmp	r2, r3
 8013350:	d104      	bne.n	801335c <vTaskSwitchContext+0x88>
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	685a      	ldr	r2, [r3, #4]
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	605a      	str	r2, [r3, #4]
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	68db      	ldr	r3, [r3, #12]
 8013362:	4a09      	ldr	r2, [pc, #36]	; (8013388 <vTaskSwitchContext+0xb4>)
 8013364:	6013      	str	r3, [r2, #0]
 8013366:	4a06      	ldr	r2, [pc, #24]	; (8013380 <vTaskSwitchContext+0xac>)
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	6013      	str	r3, [r2, #0]
}
 801336c:	bf00      	nop
 801336e:	3714      	adds	r7, #20
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr
 8013378:	200012d8 	.word	0x200012d8
 801337c:	200012c4 	.word	0x200012c4
 8013380:	200012b8 	.word	0x200012b8
 8013384:	20000de0 	.word	0x20000de0
 8013388:	20000ddc 	.word	0x20000ddc

0801338c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d109      	bne.n	80133b0 <vTaskPlaceOnEventList+0x24>
 801339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a0:	f383 8811 	msr	BASEPRI, r3
 80133a4:	f3bf 8f6f 	isb	sy
 80133a8:	f3bf 8f4f 	dsb	sy
 80133ac:	60fb      	str	r3, [r7, #12]
 80133ae:	e7fe      	b.n	80133ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133b0:	4b07      	ldr	r3, [pc, #28]	; (80133d0 <vTaskPlaceOnEventList+0x44>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	3318      	adds	r3, #24
 80133b6:	4619      	mov	r1, r3
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f7fe fa90 	bl	80118de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80133be:	2101      	movs	r1, #1
 80133c0:	6838      	ldr	r0, [r7, #0]
 80133c2:	f000 fb6d 	bl	8013aa0 <prvAddCurrentTaskToDelayedList>
}
 80133c6:	bf00      	nop
 80133c8:	3710      	adds	r7, #16
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	20000ddc 	.word	0x20000ddc

080133d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b086      	sub	sp, #24
 80133d8:	af00      	add	r7, sp, #0
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d109      	bne.n	80133fa <vTaskPlaceOnEventListRestricted+0x26>
 80133e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ea:	f383 8811 	msr	BASEPRI, r3
 80133ee:	f3bf 8f6f 	isb	sy
 80133f2:	f3bf 8f4f 	dsb	sy
 80133f6:	617b      	str	r3, [r7, #20]
 80133f8:	e7fe      	b.n	80133f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133fa:	4b0a      	ldr	r3, [pc, #40]	; (8013424 <vTaskPlaceOnEventListRestricted+0x50>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	3318      	adds	r3, #24
 8013400:	4619      	mov	r1, r3
 8013402:	68f8      	ldr	r0, [r7, #12]
 8013404:	f7fe fa47 	bl	8011896 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d002      	beq.n	8013414 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801340e:	f04f 33ff 	mov.w	r3, #4294967295
 8013412:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013414:	6879      	ldr	r1, [r7, #4]
 8013416:	68b8      	ldr	r0, [r7, #8]
 8013418:	f000 fb42 	bl	8013aa0 <prvAddCurrentTaskToDelayedList>
	}
 801341c:	bf00      	nop
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	20000ddc 	.word	0x20000ddc

08013428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b086      	sub	sp, #24
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	68db      	ldr	r3, [r3, #12]
 8013434:	68db      	ldr	r3, [r3, #12]
 8013436:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d109      	bne.n	8013452 <xTaskRemoveFromEventList+0x2a>
 801343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013442:	f383 8811 	msr	BASEPRI, r3
 8013446:	f3bf 8f6f 	isb	sy
 801344a:	f3bf 8f4f 	dsb	sy
 801344e:	60fb      	str	r3, [r7, #12]
 8013450:	e7fe      	b.n	8013450 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	3318      	adds	r3, #24
 8013456:	4618      	mov	r0, r3
 8013458:	f7fe fa7a 	bl	8011950 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801345c:	4b1d      	ldr	r3, [pc, #116]	; (80134d4 <xTaskRemoveFromEventList+0xac>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d11d      	bne.n	80134a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	3304      	adds	r3, #4
 8013468:	4618      	mov	r0, r3
 801346a:	f7fe fa71 	bl	8011950 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013472:	4b19      	ldr	r3, [pc, #100]	; (80134d8 <xTaskRemoveFromEventList+0xb0>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	429a      	cmp	r2, r3
 8013478:	d903      	bls.n	8013482 <xTaskRemoveFromEventList+0x5a>
 801347a:	693b      	ldr	r3, [r7, #16]
 801347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347e:	4a16      	ldr	r2, [pc, #88]	; (80134d8 <xTaskRemoveFromEventList+0xb0>)
 8013480:	6013      	str	r3, [r2, #0]
 8013482:	693b      	ldr	r3, [r7, #16]
 8013484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013486:	4613      	mov	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	4413      	add	r3, r2
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	4a13      	ldr	r2, [pc, #76]	; (80134dc <xTaskRemoveFromEventList+0xb4>)
 8013490:	441a      	add	r2, r3
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	3304      	adds	r3, #4
 8013496:	4619      	mov	r1, r3
 8013498:	4610      	mov	r0, r2
 801349a:	f7fe f9fc 	bl	8011896 <vListInsertEnd>
 801349e:	e005      	b.n	80134ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	3318      	adds	r3, #24
 80134a4:	4619      	mov	r1, r3
 80134a6:	480e      	ldr	r0, [pc, #56]	; (80134e0 <xTaskRemoveFromEventList+0xb8>)
 80134a8:	f7fe f9f5 	bl	8011896 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b0:	4b0c      	ldr	r3, [pc, #48]	; (80134e4 <xTaskRemoveFromEventList+0xbc>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d905      	bls.n	80134c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80134ba:	2301      	movs	r3, #1
 80134bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80134be:	4b0a      	ldr	r3, [pc, #40]	; (80134e8 <xTaskRemoveFromEventList+0xc0>)
 80134c0:	2201      	movs	r2, #1
 80134c2:	601a      	str	r2, [r3, #0]
 80134c4:	e001      	b.n	80134ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80134c6:	2300      	movs	r3, #0
 80134c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80134ca:	697b      	ldr	r3, [r7, #20]
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3718      	adds	r7, #24
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	200012d8 	.word	0x200012d8
 80134d8:	200012b8 	.word	0x200012b8
 80134dc:	20000de0 	.word	0x20000de0
 80134e0:	20001270 	.word	0x20001270
 80134e4:	20000ddc 	.word	0x20000ddc
 80134e8:	200012c4 	.word	0x200012c4

080134ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80134ec:	b480      	push	{r7}
 80134ee:	b083      	sub	sp, #12
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80134f4:	4b06      	ldr	r3, [pc, #24]	; (8013510 <vTaskInternalSetTimeOutState+0x24>)
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80134fc:	4b05      	ldr	r3, [pc, #20]	; (8013514 <vTaskInternalSetTimeOutState+0x28>)
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	605a      	str	r2, [r3, #4]
}
 8013504:	bf00      	nop
 8013506:	370c      	adds	r7, #12
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr
 8013510:	200012c8 	.word	0x200012c8
 8013514:	200012b4 	.word	0x200012b4

08013518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b088      	sub	sp, #32
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d109      	bne.n	801353c <xTaskCheckForTimeOut+0x24>
 8013528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801352c:	f383 8811 	msr	BASEPRI, r3
 8013530:	f3bf 8f6f 	isb	sy
 8013534:	f3bf 8f4f 	dsb	sy
 8013538:	613b      	str	r3, [r7, #16]
 801353a:	e7fe      	b.n	801353a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d109      	bne.n	8013556 <xTaskCheckForTimeOut+0x3e>
 8013542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013546:	f383 8811 	msr	BASEPRI, r3
 801354a:	f3bf 8f6f 	isb	sy
 801354e:	f3bf 8f4f 	dsb	sy
 8013552:	60fb      	str	r3, [r7, #12]
 8013554:	e7fe      	b.n	8013554 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013556:	f000 ff61 	bl	801441c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801355a:	4b1d      	ldr	r3, [pc, #116]	; (80135d0 <xTaskCheckForTimeOut+0xb8>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	685b      	ldr	r3, [r3, #4]
 8013564:	69ba      	ldr	r2, [r7, #24]
 8013566:	1ad3      	subs	r3, r2, r3
 8013568:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013572:	d102      	bne.n	801357a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013574:	2300      	movs	r3, #0
 8013576:	61fb      	str	r3, [r7, #28]
 8013578:	e023      	b.n	80135c2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	4b15      	ldr	r3, [pc, #84]	; (80135d4 <xTaskCheckForTimeOut+0xbc>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	429a      	cmp	r2, r3
 8013584:	d007      	beq.n	8013596 <xTaskCheckForTimeOut+0x7e>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	69ba      	ldr	r2, [r7, #24]
 801358c:	429a      	cmp	r2, r3
 801358e:	d302      	bcc.n	8013596 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013590:	2301      	movs	r3, #1
 8013592:	61fb      	str	r3, [r7, #28]
 8013594:	e015      	b.n	80135c2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	697a      	ldr	r2, [r7, #20]
 801359c:	429a      	cmp	r2, r3
 801359e:	d20b      	bcs.n	80135b8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	681a      	ldr	r2, [r3, #0]
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	1ad2      	subs	r2, r2, r3
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7ff ff9d 	bl	80134ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80135b2:	2300      	movs	r3, #0
 80135b4:	61fb      	str	r3, [r7, #28]
 80135b6:	e004      	b.n	80135c2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	2200      	movs	r2, #0
 80135bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80135be:	2301      	movs	r3, #1
 80135c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80135c2:	f000 ff59 	bl	8014478 <vPortExitCritical>

	return xReturn;
 80135c6:	69fb      	ldr	r3, [r7, #28]
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3720      	adds	r7, #32
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}
 80135d0:	200012b4 	.word	0x200012b4
 80135d4:	200012c8 	.word	0x200012c8

080135d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80135d8:	b480      	push	{r7}
 80135da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80135dc:	4b03      	ldr	r3, [pc, #12]	; (80135ec <vTaskMissedYield+0x14>)
 80135de:	2201      	movs	r2, #1
 80135e0:	601a      	str	r2, [r3, #0]
}
 80135e2:	bf00      	nop
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr
 80135ec:	200012c4 	.word	0x200012c4

080135f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80135f8:	f000 f852 	bl	80136a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80135fc:	4b06      	ldr	r3, [pc, #24]	; (8013618 <prvIdleTask+0x28>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b01      	cmp	r3, #1
 8013602:	d9f9      	bls.n	80135f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013604:	4b05      	ldr	r3, [pc, #20]	; (801361c <prvIdleTask+0x2c>)
 8013606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801360a:	601a      	str	r2, [r3, #0]
 801360c:	f3bf 8f4f 	dsb	sy
 8013610:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013614:	e7f0      	b.n	80135f8 <prvIdleTask+0x8>
 8013616:	bf00      	nop
 8013618:	20000de0 	.word	0x20000de0
 801361c:	e000ed04 	.word	0xe000ed04

08013620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013626:	2300      	movs	r3, #0
 8013628:	607b      	str	r3, [r7, #4]
 801362a:	e00c      	b.n	8013646 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801362c:	687a      	ldr	r2, [r7, #4]
 801362e:	4613      	mov	r3, r2
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	4413      	add	r3, r2
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	4a12      	ldr	r2, [pc, #72]	; (8013680 <prvInitialiseTaskLists+0x60>)
 8013638:	4413      	add	r3, r2
 801363a:	4618      	mov	r0, r3
 801363c:	f7fe f8fe 	bl	801183c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	3301      	adds	r3, #1
 8013644:	607b      	str	r3, [r7, #4]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2b37      	cmp	r3, #55	; 0x37
 801364a:	d9ef      	bls.n	801362c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801364c:	480d      	ldr	r0, [pc, #52]	; (8013684 <prvInitialiseTaskLists+0x64>)
 801364e:	f7fe f8f5 	bl	801183c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013652:	480d      	ldr	r0, [pc, #52]	; (8013688 <prvInitialiseTaskLists+0x68>)
 8013654:	f7fe f8f2 	bl	801183c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013658:	480c      	ldr	r0, [pc, #48]	; (801368c <prvInitialiseTaskLists+0x6c>)
 801365a:	f7fe f8ef 	bl	801183c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801365e:	480c      	ldr	r0, [pc, #48]	; (8013690 <prvInitialiseTaskLists+0x70>)
 8013660:	f7fe f8ec 	bl	801183c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013664:	480b      	ldr	r0, [pc, #44]	; (8013694 <prvInitialiseTaskLists+0x74>)
 8013666:	f7fe f8e9 	bl	801183c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801366a:	4b0b      	ldr	r3, [pc, #44]	; (8013698 <prvInitialiseTaskLists+0x78>)
 801366c:	4a05      	ldr	r2, [pc, #20]	; (8013684 <prvInitialiseTaskLists+0x64>)
 801366e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013670:	4b0a      	ldr	r3, [pc, #40]	; (801369c <prvInitialiseTaskLists+0x7c>)
 8013672:	4a05      	ldr	r2, [pc, #20]	; (8013688 <prvInitialiseTaskLists+0x68>)
 8013674:	601a      	str	r2, [r3, #0]
}
 8013676:	bf00      	nop
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	20000de0 	.word	0x20000de0
 8013684:	20001240 	.word	0x20001240
 8013688:	20001254 	.word	0x20001254
 801368c:	20001270 	.word	0x20001270
 8013690:	20001284 	.word	0x20001284
 8013694:	2000129c 	.word	0x2000129c
 8013698:	20001268 	.word	0x20001268
 801369c:	2000126c 	.word	0x2000126c

080136a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136a6:	e019      	b.n	80136dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80136a8:	f000 feb8 	bl	801441c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136ac:	4b0f      	ldr	r3, [pc, #60]	; (80136ec <prvCheckTasksWaitingTermination+0x4c>)
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	3304      	adds	r3, #4
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7fe f949 	bl	8011950 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80136be:	4b0c      	ldr	r3, [pc, #48]	; (80136f0 <prvCheckTasksWaitingTermination+0x50>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	3b01      	subs	r3, #1
 80136c4:	4a0a      	ldr	r2, [pc, #40]	; (80136f0 <prvCheckTasksWaitingTermination+0x50>)
 80136c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80136c8:	4b0a      	ldr	r3, [pc, #40]	; (80136f4 <prvCheckTasksWaitingTermination+0x54>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	3b01      	subs	r3, #1
 80136ce:	4a09      	ldr	r2, [pc, #36]	; (80136f4 <prvCheckTasksWaitingTermination+0x54>)
 80136d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80136d2:	f000 fed1 	bl	8014478 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f000 f80e 	bl	80136f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136dc:	4b05      	ldr	r3, [pc, #20]	; (80136f4 <prvCheckTasksWaitingTermination+0x54>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d1e1      	bne.n	80136a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80136e4:	bf00      	nop
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}
 80136ec:	20001284 	.word	0x20001284
 80136f0:	200012b0 	.word	0x200012b0
 80136f4:	20001298 	.word	0x20001298

080136f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013706:	2b00      	cmp	r3, #0
 8013708:	d108      	bne.n	801371c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801370e:	4618      	mov	r0, r3
 8013710:	f001 f860 	bl	80147d4 <vPortFree>
				vPortFree( pxTCB );
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f001 f85d 	bl	80147d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801371a:	e017      	b.n	801374c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013722:	2b01      	cmp	r3, #1
 8013724:	d103      	bne.n	801372e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f001 f854 	bl	80147d4 <vPortFree>
	}
 801372c:	e00e      	b.n	801374c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013734:	2b02      	cmp	r3, #2
 8013736:	d009      	beq.n	801374c <prvDeleteTCB+0x54>
 8013738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373c:	f383 8811 	msr	BASEPRI, r3
 8013740:	f3bf 8f6f 	isb	sy
 8013744:	f3bf 8f4f 	dsb	sy
 8013748:	60fb      	str	r3, [r7, #12]
 801374a:	e7fe      	b.n	801374a <prvDeleteTCB+0x52>
	}
 801374c:	bf00      	nop
 801374e:	3710      	adds	r7, #16
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013754:	b480      	push	{r7}
 8013756:	b083      	sub	sp, #12
 8013758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801375a:	4b0c      	ldr	r3, [pc, #48]	; (801378c <prvResetNextTaskUnblockTime+0x38>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d104      	bne.n	801376e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013764:	4b0a      	ldr	r3, [pc, #40]	; (8013790 <prvResetNextTaskUnblockTime+0x3c>)
 8013766:	f04f 32ff 	mov.w	r2, #4294967295
 801376a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801376c:	e008      	b.n	8013780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801376e:	4b07      	ldr	r3, [pc, #28]	; (801378c <prvResetNextTaskUnblockTime+0x38>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	68db      	ldr	r3, [r3, #12]
 8013776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	4a04      	ldr	r2, [pc, #16]	; (8013790 <prvResetNextTaskUnblockTime+0x3c>)
 801377e:	6013      	str	r3, [r2, #0]
}
 8013780:	bf00      	nop
 8013782:	370c      	adds	r7, #12
 8013784:	46bd      	mov	sp, r7
 8013786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378a:	4770      	bx	lr
 801378c:	20001268 	.word	0x20001268
 8013790:	200012d0 	.word	0x200012d0

08013794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013794:	b480      	push	{r7}
 8013796:	b083      	sub	sp, #12
 8013798:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801379a:	4b0b      	ldr	r3, [pc, #44]	; (80137c8 <xTaskGetSchedulerState+0x34>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d102      	bne.n	80137a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80137a2:	2301      	movs	r3, #1
 80137a4:	607b      	str	r3, [r7, #4]
 80137a6:	e008      	b.n	80137ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137a8:	4b08      	ldr	r3, [pc, #32]	; (80137cc <xTaskGetSchedulerState+0x38>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d102      	bne.n	80137b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80137b0:	2302      	movs	r3, #2
 80137b2:	607b      	str	r3, [r7, #4]
 80137b4:	e001      	b.n	80137ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80137b6:	2300      	movs	r3, #0
 80137b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80137ba:	687b      	ldr	r3, [r7, #4]
	}
 80137bc:	4618      	mov	r0, r3
 80137be:	370c      	adds	r7, #12
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr
 80137c8:	200012bc 	.word	0x200012bc
 80137cc:	200012d8 	.word	0x200012d8

080137d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80137dc:	2300      	movs	r3, #0
 80137de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d051      	beq.n	801388a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137ea:	4b2a      	ldr	r3, [pc, #168]	; (8013894 <xTaskPriorityInherit+0xc4>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d241      	bcs.n	8013878 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	699b      	ldr	r3, [r3, #24]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	db06      	blt.n	801380a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137fc:	4b25      	ldr	r3, [pc, #148]	; (8013894 <xTaskPriorityInherit+0xc4>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013802:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	6959      	ldr	r1, [r3, #20]
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013812:	4613      	mov	r3, r2
 8013814:	009b      	lsls	r3, r3, #2
 8013816:	4413      	add	r3, r2
 8013818:	009b      	lsls	r3, r3, #2
 801381a:	4a1f      	ldr	r2, [pc, #124]	; (8013898 <xTaskPriorityInherit+0xc8>)
 801381c:	4413      	add	r3, r2
 801381e:	4299      	cmp	r1, r3
 8013820:	d122      	bne.n	8013868 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	3304      	adds	r3, #4
 8013826:	4618      	mov	r0, r3
 8013828:	f7fe f892 	bl	8011950 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801382c:	4b19      	ldr	r3, [pc, #100]	; (8013894 <xTaskPriorityInherit+0xc4>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801383a:	4b18      	ldr	r3, [pc, #96]	; (801389c <xTaskPriorityInherit+0xcc>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	429a      	cmp	r2, r3
 8013840:	d903      	bls.n	801384a <xTaskPriorityInherit+0x7a>
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013846:	4a15      	ldr	r2, [pc, #84]	; (801389c <xTaskPriorityInherit+0xcc>)
 8013848:	6013      	str	r3, [r2, #0]
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801384e:	4613      	mov	r3, r2
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	4413      	add	r3, r2
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	4a10      	ldr	r2, [pc, #64]	; (8013898 <xTaskPriorityInherit+0xc8>)
 8013858:	441a      	add	r2, r3
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	3304      	adds	r3, #4
 801385e:	4619      	mov	r1, r3
 8013860:	4610      	mov	r0, r2
 8013862:	f7fe f818 	bl	8011896 <vListInsertEnd>
 8013866:	e004      	b.n	8013872 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013868:	4b0a      	ldr	r3, [pc, #40]	; (8013894 <xTaskPriorityInherit+0xc4>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013872:	2301      	movs	r3, #1
 8013874:	60fb      	str	r3, [r7, #12]
 8013876:	e008      	b.n	801388a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801387c:	4b05      	ldr	r3, [pc, #20]	; (8013894 <xTaskPriorityInherit+0xc4>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013882:	429a      	cmp	r2, r3
 8013884:	d201      	bcs.n	801388a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013886:	2301      	movs	r3, #1
 8013888:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801388a:	68fb      	ldr	r3, [r7, #12]
	}
 801388c:	4618      	mov	r0, r3
 801388e:	3710      	adds	r7, #16
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}
 8013894:	20000ddc 	.word	0x20000ddc
 8013898:	20000de0 	.word	0x20000de0
 801389c:	200012b8 	.word	0x200012b8

080138a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b086      	sub	sp, #24
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80138ac:	2300      	movs	r3, #0
 80138ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d054      	beq.n	8013960 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80138b6:	4b2d      	ldr	r3, [pc, #180]	; (801396c <xTaskPriorityDisinherit+0xcc>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	693a      	ldr	r2, [r7, #16]
 80138bc:	429a      	cmp	r2, r3
 80138be:	d009      	beq.n	80138d4 <xTaskPriorityDisinherit+0x34>
 80138c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c4:	f383 8811 	msr	BASEPRI, r3
 80138c8:	f3bf 8f6f 	isb	sy
 80138cc:	f3bf 8f4f 	dsb	sy
 80138d0:	60fb      	str	r3, [r7, #12]
 80138d2:	e7fe      	b.n	80138d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d109      	bne.n	80138f0 <xTaskPriorityDisinherit+0x50>
 80138dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e0:	f383 8811 	msr	BASEPRI, r3
 80138e4:	f3bf 8f6f 	isb	sy
 80138e8:	f3bf 8f4f 	dsb	sy
 80138ec:	60bb      	str	r3, [r7, #8]
 80138ee:	e7fe      	b.n	80138ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138f4:	1e5a      	subs	r2, r3, #1
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013902:	429a      	cmp	r2, r3
 8013904:	d02c      	beq.n	8013960 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801390a:	2b00      	cmp	r3, #0
 801390c:	d128      	bne.n	8013960 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	3304      	adds	r3, #4
 8013912:	4618      	mov	r0, r3
 8013914:	f7fe f81c 	bl	8011950 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013918:	693b      	ldr	r3, [r7, #16]
 801391a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013924:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013930:	4b0f      	ldr	r3, [pc, #60]	; (8013970 <xTaskPriorityDisinherit+0xd0>)
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	429a      	cmp	r2, r3
 8013936:	d903      	bls.n	8013940 <xTaskPriorityDisinherit+0xa0>
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801393c:	4a0c      	ldr	r2, [pc, #48]	; (8013970 <xTaskPriorityDisinherit+0xd0>)
 801393e:	6013      	str	r3, [r2, #0]
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013944:	4613      	mov	r3, r2
 8013946:	009b      	lsls	r3, r3, #2
 8013948:	4413      	add	r3, r2
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	4a09      	ldr	r2, [pc, #36]	; (8013974 <xTaskPriorityDisinherit+0xd4>)
 801394e:	441a      	add	r2, r3
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	3304      	adds	r3, #4
 8013954:	4619      	mov	r1, r3
 8013956:	4610      	mov	r0, r2
 8013958:	f7fd ff9d 	bl	8011896 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801395c:	2301      	movs	r3, #1
 801395e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013960:	697b      	ldr	r3, [r7, #20]
	}
 8013962:	4618      	mov	r0, r3
 8013964:	3718      	adds	r7, #24
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
 801396a:	bf00      	nop
 801396c:	20000ddc 	.word	0x20000ddc
 8013970:	200012b8 	.word	0x200012b8
 8013974:	20000de0 	.word	0x20000de0

08013978 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013978:	b580      	push	{r7, lr}
 801397a:	b088      	sub	sp, #32
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013986:	2301      	movs	r3, #1
 8013988:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d068      	beq.n	8013a62 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013994:	2b00      	cmp	r3, #0
 8013996:	d109      	bne.n	80139ac <vTaskPriorityDisinheritAfterTimeout+0x34>
 8013998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801399c:	f383 8811 	msr	BASEPRI, r3
 80139a0:	f3bf 8f6f 	isb	sy
 80139a4:	f3bf 8f4f 	dsb	sy
 80139a8:	60fb      	str	r3, [r7, #12]
 80139aa:	e7fe      	b.n	80139aa <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80139ac:	69bb      	ldr	r3, [r7, #24]
 80139ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139b0:	683a      	ldr	r2, [r7, #0]
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d902      	bls.n	80139bc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	61fb      	str	r3, [r7, #28]
 80139ba:	e002      	b.n	80139c2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80139bc:	69bb      	ldr	r3, [r7, #24]
 80139be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80139c2:	69bb      	ldr	r3, [r7, #24]
 80139c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139c6:	69fa      	ldr	r2, [r7, #28]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d04a      	beq.n	8013a62 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139d0:	697a      	ldr	r2, [r7, #20]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d145      	bne.n	8013a62 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80139d6:	4b25      	ldr	r3, [pc, #148]	; (8013a6c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	69ba      	ldr	r2, [r7, #24]
 80139dc:	429a      	cmp	r2, r3
 80139de:	d109      	bne.n	80139f4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80139e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e4:	f383 8811 	msr	BASEPRI, r3
 80139e8:	f3bf 8f6f 	isb	sy
 80139ec:	f3bf 8f4f 	dsb	sy
 80139f0:	60bb      	str	r3, [r7, #8]
 80139f2:	e7fe      	b.n	80139f2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80139fa:	69bb      	ldr	r3, [r7, #24]
 80139fc:	69fa      	ldr	r2, [r7, #28]
 80139fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013a00:	69bb      	ldr	r3, [r7, #24]
 8013a02:	699b      	ldr	r3, [r3, #24]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	db04      	blt.n	8013a12 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	6959      	ldr	r1, [r3, #20]
 8013a16:	693a      	ldr	r2, [r7, #16]
 8013a18:	4613      	mov	r3, r2
 8013a1a:	009b      	lsls	r3, r3, #2
 8013a1c:	4413      	add	r3, r2
 8013a1e:	009b      	lsls	r3, r3, #2
 8013a20:	4a13      	ldr	r2, [pc, #76]	; (8013a70 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8013a22:	4413      	add	r3, r2
 8013a24:	4299      	cmp	r1, r3
 8013a26:	d11c      	bne.n	8013a62 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a28:	69bb      	ldr	r3, [r7, #24]
 8013a2a:	3304      	adds	r3, #4
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fd ff8f 	bl	8011950 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013a32:	69bb      	ldr	r3, [r7, #24]
 8013a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a36:	4b0f      	ldr	r3, [pc, #60]	; (8013a74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d903      	bls.n	8013a46 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8013a3e:	69bb      	ldr	r3, [r7, #24]
 8013a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a42:	4a0c      	ldr	r2, [pc, #48]	; (8013a74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013a44:	6013      	str	r3, [r2, #0]
 8013a46:	69bb      	ldr	r3, [r7, #24]
 8013a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	009b      	lsls	r3, r3, #2
 8013a4e:	4413      	add	r3, r2
 8013a50:	009b      	lsls	r3, r3, #2
 8013a52:	4a07      	ldr	r2, [pc, #28]	; (8013a70 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8013a54:	441a      	add	r2, r3
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	3304      	adds	r3, #4
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	4610      	mov	r0, r2
 8013a5e:	f7fd ff1a 	bl	8011896 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a62:	bf00      	nop
 8013a64:	3720      	adds	r7, #32
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	20000ddc 	.word	0x20000ddc
 8013a70:	20000de0 	.word	0x20000de0
 8013a74:	200012b8 	.word	0x200012b8

08013a78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013a78:	b480      	push	{r7}
 8013a7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013a7c:	4b07      	ldr	r3, [pc, #28]	; (8013a9c <pvTaskIncrementMutexHeldCount+0x24>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d004      	beq.n	8013a8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013a84:	4b05      	ldr	r3, [pc, #20]	; (8013a9c <pvTaskIncrementMutexHeldCount+0x24>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a8a:	3201      	adds	r2, #1
 8013a8c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013a8e:	4b03      	ldr	r3, [pc, #12]	; (8013a9c <pvTaskIncrementMutexHeldCount+0x24>)
 8013a90:	681b      	ldr	r3, [r3, #0]
	}
 8013a92:	4618      	mov	r0, r3
 8013a94:	46bd      	mov	sp, r7
 8013a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9a:	4770      	bx	lr
 8013a9c:	20000ddc 	.word	0x20000ddc

08013aa0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013aaa:	4b21      	ldr	r3, [pc, #132]	; (8013b30 <prvAddCurrentTaskToDelayedList+0x90>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ab0:	4b20      	ldr	r3, [pc, #128]	; (8013b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	3304      	adds	r3, #4
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fd ff4a 	bl	8011950 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ac2:	d10a      	bne.n	8013ada <prvAddCurrentTaskToDelayedList+0x3a>
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d007      	beq.n	8013ada <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013aca:	4b1a      	ldr	r3, [pc, #104]	; (8013b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	3304      	adds	r3, #4
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	4819      	ldr	r0, [pc, #100]	; (8013b38 <prvAddCurrentTaskToDelayedList+0x98>)
 8013ad4:	f7fd fedf 	bl	8011896 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013ad8:	e026      	b.n	8013b28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	4413      	add	r3, r2
 8013ae0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013ae2:	4b14      	ldr	r3, [pc, #80]	; (8013b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	68ba      	ldr	r2, [r7, #8]
 8013ae8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013aea:	68ba      	ldr	r2, [r7, #8]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d209      	bcs.n	8013b06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013af2:	4b12      	ldr	r3, [pc, #72]	; (8013b3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	4b0f      	ldr	r3, [pc, #60]	; (8013b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	3304      	adds	r3, #4
 8013afc:	4619      	mov	r1, r3
 8013afe:	4610      	mov	r0, r2
 8013b00:	f7fd feed 	bl	80118de <vListInsert>
}
 8013b04:	e010      	b.n	8013b28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b06:	4b0e      	ldr	r3, [pc, #56]	; (8013b40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	4b0a      	ldr	r3, [pc, #40]	; (8013b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	3304      	adds	r3, #4
 8013b10:	4619      	mov	r1, r3
 8013b12:	4610      	mov	r0, r2
 8013b14:	f7fd fee3 	bl	80118de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013b18:	4b0a      	ldr	r3, [pc, #40]	; (8013b44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	68ba      	ldr	r2, [r7, #8]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d202      	bcs.n	8013b28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013b22:	4a08      	ldr	r2, [pc, #32]	; (8013b44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	6013      	str	r3, [r2, #0]
}
 8013b28:	bf00      	nop
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	200012b4 	.word	0x200012b4
 8013b34:	20000ddc 	.word	0x20000ddc
 8013b38:	2000129c 	.word	0x2000129c
 8013b3c:	2000126c 	.word	0x2000126c
 8013b40:	20001268 	.word	0x20001268
 8013b44:	200012d0 	.word	0x200012d0

08013b48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b08a      	sub	sp, #40	; 0x28
 8013b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013b52:	f000 faff 	bl	8014154 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013b56:	4b1c      	ldr	r3, [pc, #112]	; (8013bc8 <xTimerCreateTimerTask+0x80>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d021      	beq.n	8013ba2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013b62:	2300      	movs	r3, #0
 8013b64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013b66:	1d3a      	adds	r2, r7, #4
 8013b68:	f107 0108 	add.w	r1, r7, #8
 8013b6c:	f107 030c 	add.w	r3, r7, #12
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7fd fe49 	bl	8011808 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013b76:	6879      	ldr	r1, [r7, #4]
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	68fa      	ldr	r2, [r7, #12]
 8013b7c:	9202      	str	r2, [sp, #8]
 8013b7e:	9301      	str	r3, [sp, #4]
 8013b80:	2302      	movs	r3, #2
 8013b82:	9300      	str	r3, [sp, #0]
 8013b84:	2300      	movs	r3, #0
 8013b86:	460a      	mov	r2, r1
 8013b88:	4910      	ldr	r1, [pc, #64]	; (8013bcc <xTimerCreateTimerTask+0x84>)
 8013b8a:	4811      	ldr	r0, [pc, #68]	; (8013bd0 <xTimerCreateTimerTask+0x88>)
 8013b8c:	f7fe fef8 	bl	8012980 <xTaskCreateStatic>
 8013b90:	4602      	mov	r2, r0
 8013b92:	4b10      	ldr	r3, [pc, #64]	; (8013bd4 <xTimerCreateTimerTask+0x8c>)
 8013b94:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013b96:	4b0f      	ldr	r3, [pc, #60]	; (8013bd4 <xTimerCreateTimerTask+0x8c>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d001      	beq.n	8013ba2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d109      	bne.n	8013bbc <xTimerCreateTimerTask+0x74>
 8013ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bac:	f383 8811 	msr	BASEPRI, r3
 8013bb0:	f3bf 8f6f 	isb	sy
 8013bb4:	f3bf 8f4f 	dsb	sy
 8013bb8:	613b      	str	r3, [r7, #16]
 8013bba:	e7fe      	b.n	8013bba <xTimerCreateTimerTask+0x72>
	return xReturn;
 8013bbc:	697b      	ldr	r3, [r7, #20]
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3718      	adds	r7, #24
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
 8013bc6:	bf00      	nop
 8013bc8:	2000130c 	.word	0x2000130c
 8013bcc:	08019220 	.word	0x08019220
 8013bd0:	08013d09 	.word	0x08013d09
 8013bd4:	20001310 	.word	0x20001310

08013bd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b08a      	sub	sp, #40	; 0x28
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
 8013be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013be6:	2300      	movs	r3, #0
 8013be8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d109      	bne.n	8013c04 <xTimerGenericCommand+0x2c>
 8013bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf4:	f383 8811 	msr	BASEPRI, r3
 8013bf8:	f3bf 8f6f 	isb	sy
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	623b      	str	r3, [r7, #32]
 8013c02:	e7fe      	b.n	8013c02 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013c04:	4b19      	ldr	r3, [pc, #100]	; (8013c6c <xTimerGenericCommand+0x94>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d02a      	beq.n	8013c62 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2b05      	cmp	r3, #5
 8013c1c:	dc18      	bgt.n	8013c50 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013c1e:	f7ff fdb9 	bl	8013794 <xTaskGetSchedulerState>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b02      	cmp	r3, #2
 8013c26:	d109      	bne.n	8013c3c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013c28:	4b10      	ldr	r3, [pc, #64]	; (8013c6c <xTimerGenericCommand+0x94>)
 8013c2a:	6818      	ldr	r0, [r3, #0]
 8013c2c:	f107 0110 	add.w	r1, r7, #16
 8013c30:	2300      	movs	r3, #0
 8013c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c34:	f7fe f85a 	bl	8011cec <xQueueGenericSend>
 8013c38:	6278      	str	r0, [r7, #36]	; 0x24
 8013c3a:	e012      	b.n	8013c62 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013c3c:	4b0b      	ldr	r3, [pc, #44]	; (8013c6c <xTimerGenericCommand+0x94>)
 8013c3e:	6818      	ldr	r0, [r3, #0]
 8013c40:	f107 0110 	add.w	r1, r7, #16
 8013c44:	2300      	movs	r3, #0
 8013c46:	2200      	movs	r2, #0
 8013c48:	f7fe f850 	bl	8011cec <xQueueGenericSend>
 8013c4c:	6278      	str	r0, [r7, #36]	; 0x24
 8013c4e:	e008      	b.n	8013c62 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013c50:	4b06      	ldr	r3, [pc, #24]	; (8013c6c <xTimerGenericCommand+0x94>)
 8013c52:	6818      	ldr	r0, [r3, #0]
 8013c54:	f107 0110 	add.w	r1, r7, #16
 8013c58:	2300      	movs	r3, #0
 8013c5a:	683a      	ldr	r2, [r7, #0]
 8013c5c:	f7fe f940 	bl	8011ee0 <xQueueGenericSendFromISR>
 8013c60:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c64:	4618      	mov	r0, r3
 8013c66:	3728      	adds	r7, #40	; 0x28
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	2000130c 	.word	0x2000130c

08013c70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b088      	sub	sp, #32
 8013c74:	af02      	add	r7, sp, #8
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c7a:	4b22      	ldr	r3, [pc, #136]	; (8013d04 <prvProcessExpiredTimer+0x94>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	3304      	adds	r3, #4
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7fd fe61 	bl	8011950 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c94:	f003 0304 	and.w	r3, r3, #4
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d021      	beq.n	8013ce0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	699a      	ldr	r2, [r3, #24]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	18d1      	adds	r1, r2, r3
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	6978      	ldr	r0, [r7, #20]
 8013caa:	f000 f8d1 	bl	8013e50 <prvInsertTimerInActiveList>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d01e      	beq.n	8013cf2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	2300      	movs	r3, #0
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	6978      	ldr	r0, [r7, #20]
 8013cc0:	f7ff ff8a 	bl	8013bd8 <xTimerGenericCommand>
 8013cc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d112      	bne.n	8013cf2 <prvProcessExpiredTimer+0x82>
 8013ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd0:	f383 8811 	msr	BASEPRI, r3
 8013cd4:	f3bf 8f6f 	isb	sy
 8013cd8:	f3bf 8f4f 	dsb	sy
 8013cdc:	60fb      	str	r3, [r7, #12]
 8013cde:	e7fe      	b.n	8013cde <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ce6:	f023 0301 	bic.w	r3, r3, #1
 8013cea:	b2da      	uxtb	r2, r3
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	6a1b      	ldr	r3, [r3, #32]
 8013cf6:	6978      	ldr	r0, [r7, #20]
 8013cf8:	4798      	blx	r3
}
 8013cfa:	bf00      	nop
 8013cfc:	3718      	adds	r7, #24
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	20001304 	.word	0x20001304

08013d08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013d10:	f107 0308 	add.w	r3, r7, #8
 8013d14:	4618      	mov	r0, r3
 8013d16:	f000 f857 	bl	8013dc8 <prvGetNextExpireTime>
 8013d1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013d1c:	68bb      	ldr	r3, [r7, #8]
 8013d1e:	4619      	mov	r1, r3
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f000 f803 	bl	8013d2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013d26:	f000 f8d5 	bl	8013ed4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013d2a:	e7f1      	b.n	8013d10 <prvTimerTask+0x8>

08013d2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013d36:	f7ff f95b 	bl	8012ff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013d3a:	f107 0308 	add.w	r3, r7, #8
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f000 f866 	bl	8013e10 <prvSampleTimeNow>
 8013d44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d130      	bne.n	8013dae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d10a      	bne.n	8013d68 <prvProcessTimerOrBlockTask+0x3c>
 8013d52:	687a      	ldr	r2, [r7, #4]
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d806      	bhi.n	8013d68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013d5a:	f7ff f957 	bl	801300c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013d5e:	68f9      	ldr	r1, [r7, #12]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7ff ff85 	bl	8013c70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013d66:	e024      	b.n	8013db2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d008      	beq.n	8013d80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013d6e:	4b13      	ldr	r3, [pc, #76]	; (8013dbc <prvProcessTimerOrBlockTask+0x90>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d101      	bne.n	8013d7c <prvProcessTimerOrBlockTask+0x50>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e000      	b.n	8013d7e <prvProcessTimerOrBlockTask+0x52>
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013d80:	4b0f      	ldr	r3, [pc, #60]	; (8013dc0 <prvProcessTimerOrBlockTask+0x94>)
 8013d82:	6818      	ldr	r0, [r3, #0]
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	1ad3      	subs	r3, r2, r3
 8013d8a:	683a      	ldr	r2, [r7, #0]
 8013d8c:	4619      	mov	r1, r3
 8013d8e:	f7fe fdc3 	bl	8012918 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013d92:	f7ff f93b 	bl	801300c <xTaskResumeAll>
 8013d96:	4603      	mov	r3, r0
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d10a      	bne.n	8013db2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013d9c:	4b09      	ldr	r3, [pc, #36]	; (8013dc4 <prvProcessTimerOrBlockTask+0x98>)
 8013d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013da2:	601a      	str	r2, [r3, #0]
 8013da4:	f3bf 8f4f 	dsb	sy
 8013da8:	f3bf 8f6f 	isb	sy
}
 8013dac:	e001      	b.n	8013db2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013dae:	f7ff f92d 	bl	801300c <xTaskResumeAll>
}
 8013db2:	bf00      	nop
 8013db4:	3710      	adds	r7, #16
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	20001308 	.word	0x20001308
 8013dc0:	2000130c 	.word	0x2000130c
 8013dc4:	e000ed04 	.word	0xe000ed04

08013dc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b085      	sub	sp, #20
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013dd0:	4b0e      	ldr	r3, [pc, #56]	; (8013e0c <prvGetNextExpireTime+0x44>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d101      	bne.n	8013dde <prvGetNextExpireTime+0x16>
 8013dda:	2201      	movs	r2, #1
 8013ddc:	e000      	b.n	8013de0 <prvGetNextExpireTime+0x18>
 8013dde:	2200      	movs	r2, #0
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d105      	bne.n	8013df8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013dec:	4b07      	ldr	r3, [pc, #28]	; (8013e0c <prvGetNextExpireTime+0x44>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	68db      	ldr	r3, [r3, #12]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	60fb      	str	r3, [r7, #12]
 8013df6:	e001      	b.n	8013dfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3714      	adds	r7, #20
 8013e02:	46bd      	mov	sp, r7
 8013e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e08:	4770      	bx	lr
 8013e0a:	bf00      	nop
 8013e0c:	20001304 	.word	0x20001304

08013e10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013e18:	f7ff f994 	bl	8013144 <xTaskGetTickCount>
 8013e1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013e1e:	4b0b      	ldr	r3, [pc, #44]	; (8013e4c <prvSampleTimeNow+0x3c>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	68fa      	ldr	r2, [r7, #12]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d205      	bcs.n	8013e34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013e28:	f000 f930 	bl	801408c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2201      	movs	r2, #1
 8013e30:	601a      	str	r2, [r3, #0]
 8013e32:	e002      	b.n	8013e3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2200      	movs	r2, #0
 8013e38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013e3a:	4a04      	ldr	r2, [pc, #16]	; (8013e4c <prvSampleTimeNow+0x3c>)
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013e40:	68fb      	ldr	r3, [r7, #12]
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3710      	adds	r7, #16
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	20001314 	.word	0x20001314

08013e50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b086      	sub	sp, #24
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	60f8      	str	r0, [r7, #12]
 8013e58:	60b9      	str	r1, [r7, #8]
 8013e5a:	607a      	str	r2, [r7, #4]
 8013e5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	68ba      	ldr	r2, [r7, #8]
 8013e66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	68fa      	ldr	r2, [r7, #12]
 8013e6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013e6e:	68ba      	ldr	r2, [r7, #8]
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d812      	bhi.n	8013e9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	1ad2      	subs	r2, r2, r3
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	699b      	ldr	r3, [r3, #24]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d302      	bcc.n	8013e8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013e84:	2301      	movs	r3, #1
 8013e86:	617b      	str	r3, [r7, #20]
 8013e88:	e01b      	b.n	8013ec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013e8a:	4b10      	ldr	r3, [pc, #64]	; (8013ecc <prvInsertTimerInActiveList+0x7c>)
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	3304      	adds	r3, #4
 8013e92:	4619      	mov	r1, r3
 8013e94:	4610      	mov	r0, r2
 8013e96:	f7fd fd22 	bl	80118de <vListInsert>
 8013e9a:	e012      	b.n	8013ec2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d206      	bcs.n	8013eb2 <prvInsertTimerInActiveList+0x62>
 8013ea4:	68ba      	ldr	r2, [r7, #8]
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d302      	bcc.n	8013eb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013eac:	2301      	movs	r3, #1
 8013eae:	617b      	str	r3, [r7, #20]
 8013eb0:	e007      	b.n	8013ec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013eb2:	4b07      	ldr	r3, [pc, #28]	; (8013ed0 <prvInsertTimerInActiveList+0x80>)
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	3304      	adds	r3, #4
 8013eba:	4619      	mov	r1, r3
 8013ebc:	4610      	mov	r0, r2
 8013ebe:	f7fd fd0e 	bl	80118de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013ec2:	697b      	ldr	r3, [r7, #20]
}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	3718      	adds	r7, #24
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	20001308 	.word	0x20001308
 8013ed0:	20001304 	.word	0x20001304

08013ed4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b08e      	sub	sp, #56	; 0x38
 8013ed8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013eda:	e0c6      	b.n	801406a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	da17      	bge.n	8013f12 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013ee2:	1d3b      	adds	r3, r7, #4
 8013ee4:	3304      	adds	r3, #4
 8013ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d109      	bne.n	8013f02 <prvProcessReceivedCommands+0x2e>
 8013eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef2:	f383 8811 	msr	BASEPRI, r3
 8013ef6:	f3bf 8f6f 	isb	sy
 8013efa:	f3bf 8f4f 	dsb	sy
 8013efe:	61fb      	str	r3, [r7, #28]
 8013f00:	e7fe      	b.n	8013f00 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f08:	6850      	ldr	r0, [r2, #4]
 8013f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f0c:	6892      	ldr	r2, [r2, #8]
 8013f0e:	4611      	mov	r1, r2
 8013f10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f2c0 80a7 	blt.w	8014068 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f20:	695b      	ldr	r3, [r3, #20]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d004      	beq.n	8013f30 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f28:	3304      	adds	r3, #4
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7fd fd10 	bl	8011950 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f30:	463b      	mov	r3, r7
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7ff ff6c 	bl	8013e10 <prvSampleTimeNow>
 8013f38:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2b09      	cmp	r3, #9
 8013f3e:	f200 8094 	bhi.w	801406a <prvProcessReceivedCommands+0x196>
 8013f42:	a201      	add	r2, pc, #4	; (adr r2, 8013f48 <prvProcessReceivedCommands+0x74>)
 8013f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f48:	08013f71 	.word	0x08013f71
 8013f4c:	08013f71 	.word	0x08013f71
 8013f50:	08013f71 	.word	0x08013f71
 8013f54:	08013fe3 	.word	0x08013fe3
 8013f58:	08013ff7 	.word	0x08013ff7
 8013f5c:	0801403f 	.word	0x0801403f
 8013f60:	08013f71 	.word	0x08013f71
 8013f64:	08013f71 	.word	0x08013f71
 8013f68:	08013fe3 	.word	0x08013fe3
 8013f6c:	08013ff7 	.word	0x08013ff7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f76:	f043 0301 	orr.w	r3, r3, #1
 8013f7a:	b2da      	uxtb	r2, r3
 8013f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013f82:	68ba      	ldr	r2, [r7, #8]
 8013f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f86:	699b      	ldr	r3, [r3, #24]
 8013f88:	18d1      	adds	r1, r2, r3
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f90:	f7ff ff5e 	bl	8013e50 <prvInsertTimerInActiveList>
 8013f94:	4603      	mov	r3, r0
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d067      	beq.n	801406a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9c:	6a1b      	ldr	r3, [r3, #32]
 8013f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fa8:	f003 0304 	and.w	r3, r3, #4
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d05c      	beq.n	801406a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013fb0:	68ba      	ldr	r2, [r7, #8]
 8013fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb4:	699b      	ldr	r3, [r3, #24]
 8013fb6:	441a      	add	r2, r3
 8013fb8:	2300      	movs	r3, #0
 8013fba:	9300      	str	r3, [sp, #0]
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	2100      	movs	r1, #0
 8013fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fc2:	f7ff fe09 	bl	8013bd8 <xTimerGenericCommand>
 8013fc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013fc8:	6a3b      	ldr	r3, [r7, #32]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d14d      	bne.n	801406a <prvProcessReceivedCommands+0x196>
 8013fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd2:	f383 8811 	msr	BASEPRI, r3
 8013fd6:	f3bf 8f6f 	isb	sy
 8013fda:	f3bf 8f4f 	dsb	sy
 8013fde:	61bb      	str	r3, [r7, #24]
 8013fe0:	e7fe      	b.n	8013fe0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fe8:	f023 0301 	bic.w	r3, r3, #1
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013ff4:	e039      	b.n	801406a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ffc:	f043 0301 	orr.w	r3, r3, #1
 8014000:	b2da      	uxtb	r2, r3
 8014002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014004:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014008:	68ba      	ldr	r2, [r7, #8]
 801400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014010:	699b      	ldr	r3, [r3, #24]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d109      	bne.n	801402a <prvProcessReceivedCommands+0x156>
 8014016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801401a:	f383 8811 	msr	BASEPRI, r3
 801401e:	f3bf 8f6f 	isb	sy
 8014022:	f3bf 8f4f 	dsb	sy
 8014026:	617b      	str	r3, [r7, #20]
 8014028:	e7fe      	b.n	8014028 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402c:	699a      	ldr	r2, [r3, #24]
 801402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014030:	18d1      	adds	r1, r2, r3
 8014032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014038:	f7ff ff0a 	bl	8013e50 <prvInsertTimerInActiveList>
					break;
 801403c:	e015      	b.n	801406a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014044:	f003 0302 	and.w	r3, r3, #2
 8014048:	2b00      	cmp	r3, #0
 801404a:	d103      	bne.n	8014054 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801404c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801404e:	f000 fbc1 	bl	80147d4 <vPortFree>
 8014052:	e00a      	b.n	801406a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801405a:	f023 0301 	bic.w	r3, r3, #1
 801405e:	b2da      	uxtb	r2, r3
 8014060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014066:	e000      	b.n	801406a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801406a:	4b07      	ldr	r3, [pc, #28]	; (8014088 <prvProcessReceivedCommands+0x1b4>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	1d39      	adds	r1, r7, #4
 8014070:	2200      	movs	r2, #0
 8014072:	4618      	mov	r0, r3
 8014074:	f7fe f852 	bl	801211c <xQueueReceive>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	f47f af2e 	bne.w	8013edc <prvProcessReceivedCommands+0x8>
	}
}
 8014080:	bf00      	nop
 8014082:	3730      	adds	r7, #48	; 0x30
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}
 8014088:	2000130c 	.word	0x2000130c

0801408c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b088      	sub	sp, #32
 8014090:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014092:	e047      	b.n	8014124 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014094:	4b2d      	ldr	r3, [pc, #180]	; (801414c <prvSwitchTimerLists+0xc0>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801409e:	4b2b      	ldr	r3, [pc, #172]	; (801414c <prvSwitchTimerLists+0xc0>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	68db      	ldr	r3, [r3, #12]
 80140a4:	68db      	ldr	r3, [r3, #12]
 80140a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	3304      	adds	r3, #4
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7fd fc4f 	bl	8011950 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	6a1b      	ldr	r3, [r3, #32]
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140c0:	f003 0304 	and.w	r3, r3, #4
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d02d      	beq.n	8014124 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	699b      	ldr	r3, [r3, #24]
 80140cc:	693a      	ldr	r2, [r7, #16]
 80140ce:	4413      	add	r3, r2
 80140d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d90e      	bls.n	80140f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	68ba      	ldr	r2, [r7, #8]
 80140de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	68fa      	ldr	r2, [r7, #12]
 80140e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80140e6:	4b19      	ldr	r3, [pc, #100]	; (801414c <prvSwitchTimerLists+0xc0>)
 80140e8:	681a      	ldr	r2, [r3, #0]
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	3304      	adds	r3, #4
 80140ee:	4619      	mov	r1, r3
 80140f0:	4610      	mov	r0, r2
 80140f2:	f7fd fbf4 	bl	80118de <vListInsert>
 80140f6:	e015      	b.n	8014124 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80140f8:	2300      	movs	r3, #0
 80140fa:	9300      	str	r3, [sp, #0]
 80140fc:	2300      	movs	r3, #0
 80140fe:	693a      	ldr	r2, [r7, #16]
 8014100:	2100      	movs	r1, #0
 8014102:	68f8      	ldr	r0, [r7, #12]
 8014104:	f7ff fd68 	bl	8013bd8 <xTimerGenericCommand>
 8014108:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d109      	bne.n	8014124 <prvSwitchTimerLists+0x98>
 8014110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014114:	f383 8811 	msr	BASEPRI, r3
 8014118:	f3bf 8f6f 	isb	sy
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	603b      	str	r3, [r7, #0]
 8014122:	e7fe      	b.n	8014122 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014124:	4b09      	ldr	r3, [pc, #36]	; (801414c <prvSwitchTimerLists+0xc0>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d1b2      	bne.n	8014094 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801412e:	4b07      	ldr	r3, [pc, #28]	; (801414c <prvSwitchTimerLists+0xc0>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014134:	4b06      	ldr	r3, [pc, #24]	; (8014150 <prvSwitchTimerLists+0xc4>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4a04      	ldr	r2, [pc, #16]	; (801414c <prvSwitchTimerLists+0xc0>)
 801413a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801413c:	4a04      	ldr	r2, [pc, #16]	; (8014150 <prvSwitchTimerLists+0xc4>)
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	6013      	str	r3, [r2, #0]
}
 8014142:	bf00      	nop
 8014144:	3718      	adds	r7, #24
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	20001304 	.word	0x20001304
 8014150:	20001308 	.word	0x20001308

08014154 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801415a:	f000 f95f 	bl	801441c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801415e:	4b15      	ldr	r3, [pc, #84]	; (80141b4 <prvCheckForValidListAndQueue+0x60>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d120      	bne.n	80141a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014166:	4814      	ldr	r0, [pc, #80]	; (80141b8 <prvCheckForValidListAndQueue+0x64>)
 8014168:	f7fd fb68 	bl	801183c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801416c:	4813      	ldr	r0, [pc, #76]	; (80141bc <prvCheckForValidListAndQueue+0x68>)
 801416e:	f7fd fb65 	bl	801183c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014172:	4b13      	ldr	r3, [pc, #76]	; (80141c0 <prvCheckForValidListAndQueue+0x6c>)
 8014174:	4a10      	ldr	r2, [pc, #64]	; (80141b8 <prvCheckForValidListAndQueue+0x64>)
 8014176:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014178:	4b12      	ldr	r3, [pc, #72]	; (80141c4 <prvCheckForValidListAndQueue+0x70>)
 801417a:	4a10      	ldr	r2, [pc, #64]	; (80141bc <prvCheckForValidListAndQueue+0x68>)
 801417c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801417e:	2300      	movs	r3, #0
 8014180:	9300      	str	r3, [sp, #0]
 8014182:	4b11      	ldr	r3, [pc, #68]	; (80141c8 <prvCheckForValidListAndQueue+0x74>)
 8014184:	4a11      	ldr	r2, [pc, #68]	; (80141cc <prvCheckForValidListAndQueue+0x78>)
 8014186:	2110      	movs	r1, #16
 8014188:	200a      	movs	r0, #10
 801418a:	f7fd fc73 	bl	8011a74 <xQueueGenericCreateStatic>
 801418e:	4602      	mov	r2, r0
 8014190:	4b08      	ldr	r3, [pc, #32]	; (80141b4 <prvCheckForValidListAndQueue+0x60>)
 8014192:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014194:	4b07      	ldr	r3, [pc, #28]	; (80141b4 <prvCheckForValidListAndQueue+0x60>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d005      	beq.n	80141a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801419c:	4b05      	ldr	r3, [pc, #20]	; (80141b4 <prvCheckForValidListAndQueue+0x60>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	490b      	ldr	r1, [pc, #44]	; (80141d0 <prvCheckForValidListAndQueue+0x7c>)
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7fe fb66 	bl	8012874 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80141a8:	f000 f966 	bl	8014478 <vPortExitCritical>
}
 80141ac:	bf00      	nop
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	2000130c 	.word	0x2000130c
 80141b8:	200012dc 	.word	0x200012dc
 80141bc:	200012f0 	.word	0x200012f0
 80141c0:	20001304 	.word	0x20001304
 80141c4:	20001308 	.word	0x20001308
 80141c8:	200013b8 	.word	0x200013b8
 80141cc:	20001318 	.word	0x20001318
 80141d0:	08019228 	.word	0x08019228

080141d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80141d4:	b480      	push	{r7}
 80141d6:	b085      	sub	sp, #20
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	3b04      	subs	r3, #4
 80141e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80141ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	3b04      	subs	r3, #4
 80141f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	f023 0201 	bic.w	r2, r3, #1
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	3b04      	subs	r3, #4
 8014202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014204:	4a0c      	ldr	r2, [pc, #48]	; (8014238 <pxPortInitialiseStack+0x64>)
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	3b14      	subs	r3, #20
 801420e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014210:	687a      	ldr	r2, [r7, #4]
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	3b04      	subs	r3, #4
 801421a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f06f 0202 	mvn.w	r2, #2
 8014222:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	3b20      	subs	r3, #32
 8014228:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801422a:	68fb      	ldr	r3, [r7, #12]
}
 801422c:	4618      	mov	r0, r3
 801422e:	3714      	adds	r7, #20
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr
 8014238:	0801423d 	.word	0x0801423d

0801423c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801423c:	b480      	push	{r7}
 801423e:	b085      	sub	sp, #20
 8014240:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014242:	2300      	movs	r3, #0
 8014244:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014246:	4b11      	ldr	r3, [pc, #68]	; (801428c <prvTaskExitError+0x50>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801424e:	d009      	beq.n	8014264 <prvTaskExitError+0x28>
 8014250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014254:	f383 8811 	msr	BASEPRI, r3
 8014258:	f3bf 8f6f 	isb	sy
 801425c:	f3bf 8f4f 	dsb	sy
 8014260:	60fb      	str	r3, [r7, #12]
 8014262:	e7fe      	b.n	8014262 <prvTaskExitError+0x26>
 8014264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014268:	f383 8811 	msr	BASEPRI, r3
 801426c:	f3bf 8f6f 	isb	sy
 8014270:	f3bf 8f4f 	dsb	sy
 8014274:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014276:	bf00      	nop
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d0fc      	beq.n	8014278 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801427e:	bf00      	nop
 8014280:	3714      	adds	r7, #20
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr
 801428a:	bf00      	nop
 801428c:	200000d8 	.word	0x200000d8

08014290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014290:	4b07      	ldr	r3, [pc, #28]	; (80142b0 <pxCurrentTCBConst2>)
 8014292:	6819      	ldr	r1, [r3, #0]
 8014294:	6808      	ldr	r0, [r1, #0]
 8014296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801429a:	f380 8809 	msr	PSP, r0
 801429e:	f3bf 8f6f 	isb	sy
 80142a2:	f04f 0000 	mov.w	r0, #0
 80142a6:	f380 8811 	msr	BASEPRI, r0
 80142aa:	4770      	bx	lr
 80142ac:	f3af 8000 	nop.w

080142b0 <pxCurrentTCBConst2>:
 80142b0:	20000ddc 	.word	0x20000ddc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80142b4:	bf00      	nop
 80142b6:	bf00      	nop

080142b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80142b8:	4808      	ldr	r0, [pc, #32]	; (80142dc <prvPortStartFirstTask+0x24>)
 80142ba:	6800      	ldr	r0, [r0, #0]
 80142bc:	6800      	ldr	r0, [r0, #0]
 80142be:	f380 8808 	msr	MSP, r0
 80142c2:	f04f 0000 	mov.w	r0, #0
 80142c6:	f380 8814 	msr	CONTROL, r0
 80142ca:	b662      	cpsie	i
 80142cc:	b661      	cpsie	f
 80142ce:	f3bf 8f4f 	dsb	sy
 80142d2:	f3bf 8f6f 	isb	sy
 80142d6:	df00      	svc	0
 80142d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80142da:	bf00      	nop
 80142dc:	e000ed08 	.word	0xe000ed08

080142e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b086      	sub	sp, #24
 80142e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80142e6:	4b44      	ldr	r3, [pc, #272]	; (80143f8 <xPortStartScheduler+0x118>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	4a44      	ldr	r2, [pc, #272]	; (80143fc <xPortStartScheduler+0x11c>)
 80142ec:	4293      	cmp	r3, r2
 80142ee:	d109      	bne.n	8014304 <xPortStartScheduler+0x24>
 80142f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	613b      	str	r3, [r7, #16]
 8014302:	e7fe      	b.n	8014302 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014304:	4b3c      	ldr	r3, [pc, #240]	; (80143f8 <xPortStartScheduler+0x118>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	4a3d      	ldr	r2, [pc, #244]	; (8014400 <xPortStartScheduler+0x120>)
 801430a:	4293      	cmp	r3, r2
 801430c:	d109      	bne.n	8014322 <xPortStartScheduler+0x42>
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	60fb      	str	r3, [r7, #12]
 8014320:	e7fe      	b.n	8014320 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014322:	4b38      	ldr	r3, [pc, #224]	; (8014404 <xPortStartScheduler+0x124>)
 8014324:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014326:	697b      	ldr	r3, [r7, #20]
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	b2db      	uxtb	r3, r3
 801432c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	22ff      	movs	r2, #255	; 0xff
 8014332:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	b2db      	uxtb	r3, r3
 801433a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801433c:	78fb      	ldrb	r3, [r7, #3]
 801433e:	b2db      	uxtb	r3, r3
 8014340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014344:	b2da      	uxtb	r2, r3
 8014346:	4b30      	ldr	r3, [pc, #192]	; (8014408 <xPortStartScheduler+0x128>)
 8014348:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801434a:	4b30      	ldr	r3, [pc, #192]	; (801440c <xPortStartScheduler+0x12c>)
 801434c:	2207      	movs	r2, #7
 801434e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014350:	e009      	b.n	8014366 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014352:	4b2e      	ldr	r3, [pc, #184]	; (801440c <xPortStartScheduler+0x12c>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	3b01      	subs	r3, #1
 8014358:	4a2c      	ldr	r2, [pc, #176]	; (801440c <xPortStartScheduler+0x12c>)
 801435a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801435c:	78fb      	ldrb	r3, [r7, #3]
 801435e:	b2db      	uxtb	r3, r3
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	b2db      	uxtb	r3, r3
 8014364:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014366:	78fb      	ldrb	r3, [r7, #3]
 8014368:	b2db      	uxtb	r3, r3
 801436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801436e:	2b80      	cmp	r3, #128	; 0x80
 8014370:	d0ef      	beq.n	8014352 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014372:	4b26      	ldr	r3, [pc, #152]	; (801440c <xPortStartScheduler+0x12c>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f1c3 0307 	rsb	r3, r3, #7
 801437a:	2b04      	cmp	r3, #4
 801437c:	d009      	beq.n	8014392 <xPortStartScheduler+0xb2>
 801437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014382:	f383 8811 	msr	BASEPRI, r3
 8014386:	f3bf 8f6f 	isb	sy
 801438a:	f3bf 8f4f 	dsb	sy
 801438e:	60bb      	str	r3, [r7, #8]
 8014390:	e7fe      	b.n	8014390 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014392:	4b1e      	ldr	r3, [pc, #120]	; (801440c <xPortStartScheduler+0x12c>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	021b      	lsls	r3, r3, #8
 8014398:	4a1c      	ldr	r2, [pc, #112]	; (801440c <xPortStartScheduler+0x12c>)
 801439a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801439c:	4b1b      	ldr	r3, [pc, #108]	; (801440c <xPortStartScheduler+0x12c>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80143a4:	4a19      	ldr	r2, [pc, #100]	; (801440c <xPortStartScheduler+0x12c>)
 80143a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	b2da      	uxtb	r2, r3
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80143b0:	4b17      	ldr	r3, [pc, #92]	; (8014410 <xPortStartScheduler+0x130>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	4a16      	ldr	r2, [pc, #88]	; (8014410 <xPortStartScheduler+0x130>)
 80143b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80143ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80143bc:	4b14      	ldr	r3, [pc, #80]	; (8014410 <xPortStartScheduler+0x130>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	4a13      	ldr	r2, [pc, #76]	; (8014410 <xPortStartScheduler+0x130>)
 80143c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80143c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80143c8:	f000 f8d6 	bl	8014578 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80143cc:	4b11      	ldr	r3, [pc, #68]	; (8014414 <xPortStartScheduler+0x134>)
 80143ce:	2200      	movs	r2, #0
 80143d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80143d2:	f000 f8f5 	bl	80145c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80143d6:	4b10      	ldr	r3, [pc, #64]	; (8014418 <xPortStartScheduler+0x138>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	4a0f      	ldr	r2, [pc, #60]	; (8014418 <xPortStartScheduler+0x138>)
 80143dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80143e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80143e2:	f7ff ff69 	bl	80142b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80143e6:	f7fe ff75 	bl	80132d4 <vTaskSwitchContext>
	prvTaskExitError();
 80143ea:	f7ff ff27 	bl	801423c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80143ee:	2300      	movs	r3, #0
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3718      	adds	r7, #24
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}
 80143f8:	e000ed00 	.word	0xe000ed00
 80143fc:	410fc271 	.word	0x410fc271
 8014400:	410fc270 	.word	0x410fc270
 8014404:	e000e400 	.word	0xe000e400
 8014408:	20001408 	.word	0x20001408
 801440c:	2000140c 	.word	0x2000140c
 8014410:	e000ed20 	.word	0xe000ed20
 8014414:	200000d8 	.word	0x200000d8
 8014418:	e000ef34 	.word	0xe000ef34

0801441c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801441c:	b480      	push	{r7}
 801441e:	b083      	sub	sp, #12
 8014420:	af00      	add	r7, sp, #0
 8014422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014426:	f383 8811 	msr	BASEPRI, r3
 801442a:	f3bf 8f6f 	isb	sy
 801442e:	f3bf 8f4f 	dsb	sy
 8014432:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014434:	4b0e      	ldr	r3, [pc, #56]	; (8014470 <vPortEnterCritical+0x54>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	3301      	adds	r3, #1
 801443a:	4a0d      	ldr	r2, [pc, #52]	; (8014470 <vPortEnterCritical+0x54>)
 801443c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801443e:	4b0c      	ldr	r3, [pc, #48]	; (8014470 <vPortEnterCritical+0x54>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	2b01      	cmp	r3, #1
 8014444:	d10e      	bne.n	8014464 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014446:	4b0b      	ldr	r3, [pc, #44]	; (8014474 <vPortEnterCritical+0x58>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	b2db      	uxtb	r3, r3
 801444c:	2b00      	cmp	r3, #0
 801444e:	d009      	beq.n	8014464 <vPortEnterCritical+0x48>
 8014450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014454:	f383 8811 	msr	BASEPRI, r3
 8014458:	f3bf 8f6f 	isb	sy
 801445c:	f3bf 8f4f 	dsb	sy
 8014460:	603b      	str	r3, [r7, #0]
 8014462:	e7fe      	b.n	8014462 <vPortEnterCritical+0x46>
	}
}
 8014464:	bf00      	nop
 8014466:	370c      	adds	r7, #12
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr
 8014470:	200000d8 	.word	0x200000d8
 8014474:	e000ed04 	.word	0xe000ed04

08014478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801447e:	4b11      	ldr	r3, [pc, #68]	; (80144c4 <vPortExitCritical+0x4c>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d109      	bne.n	801449a <vPortExitCritical+0x22>
 8014486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801448a:	f383 8811 	msr	BASEPRI, r3
 801448e:	f3bf 8f6f 	isb	sy
 8014492:	f3bf 8f4f 	dsb	sy
 8014496:	607b      	str	r3, [r7, #4]
 8014498:	e7fe      	b.n	8014498 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801449a:	4b0a      	ldr	r3, [pc, #40]	; (80144c4 <vPortExitCritical+0x4c>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	3b01      	subs	r3, #1
 80144a0:	4a08      	ldr	r2, [pc, #32]	; (80144c4 <vPortExitCritical+0x4c>)
 80144a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80144a4:	4b07      	ldr	r3, [pc, #28]	; (80144c4 <vPortExitCritical+0x4c>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d104      	bne.n	80144b6 <vPortExitCritical+0x3e>
 80144ac:	2300      	movs	r3, #0
 80144ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80144b6:	bf00      	nop
 80144b8:	370c      	adds	r7, #12
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop
 80144c4:	200000d8 	.word	0x200000d8
	...

080144d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80144d0:	f3ef 8009 	mrs	r0, PSP
 80144d4:	f3bf 8f6f 	isb	sy
 80144d8:	4b15      	ldr	r3, [pc, #84]	; (8014530 <pxCurrentTCBConst>)
 80144da:	681a      	ldr	r2, [r3, #0]
 80144dc:	f01e 0f10 	tst.w	lr, #16
 80144e0:	bf08      	it	eq
 80144e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80144e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ea:	6010      	str	r0, [r2, #0]
 80144ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80144f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80144f4:	f380 8811 	msr	BASEPRI, r0
 80144f8:	f3bf 8f4f 	dsb	sy
 80144fc:	f3bf 8f6f 	isb	sy
 8014500:	f7fe fee8 	bl	80132d4 <vTaskSwitchContext>
 8014504:	f04f 0000 	mov.w	r0, #0
 8014508:	f380 8811 	msr	BASEPRI, r0
 801450c:	bc09      	pop	{r0, r3}
 801450e:	6819      	ldr	r1, [r3, #0]
 8014510:	6808      	ldr	r0, [r1, #0]
 8014512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014516:	f01e 0f10 	tst.w	lr, #16
 801451a:	bf08      	it	eq
 801451c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014520:	f380 8809 	msr	PSP, r0
 8014524:	f3bf 8f6f 	isb	sy
 8014528:	4770      	bx	lr
 801452a:	bf00      	nop
 801452c:	f3af 8000 	nop.w

08014530 <pxCurrentTCBConst>:
 8014530:	20000ddc 	.word	0x20000ddc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014534:	bf00      	nop
 8014536:	bf00      	nop

08014538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
	__asm volatile
 801453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014542:	f383 8811 	msr	BASEPRI, r3
 8014546:	f3bf 8f6f 	isb	sy
 801454a:	f3bf 8f4f 	dsb	sy
 801454e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014550:	f7fe fe08 	bl	8013164 <xTaskIncrementTick>
 8014554:	4603      	mov	r3, r0
 8014556:	2b00      	cmp	r3, #0
 8014558:	d003      	beq.n	8014562 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801455a:	4b06      	ldr	r3, [pc, #24]	; (8014574 <xPortSysTickHandler+0x3c>)
 801455c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014560:	601a      	str	r2, [r3, #0]
 8014562:	2300      	movs	r3, #0
 8014564:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801456c:	bf00      	nop
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}
 8014574:	e000ed04 	.word	0xe000ed04

08014578 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014578:	b480      	push	{r7}
 801457a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801457c:	4b0b      	ldr	r3, [pc, #44]	; (80145ac <vPortSetupTimerInterrupt+0x34>)
 801457e:	2200      	movs	r2, #0
 8014580:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014582:	4b0b      	ldr	r3, [pc, #44]	; (80145b0 <vPortSetupTimerInterrupt+0x38>)
 8014584:	2200      	movs	r2, #0
 8014586:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014588:	4b0a      	ldr	r3, [pc, #40]	; (80145b4 <vPortSetupTimerInterrupt+0x3c>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	4a0a      	ldr	r2, [pc, #40]	; (80145b8 <vPortSetupTimerInterrupt+0x40>)
 801458e:	fba2 2303 	umull	r2, r3, r2, r3
 8014592:	099b      	lsrs	r3, r3, #6
 8014594:	4a09      	ldr	r2, [pc, #36]	; (80145bc <vPortSetupTimerInterrupt+0x44>)
 8014596:	3b01      	subs	r3, #1
 8014598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801459a:	4b04      	ldr	r3, [pc, #16]	; (80145ac <vPortSetupTimerInterrupt+0x34>)
 801459c:	2207      	movs	r2, #7
 801459e:	601a      	str	r2, [r3, #0]
}
 80145a0:	bf00      	nop
 80145a2:	46bd      	mov	sp, r7
 80145a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a8:	4770      	bx	lr
 80145aa:	bf00      	nop
 80145ac:	e000e010 	.word	0xe000e010
 80145b0:	e000e018 	.word	0xe000e018
 80145b4:	2000001c 	.word	0x2000001c
 80145b8:	10624dd3 	.word	0x10624dd3
 80145bc:	e000e014 	.word	0xe000e014

080145c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80145c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80145d0 <vPortEnableVFP+0x10>
 80145c4:	6801      	ldr	r1, [r0, #0]
 80145c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80145ca:	6001      	str	r1, [r0, #0]
 80145cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80145ce:	bf00      	nop
 80145d0:	e000ed88 	.word	0xe000ed88

080145d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80145d4:	b480      	push	{r7}
 80145d6:	b085      	sub	sp, #20
 80145d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80145da:	f3ef 8305 	mrs	r3, IPSR
 80145de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	2b0f      	cmp	r3, #15
 80145e4:	d913      	bls.n	801460e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80145e6:	4a16      	ldr	r2, [pc, #88]	; (8014640 <vPortValidateInterruptPriority+0x6c>)
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	4413      	add	r3, r2
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80145f0:	4b14      	ldr	r3, [pc, #80]	; (8014644 <vPortValidateInterruptPriority+0x70>)
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	7afa      	ldrb	r2, [r7, #11]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d209      	bcs.n	801460e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80145fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fe:	f383 8811 	msr	BASEPRI, r3
 8014602:	f3bf 8f6f 	isb	sy
 8014606:	f3bf 8f4f 	dsb	sy
 801460a:	607b      	str	r3, [r7, #4]
 801460c:	e7fe      	b.n	801460c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801460e:	4b0e      	ldr	r3, [pc, #56]	; (8014648 <vPortValidateInterruptPriority+0x74>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014616:	4b0d      	ldr	r3, [pc, #52]	; (801464c <vPortValidateInterruptPriority+0x78>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	429a      	cmp	r2, r3
 801461c:	d909      	bls.n	8014632 <vPortValidateInterruptPriority+0x5e>
 801461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014622:	f383 8811 	msr	BASEPRI, r3
 8014626:	f3bf 8f6f 	isb	sy
 801462a:	f3bf 8f4f 	dsb	sy
 801462e:	603b      	str	r3, [r7, #0]
 8014630:	e7fe      	b.n	8014630 <vPortValidateInterruptPriority+0x5c>
	}
 8014632:	bf00      	nop
 8014634:	3714      	adds	r7, #20
 8014636:	46bd      	mov	sp, r7
 8014638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463c:	4770      	bx	lr
 801463e:	bf00      	nop
 8014640:	e000e3f0 	.word	0xe000e3f0
 8014644:	20001408 	.word	0x20001408
 8014648:	e000ed0c 	.word	0xe000ed0c
 801464c:	2000140c 	.word	0x2000140c

08014650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b08a      	sub	sp, #40	; 0x28
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014658:	2300      	movs	r3, #0
 801465a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801465c:	f7fe fcc8 	bl	8012ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014660:	4b57      	ldr	r3, [pc, #348]	; (80147c0 <pvPortMalloc+0x170>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d101      	bne.n	801466c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014668:	f000 f90c 	bl	8014884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801466c:	4b55      	ldr	r3, [pc, #340]	; (80147c4 <pvPortMalloc+0x174>)
 801466e:	681a      	ldr	r2, [r3, #0]
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	4013      	ands	r3, r2
 8014674:	2b00      	cmp	r3, #0
 8014676:	f040 808c 	bne.w	8014792 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d01c      	beq.n	80146ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014680:	2208      	movs	r2, #8
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	4413      	add	r3, r2
 8014686:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f003 0307 	and.w	r3, r3, #7
 801468e:	2b00      	cmp	r3, #0
 8014690:	d013      	beq.n	80146ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f023 0307 	bic.w	r3, r3, #7
 8014698:	3308      	adds	r3, #8
 801469a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f003 0307 	and.w	r3, r3, #7
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d009      	beq.n	80146ba <pvPortMalloc+0x6a>
 80146a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146aa:	f383 8811 	msr	BASEPRI, r3
 80146ae:	f3bf 8f6f 	isb	sy
 80146b2:	f3bf 8f4f 	dsb	sy
 80146b6:	617b      	str	r3, [r7, #20]
 80146b8:	e7fe      	b.n	80146b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d068      	beq.n	8014792 <pvPortMalloc+0x142>
 80146c0:	4b41      	ldr	r3, [pc, #260]	; (80147c8 <pvPortMalloc+0x178>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d863      	bhi.n	8014792 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80146ca:	4b40      	ldr	r3, [pc, #256]	; (80147cc <pvPortMalloc+0x17c>)
 80146cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80146ce:	4b3f      	ldr	r3, [pc, #252]	; (80147cc <pvPortMalloc+0x17c>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146d4:	e004      	b.n	80146e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80146d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80146da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	687a      	ldr	r2, [r7, #4]
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d903      	bls.n	80146f2 <pvPortMalloc+0xa2>
 80146ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d1f1      	bne.n	80146d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80146f2:	4b33      	ldr	r3, [pc, #204]	; (80147c0 <pvPortMalloc+0x170>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d04a      	beq.n	8014792 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80146fc:	6a3b      	ldr	r3, [r7, #32]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2208      	movs	r2, #8
 8014702:	4413      	add	r3, r2
 8014704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	6a3b      	ldr	r3, [r7, #32]
 801470c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014710:	685a      	ldr	r2, [r3, #4]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	1ad2      	subs	r2, r2, r3
 8014716:	2308      	movs	r3, #8
 8014718:	005b      	lsls	r3, r3, #1
 801471a:	429a      	cmp	r2, r3
 801471c:	d91e      	bls.n	801475c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801471e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	4413      	add	r3, r2
 8014724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014726:	69bb      	ldr	r3, [r7, #24]
 8014728:	f003 0307 	and.w	r3, r3, #7
 801472c:	2b00      	cmp	r3, #0
 801472e:	d009      	beq.n	8014744 <pvPortMalloc+0xf4>
 8014730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014734:	f383 8811 	msr	BASEPRI, r3
 8014738:	f3bf 8f6f 	isb	sy
 801473c:	f3bf 8f4f 	dsb	sy
 8014740:	613b      	str	r3, [r7, #16]
 8014742:	e7fe      	b.n	8014742 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014746:	685a      	ldr	r2, [r3, #4]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	1ad2      	subs	r2, r2, r3
 801474c:	69bb      	ldr	r3, [r7, #24]
 801474e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014756:	69b8      	ldr	r0, [r7, #24]
 8014758:	f000 f8f6 	bl	8014948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801475c:	4b1a      	ldr	r3, [pc, #104]	; (80147c8 <pvPortMalloc+0x178>)
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	1ad3      	subs	r3, r2, r3
 8014766:	4a18      	ldr	r2, [pc, #96]	; (80147c8 <pvPortMalloc+0x178>)
 8014768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801476a:	4b17      	ldr	r3, [pc, #92]	; (80147c8 <pvPortMalloc+0x178>)
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	4b18      	ldr	r3, [pc, #96]	; (80147d0 <pvPortMalloc+0x180>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	429a      	cmp	r2, r3
 8014774:	d203      	bcs.n	801477e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014776:	4b14      	ldr	r3, [pc, #80]	; (80147c8 <pvPortMalloc+0x178>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4a15      	ldr	r2, [pc, #84]	; (80147d0 <pvPortMalloc+0x180>)
 801477c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	685a      	ldr	r2, [r3, #4]
 8014782:	4b10      	ldr	r3, [pc, #64]	; (80147c4 <pvPortMalloc+0x174>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	431a      	orrs	r2, r3
 8014788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478e:	2200      	movs	r2, #0
 8014790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014792:	f7fe fc3b 	bl	801300c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014796:	69fb      	ldr	r3, [r7, #28]
 8014798:	f003 0307 	and.w	r3, r3, #7
 801479c:	2b00      	cmp	r3, #0
 801479e:	d009      	beq.n	80147b4 <pvPortMalloc+0x164>
 80147a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147a4:	f383 8811 	msr	BASEPRI, r3
 80147a8:	f3bf 8f6f 	isb	sy
 80147ac:	f3bf 8f4f 	dsb	sy
 80147b0:	60fb      	str	r3, [r7, #12]
 80147b2:	e7fe      	b.n	80147b2 <pvPortMalloc+0x162>
	return pvReturn;
 80147b4:	69fb      	ldr	r3, [r7, #28]
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	3728      	adds	r7, #40	; 0x28
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}
 80147be:	bf00      	nop
 80147c0:	2000b418 	.word	0x2000b418
 80147c4:	2000b424 	.word	0x2000b424
 80147c8:	2000b41c 	.word	0x2000b41c
 80147cc:	2000b410 	.word	0x2000b410
 80147d0:	2000b420 	.word	0x2000b420

080147d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b086      	sub	sp, #24
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d046      	beq.n	8014874 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80147e6:	2308      	movs	r3, #8
 80147e8:	425b      	negs	r3, r3
 80147ea:	697a      	ldr	r2, [r7, #20]
 80147ec:	4413      	add	r3, r2
 80147ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80147f4:	693b      	ldr	r3, [r7, #16]
 80147f6:	685a      	ldr	r2, [r3, #4]
 80147f8:	4b20      	ldr	r3, [pc, #128]	; (801487c <vPortFree+0xa8>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	4013      	ands	r3, r2
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d109      	bne.n	8014816 <vPortFree+0x42>
 8014802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014806:	f383 8811 	msr	BASEPRI, r3
 801480a:	f3bf 8f6f 	isb	sy
 801480e:	f3bf 8f4f 	dsb	sy
 8014812:	60fb      	str	r3, [r7, #12]
 8014814:	e7fe      	b.n	8014814 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d009      	beq.n	8014832 <vPortFree+0x5e>
 801481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014822:	f383 8811 	msr	BASEPRI, r3
 8014826:	f3bf 8f6f 	isb	sy
 801482a:	f3bf 8f4f 	dsb	sy
 801482e:	60bb      	str	r3, [r7, #8]
 8014830:	e7fe      	b.n	8014830 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014832:	693b      	ldr	r3, [r7, #16]
 8014834:	685a      	ldr	r2, [r3, #4]
 8014836:	4b11      	ldr	r3, [pc, #68]	; (801487c <vPortFree+0xa8>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	4013      	ands	r3, r2
 801483c:	2b00      	cmp	r3, #0
 801483e:	d019      	beq.n	8014874 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d115      	bne.n	8014874 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	685a      	ldr	r2, [r3, #4]
 801484c:	4b0b      	ldr	r3, [pc, #44]	; (801487c <vPortFree+0xa8>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	43db      	mvns	r3, r3
 8014852:	401a      	ands	r2, r3
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014858:	f7fe fbca 	bl	8012ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	685a      	ldr	r2, [r3, #4]
 8014860:	4b07      	ldr	r3, [pc, #28]	; (8014880 <vPortFree+0xac>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	4413      	add	r3, r2
 8014866:	4a06      	ldr	r2, [pc, #24]	; (8014880 <vPortFree+0xac>)
 8014868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801486a:	6938      	ldr	r0, [r7, #16]
 801486c:	f000 f86c 	bl	8014948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014870:	f7fe fbcc 	bl	801300c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014874:	bf00      	nop
 8014876:	3718      	adds	r7, #24
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	2000b424 	.word	0x2000b424
 8014880:	2000b41c 	.word	0x2000b41c

08014884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014884:	b480      	push	{r7}
 8014886:	b085      	sub	sp, #20
 8014888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801488a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 801488e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014890:	4b27      	ldr	r3, [pc, #156]	; (8014930 <prvHeapInit+0xac>)
 8014892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f003 0307 	and.w	r3, r3, #7
 801489a:	2b00      	cmp	r3, #0
 801489c:	d00c      	beq.n	80148b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	3307      	adds	r3, #7
 80148a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	f023 0307 	bic.w	r3, r3, #7
 80148aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80148ac:	68ba      	ldr	r2, [r7, #8]
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	1ad3      	subs	r3, r2, r3
 80148b2:	4a1f      	ldr	r2, [pc, #124]	; (8014930 <prvHeapInit+0xac>)
 80148b4:	4413      	add	r3, r2
 80148b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80148bc:	4a1d      	ldr	r2, [pc, #116]	; (8014934 <prvHeapInit+0xb0>)
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80148c2:	4b1c      	ldr	r3, [pc, #112]	; (8014934 <prvHeapInit+0xb0>)
 80148c4:	2200      	movs	r2, #0
 80148c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	68ba      	ldr	r2, [r7, #8]
 80148cc:	4413      	add	r3, r2
 80148ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80148d0:	2208      	movs	r2, #8
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	1a9b      	subs	r3, r3, r2
 80148d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	f023 0307 	bic.w	r3, r3, #7
 80148de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	4a15      	ldr	r2, [pc, #84]	; (8014938 <prvHeapInit+0xb4>)
 80148e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80148e6:	4b14      	ldr	r3, [pc, #80]	; (8014938 <prvHeapInit+0xb4>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2200      	movs	r2, #0
 80148ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80148ee:	4b12      	ldr	r3, [pc, #72]	; (8014938 <prvHeapInit+0xb4>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2200      	movs	r2, #0
 80148f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	68fa      	ldr	r2, [r7, #12]
 80148fe:	1ad2      	subs	r2, r2, r3
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014904:	4b0c      	ldr	r3, [pc, #48]	; (8014938 <prvHeapInit+0xb4>)
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	4a0a      	ldr	r2, [pc, #40]	; (801493c <prvHeapInit+0xb8>)
 8014912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	4a09      	ldr	r2, [pc, #36]	; (8014940 <prvHeapInit+0xbc>)
 801491a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801491c:	4b09      	ldr	r3, [pc, #36]	; (8014944 <prvHeapInit+0xc0>)
 801491e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014922:	601a      	str	r2, [r3, #0]
}
 8014924:	bf00      	nop
 8014926:	3714      	adds	r7, #20
 8014928:	46bd      	mov	sp, r7
 801492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492e:	4770      	bx	lr
 8014930:	20001410 	.word	0x20001410
 8014934:	2000b410 	.word	0x2000b410
 8014938:	2000b418 	.word	0x2000b418
 801493c:	2000b420 	.word	0x2000b420
 8014940:	2000b41c 	.word	0x2000b41c
 8014944:	2000b424 	.word	0x2000b424

08014948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014948:	b480      	push	{r7}
 801494a:	b085      	sub	sp, #20
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014950:	4b28      	ldr	r3, [pc, #160]	; (80149f4 <prvInsertBlockIntoFreeList+0xac>)
 8014952:	60fb      	str	r3, [r7, #12]
 8014954:	e002      	b.n	801495c <prvInsertBlockIntoFreeList+0x14>
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	60fb      	str	r3, [r7, #12]
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	429a      	cmp	r2, r3
 8014964:	d8f7      	bhi.n	8014956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	68ba      	ldr	r2, [r7, #8]
 8014970:	4413      	add	r3, r2
 8014972:	687a      	ldr	r2, [r7, #4]
 8014974:	429a      	cmp	r2, r3
 8014976:	d108      	bne.n	801498a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	685a      	ldr	r2, [r3, #4]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	685b      	ldr	r3, [r3, #4]
 8014980:	441a      	add	r2, r3
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	68ba      	ldr	r2, [r7, #8]
 8014994:	441a      	add	r2, r3
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	429a      	cmp	r2, r3
 801499c:	d118      	bne.n	80149d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	4b15      	ldr	r3, [pc, #84]	; (80149f8 <prvInsertBlockIntoFreeList+0xb0>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d00d      	beq.n	80149c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	685a      	ldr	r2, [r3, #4]
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	685b      	ldr	r3, [r3, #4]
 80149b4:	441a      	add	r2, r3
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	601a      	str	r2, [r3, #0]
 80149c4:	e008      	b.n	80149d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80149c6:	4b0c      	ldr	r3, [pc, #48]	; (80149f8 <prvInsertBlockIntoFreeList+0xb0>)
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	601a      	str	r2, [r3, #0]
 80149ce:	e003      	b.n	80149d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80149d8:	68fa      	ldr	r2, [r7, #12]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d002      	beq.n	80149e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80149e6:	bf00      	nop
 80149e8:	3714      	adds	r7, #20
 80149ea:	46bd      	mov	sp, r7
 80149ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f0:	4770      	bx	lr
 80149f2:	bf00      	nop
 80149f4:	2000b410 	.word	0x2000b410
 80149f8:	2000b418 	.word	0x2000b418

080149fc <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b08c      	sub	sp, #48	; 0x30
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	603b      	str	r3, [r7, #0]
 8014a04:	4603      	mov	r3, r0
 8014a06:	71fb      	strb	r3, [r7, #7]
 8014a08:	460b      	mov	r3, r1
 8014a0a:	71bb      	strb	r3, [r7, #6]
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8014a10:	79fb      	ldrb	r3, [r7, #7]
 8014a12:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8014a14:	79bb      	ldrb	r3, [r7, #6]
 8014a16:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8014a18:	797b      	ldrb	r3, [r7, #5]
 8014a1a:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8014a1c:	f107 030c 	add.w	r3, r7, #12
 8014a20:	2207      	movs	r2, #7
 8014a22:	2100      	movs	r1, #0
 8014a24:	4618      	mov	r0, r3
 8014a26:	f001 ffd5 	bl	80169d4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8014a2a:	f107 0318 	add.w	r3, r7, #24
 8014a2e:	2218      	movs	r2, #24
 8014a30:	2100      	movs	r1, #0
 8014a32:	4618      	mov	r0, r3
 8014a34:	f001 ffce 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8014a38:	233f      	movs	r3, #63	; 0x3f
 8014a3a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8014a3c:	238a      	movs	r3, #138	; 0x8a
 8014a3e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8014a40:	f107 0314 	add.w	r3, r7, #20
 8014a44:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8014a46:	2303      	movs	r3, #3
 8014a48:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8014a4a:	f107 030c 	add.w	r3, r7, #12
 8014a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8014a50:	2307      	movs	r3, #7
 8014a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8014a54:	f107 0318 	add.w	r3, r7, #24
 8014a58:	2100      	movs	r1, #0
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f000 fe86 	bl	801576c <hci_send_req>
 8014a60:	4603      	mov	r3, r0
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	da01      	bge.n	8014a6a <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8014a66:	23ff      	movs	r3, #255	; 0xff
 8014a68:	e014      	b.n	8014a94 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8014a6a:	7b3b      	ldrb	r3, [r7, #12]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d001      	beq.n	8014a74 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8014a70:	7b3b      	ldrb	r3, [r7, #12]
 8014a72:	e00f      	b.n	8014a94 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8014a74:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8014a78:	b29a      	uxth	r2, r3
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8014a7e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8014a82:	b29a      	uxth	r2, r3
 8014a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a86:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8014a88:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8014a8c:	b29a      	uxth	r2, r3
 8014a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a90:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8014a92:	2300      	movs	r3, #0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3730      	adds	r7, #48	; 0x30
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}

08014a9c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8014a9c:	b590      	push	{r4, r7, lr}
 8014a9e:	b095      	sub	sp, #84	; 0x54
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	4608      	mov	r0, r1
 8014aa6:	4611      	mov	r1, r2
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	4623      	mov	r3, r4
 8014aac:	71fb      	strb	r3, [r7, #7]
 8014aae:	4603      	mov	r3, r0
 8014ab0:	80bb      	strh	r3, [r7, #4]
 8014ab2:	460b      	mov	r3, r1
 8014ab4:	807b      	strh	r3, [r7, #2]
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8014aba:	2300      	movs	r3, #0
 8014abc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8014ac0:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8014ac4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8014ac8:	4413      	add	r3, r2
 8014aca:	330e      	adds	r3, #14
 8014acc:	2b28      	cmp	r3, #40	; 0x28
 8014ace:	d901      	bls.n	8014ad4 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8014ad0:	2342      	movs	r3, #66	; 0x42
 8014ad2:	e0ce      	b.n	8014c72 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8014ad4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014ad8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014adc:	4413      	add	r3, r2
 8014ade:	79fa      	ldrb	r2, [r7, #7]
 8014ae0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8014ae4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014ae8:	3301      	adds	r3, #1
 8014aea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8014aee:	88bb      	ldrh	r3, [r7, #4]
 8014af0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8014af2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014af6:	f107 0208 	add.w	r2, r7, #8
 8014afa:	4413      	add	r3, r2
 8014afc:	88ba      	ldrh	r2, [r7, #4]
 8014afe:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8014b00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b04:	3302      	adds	r3, #2
 8014b06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8014b0a:	887b      	ldrh	r3, [r7, #2]
 8014b0c:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8014b0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b12:	f107 0208 	add.w	r2, r7, #8
 8014b16:	4413      	add	r3, r2
 8014b18:	887a      	ldrh	r2, [r7, #2]
 8014b1a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8014b1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b20:	3302      	adds	r3, #2
 8014b22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8014b26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b2a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014b2e:	4413      	add	r3, r2
 8014b30:	79ba      	ldrb	r2, [r7, #6]
 8014b32:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8014b36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8014b40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014b48:	4413      	add	r3, r2
 8014b4a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8014b4e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8014b52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b56:	3301      	adds	r3, #1
 8014b58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8014b5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b60:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014b64:	4413      	add	r3, r2
 8014b66:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8014b6a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8014b6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b72:	3301      	adds	r3, #1
 8014b74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8014b78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b7c:	f107 0208 	add.w	r2, r7, #8
 8014b80:	4413      	add	r3, r2
 8014b82:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8014b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f001 feff 	bl	801698c <memcpy>
  indx +=  LocalNameLen;
 8014b8e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8014b92:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8014b96:	4413      	add	r3, r2
 8014b98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8014b9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014ba0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014ba4:	4413      	add	r3, r2
 8014ba6:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8014baa:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8014bae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8014bb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014bbc:	f107 0208 	add.w	r2, r7, #8
 8014bc0:	4413      	add	r3, r2
 8014bc2:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8014bc6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f001 fedf 	bl	801698c <memcpy>
  indx +=  ServiceUUIDLen;  
 8014bce:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8014bd2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8014bd6:	4413      	add	r3, r2
 8014bd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8014bdc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014be0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8014be4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014be8:	f107 0208 	add.w	r2, r7, #8
 8014bec:	4413      	add	r3, r2
 8014bee:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8014bf2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8014bf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014bf8:	3302      	adds	r3, #2
 8014bfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8014bfe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8014c02:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8014c06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014c0a:	f107 0208 	add.w	r2, r7, #8
 8014c0e:	4413      	add	r3, r2
 8014c10:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8014c14:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8014c16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014c1a:	3302      	adds	r3, #2
 8014c1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8014c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014c24:	2218      	movs	r2, #24
 8014c26:	2100      	movs	r1, #0
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f001 fed3 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8014c2e:	233f      	movs	r3, #63	; 0x3f
 8014c30:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8014c32:	2383      	movs	r3, #131	; 0x83
 8014c34:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8014c36:	f107 0308 	add.w	r3, r7, #8
 8014c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8014c3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014c40:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8014c42:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8014c46:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8014c48:	2301      	movs	r3, #1
 8014c4a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8014c4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014c50:	2100      	movs	r1, #0
 8014c52:	4618      	mov	r0, r3
 8014c54:	f000 fd8a 	bl	801576c <hci_send_req>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	da01      	bge.n	8014c62 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8014c5e:	23ff      	movs	r3, #255	; 0xff
 8014c60:	e007      	b.n	8014c72 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8014c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d002      	beq.n	8014c70 <aci_gap_set_discoverable+0x1d4>
    return status;
 8014c6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014c6e:	e000      	b.n	8014c72 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3754      	adds	r7, #84	; 0x54
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd90      	pop	{r4, r7, pc}

08014c7a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8014c7a:	b590      	push	{r4, r7, lr}
 8014c7c:	b091      	sub	sp, #68	; 0x44
 8014c7e:	af00      	add	r7, sp, #0
 8014c80:	603a      	str	r2, [r7, #0]
 8014c82:	461a      	mov	r2, r3
 8014c84:	4603      	mov	r3, r0
 8014c86:	71fb      	strb	r3, [r7, #7]
 8014c88:	460b      	mov	r3, r1
 8014c8a:	71bb      	strb	r3, [r7, #6]
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8014c90:	79fb      	ldrb	r3, [r7, #7]
 8014c92:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8014c94:	79bb      	ldrb	r3, [r7, #6]
 8014c96:	737b      	strb	r3, [r7, #13]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8014c98:	683a      	ldr	r2, [r7, #0]
 8014c9a:	f107 030e 	add.w	r3, r7, #14
 8014c9e:	6814      	ldr	r4, [r2, #0]
 8014ca0:	6850      	ldr	r0, [r2, #4]
 8014ca2:	6891      	ldr	r1, [r2, #8]
 8014ca4:	68d2      	ldr	r2, [r2, #12]
 8014ca6:	601c      	str	r4, [r3, #0]
 8014ca8:	6058      	str	r0, [r3, #4]
 8014caa:	6099      	str	r1, [r3, #8]
 8014cac:	60da      	str	r2, [r3, #12]
  cp.min_encryption_key_size = min_encryption_key_size;
 8014cae:	797b      	ldrb	r3, [r7, #5]
 8014cb0:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8014cb2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8014cb6:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8014cb8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8014cbc:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8014cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014cc2:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8014cc6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014cca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8014cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014cd2:	2218      	movs	r2, #24
 8014cd4:	2100      	movs	r1, #0
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f001 fe7c 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8014cdc:	233f      	movs	r3, #63	; 0x3f
 8014cde:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8014ce0:	2386      	movs	r3, #134	; 0x86
 8014ce2:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8014ce4:	f107 030c 	add.w	r3, r7, #12
 8014ce8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8014cea:	231a      	movs	r3, #26
 8014cec:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8014cee:	f107 030b 	add.w	r3, r7, #11
 8014cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8014cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f000 fd34 	bl	801576c <hci_send_req>
 8014d04:	4603      	mov	r3, r0
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	da01      	bge.n	8014d0e <aci_gap_set_auth_requirement+0x94>
    return BLE_STATUS_TIMEOUT;
 8014d0a:	23ff      	movs	r3, #255	; 0xff
 8014d0c:	e005      	b.n	8014d1a <aci_gap_set_auth_requirement+0xa0>

  if (status) {
 8014d0e:	7afb      	ldrb	r3, [r7, #11]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d001      	beq.n	8014d18 <aci_gap_set_auth_requirement+0x9e>
    return status;
 8014d14:	7afb      	ldrb	r3, [r7, #11]
 8014d16:	e000      	b.n	8014d1a <aci_gap_set_auth_requirement+0xa0>
  }
    
  return 0;
 8014d18:	2300      	movs	r3, #0
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3744      	adds	r7, #68	; 0x44
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd90      	pop	{r4, r7, pc}

08014d22 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8014d22:	b580      	push	{r7, lr}
 8014d24:	b092      	sub	sp, #72	; 0x48
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	4603      	mov	r3, r0
 8014d2a:	6039      	str	r1, [r7, #0]
 8014d2c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8014d34:	79fb      	ldrb	r3, [r7, #7]
 8014d36:	2b1f      	cmp	r3, #31
 8014d38:	d901      	bls.n	8014d3e <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8014d3a:	2342      	movs	r3, #66	; 0x42
 8014d3c:	e03f      	b.n	8014dbe <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 8014d3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d42:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014d46:	4413      	add	r3, r2
 8014d48:	79fa      	ldrb	r2, [r7, #7]
 8014d4a:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8014d4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d52:	3301      	adds	r3, #1
 8014d54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8014d58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d5c:	f107 0208 	add.w	r2, r7, #8
 8014d60:	4413      	add	r3, r2
 8014d62:	79fa      	ldrb	r2, [r7, #7]
 8014d64:	6839      	ldr	r1, [r7, #0]
 8014d66:	4618      	mov	r0, r3
 8014d68:	f001 fe10 	bl	801698c <memcpy>
  indx +=  AdvLen;
 8014d6c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8014d70:	79fb      	ldrb	r3, [r7, #7]
 8014d72:	4413      	add	r3, r2
 8014d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8014d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d7c:	2218      	movs	r2, #24
 8014d7e:	2100      	movs	r1, #0
 8014d80:	4618      	mov	r0, r3
 8014d82:	f001 fe27 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8014d86:	233f      	movs	r3, #63	; 0x3f
 8014d88:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8014d8a:	238e      	movs	r3, #142	; 0x8e
 8014d8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8014d8e:	f107 0308 	add.w	r3, r7, #8
 8014d92:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8014d94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d98:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 8014d9a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8014d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 8014da0:	2301      	movs	r3, #1
 8014da2:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8014da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014da8:	2100      	movs	r1, #0
 8014daa:	4618      	mov	r0, r3
 8014dac:	f000 fcde 	bl	801576c <hci_send_req>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	da01      	bge.n	8014dba <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 8014db6:	23ff      	movs	r3, #255	; 0xff
 8014db8:	e001      	b.n	8014dbe <aci_gap_update_adv_data+0x9c>
    
  return status;
 8014dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3748      	adds	r7, #72	; 0x48
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}

08014dc6 <aci_gap_start_general_discovery_proc>:
  return status;
}

tBleStatus aci_gap_start_general_discovery_proc(uint16_t scanInterval, uint16_t scanWindow,
						uint8_t own_address_type, uint8_t filterDuplicates)
{
 8014dc6:	b590      	push	{r4, r7, lr}
 8014dc8:	b08d      	sub	sp, #52	; 0x34
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	4604      	mov	r4, r0
 8014dce:	4608      	mov	r0, r1
 8014dd0:	4611      	mov	r1, r2
 8014dd2:	461a      	mov	r2, r3
 8014dd4:	4623      	mov	r3, r4
 8014dd6:	80fb      	strh	r3, [r7, #6]
 8014dd8:	4603      	mov	r3, r0
 8014dda:	80bb      	strh	r3, [r7, #4]
 8014ddc:	460b      	mov	r3, r1
 8014dde:	70fb      	strb	r3, [r7, #3]
 8014de0:	4613      	mov	r3, r2
 8014de2:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  gap_start_general_discovery_proc_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8014de4:	88fb      	ldrh	r3, [r7, #6]
 8014de6:	823b      	strh	r3, [r7, #16]
  cp.scanWindow = htobs(scanWindow);
 8014de8:	88bb      	ldrh	r3, [r7, #4]
 8014dea:	827b      	strh	r3, [r7, #18]
  cp.own_address_type = own_address_type;
 8014dec:	78fb      	ldrb	r3, [r7, #3]
 8014dee:	753b      	strb	r3, [r7, #20]
  cp.filterDuplicates = filterDuplicates;
 8014df0:	78bb      	ldrb	r3, [r7, #2]
 8014df2:	757b      	strb	r3, [r7, #21]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8014df4:	f107 0318 	add.w	r3, r7, #24
 8014df8:	2218      	movs	r2, #24
 8014dfa:	2100      	movs	r1, #0
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f001 fde9 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8014e02:	233f      	movs	r3, #63	; 0x3f
 8014e04:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_START_GENERAL_DISCOVERY_PROC;
 8014e06:	2397      	movs	r3, #151	; 0x97
 8014e08:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8014e0a:	f107 0310 	add.w	r3, r7, #16
 8014e0e:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8014e10:	2306      	movs	r3, #6
 8014e12:	627b      	str	r3, [r7, #36]	; 0x24
  rq.event = EVT_CMD_STATUS;
 8014e14:	230f      	movs	r3, #15
 8014e16:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8014e18:	f107 030f 	add.w	r3, r7, #15
 8014e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = 1;
 8014e1e:	2301      	movs	r3, #1
 8014e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8014e22:	f107 0318 	add.w	r3, r7, #24
 8014e26:	2100      	movs	r1, #0
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f000 fc9f 	bl	801576c <hci_send_req>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	da01      	bge.n	8014e38 <aci_gap_start_general_discovery_proc+0x72>
    return BLE_STATUS_TIMEOUT;
 8014e34:	23ff      	movs	r3, #255	; 0xff
 8014e36:	e000      	b.n	8014e3a <aci_gap_start_general_discovery_proc+0x74>

  return status;
 8014e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3734      	adds	r7, #52	; 0x34
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd90      	pop	{r4, r7, pc}

08014e42 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8014e42:	b580      	push	{r7, lr}
 8014e44:	b088      	sub	sp, #32
 8014e46:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8014e48:	f107 0308 	add.w	r3, r7, #8
 8014e4c:	2218      	movs	r2, #24
 8014e4e:	2100      	movs	r1, #0
 8014e50:	4618      	mov	r0, r3
 8014e52:	f001 fdbf 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8014e56:	233f      	movs	r3, #63	; 0x3f
 8014e58:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8014e5a:	f240 1301 	movw	r3, #257	; 0x101
 8014e5e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014e60:	1dfb      	adds	r3, r7, #7
 8014e62:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014e64:	2301      	movs	r3, #1
 8014e66:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8014e68:	f107 0308 	add.w	r3, r7, #8
 8014e6c:	2100      	movs	r1, #0
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f000 fc7c 	bl	801576c <hci_send_req>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	da01      	bge.n	8014e7e <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8014e7a:	23ff      	movs	r3, #255	; 0xff
 8014e7c:	e000      	b.n	8014e80 <aci_gatt_init+0x3e>

  return status;
 8014e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3720      	adds	r7, #32
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}

08014e88 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b090      	sub	sp, #64	; 0x40
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6039      	str	r1, [r7, #0]
 8014e90:	4611      	mov	r1, r2
 8014e92:	461a      	mov	r2, r3
 8014e94:	4603      	mov	r3, r0
 8014e96:	71fb      	strb	r3, [r7, #7]
 8014e98:	460b      	mov	r3, r1
 8014e9a:	71bb      	strb	r3, [r7, #6]
 8014e9c:	4613      	mov	r3, r2
 8014e9e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8014ea6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8014eaa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014eae:	4413      	add	r3, r2
 8014eb0:	79fa      	ldrb	r2, [r7, #7]
 8014eb2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8014eb6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8014eba:	3301      	adds	r3, #1
 8014ebc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8014ec0:	79fb      	ldrb	r3, [r7, #7]
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d103      	bne.n	8014ece <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8014ec6:	2302      	movs	r3, #2
 8014ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014ecc:	e002      	b.n	8014ed4 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8014ece:	2310      	movs	r3, #16
 8014ed0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8014ed4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8014ed8:	f107 020c 	add.w	r2, r7, #12
 8014edc:	4413      	add	r3, r2
 8014ede:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014ee2:	6839      	ldr	r1, [r7, #0]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f001 fd51 	bl	801698c <memcpy>
  indx +=  uuid_len;
 8014eea:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8014eee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014ef2:	4413      	add	r3, r2
 8014ef4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8014ef8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8014efc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014f00:	4413      	add	r3, r2
 8014f02:	79ba      	ldrb	r2, [r7, #6]
 8014f04:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8014f08:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8014f12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8014f16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014f1a:	4413      	add	r3, r2
 8014f1c:	797a      	ldrb	r2, [r7, #5]
 8014f1e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8014f22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8014f26:	3301      	adds	r3, #1
 8014f28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8014f2c:	f107 0320 	add.w	r3, r7, #32
 8014f30:	2203      	movs	r2, #3
 8014f32:	2100      	movs	r1, #0
 8014f34:	4618      	mov	r0, r3
 8014f36:	f001 fd4d 	bl	80169d4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8014f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014f3e:	2218      	movs	r2, #24
 8014f40:	2100      	movs	r1, #0
 8014f42:	4618      	mov	r0, r3
 8014f44:	f001 fd46 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8014f48:	233f      	movs	r3, #63	; 0x3f
 8014f4a:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8014f4c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8014f50:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8014f52:	f107 030c 	add.w	r3, r7, #12
 8014f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8014f58:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8014f5c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8014f5e:	f107 0320 	add.w	r3, r7, #32
 8014f62:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8014f64:	2303      	movs	r3, #3
 8014f66:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8014f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014f6c:	2100      	movs	r1, #0
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f000 fbfc 	bl	801576c <hci_send_req>
 8014f74:	4603      	mov	r3, r0
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	da01      	bge.n	8014f7e <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 8014f7a:	23ff      	movs	r3, #255	; 0xff
 8014f7c:	e00c      	b.n	8014f98 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 8014f7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d002      	beq.n	8014f8c <aci_gatt_add_serv+0x104>
    return resp.status;
 8014f86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f8a:	e005      	b.n	8014f98 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 8014f8c:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8014f90:	b29a      	uxth	r2, r3
 8014f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f94:	801a      	strh	r2, [r3, #0]

  return 0;
 8014f96:	2300      	movs	r3, #0
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3740      	adds	r7, #64	; 0x40
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b092      	sub	sp, #72	; 0x48
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	603a      	str	r2, [r7, #0]
 8014fa8:	461a      	mov	r2, r3
 8014faa:	4603      	mov	r3, r0
 8014fac:	80fb      	strh	r3, [r7, #6]
 8014fae:	460b      	mov	r3, r1
 8014fb0:	717b      	strb	r3, [r7, #5]
 8014fb2:	4613      	mov	r3, r2
 8014fb4:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8014fbc:	88fb      	ldrh	r3, [r7, #6]
 8014fbe:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8014fc0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014fc4:	f107 020c 	add.w	r2, r7, #12
 8014fc8:	4413      	add	r3, r2
 8014fca:	88fa      	ldrh	r2, [r7, #6]
 8014fcc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8014fce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014fd2:	3302      	adds	r3, #2
 8014fd4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8014fd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014fdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014fe0:	4413      	add	r3, r2
 8014fe2:	797a      	ldrb	r2, [r7, #5]
 8014fe4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8014fe8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014fec:	3301      	adds	r3, #1
 8014fee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8014ff2:	797b      	ldrb	r3, [r7, #5]
 8014ff4:	2b01      	cmp	r3, #1
 8014ff6:	d103      	bne.n	8015000 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8014ff8:	2302      	movs	r3, #2
 8014ffa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014ffe:	e002      	b.n	8015006 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8015000:	2310      	movs	r3, #16
 8015002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8015006:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801500a:	f107 020c 	add.w	r2, r7, #12
 801500e:	4413      	add	r3, r2
 8015010:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8015014:	6839      	ldr	r1, [r7, #0]
 8015016:	4618      	mov	r0, r3
 8015018:	f001 fcb8 	bl	801698c <memcpy>
  indx +=  uuid_len;
 801501c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015020:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015024:	4413      	add	r3, r2
 8015026:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 801502a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801502e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015032:	4413      	add	r3, r2
 8015034:	793a      	ldrb	r2, [r7, #4]
 8015036:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 801503a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801503e:	3301      	adds	r3, #1
 8015040:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8015044:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015048:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801504c:	4413      	add	r3, r2
 801504e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8015052:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8015056:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801505a:	3301      	adds	r3, #1
 801505c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8015060:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015064:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015068:	4413      	add	r3, r2
 801506a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801506e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8015072:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015076:	3301      	adds	r3, #1
 8015078:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 801507c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015080:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015084:	4413      	add	r3, r2
 8015086:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801508a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 801508e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015092:	3301      	adds	r3, #1
 8015094:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8015098:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801509c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80150a0:	4413      	add	r3, r2
 80150a2:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80150a6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80150aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80150ae:	3301      	adds	r3, #1
 80150b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 80150b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80150b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80150bc:	4413      	add	r3, r2
 80150be:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80150c2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80150c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80150ca:	3301      	adds	r3, #1
 80150cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80150d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80150d4:	2203      	movs	r2, #3
 80150d6:	2100      	movs	r1, #0
 80150d8:	4618      	mov	r0, r3
 80150da:	f001 fc7b 	bl	80169d4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80150de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150e2:	2218      	movs	r2, #24
 80150e4:	2100      	movs	r1, #0
 80150e6:	4618      	mov	r0, r3
 80150e8:	f001 fc74 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80150ec:	233f      	movs	r3, #63	; 0x3f
 80150ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80150f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80150f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 80150f6:	f107 030c 	add.w	r3, r7, #12
 80150fa:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 80150fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015100:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8015102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015106:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8015108:	2303      	movs	r3, #3
 801510a:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 801510c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015110:	2100      	movs	r1, #0
 8015112:	4618      	mov	r0, r3
 8015114:	f000 fb2a 	bl	801576c <hci_send_req>
 8015118:	4603      	mov	r3, r0
 801511a:	2b00      	cmp	r3, #0
 801511c:	da01      	bge.n	8015122 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 801511e:	23ff      	movs	r3, #255	; 0xff
 8015120:	e00c      	b.n	801513c <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8015122:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015126:	2b00      	cmp	r3, #0
 8015128:	d002      	beq.n	8015130 <aci_gatt_add_char+0x190>
    return resp.status;
 801512a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801512e:	e005      	b.n	801513c <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8015130:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8015134:	b29a      	uxth	r2, r3
 8015136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015138:	801a      	strh	r2, [r3, #0]

  return 0;
 801513a:	2300      	movs	r3, #0
}
 801513c:	4618      	mov	r0, r3
 801513e:	3748      	adds	r7, #72	; 0x48
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}

08015144 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8015144:	b590      	push	{r4, r7, lr}
 8015146:	b0ab      	sub	sp, #172	; 0xac
 8015148:	af00      	add	r7, sp, #0
 801514a:	4604      	mov	r4, r0
 801514c:	4608      	mov	r0, r1
 801514e:	4611      	mov	r1, r2
 8015150:	461a      	mov	r2, r3
 8015152:	4623      	mov	r3, r4
 8015154:	80fb      	strh	r3, [r7, #6]
 8015156:	4603      	mov	r3, r0
 8015158:	80bb      	strh	r3, [r7, #4]
 801515a:	460b      	mov	r3, r1
 801515c:	70fb      	strb	r3, [r7, #3]
 801515e:	4613      	mov	r3, r2
 8015160:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8015162:	2300      	movs	r3, #0
 8015164:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8015168:	78bb      	ldrb	r3, [r7, #2]
 801516a:	3306      	adds	r3, #6
 801516c:	2b80      	cmp	r3, #128	; 0x80
 801516e:	dd01      	ble.n	8015174 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 8015170:	2342      	movs	r3, #66	; 0x42
 8015172:	e076      	b.n	8015262 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 8015174:	88fb      	ldrh	r3, [r7, #6]
 8015176:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8015178:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801517c:	f107 0208 	add.w	r2, r7, #8
 8015180:	4413      	add	r3, r2
 8015182:	88fa      	ldrh	r2, [r7, #6]
 8015184:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8015186:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801518a:	3302      	adds	r3, #2
 801518c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8015190:	88bb      	ldrh	r3, [r7, #4]
 8015192:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8015194:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015198:	f107 0208 	add.w	r2, r7, #8
 801519c:	4413      	add	r3, r2
 801519e:	88ba      	ldrh	r2, [r7, #4]
 80151a0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80151a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80151a6:	3302      	adds	r3, #2
 80151a8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 80151ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80151b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80151b4:	4413      	add	r3, r2
 80151b6:	78fa      	ldrb	r2, [r7, #3]
 80151b8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80151bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80151c0:	3301      	adds	r3, #1
 80151c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 80151c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80151ca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80151ce:	4413      	add	r3, r2
 80151d0:	78ba      	ldrb	r2, [r7, #2]
 80151d2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80151d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80151da:	3301      	adds	r3, #1
 80151dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80151e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80151e4:	f107 0208 	add.w	r2, r7, #8
 80151e8:	4413      	add	r3, r2
 80151ea:	78ba      	ldrb	r2, [r7, #2]
 80151ec:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80151f0:	4618      	mov	r0, r3
 80151f2:	f001 fbcb 	bl	801698c <memcpy>
  indx +=  charValueLen;
 80151f6:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80151fa:	78bb      	ldrb	r3, [r7, #2]
 80151fc:	4413      	add	r3, r2
 80151fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015202:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015206:	2218      	movs	r2, #24
 8015208:	2100      	movs	r1, #0
 801520a:	4618      	mov	r0, r3
 801520c:	f001 fbe2 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8015210:	233f      	movs	r3, #63	; 0x3f
 8015212:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8015216:	f44f 7383 	mov.w	r3, #262	; 0x106
 801521a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 801521e:	f107 0308 	add.w	r3, r7, #8
 8015222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8015226:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801522a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 801522e:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8015232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8015236:	2301      	movs	r3, #1
 8015238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 801523c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015240:	2100      	movs	r1, #0
 8015242:	4618      	mov	r0, r3
 8015244:	f000 fa92 	bl	801576c <hci_send_req>
 8015248:	4603      	mov	r3, r0
 801524a:	2b00      	cmp	r3, #0
 801524c:	da01      	bge.n	8015252 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 801524e:	23ff      	movs	r3, #255	; 0xff
 8015250:	e007      	b.n	8015262 <aci_gatt_update_char_value+0x11e>

  if (status) {
 8015252:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8015256:	2b00      	cmp	r3, #0
 8015258:	d002      	beq.n	8015260 <aci_gatt_update_char_value+0x11c>
    return status;
 801525a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801525e:	e000      	b.n	8015262 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	37ac      	adds	r7, #172	; 0xac
 8015266:	46bd      	mov	sp, r7
 8015268:	bd90      	pop	{r4, r7, pc}

0801526a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 801526a:	b580      	push	{r7, lr}
 801526c:	b0aa      	sub	sp, #168	; 0xa8
 801526e:	af00      	add	r7, sp, #0
 8015270:	4603      	mov	r3, r0
 8015272:	603a      	str	r2, [r7, #0]
 8015274:	71fb      	strb	r3, [r7, #7]
 8015276:	460b      	mov	r3, r1
 8015278:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 801527a:	2300      	movs	r3, #0
 801527c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8015280:	79bb      	ldrb	r3, [r7, #6]
 8015282:	3302      	adds	r3, #2
 8015284:	2b80      	cmp	r3, #128	; 0x80
 8015286:	dd01      	ble.n	801528c <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 8015288:	2342      	movs	r3, #66	; 0x42
 801528a:	e052      	b.n	8015332 <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 801528c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015290:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015294:	4413      	add	r3, r2
 8015296:	79fa      	ldrb	r2, [r7, #7]
 8015298:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 801529c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80152a0:	3301      	adds	r3, #1
 80152a2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 80152a6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80152aa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80152ae:	4413      	add	r3, r2
 80152b0:	79ba      	ldrb	r2, [r7, #6]
 80152b2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80152b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80152ba:	3301      	adds	r3, #1
 80152bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80152c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80152c4:	f107 0208 	add.w	r2, r7, #8
 80152c8:	4413      	add	r3, r2
 80152ca:	79ba      	ldrb	r2, [r7, #6]
 80152cc:	6839      	ldr	r1, [r7, #0]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f001 fb5c 	bl	801698c <memcpy>
  indx +=  len;
 80152d4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80152d8:	79bb      	ldrb	r3, [r7, #6]
 80152da:	4413      	add	r3, r2
 80152dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80152e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80152e4:	2218      	movs	r2, #24
 80152e6:	2100      	movs	r1, #0
 80152e8:	4618      	mov	r0, r3
 80152ea:	f001 fb73 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80152ee:	233f      	movs	r3, #63	; 0x3f
 80152f0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80152f4:	230c      	movs	r3, #12
 80152f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80152fa:	f107 0308 	add.w	r3, r7, #8
 80152fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8015302:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015306:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 801530a:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 801530e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8015312:	2301      	movs	r3, #1
 8015314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8015318:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801531c:	2100      	movs	r1, #0
 801531e:	4618      	mov	r0, r3
 8015320:	f000 fa24 	bl	801576c <hci_send_req>
 8015324:	4603      	mov	r3, r0
 8015326:	2b00      	cmp	r3, #0
 8015328:	da01      	bge.n	801532e <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 801532a:	23ff      	movs	r3, #255	; 0xff
 801532c:	e001      	b.n	8015332 <aci_hal_write_config_data+0xc8>

  return status;
 801532e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8015332:	4618      	mov	r0, r3
 8015334:	37a8      	adds	r7, #168	; 0xa8
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}

0801533a <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 801533a:	b580      	push	{r7, lr}
 801533c:	b0ac      	sub	sp, #176	; 0xb0
 801533e:	af00      	add	r7, sp, #0
 8015340:	60ba      	str	r2, [r7, #8]
 8015342:	607b      	str	r3, [r7, #4]
 8015344:	4603      	mov	r3, r0
 8015346:	73fb      	strb	r3, [r7, #15]
 8015348:	460b      	mov	r3, r1
 801534a:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 801534c:	7bfb      	ldrb	r3, [r7, #15]
 801534e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015352:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015356:	2218      	movs	r2, #24
 8015358:	2100      	movs	r1, #0
 801535a:	4618      	mov	r0, r3
 801535c:	f001 fb3a 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8015360:	233f      	movs	r3, #63	; 0x3f
 8015362:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8015366:	230d      	movs	r3, #13
 8015368:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 801536c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 8015374:	2301      	movs	r3, #1
 8015376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 801537a:	f107 0314 	add.w	r3, r7, #20
 801537e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 8015382:	2380      	movs	r3, #128	; 0x80
 8015384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8015388:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801538c:	2100      	movs	r1, #0
 801538e:	4618      	mov	r0, r3
 8015390:	f000 f9ec 	bl	801576c <hci_send_req>
 8015394:	4603      	mov	r3, r0
 8015396:	2b00      	cmp	r3, #0
 8015398:	da01      	bge.n	801539e <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 801539a:	23ff      	movs	r3, #255	; 0xff
 801539c:	e01c      	b.n	80153d8 <aci_hal_read_config_data+0x9e>
  
  if(rp.status)
 801539e:	7d3b      	ldrb	r3, [r7, #20]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d001      	beq.n	80153a8 <aci_hal_read_config_data+0x6e>
    return rp.status;
 80153a4:	7d3b      	ldrb	r3, [r7, #20]
 80153a6:	e017      	b.n	80153d8 <aci_hal_read_config_data+0x9e>
  
  *data_len_out_p = rq.rlen-1;
 80153a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80153ac:	b2db      	uxtb	r3, r3
 80153ae:	3b01      	subs	r3, #1
 80153b0:	b2da      	uxtb	r2, r3
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 80153b6:	68bb      	ldr	r3, [r7, #8]
 80153b8:	781b      	ldrb	r3, [r3, #0]
 80153ba:	b29b      	uxth	r3, r3
 80153bc:	89ba      	ldrh	r2, [r7, #12]
 80153be:	4293      	cmp	r3, r2
 80153c0:	bf28      	it	cs
 80153c2:	4613      	movcs	r3, r2
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	461a      	mov	r2, r3
 80153c8:	f107 0314 	add.w	r3, r7, #20
 80153cc:	3301      	adds	r3, #1
 80153ce:	4619      	mov	r1, r3
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f001 fadb 	bl	801698c <memcpy>
  
  return 0;
 80153d6:	2300      	movs	r3, #0
}
 80153d8:	4618      	mov	r0, r3
 80153da:	37b0      	adds	r7, #176	; 0xb0
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}

080153e0 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b08a      	sub	sp, #40	; 0x28
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	4603      	mov	r3, r0
 80153e8:	460a      	mov	r2, r1
 80153ea:	71fb      	strb	r3, [r7, #7]
 80153ec:	4613      	mov	r3, r2
 80153ee:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80153f0:	79fb      	ldrb	r3, [r7, #7]
 80153f2:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80153f4:	79bb      	ldrb	r3, [r7, #6]
 80153f6:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80153f8:	f107 0310 	add.w	r3, r7, #16
 80153fc:	2218      	movs	r2, #24
 80153fe:	2100      	movs	r1, #0
 8015400:	4618      	mov	r0, r3
 8015402:	f001 fae7 	bl	80169d4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8015406:	233f      	movs	r3, #63	; 0x3f
 8015408:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 801540a:	230f      	movs	r3, #15
 801540c:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 801540e:	f107 030c 	add.w	r3, r7, #12
 8015412:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8015414:	2302      	movs	r3, #2
 8015416:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8015418:	f107 030b 	add.w	r3, r7, #11
 801541c:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 801541e:	2301      	movs	r3, #1
 8015420:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8015422:	f107 0310 	add.w	r3, r7, #16
 8015426:	2100      	movs	r1, #0
 8015428:	4618      	mov	r0, r3
 801542a:	f000 f99f 	bl	801576c <hci_send_req>
 801542e:	4603      	mov	r3, r0
 8015430:	2b00      	cmp	r3, #0
 8015432:	da01      	bge.n	8015438 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8015434:	23ff      	movs	r3, #255	; 0xff
 8015436:	e000      	b.n	801543a <aci_hal_set_tx_power_level+0x5a>

  return status;
 8015438:	7afb      	ldrb	r3, [r7, #11]
}
 801543a:	4618      	mov	r0, r3
 801543c:	3728      	adds	r7, #40	; 0x28
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}

08015442 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8015442:	b580      	push	{r7, lr}
 8015444:	b088      	sub	sp, #32
 8015446:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015448:	f107 0308 	add.w	r3, r7, #8
 801544c:	2218      	movs	r2, #24
 801544e:	2100      	movs	r1, #0
 8015450:	4618      	mov	r0, r3
 8015452:	f001 fabf 	bl	80169d4 <memset>
  rq.ogf = OGF_HOST_CTL;
 8015456:	2303      	movs	r3, #3
 8015458:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 801545a:	2303      	movs	r3, #3
 801545c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801545e:	1dfb      	adds	r3, r7, #7
 8015460:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015462:	2301      	movs	r3, #1
 8015464:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8015466:	f107 0308 	add.w	r3, r7, #8
 801546a:	2100      	movs	r1, #0
 801546c:	4618      	mov	r0, r3
 801546e:	f000 f97d 	bl	801576c <hci_send_req>
 8015472:	4603      	mov	r3, r0
 8015474:	2b00      	cmp	r3, #0
 8015476:	da01      	bge.n	801547c <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8015478:	23ff      	movs	r3, #255	; 0xff
 801547a:	e000      	b.n	801547e <hci_reset+0x3c>
  
  return status;  
 801547c:	79fb      	ldrb	r3, [r7, #7]
}
 801547e:	4618      	mov	r0, r3
 8015480:	3720      	adds	r7, #32
 8015482:	46bd      	mov	sp, r7
 8015484:	bd80      	pop	{r7, pc}

08015486 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8015486:	b580      	push	{r7, lr}
 8015488:	b092      	sub	sp, #72	; 0x48
 801548a:	af00      	add	r7, sp, #0
 801548c:	4603      	mov	r3, r0
 801548e:	6039      	str	r1, [r7, #0]
 8015490:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8015492:	f107 0310 	add.w	r3, r7, #16
 8015496:	2220      	movs	r2, #32
 8015498:	2100      	movs	r1, #0
 801549a:	4618      	mov	r0, r3
 801549c:	f001 fa9a 	bl	80169d4 <memset>
  scan_resp_cp.length = length;
 80154a0:	79fb      	ldrb	r3, [r7, #7]
 80154a2:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80154a4:	79fb      	ldrb	r3, [r7, #7]
 80154a6:	2b1f      	cmp	r3, #31
 80154a8:	bf28      	it	cs
 80154aa:	231f      	movcs	r3, #31
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	461a      	mov	r2, r3
 80154b0:	f107 0310 	add.w	r3, r7, #16
 80154b4:	3301      	adds	r3, #1
 80154b6:	6839      	ldr	r1, [r7, #0]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f001 fa67 	bl	801698c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80154be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80154c2:	2218      	movs	r2, #24
 80154c4:	2100      	movs	r1, #0
 80154c6:	4618      	mov	r0, r3
 80154c8:	f001 fa84 	bl	80169d4 <memset>
  rq.ogf = OGF_LE_CTL;
 80154cc:	2308      	movs	r3, #8
 80154ce:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80154d0:	2309      	movs	r3, #9
 80154d2:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 80154d4:	f107 0310 	add.w	r3, r7, #16
 80154d8:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80154da:	2320      	movs	r3, #32
 80154dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 80154de:	f107 030f 	add.w	r3, r7, #15
 80154e2:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80154e4:	2301      	movs	r3, #1
 80154e6:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80154e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80154ec:	2100      	movs	r1, #0
 80154ee:	4618      	mov	r0, r3
 80154f0:	f000 f93c 	bl	801576c <hci_send_req>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	da01      	bge.n	80154fe <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80154fa:	23ff      	movs	r3, #255	; 0xff
 80154fc:	e000      	b.n	8015500 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80154fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015500:	4618      	mov	r0, r3
 8015502:	3748      	adds	r7, #72	; 0x48
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}

08015508 <hci_le_set_random_address>:
  
  return 0;
}

int hci_le_set_random_address(tBDAddr bdaddr)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b08c      	sub	sp, #48	; 0x30
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  le_set_random_address_cp set_rand_addr_cp;
  uint8_t status;
  
  BLUENRG_memset(&set_rand_addr_cp, 0, sizeof(set_rand_addr_cp));
 8015510:	f107 0310 	add.w	r3, r7, #16
 8015514:	2206      	movs	r2, #6
 8015516:	2100      	movs	r1, #0
 8015518:	4618      	mov	r0, r3
 801551a:	f001 fa5b 	bl	80169d4 <memset>
  BLUENRG_memcpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 801551e:	687a      	ldr	r2, [r7, #4]
 8015520:	f107 0310 	add.w	r3, r7, #16
 8015524:	6810      	ldr	r0, [r2, #0]
 8015526:	6018      	str	r0, [r3, #0]
 8015528:	8892      	ldrh	r2, [r2, #4]
 801552a:	809a      	strh	r2, [r3, #4]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 801552c:	f107 0318 	add.w	r3, r7, #24
 8015530:	2218      	movs	r2, #24
 8015532:	2100      	movs	r1, #0
 8015534:	4618      	mov	r0, r3
 8015536:	f001 fa4d 	bl	80169d4 <memset>
  rq.ogf = OGF_LE_CTL;
 801553a:	2308      	movs	r3, #8
 801553c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_LE_SET_RANDOM_ADDRESS;
 801553e:	2305      	movs	r3, #5
 8015540:	837b      	strh	r3, [r7, #26]
  rq.cparam = &set_rand_addr_cp;
 8015542:	f107 0310 	add.w	r3, r7, #16
 8015546:	623b      	str	r3, [r7, #32]
  rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
 8015548:	2306      	movs	r3, #6
 801554a:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &status;
 801554c:	f107 030f 	add.w	r3, r7, #15
 8015550:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = 1;
 8015552:	2301      	movs	r3, #1
 8015554:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8015556:	f107 0318 	add.w	r3, r7, #24
 801555a:	2100      	movs	r1, #0
 801555c:	4618      	mov	r0, r3
 801555e:	f000 f905 	bl	801576c <hci_send_req>
 8015562:	4603      	mov	r3, r0
 8015564:	2b00      	cmp	r3, #0
 8015566:	da01      	bge.n	801556c <hci_le_set_random_address+0x64>
    return BLE_STATUS_TIMEOUT;
 8015568:	23ff      	movs	r3, #255	; 0xff
 801556a:	e000      	b.n	801556e <hci_le_set_random_address+0x66>
  
  return status;
 801556c:	7bfb      	ldrb	r3, [r7, #15]
}
 801556e:	4618      	mov	r0, r3
 8015570:	3730      	adds	r7, #48	; 0x30
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8015576:	b480      	push	{r7}
 8015578:	b085      	sub	sp, #20
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	3308      	adds	r3, #8
 8015582:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	781b      	ldrb	r3, [r3, #0]
 8015588:	2b04      	cmp	r3, #4
 801558a:	d001      	beq.n	8015590 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 801558c:	2301      	movs	r3, #1
 801558e:	e00c      	b.n	80155aa <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	3302      	adds	r3, #2
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	461a      	mov	r2, r3
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 801559e:	3b03      	subs	r3, #3
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d001      	beq.n	80155a8 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80155a4:	2302      	movs	r3, #2
 80155a6:	e000      	b.n	80155aa <verify_packet+0x34>
  
  return 0;      
 80155a8:	2300      	movs	r3, #0
}
 80155aa:	4618      	mov	r0, r3
 80155ac:	3714      	adds	r7, #20
 80155ae:	46bd      	mov	sp, r7
 80155b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b4:	4770      	bx	lr
	...

080155b8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b0a6      	sub	sp, #152	; 0x98
 80155bc:	af00      	add	r7, sp, #0
 80155be:	607b      	str	r3, [r7, #4]
 80155c0:	4603      	mov	r3, r0
 80155c2:	81fb      	strh	r3, [r7, #14]
 80155c4:	460b      	mov	r3, r1
 80155c6:	81bb      	strh	r3, [r7, #12]
 80155c8:	4613      	mov	r3, r2
 80155ca:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80155cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80155d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80155d4:	b21a      	sxth	r2, r3
 80155d6:	89fb      	ldrh	r3, [r7, #14]
 80155d8:	029b      	lsls	r3, r3, #10
 80155da:	b21b      	sxth	r3, r3
 80155dc:	4313      	orrs	r3, r2
 80155de:	b21b      	sxth	r3, r3
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80155e4:	7afb      	ldrb	r3, [r7, #11]
 80155e6:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80155e8:	2301      	movs	r3, #1
 80155ea:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80155ec:	f107 0318 	add.w	r3, r7, #24
 80155f0:	3301      	adds	r3, #1
 80155f2:	461a      	mov	r2, r3
 80155f4:	f107 0314 	add.w	r3, r7, #20
 80155f8:	8819      	ldrh	r1, [r3, #0]
 80155fa:	789b      	ldrb	r3, [r3, #2]
 80155fc:	8011      	strh	r1, [r2, #0]
 80155fe:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8015600:	f107 0318 	add.w	r3, r7, #24
 8015604:	3304      	adds	r3, #4
 8015606:	7afa      	ldrb	r2, [r7, #11]
 8015608:	6879      	ldr	r1, [r7, #4]
 801560a:	4618      	mov	r0, r3
 801560c:	f001 f9be 	bl	801698c <memcpy>
  
  if (hciContext.io.Send)
 8015610:	4b08      	ldr	r3, [pc, #32]	; (8015634 <send_cmd+0x7c>)
 8015612:	691b      	ldr	r3, [r3, #16]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d009      	beq.n	801562c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8015618:	4b06      	ldr	r3, [pc, #24]	; (8015634 <send_cmd+0x7c>)
 801561a:	691b      	ldr	r3, [r3, #16]
 801561c:	7afa      	ldrb	r2, [r7, #11]
 801561e:	b292      	uxth	r2, r2
 8015620:	3204      	adds	r2, #4
 8015622:	b291      	uxth	r1, r2
 8015624:	f107 0218 	add.w	r2, r7, #24
 8015628:	4610      	mov	r0, r2
 801562a:	4798      	blx	r3
  }
}
 801562c:	bf00      	nop
 801562e:	3798      	adds	r7, #152	; 0x98
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}
 8015634:	2000b6e4 	.word	0x2000b6e4

08015638 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8015642:	e00a      	b.n	801565a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8015644:	f107 030c 	add.w	r3, r7, #12
 8015648:	4619      	mov	r1, r3
 801564a:	6838      	ldr	r0, [r7, #0]
 801564c:	f000 fada 	bl	8015c04 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	4619      	mov	r1, r3
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f000 fa49 	bl	8015aec <list_insert_head>
  while (!list_is_empty(src_list))
 801565a:	6838      	ldr	r0, [r7, #0]
 801565c:	f000 fa26 	bl	8015aac <list_is_empty>
 8015660:	4603      	mov	r3, r0
 8015662:	2b00      	cmp	r3, #0
 8015664:	d0ee      	beq.n	8015644 <move_list+0xc>
  }
}
 8015666:	bf00      	nop
 8015668:	3710      	adds	r7, #16
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
	...

08015670 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8015676:	e009      	b.n	801568c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8015678:	1d3b      	adds	r3, r7, #4
 801567a:	4619      	mov	r1, r3
 801567c:	4808      	ldr	r0, [pc, #32]	; (80156a0 <free_event_list+0x30>)
 801567e:	f000 fa9c 	bl	8015bba <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	4619      	mov	r1, r3
 8015686:	4807      	ldr	r0, [pc, #28]	; (80156a4 <free_event_list+0x34>)
 8015688:	f000 fa54 	bl	8015b34 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 801568c:	4805      	ldr	r0, [pc, #20]	; (80156a4 <free_event_list+0x34>)
 801568e:	f000 fade 	bl	8015c4e <list_get_size>
 8015692:	4603      	mov	r3, r0
 8015694:	2b01      	cmp	r3, #1
 8015696:	ddef      	ble.n	8015678 <free_event_list+0x8>
  }
}
 8015698:	bf00      	nop
 801569a:	3708      	adds	r7, #8
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	2000c858 	.word	0x2000c858
 80156a4:	2000c850 	.word	0x2000c850

080156a8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b084      	sub	sp, #16
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d002      	beq.n	80156be <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80156b8:	4a18      	ldr	r2, [pc, #96]	; (801571c <hci_init+0x74>)
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80156be:	4818      	ldr	r0, [pc, #96]	; (8015720 <hci_init+0x78>)
 80156c0:	f000 f9e4 	bl	8015a8c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80156c4:	4817      	ldr	r0, [pc, #92]	; (8015724 <hci_init+0x7c>)
 80156c6:	f000 f9e1 	bl	8015a8c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80156ca:	f7eb ff49 	bl	8001560 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80156ce:	2300      	movs	r3, #0
 80156d0:	73fb      	strb	r3, [r7, #15]
 80156d2:	e00c      	b.n	80156ee <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80156d4:	7bfb      	ldrb	r3, [r7, #15]
 80156d6:	228c      	movs	r2, #140	; 0x8c
 80156d8:	fb02 f303 	mul.w	r3, r2, r3
 80156dc:	4a12      	ldr	r2, [pc, #72]	; (8015728 <hci_init+0x80>)
 80156de:	4413      	add	r3, r2
 80156e0:	4619      	mov	r1, r3
 80156e2:	480f      	ldr	r0, [pc, #60]	; (8015720 <hci_init+0x78>)
 80156e4:	f000 fa26 	bl	8015b34 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80156e8:	7bfb      	ldrb	r3, [r7, #15]
 80156ea:	3301      	adds	r3, #1
 80156ec:	73fb      	strb	r3, [r7, #15]
 80156ee:	7bfb      	ldrb	r3, [r7, #15]
 80156f0:	2b04      	cmp	r3, #4
 80156f2:	d9ef      	bls.n	80156d4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80156f4:	4b09      	ldr	r3, [pc, #36]	; (801571c <hci_init+0x74>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d003      	beq.n	8015704 <hci_init+0x5c>
 80156fc:	4b07      	ldr	r3, [pc, #28]	; (801571c <hci_init+0x74>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2000      	movs	r0, #0
 8015702:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8015704:	4b05      	ldr	r3, [pc, #20]	; (801571c <hci_init+0x74>)
 8015706:	689b      	ldr	r3, [r3, #8]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d002      	beq.n	8015712 <hci_init+0x6a>
 801570c:	4b03      	ldr	r3, [pc, #12]	; (801571c <hci_init+0x74>)
 801570e:	689b      	ldr	r3, [r3, #8]
 8015710:	4798      	blx	r3
}
 8015712:	bf00      	nop
 8015714:	3710      	adds	r7, #16
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}
 801571a:	bf00      	nop
 801571c:	2000b6e4 	.word	0x2000b6e4
 8015720:	2000c850 	.word	0x2000c850
 8015724:	2000c858 	.word	0x2000c858
 8015728:	2000b428 	.word	0x2000b428

0801572c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 801572c:	b480      	push	{r7}
 801572e:	b083      	sub	sp, #12
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	4a0b      	ldr	r2, [pc, #44]	; (8015768 <hci_register_io_bus+0x3c>)
 801573a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	68db      	ldr	r3, [r3, #12]
 8015740:	4a09      	ldr	r2, [pc, #36]	; (8015768 <hci_register_io_bus+0x3c>)
 8015742:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	691b      	ldr	r3, [r3, #16]
 8015748:	4a07      	ldr	r2, [pc, #28]	; (8015768 <hci_register_io_bus+0x3c>)
 801574a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	699b      	ldr	r3, [r3, #24]
 8015750:	4a05      	ldr	r2, [pc, #20]	; (8015768 <hci_register_io_bus+0x3c>)
 8015752:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	689b      	ldr	r3, [r3, #8]
 8015758:	4a03      	ldr	r2, [pc, #12]	; (8015768 <hci_register_io_bus+0x3c>)
 801575a:	6093      	str	r3, [r2, #8]
}
 801575c:	bf00      	nop
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr
 8015768:	2000b6e4 	.word	0x2000b6e4

0801576c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b08e      	sub	sp, #56	; 0x38
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	460b      	mov	r3, r1
 8015776:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	885b      	ldrh	r3, [r3, #2]
 801577c:	b21b      	sxth	r3, r3
 801577e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015782:	b21a      	sxth	r2, r3
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	881b      	ldrh	r3, [r3, #0]
 8015788:	029b      	lsls	r3, r3, #10
 801578a:	b21b      	sxth	r3, r3
 801578c:	4313      	orrs	r3, r2
 801578e:	b21b      	sxth	r3, r3
 8015790:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8015792:	2300      	movs	r3, #0
 8015794:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8015796:	f107 0308 	add.w	r3, r7, #8
 801579a:	4618      	mov	r0, r3
 801579c:	f000 f976 	bl	8015a8c <list_init_head>

  free_event_list();
 80157a0:	f7ff ff66 	bl	8015670 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	8818      	ldrh	r0, [r3, #0]
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	8859      	ldrh	r1, [r3, #2]
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	68db      	ldr	r3, [r3, #12]
 80157b0:	b2da      	uxtb	r2, r3
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	689b      	ldr	r3, [r3, #8]
 80157b6:	f7ff feff 	bl	80155b8 <send_cmd>
  
  if (async)
 80157ba:	78fb      	ldrb	r3, [r7, #3]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d001      	beq.n	80157c4 <hci_send_req+0x58>
  {
    return 0;
 80157c0:	2300      	movs	r3, #0
 80157c2:	e0e2      	b.n	801598a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80157c4:	f7f0 faa4 	bl	8005d10 <HAL_GetTick>
 80157c8:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80157ca:	f7f0 faa1 	bl	8005d10 <HAL_GetTick>
 80157ce:	4602      	mov	r2, r0
 80157d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157d2:	1ad3      	subs	r3, r2, r3
 80157d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80157d8:	f200 80b3 	bhi.w	8015942 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80157dc:	486d      	ldr	r0, [pc, #436]	; (8015994 <hci_send_req+0x228>)
 80157de:	f000 f965 	bl	8015aac <list_is_empty>
 80157e2:	4603      	mov	r3, r0
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d000      	beq.n	80157ea <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80157e8:	e7ef      	b.n	80157ca <hci_send_req+0x5e>
      {
        break;
 80157ea:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80157ec:	f107 0310 	add.w	r3, r7, #16
 80157f0:	4619      	mov	r1, r3
 80157f2:	4868      	ldr	r0, [pc, #416]	; (8015994 <hci_send_req+0x228>)
 80157f4:	f000 f9e1 	bl	8015bba <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	3308      	adds	r3, #8
 80157fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80157fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	2b04      	cmp	r3, #4
 8015804:	d17a      	bne.n	80158fc <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 8015806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015808:	3301      	adds	r3, #1
 801580a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	3308      	adds	r3, #8
 8015810:	3303      	adds	r3, #3
 8015812:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 801581a:	3b03      	subs	r3, #3
 801581c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 801581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	2b0f      	cmp	r3, #15
 8015824:	d00a      	beq.n	801583c <hci_send_req+0xd0>
 8015826:	2b0f      	cmp	r3, #15
 8015828:	dc02      	bgt.n	8015830 <hci_send_req+0xc4>
 801582a:	2b0e      	cmp	r3, #14
 801582c:	d028      	beq.n	8015880 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 801582e:	e06a      	b.n	8015906 <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 8015830:	2b10      	cmp	r3, #16
 8015832:	f000 8088 	beq.w	8015946 <hci_send_req+0x1da>
 8015836:	2b3e      	cmp	r3, #62	; 0x3e
 8015838:	d042      	beq.n	80158c0 <hci_send_req+0x154>
        break;
 801583a:	e064      	b.n	8015906 <hci_send_req+0x19a>
        cs = (void *) ptr;
 801583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801583e:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 8015840:	69bb      	ldr	r3, [r7, #24]
 8015842:	885b      	ldrh	r3, [r3, #2]
 8015844:	b29b      	uxth	r3, r3
 8015846:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015848:	429a      	cmp	r2, r3
 801584a:	d17e      	bne.n	801594a <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	685b      	ldr	r3, [r3, #4]
 8015850:	2b0f      	cmp	r3, #15
 8015852:	d004      	beq.n	801585e <hci_send_req+0xf2>
          if (cs->status) {
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	781b      	ldrb	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d051      	beq.n	8015900 <hci_send_req+0x194>
            goto failed;
 801585c:	e078      	b.n	8015950 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	695a      	ldr	r2, [r3, #20]
 8015862:	6a3b      	ldr	r3, [r7, #32]
 8015864:	429a      	cmp	r2, r3
 8015866:	bf28      	it	cs
 8015868:	461a      	movcs	r2, r3
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	6918      	ldr	r0, [r3, #16]
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	695b      	ldr	r3, [r3, #20]
 8015876:	461a      	mov	r2, r3
 8015878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801587a:	f001 f887 	bl	801698c <memcpy>
        goto done;
 801587e:	e078      	b.n	8015972 <hci_send_req+0x206>
        cc = (void *) ptr;
 8015880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015882:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801588a:	b29b      	uxth	r3, r3
 801588c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801588e:	429a      	cmp	r2, r3
 8015890:	d15d      	bne.n	801594e <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 8015892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015894:	3303      	adds	r3, #3
 8015896:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8015898:	6a3b      	ldr	r3, [r7, #32]
 801589a:	3b03      	subs	r3, #3
 801589c:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	695a      	ldr	r2, [r3, #20]
 80158a2:	6a3b      	ldr	r3, [r7, #32]
 80158a4:	429a      	cmp	r2, r3
 80158a6:	bf28      	it	cs
 80158a8:	461a      	movcs	r2, r3
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6918      	ldr	r0, [r3, #16]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	695b      	ldr	r3, [r3, #20]
 80158b6:	461a      	mov	r2, r3
 80158b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80158ba:	f001 f867 	bl	801698c <memcpy>
        goto done;
 80158be:	e058      	b.n	8015972 <hci_send_req+0x206>
        me = (void *) ptr;
 80158c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c2:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 80158c4:	69fb      	ldr	r3, [r7, #28]
 80158c6:	781b      	ldrb	r3, [r3, #0]
 80158c8:	461a      	mov	r2, r3
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	685b      	ldr	r3, [r3, #4]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d118      	bne.n	8015904 <hci_send_req+0x198>
        len -= 1;
 80158d2:	6a3b      	ldr	r3, [r7, #32]
 80158d4:	3b01      	subs	r3, #1
 80158d6:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	695a      	ldr	r2, [r3, #20]
 80158dc:	6a3b      	ldr	r3, [r7, #32]
 80158de:	429a      	cmp	r2, r3
 80158e0:	bf28      	it	cs
 80158e2:	461a      	movcs	r2, r3
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6918      	ldr	r0, [r3, #16]
 80158ec:	69fb      	ldr	r3, [r7, #28]
 80158ee:	1c59      	adds	r1, r3, #1
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	695b      	ldr	r3, [r3, #20]
 80158f4:	461a      	mov	r2, r3
 80158f6:	f001 f849 	bl	801698c <memcpy>
        goto done;
 80158fa:	e03a      	b.n	8015972 <hci_send_req+0x206>
      }
    }
 80158fc:	bf00      	nop
 80158fe:	e002      	b.n	8015906 <hci_send_req+0x19a>
          break;
 8015900:	bf00      	nop
 8015902:	e000      	b.n	8015906 <hci_send_req+0x19a>
          break;
 8015904:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8015906:	4824      	ldr	r0, [pc, #144]	; (8015998 <hci_send_req+0x22c>)
 8015908:	f000 f8d0 	bl	8015aac <list_is_empty>
 801590c:	4603      	mov	r3, r0
 801590e:	2b00      	cmp	r3, #0
 8015910:	d00d      	beq.n	801592e <hci_send_req+0x1c2>
 8015912:	4820      	ldr	r0, [pc, #128]	; (8015994 <hci_send_req+0x228>)
 8015914:	f000 f8ca 	bl	8015aac <list_is_empty>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d007      	beq.n	801592e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 801591e:	693b      	ldr	r3, [r7, #16]
 8015920:	4619      	mov	r1, r3
 8015922:	481d      	ldr	r0, [pc, #116]	; (8015998 <hci_send_req+0x22c>)
 8015924:	f000 f906 	bl	8015b34 <list_insert_tail>
      hciReadPacket=NULL;
 8015928:	2300      	movs	r3, #0
 801592a:	613b      	str	r3, [r7, #16]
 801592c:	e008      	b.n	8015940 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 801592e:	693a      	ldr	r2, [r7, #16]
 8015930:	f107 0308 	add.w	r3, r7, #8
 8015934:	4611      	mov	r1, r2
 8015936:	4618      	mov	r0, r3
 8015938:	f000 f8fc 	bl	8015b34 <list_insert_tail>
      hciReadPacket=NULL;
 801593c:	2300      	movs	r3, #0
 801593e:	613b      	str	r3, [r7, #16]
  {
 8015940:	e740      	b.n	80157c4 <hci_send_req+0x58>
        goto failed;
 8015942:	bf00      	nop
 8015944:	e004      	b.n	8015950 <hci_send_req+0x1e4>
        goto failed;
 8015946:	bf00      	nop
 8015948:	e002      	b.n	8015950 <hci_send_req+0x1e4>
          goto failed;
 801594a:	bf00      	nop
 801594c:	e000      	b.n	8015950 <hci_send_req+0x1e4>
          goto failed;
 801594e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d004      	beq.n	8015960 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	4619      	mov	r1, r3
 801595a:	480f      	ldr	r0, [pc, #60]	; (8015998 <hci_send_req+0x22c>)
 801595c:	f000 f8c6 	bl	8015aec <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8015960:	f107 0308 	add.w	r3, r7, #8
 8015964:	4619      	mov	r1, r3
 8015966:	480b      	ldr	r0, [pc, #44]	; (8015994 <hci_send_req+0x228>)
 8015968:	f7ff fe66 	bl	8015638 <move_list>

  return -1;
 801596c:	f04f 33ff 	mov.w	r3, #4294967295
 8015970:	e00b      	b.n	801598a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	4619      	mov	r1, r3
 8015976:	4808      	ldr	r0, [pc, #32]	; (8015998 <hci_send_req+0x22c>)
 8015978:	f000 f8b8 	bl	8015aec <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 801597c:	f107 0308 	add.w	r3, r7, #8
 8015980:	4619      	mov	r1, r3
 8015982:	4804      	ldr	r0, [pc, #16]	; (8015994 <hci_send_req+0x228>)
 8015984:	f7ff fe58 	bl	8015638 <move_list>

  return 0;
 8015988:	2300      	movs	r3, #0
}
 801598a:	4618      	mov	r0, r3
 801598c:	3738      	adds	r7, #56	; 0x38
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
 8015992:	bf00      	nop
 8015994:	2000c858 	.word	0x2000c858
 8015998:	2000c850 	.word	0x2000c850

0801599c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80159a2:	2300      	movs	r3, #0
 80159a4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80159a6:	e013      	b.n	80159d0 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80159a8:	1d3b      	adds	r3, r7, #4
 80159aa:	4619      	mov	r1, r3
 80159ac:	480d      	ldr	r0, [pc, #52]	; (80159e4 <hci_user_evt_proc+0x48>)
 80159ae:	f000 f904 	bl	8015bba <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80159b2:	4b0d      	ldr	r3, [pc, #52]	; (80159e8 <hci_user_evt_proc+0x4c>)
 80159b4:	69db      	ldr	r3, [r3, #28]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d005      	beq.n	80159c6 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80159ba:	4b0b      	ldr	r3, [pc, #44]	; (80159e8 <hci_user_evt_proc+0x4c>)
 80159bc:	69db      	ldr	r3, [r3, #28]
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	3208      	adds	r2, #8
 80159c2:	4610      	mov	r0, r2
 80159c4:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	4619      	mov	r1, r3
 80159ca:	4808      	ldr	r0, [pc, #32]	; (80159ec <hci_user_evt_proc+0x50>)
 80159cc:	f000 f8b2 	bl	8015b34 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80159d0:	4804      	ldr	r0, [pc, #16]	; (80159e4 <hci_user_evt_proc+0x48>)
 80159d2:	f000 f86b 	bl	8015aac <list_is_empty>
 80159d6:	4603      	mov	r3, r0
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d0e5      	beq.n	80159a8 <hci_user_evt_proc+0xc>
  }
}
 80159dc:	bf00      	nop
 80159de:	3708      	adds	r7, #8
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}
 80159e4:	2000c858 	.word	0x2000c858
 80159e8:	2000b6e4 	.word	0x2000b6e4
 80159ec:	2000c850 	.word	0x2000c850

080159f0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b086      	sub	sp, #24
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80159f8:	2300      	movs	r3, #0
 80159fa:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80159fc:	2300      	movs	r3, #0
 80159fe:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8015a00:	481f      	ldr	r0, [pc, #124]	; (8015a80 <hci_notify_asynch_evt+0x90>)
 8015a02:	f000 f853 	bl	8015aac <list_is_empty>
 8015a06:	4603      	mov	r3, r0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d132      	bne.n	8015a72 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8015a0c:	f107 030c 	add.w	r3, r7, #12
 8015a10:	4619      	mov	r1, r3
 8015a12:	481b      	ldr	r0, [pc, #108]	; (8015a80 <hci_notify_asynch_evt+0x90>)
 8015a14:	f000 f8d1 	bl	8015bba <list_remove_head>
    
    if (hciContext.io.Receive)
 8015a18:	4b1a      	ldr	r3, [pc, #104]	; (8015a84 <hci_notify_asynch_evt+0x94>)
 8015a1a:	68db      	ldr	r3, [r3, #12]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d02a      	beq.n	8015a76 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8015a20:	4b18      	ldr	r3, [pc, #96]	; (8015a84 <hci_notify_asynch_evt+0x94>)
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	68fa      	ldr	r2, [r7, #12]
 8015a26:	3208      	adds	r2, #8
 8015a28:	2180      	movs	r1, #128	; 0x80
 8015a2a:	4610      	mov	r0, r2
 8015a2c:	4798      	blx	r3
 8015a2e:	4603      	mov	r3, r0
 8015a30:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8015a32:	7cfb      	ldrb	r3, [r7, #19]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d016      	beq.n	8015a66 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	7cfa      	ldrb	r2, [r7, #19]
 8015a3c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7ff fd97 	bl	8015576 <verify_packet>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d105      	bne.n	8015a5a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	4619      	mov	r1, r3
 8015a52:	480d      	ldr	r0, [pc, #52]	; (8015a88 <hci_notify_asynch_evt+0x98>)
 8015a54:	f000 f86e 	bl	8015b34 <list_insert_tail>
 8015a58:	e00d      	b.n	8015a76 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	4808      	ldr	r0, [pc, #32]	; (8015a80 <hci_notify_asynch_evt+0x90>)
 8015a60:	f000 f844 	bl	8015aec <list_insert_head>
 8015a64:	e007      	b.n	8015a76 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	4619      	mov	r1, r3
 8015a6a:	4805      	ldr	r0, [pc, #20]	; (8015a80 <hci_notify_asynch_evt+0x90>)
 8015a6c:	f000 f83e 	bl	8015aec <list_insert_head>
 8015a70:	e001      	b.n	8015a76 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8015a72:	2301      	movs	r3, #1
 8015a74:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8015a76:	697b      	ldr	r3, [r7, #20]

}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3718      	adds	r7, #24
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	2000c850 	.word	0x2000c850
 8015a84:	2000b6e4 	.word	0x2000b6e4
 8015a88:	2000c858 	.word	0x2000c858

08015a8c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b083      	sub	sp, #12
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	687a      	ldr	r2, [r7, #4]
 8015a98:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	687a      	ldr	r2, [r7, #4]
 8015a9e:	605a      	str	r2, [r3, #4]
}
 8015aa0:	bf00      	nop
 8015aa2:	370c      	adds	r7, #12
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr

08015aac <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8015aac:	b480      	push	{r7}
 8015aae:	b087      	sub	sp, #28
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8015ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8015aba:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015abc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015abe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	687a      	ldr	r2, [r7, #4]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d102      	bne.n	8015ad0 <list_is_empty+0x24>
  {
    return_value = 1;
 8015aca:	2301      	movs	r3, #1
 8015acc:	75fb      	strb	r3, [r7, #23]
 8015ace:	e001      	b.n	8015ad4 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	75fb      	strb	r3, [r7, #23]
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ad8:	68bb      	ldr	r3, [r7, #8]
 8015ada:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8015ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	371c      	adds	r7, #28
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aea:	4770      	bx	lr

08015aec <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8015aec:	b480      	push	{r7}
 8015aee:	b087      	sub	sp, #28
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015af6:	f3ef 8310 	mrs	r3, PRIMASK
 8015afa:	60fb      	str	r3, [r7, #12]
  return(result);
 8015afc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015afe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015b00:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	683a      	ldr	r2, [r7, #0]
 8015b14:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	683a      	ldr	r2, [r7, #0]
 8015b1c:	605a      	str	r2, [r3, #4]
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8015b28:	bf00      	nop
 8015b2a:	371c      	adds	r7, #28
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b32:	4770      	bx	lr

08015b34 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8015b34:	b480      	push	{r7}
 8015b36:	b087      	sub	sp, #28
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8015b42:	60fb      	str	r3, [r7, #12]
  return(result);
 8015b44:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015b48:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	685a      	ldr	r2, [r3, #4]
 8015b54:	683b      	ldr	r3, [r7, #0]
 8015b56:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	683a      	ldr	r2, [r7, #0]
 8015b5c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	685b      	ldr	r3, [r3, #4]
 8015b62:	683a      	ldr	r2, [r7, #0]
 8015b64:	601a      	str	r2, [r3, #0]
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8015b70:	bf00      	nop
 8015b72:	371c      	adds	r7, #28
 8015b74:	46bd      	mov	sp, r7
 8015b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7a:	4770      	bx	lr

08015b7c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8015b7c:	b480      	push	{r7}
 8015b7e:	b087      	sub	sp, #28
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015b84:	f3ef 8310 	mrs	r3, PRIMASK
 8015b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8015b8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015b8e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	685b      	ldr	r3, [r3, #4]
 8015b94:	687a      	ldr	r2, [r7, #4]
 8015b96:	6812      	ldr	r2, [r2, #0]
 8015b98:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	687a      	ldr	r2, [r7, #4]
 8015ba0:	6852      	ldr	r2, [r2, #4]
 8015ba2:	605a      	str	r2, [r3, #4]
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8015bae:	bf00      	nop
 8015bb0:	371c      	adds	r7, #28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb8:	4770      	bx	lr

08015bba <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b086      	sub	sp, #24
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8015bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8015bca:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015bce:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7ff ffcd 	bl	8015b7c <list_remove_node>
  (*node)->next = NULL;
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2200      	movs	r2, #0
 8015be8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	2200      	movs	r2, #0
 8015bf0:	605a      	str	r2, [r3, #4]
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8015bfc:	bf00      	nop
 8015bfe:	3718      	adds	r7, #24
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b086      	sub	sp, #24
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8015c12:	60fb      	str	r3, [r7, #12]
  return(result);
 8015c14:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015c18:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	685a      	ldr	r2, [r3, #4]
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	685b      	ldr	r3, [r3, #4]
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7ff ffa8 	bl	8015b7c <list_remove_node>
  (*node)->next = NULL;
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	2200      	movs	r2, #0
 8015c32:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	2200      	movs	r2, #0
 8015c3a:	605a      	str	r2, [r3, #4]
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8015c46:	bf00      	nop
 8015c48:	3718      	adds	r7, #24
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}

08015c4e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8015c4e:	b480      	push	{r7}
 8015c50:	b089      	sub	sp, #36	; 0x24
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
  int size = 0;
 8015c56:	2300      	movs	r3, #0
 8015c58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8015c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8015c60:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015c62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015c64:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8015c6c:	e005      	b.n	8015c7a <list_get_size+0x2c>
  {
    size++;
 8015c6e:	69fb      	ldr	r3, [r7, #28]
 8015c70:	3301      	adds	r3, #1
 8015c72:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8015c74:	69bb      	ldr	r3, [r7, #24]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8015c7a:	69ba      	ldr	r2, [r7, #24]
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	429a      	cmp	r2, r3
 8015c80:	d1f5      	bne.n	8015c6e <list_get_size+0x20>
 8015c82:	697b      	ldr	r3, [r7, #20]
 8015c84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8015c8c:	69fb      	ldr	r3, [r7, #28]
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3724      	adds	r7, #36	; 0x24
 8015c92:	46bd      	mov	sp, r7
 8015c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c98:	4770      	bx	lr
	...

08015c9c <Init_my_tasks>:
	BSP_MOTION_SENSOR_Axes_t Axes_magne;
  uint32_t Idx;
} MEM_BLOCK_t; //Esctructura para guardar los datos de los sensores y ponerlos en la cola

void Init_my_tasks(void)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	af00      	add	r7, sp, #0
	Iniciar_sensores();
 8015ca0:	f000 fc32 	bl	8016508 <Iniciar_sensores>
	//iniciar_pin_SWDIO();
    //encender_zona_3v3();
    DATALOG_SD_Init();
 8015ca4:	f7fa ff32 	bl	8010b0c <DATALOG_SD_Init>
    RTC_Init();
 8015ca8:	f7eb f8ea 	bl	8000e80 <RTC_Init>
    Init_BlueNRG_Stack(PERIPHERAL);
 8015cac:	2001      	movs	r0, #1
 8015cae:	f7eb f84d 	bl	8000d4c <Init_BlueNRG_Stack>
    Init_BlueNRG_Custom_Services(PERIPHERAL);
 8015cb2:	2001      	movs	r0, #1
 8015cb4:	f7eb f80e 	bl	8000cd4 <Init_BlueNRG_Custom_Services>
    PA2_Init();
 8015cb8:	f000 fd5a 	bl	8016770 <PA2_Init>
	//Iniciamos Kernel
	osKernelInitialize();
 8015cbc:	f7fb f91c 	bl	8010ef8 <osKernelInitialize>
	//Creamos las tareas
	//------------------------------------------------------------------------------------------------------------

		//1- Dormir
			dormir_uc_Id = osThreadNew(dormir_uc, NULL, &dormir_uc_Att);
 8015cc0:	4a39      	ldr	r2, [pc, #228]	; (8015da8 <Init_my_tasks+0x10c>)
 8015cc2:	2100      	movs	r1, #0
 8015cc4:	4839      	ldr	r0, [pc, #228]	; (8015dac <Init_my_tasks+0x110>)
 8015cc6:	f7fb f981 	bl	8010fcc <osThreadNew>
 8015cca:	4602      	mov	r2, r0
 8015ccc:	4b38      	ldr	r3, [pc, #224]	; (8015db0 <Init_my_tasks+0x114>)
 8015cce:	601a      	str	r2, [r3, #0]
			dormir_uc_semaphore_Id = osSemaphoreNew(1, 0U, NULL);
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	2100      	movs	r1, #0
 8015cd4:	2001      	movs	r0, #1
 8015cd6:	f7fb fab5 	bl	8011244 <osSemaphoreNew>
 8015cda:	4602      	mov	r2, r0
 8015cdc:	4b35      	ldr	r3, [pc, #212]	; (8015db4 <Init_my_tasks+0x118>)
 8015cde:	601a      	str	r2, [r3, #0]
		//2- Lectura de sensores y procesado de los datos
			leer_sensores_Id = osThreadNew(leer_sensores, NULL, &leer_sensores_Atributos);
 8015ce0:	4a35      	ldr	r2, [pc, #212]	; (8015db8 <Init_my_tasks+0x11c>)
 8015ce2:	2100      	movs	r1, #0
 8015ce4:	4835      	ldr	r0, [pc, #212]	; (8015dbc <Init_my_tasks+0x120>)
 8015ce6:	f7fb f971 	bl	8010fcc <osThreadNew>
 8015cea:	4602      	mov	r2, r0
 8015cec:	4b34      	ldr	r3, [pc, #208]	; (8015dc0 <Init_my_tasks+0x124>)
 8015cee:	601a      	str	r2, [r3, #0]
			procesar_datos_Id= osThreadNew( procesar_datos, NULL, &procesar_datos_Attr);
 8015cf0:	4a34      	ldr	r2, [pc, #208]	; (8015dc4 <Init_my_tasks+0x128>)
 8015cf2:	2100      	movs	r1, #0
 8015cf4:	4834      	ldr	r0, [pc, #208]	; (8015dc8 <Init_my_tasks+0x12c>)
 8015cf6:	f7fb f969 	bl	8010fcc <osThreadNew>
 8015cfa:	4602      	mov	r2, r0
 8015cfc:	4b33      	ldr	r3, [pc, #204]	; (8015dcc <Init_my_tasks+0x130>)
 8015cfe:	601a      	str	r2, [r3, #0]
		//3- Gestión de los comandos BLE
			gestionar_comandos_BLE_Id = osThreadNew(gestionar_comandos_BLE, NULL, &gestionar_comandos_BLE_Att);
 8015d00:	4a33      	ldr	r2, [pc, #204]	; (8015dd0 <Init_my_tasks+0x134>)
 8015d02:	2100      	movs	r1, #0
 8015d04:	4833      	ldr	r0, [pc, #204]	; (8015dd4 <Init_my_tasks+0x138>)
 8015d06:	f7fb f961 	bl	8010fcc <osThreadNew>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	4b32      	ldr	r3, [pc, #200]	; (8015dd8 <Init_my_tasks+0x13c>)
 8015d0e:	601a      	str	r2, [r3, #0]
			enviar_BLE_Id = osThreadNew(enviar_BLE, NULL, &enviar_BLE_Attr);
 8015d10:	4a32      	ldr	r2, [pc, #200]	; (8015ddc <Init_my_tasks+0x140>)
 8015d12:	2100      	movs	r1, #0
 8015d14:	4832      	ldr	r0, [pc, #200]	; (8015de0 <Init_my_tasks+0x144>)
 8015d16:	f7fb f959 	bl	8010fcc <osThreadNew>
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	4b31      	ldr	r3, [pc, #196]	; (8015de4 <Init_my_tasks+0x148>)
 8015d1e:	601a      	str	r2, [r3, #0]
			//Semáforo necesario:
				ble_semaphore_Id = osSemaphoreNew(1U, 0U, NULL);
 8015d20:	2200      	movs	r2, #0
 8015d22:	2100      	movs	r1, #0
 8015d24:	2001      	movs	r0, #1
 8015d26:	f7fb fa8d 	bl	8011244 <osSemaphoreNew>
 8015d2a:	4602      	mov	r2, r0
 8015d2c:	4b2e      	ldr	r3, [pc, #184]	; (8015de8 <Init_my_tasks+0x14c>)
 8015d2e:	601a      	str	r2, [r3, #0]
		//4- Escaneo:
			escaneo_Id	= osThreadNew(Escaneo , NULL, &escaneo_Att);
 8015d30:	4a2e      	ldr	r2, [pc, #184]	; (8015dec <Init_my_tasks+0x150>)
 8015d32:	2100      	movs	r1, #0
 8015d34:	482e      	ldr	r0, [pc, #184]	; (8015df0 <Init_my_tasks+0x154>)
 8015d36:	f7fb f949 	bl	8010fcc <osThreadNew>
 8015d3a:	4602      	mov	r2, r0
 8015d3c:	4b2d      	ldr	r3, [pc, #180]	; (8015df4 <Init_my_tasks+0x158>)
 8015d3e:	601a      	str	r2, [r3, #0]
			escaneo_semaphore_Id = osSemaphoreNew(1U, 1U, NULL);
 8015d40:	2200      	movs	r2, #0
 8015d42:	2101      	movs	r1, #1
 8015d44:	2001      	movs	r0, #1
 8015d46:	f7fb fa7d 	bl	8011244 <osSemaphoreNew>
 8015d4a:	4602      	mov	r2, r0
 8015d4c:	4b2a      	ldr	r3, [pc, #168]	; (8015df8 <Init_my_tasks+0x15c>)
 8015d4e:	601a      	str	r2, [r3, #0]
		//5- Máquina de estados:
			maquina_estados_Id = osThreadNew(maquina_estados, NULL, &maquina_estados_Attr);
 8015d50:	4a2a      	ldr	r2, [pc, #168]	; (8015dfc <Init_my_tasks+0x160>)
 8015d52:	2100      	movs	r1, #0
 8015d54:	482a      	ldr	r0, [pc, #168]	; (8015e00 <Init_my_tasks+0x164>)
 8015d56:	f7fb f939 	bl	8010fcc <osThreadNew>
 8015d5a:	4602      	mov	r2, r0
 8015d5c:	4b29      	ldr	r3, [pc, #164]	; (8015e04 <Init_my_tasks+0x168>)
 8015d5e:	601a      	str	r2, [r3, #0]
			//Semáforo necesario:
				maquina_estados_semaphore_Id = osSemaphoreNew(1U, 1U, NULL);
 8015d60:	2200      	movs	r2, #0
 8015d62:	2101      	movs	r1, #1
 8015d64:	2001      	movs	r0, #1
 8015d66:	f7fb fa6d 	bl	8011244 <osSemaphoreNew>
 8015d6a:	4602      	mov	r2, r0
 8015d6c:	4b26      	ldr	r3, [pc, #152]	; (8015e08 <Init_my_tasks+0x16c>)
 8015d6e:	601a      	str	r2, [r3, #0]
		//6- Extraccion
				extraccion_semaphore_Id = osSemaphoreNew(1U, 0U, NULL);
 8015d70:	2200      	movs	r2, #0
 8015d72:	2100      	movs	r1, #0
 8015d74:	2001      	movs	r0, #1
 8015d76:	f7fb fa65 	bl	8011244 <osSemaphoreNew>
 8015d7a:	4602      	mov	r2, r0
 8015d7c:	4b23      	ldr	r3, [pc, #140]	; (8015e0c <Init_my_tasks+0x170>)
 8015d7e:	601a      	str	r2, [r3, #0]
				extraer_fichero_Id = osThreadNew( extraer_fichero, NULL, &extraccion_Att);
 8015d80:	4a23      	ldr	r2, [pc, #140]	; (8015e10 <Init_my_tasks+0x174>)
 8015d82:	2100      	movs	r1, #0
 8015d84:	4823      	ldr	r0, [pc, #140]	; (8015e14 <Init_my_tasks+0x178>)
 8015d86:	f7fb f921 	bl	8010fcc <osThreadNew>
 8015d8a:	4602      	mov	r2, r0
 8015d8c:	4b22      	ldr	r3, [pc, #136]	; (8015e18 <Init_my_tasks+0x17c>)
 8015d8e:	601a      	str	r2, [r3, #0]
	//------------------------------------------------------------------------------------------------------------
	//Creamos una cola para enviar los datos entre tareas de forma segura por medio de FreeRTOS
	Q_Raw_Data = osMessageQueueNew (VECTOR_CIRCULAR_SIZE, sizeof(MEM_BLOCK_t),NULL);
 8015d90:	2200      	movs	r2, #0
 8015d92:	2128      	movs	r1, #40	; 0x28
 8015d94:	203c      	movs	r0, #60	; 0x3c
 8015d96:	f7fb fbb1 	bl	80114fc <osMessageQueueNew>
 8015d9a:	4602      	mov	r2, r0
 8015d9c:	4b1f      	ldr	r3, [pc, #124]	; (8015e1c <Init_my_tasks+0x180>)
 8015d9e:	601a      	str	r2, [r3, #0]
	//Lanzamos el Kernel
    osKernelStart();
 8015da0:	f7fb f8de 	bl	8010f60 <osKernelStart>
}
 8015da4:	bf00      	nop
 8015da6:	bd80      	pop	{r7, pc}
 8015da8:	0801988c 	.word	0x0801988c
 8015dac:	08015f41 	.word	0x08015f41
 8015db0:	2000b834 	.word	0x2000b834
 8015db4:	2000c868 	.word	0x2000c868
 8015db8:	080198d4 	.word	0x080198d4
 8015dbc:	080161bd 	.word	0x080161bd
 8015dc0:	2000b83c 	.word	0x2000b83c
 8015dc4:	080198f8 	.word	0x080198f8
 8015dc8:	08016581 	.word	0x08016581
 8015dcc:	2000b840 	.word	0x2000b840
 8015dd0:	080198b0 	.word	0x080198b0
 8015dd4:	08016241 	.word	0x08016241
 8015dd8:	2000b838 	.word	0x2000b838
 8015ddc:	0801991c 	.word	0x0801991c
 8015de0:	080162d1 	.word	0x080162d1
 8015de4:	2000b844 	.word	0x2000b844
 8015de8:	2000c860 	.word	0x2000c860
 8015dec:	08019964 	.word	0x08019964
 8015df0:	080164fd 	.word	0x080164fd
 8015df4:	2000b84c 	.word	0x2000b84c
 8015df8:	2000c8d4 	.word	0x2000c8d4
 8015dfc:	08019940 	.word	0x08019940
 8015e00:	08015e21 	.word	0x08015e21
 8015e04:	2000b848 	.word	0x2000b848
 8015e08:	2000c86c 	.word	0x2000c86c
 8015e0c:	2000c864 	.word	0x2000c864
 8015e10:	08019988 	.word	0x08019988
 8015e14:	080163e1 	.word	0x080163e1
 8015e18:	2000b850 	.word	0x2000b850
 8015e1c:	2000c8d8 	.word	0x2000c8d8

08015e20 <maquina_estados>:

extern uint16_t ConfigServW2STHandle, ConfigCharHandle;
extern DIR directorio_extraccion;
uint8_t Archivo_seleccionado = 0;
static void maquina_estados(void *argument)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  	  osSemaphoreAcquire(maquina_estados_semaphore_Id, osWaitForever); //Esperamos semáforo y se apagan tareas
 8015e28:	4b3a      	ldr	r3, [pc, #232]	; (8015f14 <maquina_estados+0xf4>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7fb faa5 	bl	8011380 <osSemaphoreAcquire>
		  osThreadSuspend(leer_sensores_Id);
 8015e36:	4b38      	ldr	r3, [pc, #224]	; (8015f18 <maquina_estados+0xf8>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7fb f96c 	bl	8011118 <osThreadSuspend>
		  osThreadSuspend(procesar_datos_Id);
 8015e40:	4b36      	ldr	r3, [pc, #216]	; (8015f1c <maquina_estados+0xfc>)
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7fb f967 	bl	8011118 <osThreadSuspend>
		  osThreadSuspend(enviar_BLE_Id);
 8015e4a:	4b35      	ldr	r3, [pc, #212]	; (8015f20 <maquina_estados+0x100>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7fb f962 	bl	8011118 <osThreadSuspend>
		  osThreadSuspend(dormir_uc_Id);
 8015e54:	4b33      	ldr	r3, [pc, #204]	; (8015f24 <maquina_estados+0x104>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f7fb f95d 	bl	8011118 <osThreadSuspend>
		  osThreadSuspend(escaneo_Id);
 8015e5e:	4b32      	ldr	r3, [pc, #200]	; (8015f28 <maquina_estados+0x108>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7fb f958 	bl	8011118 <osThreadSuspend>
		  osThreadSuspend(extraer_fichero_Id);
 8015e68:	4b30      	ldr	r3, [pc, #192]	; (8015f2c <maquina_estados+0x10c>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f7fb f953 	bl	8011118 <osThreadSuspend>
		  switch(estado_uc_actual)
 8015e72:	4b2f      	ldr	r3, [pc, #188]	; (8015f30 <maquina_estados+0x110>)
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	2b05      	cmp	r3, #5
 8015e78:	d8d6      	bhi.n	8015e28 <maquina_estados+0x8>
 8015e7a:	a201      	add	r2, pc, #4	; (adr r2, 8015e80 <maquina_estados+0x60>)
 8015e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e80:	08015e99 	.word	0x08015e99
 8015e84:	08015ebb 	.word	0x08015ebb
 8015e88:	08015e29 	.word	0x08015e29
 8015e8c:	08015e29 	.word	0x08015e29
 8015e90:	08015eff 	.word	0x08015eff
 8015e94:	08015ee9 	.word	0x08015ee9
		  {
			  case   ESPERA_COMANDOS:
				  if(estaba_dormido == 1)
 8015e98:	4b26      	ldr	r3, [pc, #152]	; (8015f34 <maquina_estados+0x114>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	2b01      	cmp	r3, #1
 8015e9e:	d101      	bne.n	8015ea4 <maquina_estados+0x84>
				  {
					  wake_up_uc();
 8015ea0:	f000 f932 	bl	8016108 <wake_up_uc>
				  }
				  //osThreadResume(enviar_BLE_Id);
				  osThreadResume(dormir_uc_Id);
 8015ea4:	4b1f      	ldr	r3, [pc, #124]	; (8015f24 <maquina_estados+0x104>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7fb f969 	bl	8011180 <osThreadResume>
				  osSemaphoreRelease(dormir_uc_semaphore_Id);
 8015eae:	4b22      	ldr	r3, [pc, #136]	; (8015f38 <maquina_estados+0x118>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f7fb faca 	bl	801144c <osSemaphoreRelease>
			  break;
 8015eb8:	e02b      	b.n	8015f12 <maquina_estados+0xf2>
			  case TOMANDO_DATOS:
				  	if(estaba_dormido == 1)
 8015eba:	4b1e      	ldr	r3, [pc, #120]	; (8015f34 <maquina_estados+0x114>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	2b01      	cmp	r3, #1
 8015ec0:	d101      	bne.n	8015ec6 <maquina_estados+0xa6>
				  	{
				  		wake_up_uc();
 8015ec2:	f000 f921 	bl	8016108 <wake_up_uc>
				  	}
				  crear_configuracion_archivos_inicial();
 8015ec6:	f000 fc83 	bl	80167d0 <crear_configuracion_archivos_inicial>

				  abrir_SD();
 8015eca:	f7fa fe7f 	bl	8010bcc <abrir_SD>
				  abrir_SD_RAW();
 8015ece:	f7fa fefe 	bl	8010cce <abrir_SD_RAW>

				  osThreadResume(leer_sensores_Id);
 8015ed2:	4b11      	ldr	r3, [pc, #68]	; (8015f18 <maquina_estados+0xf8>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f7fb f952 	bl	8011180 <osThreadResume>
				  osThreadResume(procesar_datos_Id);
 8015edc:	4b0f      	ldr	r3, [pc, #60]	; (8015f1c <maquina_estados+0xfc>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7fb f94d 	bl	8011180 <osThreadResume>
			  break;
 8015ee6:	e014      	b.n	8015f12 <maquina_estados+0xf2>
			  case	  BAJO_CONSUMO :

				  osThreadResume(dormir_uc_Id);
 8015ee8:	4b0e      	ldr	r3, [pc, #56]	; (8015f24 <maquina_estados+0x104>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7fb f947 	bl	8011180 <osThreadResume>
				  osSemaphoreRelease(dormir_uc_semaphore_Id);
 8015ef2:	4b11      	ldr	r3, [pc, #68]	; (8015f38 <maquina_estados+0x118>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7fb faa8 	bl	801144c <osSemaphoreRelease>
			  break;
 8015efc:	e009      	b.n	8015f12 <maquina_estados+0xf2>
				  //osThreadResume(procesar_datos_Id);
				  //osThreadResume(enviar_BLE_Id);
			 break;
			  case	 EXTRACCION :
			  {
				  if(estaba_dormido == 1)
 8015efe:	4b0d      	ldr	r3, [pc, #52]	; (8015f34 <maquina_estados+0x114>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2b01      	cmp	r3, #1
 8015f04:	d101      	bne.n	8015f0a <maquina_estados+0xea>
				  {
				  	wake_up_uc();
 8015f06:	f000 f8ff 	bl	8016108 <wake_up_uc>
				  }
				  Archivo_seleccionado = 0;
 8015f0a:	4b0c      	ldr	r3, [pc, #48]	; (8015f3c <maquina_estados+0x11c>)
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8015f10:	bf00      	nop
	  	  osSemaphoreAcquire(maquina_estados_semaphore_Id, osWaitForever); //Esperamos semáforo y se apagan tareas
 8015f12:	e789      	b.n	8015e28 <maquina_estados+0x8>
 8015f14:	2000c86c 	.word	0x2000c86c
 8015f18:	2000b83c 	.word	0x2000b83c
 8015f1c:	2000b840 	.word	0x2000b840
 8015f20:	2000b844 	.word	0x2000b844
 8015f24:	2000b834 	.word	0x2000b834
 8015f28:	2000b84c 	.word	0x2000b84c
 8015f2c:	2000b850 	.word	0x2000b850
 8015f30:	200000dc 	.word	0x200000dc
 8015f34:	200000e0 	.word	0x200000e0
 8015f38:	2000c868 	.word	0x2000c868
 8015f3c:	2000b854 	.word	0x2000b854

08015f40 <dormir_uc>:
			  break;
		  }
  }
}
static void dormir_uc(void *argument)
{
 8015f40:	b5b0      	push	{r4, r5, r7, lr}
 8015f42:	b092      	sub	sp, #72	; 0x48
 8015f44:	af02      	add	r7, sp, #8
 8015f46:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	  //Espero a que me liberen semáforo desde otra tarea
	  osSemaphoreAcquire(dormir_uc_semaphore_Id,osWaitForever);
 8015f48:	4b59      	ldr	r3, [pc, #356]	; (80160b0 <dormir_uc+0x170>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7fb fa15 	bl	8011380 <osSemaphoreAcquire>

	  //Habilito la interrupción asociada al ACC
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8015f56:	2200      	movs	r2, #0
 8015f58:	210f      	movs	r1, #15
 8015f5a:	2008      	movs	r0, #8
 8015f5c:	f7ef ffe0 	bl	8005f20 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8015f60:	2008      	movs	r0, #8
 8015f62:	f7ef fff9 	bl	8005f58 <HAL_NVIC_EnableIRQ>

	  DATALOG_SD_DeInit();
 8015f66:	f7fa fec3 	bl	8010cf0 <DATALOG_SD_DeInit>
	  apagar_zona_3v3();
 8015f6a:	f000 fbf6 	bl	801675a <apagar_zona_3v3>

	  osThreadSuspend(gestionar_comandos_BLE_Id);
 8015f6e:	4b51      	ldr	r3, [pc, #324]	; (80160b4 <dormir_uc+0x174>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7fb f8d0 	bl	8011118 <osThreadSuspend>
	  char numero_ficheros_str[50];
	  int size = sprintf(numero_ficheros_str,"Me duermo");
 8015f78:	f107 0308 	add.w	r3, r7, #8
 8015f7c:	4a4e      	ldr	r2, [pc, #312]	; (80160b8 <dormir_uc+0x178>)
 8015f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015f80:	c303      	stmia	r3!, {r0, r1}
 8015f82:	801a      	strh	r2, [r3, #0]
 8015f84:	2309      	movs	r3, #9
 8015f86:	63fb      	str	r3, [r7, #60]	; 0x3c
	  aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,numero_ficheros_str);
 8015f88:	4b4c      	ldr	r3, [pc, #304]	; (80160bc <dormir_uc+0x17c>)
 8015f8a:	8818      	ldrh	r0, [r3, #0]
 8015f8c:	4b4c      	ldr	r3, [pc, #304]	; (80160c0 <dormir_uc+0x180>)
 8015f8e:	8819      	ldrh	r1, [r3, #0]
 8015f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f92:	b2da      	uxtb	r2, r3
 8015f94:	f107 0308 	add.w	r3, r7, #8
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	f7ff f8d1 	bl	8015144 <aci_gatt_update_char_value>
	  osThreadResume(gestionar_comandos_BLE_Id);
 8015fa2:	4b44      	ldr	r3, [pc, #272]	; (80160b4 <dormir_uc+0x174>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7fb f8ea 	bl	8011180 <osThreadResume>

	  BSP_MOTION_SENSOR_SetOutputDataRate(LSM6DSM_0, MOTION_GYRO, FREQ_DURANTE_LP);
 8015fac:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8015fb0:	2101      	movs	r1, #1
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	f7ef f974 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
	  BSP_MOTION_SENSOR_SetOutputDataRate(LSM6DSM_0, MOTION_ACCELERO,FREQ_DURANTE_LP);
 8015fb8:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8015fbc:	2102      	movs	r1, #2
 8015fbe:	2000      	movs	r0, #0
 8015fc0:	f7ef f96e 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
	  BSP_MOTION_SENSOR_SetOutputDataRate(LSM303AGR_MAG_0, MOTION_MAGNETO, FREQ_DURANTE_LP);
 8015fc4:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8015fc8:	2104      	movs	r1, #4
 8015fca:	2001      	movs	r0, #1
 8015fcc:	f7ef f968 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
	  BSP_MOTION_SENSOR_SetOutputDataRate(LSM303AGR_MAG_0, MOTION_ACCELERO, FREQ_DURANTE_LP);
 8015fd0:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8015fd4:	2102      	movs	r1, #2
 8015fd6:	2001      	movs	r0, #1
 8015fd8:	f7ef f962 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>

	  estaba_dormido =1;
 8015fdc:	4b39      	ldr	r3, [pc, #228]	; (80160c4 <dormir_uc+0x184>)
 8015fde:	2201      	movs	r2, #1
 8015fe0:	601a      	str	r2, [r3, #0]
	  HAL_PWREx_EnterSTOP0Mode(PWR_STOPENTRY_WFI);
 8015fe2:	2001      	movs	r0, #1
 8015fe4:	f7f0 fdd2 	bl	8006b8c <HAL_PWREx_EnterSTOP0Mode>

	  if(despertar == 1)
 8015fe8:	4b37      	ldr	r3, [pc, #220]	; (80160c8 <dormir_uc+0x188>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	2b01      	cmp	r3, #1
 8015fee:	d12f      	bne.n	8016050 <dormir_uc+0x110>
	  {
		  osThreadSuspend(gestionar_comandos_BLE_Id);
 8015ff0:	4b30      	ldr	r3, [pc, #192]	; (80160b4 <dormir_uc+0x174>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f7fb f88f 	bl	8011118 <osThreadSuspend>
		 	  numero_ficheros_str[50];
		 	  size = sprintf(numero_ficheros_str,"Me levanto tomo");
 8015ffa:	f107 0308 	add.w	r3, r7, #8
 8015ffe:	4a33      	ldr	r2, [pc, #204]	; (80160cc <dormir_uc+0x18c>)
 8016000:	461c      	mov	r4, r3
 8016002:	4613      	mov	r3, r2
 8016004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801600a:	230f      	movs	r3, #15
 801600c:	63fb      	str	r3, [r7, #60]	; 0x3c
		 	  aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,numero_ficheros_str);
 801600e:	4b2b      	ldr	r3, [pc, #172]	; (80160bc <dormir_uc+0x17c>)
 8016010:	8818      	ldrh	r0, [r3, #0]
 8016012:	4b2b      	ldr	r3, [pc, #172]	; (80160c0 <dormir_uc+0x180>)
 8016014:	8819      	ldrh	r1, [r3, #0]
 8016016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016018:	b2da      	uxtb	r2, r3
 801601a:	f107 0308 	add.w	r3, r7, #8
 801601e:	9300      	str	r3, [sp, #0]
 8016020:	4613      	mov	r3, r2
 8016022:	2200      	movs	r2, #0
 8016024:	f7ff f88e 	bl	8015144 <aci_gatt_update_char_value>
		 	  osThreadResume(gestionar_comandos_BLE_Id);
 8016028:	4b22      	ldr	r3, [pc, #136]	; (80160b4 <dormir_uc+0x174>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	4618      	mov	r0, r3
 801602e:	f7fb f8a7 	bl	8011180 <osThreadResume>

	      estado_uc_actual_ant = TOMANDO_DATOS;
 8016032:	4b27      	ldr	r3, [pc, #156]	; (80160d0 <dormir_uc+0x190>)
 8016034:	2201      	movs	r2, #1
 8016036:	701a      	strb	r2, [r3, #0]
	 	  estado_uc_actual = TOMANDO_DATOS;
 8016038:	4b26      	ldr	r3, [pc, #152]	; (80160d4 <dormir_uc+0x194>)
 801603a:	2201      	movs	r2, #1
 801603c:	701a      	strb	r2, [r3, #0]
	 	  despertar = 0;
 801603e:	4b22      	ldr	r3, [pc, #136]	; (80160c8 <dormir_uc+0x188>)
 8016040:	2200      	movs	r2, #0
 8016042:	601a      	str	r2, [r3, #0]
	 	  osSemaphoreRelease(maquina_estados_semaphore_Id);
 8016044:	4b24      	ldr	r3, [pc, #144]	; (80160d8 <dormir_uc+0x198>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	4618      	mov	r0, r3
 801604a:	f7fb f9ff 	bl	801144c <osSemaphoreRelease>
 801604e:	e77b      	b.n	8015f48 <dormir_uc+0x8>
	  }
	  else
	  {
		  HAL_Delay(1000);
 8016050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016054:	f7ef fe68 	bl	8005d28 <HAL_Delay>
		  osThreadSuspend(gestionar_comandos_BLE_Id);
 8016058:	4b16      	ldr	r3, [pc, #88]	; (80160b4 <dormir_uc+0x174>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	4618      	mov	r0, r3
 801605e:	f7fb f85b 	bl	8011118 <osThreadSuspend>
		  		 	  numero_ficheros_str[50];
		  		 	  size = sprintf(numero_ficheros_str,"Me levanto duermo");
 8016062:	f107 0308 	add.w	r3, r7, #8
 8016066:	4a1d      	ldr	r2, [pc, #116]	; (80160dc <dormir_uc+0x19c>)
 8016068:	461c      	mov	r4, r3
 801606a:	4615      	mov	r5, r2
 801606c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801606e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016070:	682b      	ldr	r3, [r5, #0]
 8016072:	8023      	strh	r3, [r4, #0]
 8016074:	2311      	movs	r3, #17
 8016076:	63fb      	str	r3, [r7, #60]	; 0x3c
		  		 	  aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,numero_ficheros_str);
 8016078:	4b10      	ldr	r3, [pc, #64]	; (80160bc <dormir_uc+0x17c>)
 801607a:	8818      	ldrh	r0, [r3, #0]
 801607c:	4b10      	ldr	r3, [pc, #64]	; (80160c0 <dormir_uc+0x180>)
 801607e:	8819      	ldrh	r1, [r3, #0]
 8016080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016082:	b2da      	uxtb	r2, r3
 8016084:	f107 0308 	add.w	r3, r7, #8
 8016088:	9300      	str	r3, [sp, #0]
 801608a:	4613      	mov	r3, r2
 801608c:	2200      	movs	r2, #0
 801608e:	f7ff f859 	bl	8015144 <aci_gatt_update_char_value>
		  		 	  osThreadResume(gestionar_comandos_BLE_Id);
 8016092:	4b08      	ldr	r3, [pc, #32]	; (80160b4 <dormir_uc+0x174>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4618      	mov	r0, r3
 8016098:	f7fb f872 	bl	8011180 <osThreadResume>
		  		 	  HAL_Delay(1000);
 801609c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80160a0:	f7ef fe42 	bl	8005d28 <HAL_Delay>
		  osSemaphoreRelease(dormir_uc_semaphore_Id);
 80160a4:	4b02      	ldr	r3, [pc, #8]	; (80160b0 <dormir_uc+0x170>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4618      	mov	r0, r3
 80160aa:	f7fb f9cf 	bl	801144c <osSemaphoreRelease>
  {
 80160ae:	e74b      	b.n	8015f48 <dormir_uc+0x8>
 80160b0:	2000c868 	.word	0x2000c868
 80160b4:	2000b838 	.word	0x2000b838
 80160b8:	0801929c 	.word	0x0801929c
 80160bc:	2000bbce 	.word	0x2000bbce
 80160c0:	2000bbcc 	.word	0x2000bbcc
 80160c4:	200000e0 	.word	0x200000e0
 80160c8:	2000b830 	.word	0x2000b830
 80160cc:	080192a8 	.word	0x080192a8
 80160d0:	200000dd 	.word	0x200000dd
 80160d4:	200000dc 	.word	0x200000dc
 80160d8:	2000c86c 	.word	0x2000c86c
 80160dc:	080192b8 	.word	0x080192b8

080160e0 <HAL_GPIO_EXTI_Callback>:

  }

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	4603      	mov	r3, r0
 80160e8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_2)
 80160ea:	88fb      	ldrh	r3, [r7, #6]
 80160ec:	2b04      	cmp	r3, #4
 80160ee:	d105      	bne.n	80160fc <HAL_GPIO_EXTI_Callback+0x1c>
  {
	  /* EXTI interrupt init*/
	 HAL_NVIC_DisableIRQ(EXTI2_IRQn); //Desactivo la Interrupción hasta terminar de guardar el fichero
 80160f0:	2008      	movs	r0, #8
 80160f2:	f7ef ff3f 	bl	8005f74 <HAL_NVIC_DisableIRQ>
	 despertar = 1;
 80160f6:	4b03      	ldr	r3, [pc, #12]	; (8016104 <HAL_GPIO_EXTI_Callback+0x24>)
 80160f8:	2201      	movs	r2, #1
 80160fa:	601a      	str	r2, [r3, #0]

  }
}
 80160fc:	bf00      	nop
 80160fe:	3708      	adds	r7, #8
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}
 8016104:	2000b830 	.word	0x2000b830

08016108 <wake_up_uc>:
static void wake_up_uc(void)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b084      	sub	sp, #16
 801610c:	af00      	add	r7, sp, #0
	  //Para HAL:
		HAL_MspInit();
 801610e:	f7ec f933 	bl	8002378 <HAL_MspInit>
		iniciar_pin_SWDIO();
 8016112:	f000 fae5 	bl	80166e0 <iniciar_pin_SWDIO>
		encender_zona_3v3();
 8016116:	f000 fb15 	bl	8016744 <encender_zona_3v3>
		//Para BLE:
		//Pines para SPI BLE:
		HAL_PWREx_EnableVddIO2();
 801611a:	f7f0 fd27 	bl	8006b6c <HAL_PWREx_EnableVddIO2>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 801611e:	4b24      	ldr	r3, [pc, #144]	; (80161b0 <wake_up_uc+0xa8>)
 8016120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016122:	4a23      	ldr	r2, [pc, #140]	; (80161b0 <wake_up_uc+0xa8>)
 8016124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016128:	64d3      	str	r3, [r2, #76]	; 0x4c
 801612a:	4b21      	ldr	r3, [pc, #132]	; (80161b0 <wake_up_uc+0xa8>)
 801612c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016132:	60fb      	str	r3, [r7, #12]
 8016134:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8016136:	4b1e      	ldr	r3, [pc, #120]	; (80161b0 <wake_up_uc+0xa8>)
 8016138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801613a:	4a1d      	ldr	r2, [pc, #116]	; (80161b0 <wake_up_uc+0xa8>)
 801613c:	f043 0304 	orr.w	r3, r3, #4
 8016140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016142:	4b1b      	ldr	r3, [pc, #108]	; (80161b0 <wake_up_uc+0xa8>)
 8016144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016146:	f003 0304 	and.w	r3, r3, #4
 801614a:	60bb      	str	r3, [r7, #8]
 801614c:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 801614e:	4b18      	ldr	r3, [pc, #96]	; (80161b0 <wake_up_uc+0xa8>)
 8016150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016152:	4a17      	ldr	r2, [pc, #92]	; (80161b0 <wake_up_uc+0xa8>)
 8016154:	f043 0302 	orr.w	r3, r3, #2
 8016158:	64d3      	str	r3, [r2, #76]	; 0x4c
 801615a:	4b15      	ldr	r3, [pc, #84]	; (80161b0 <wake_up_uc+0xa8>)
 801615c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801615e:	f003 0302 	and.w	r3, r3, #2
 8016162:	607b      	str	r3, [r7, #4]
 8016164:	687b      	ldr	r3, [r7, #4]
		//Incio SPI para BLE:
		BSP_SPI1_Init();
 8016166:	f7f4 f893 	bl	800a290 <BSP_SPI1_Init>
		//Para sensores:
		BSP_SPI2_Init();
 801616a:	f7f4 f839 	bl	800a1e0 <BSP_SPI2_Init>

		DATALOG_SD_Init();
 801616e:	f7fa fccd 	bl	8010b0c <DATALOG_SD_Init>
		BSP_MOTION_SENSOR_SetOutputDataRate(LSM6DSM_0, MOTION_GYRO, FREQ_DURANTE_HP);
 8016172:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80161b4 <wake_up_uc+0xac>
 8016176:	2101      	movs	r1, #1
 8016178:	2000      	movs	r0, #0
 801617a:	f7ef f891 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
		BSP_MOTION_SENSOR_SetOutputDataRate(LSM6DSM_0, MOTION_ACCELERO,FREQ_DURANTE_HP);
 801617e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80161b4 <wake_up_uc+0xac>
 8016182:	2102      	movs	r1, #2
 8016184:	2000      	movs	r0, #0
 8016186:	f7ef f88b 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
		BSP_MOTION_SENSOR_SetOutputDataRate(LSM303AGR_MAG_0, MOTION_MAGNETO, FREQ_DURANTE_HP);
 801618a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80161b4 <wake_up_uc+0xac>
 801618e:	2104      	movs	r1, #4
 8016190:	2001      	movs	r0, #1
 8016192:	f7ef f885 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
		BSP_MOTION_SENSOR_SetOutputDataRate(LSM303AGR_MAG_0, MOTION_ACCELERO, FREQ_DURANTE_HP);
 8016196:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80161b4 <wake_up_uc+0xac>
 801619a:	2102      	movs	r1, #2
 801619c:	2001      	movs	r0, #1
 801619e:	f7ef f87f 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
		estaba_dormido =0;
 80161a2:	4b05      	ldr	r3, [pc, #20]	; (80161b8 <wake_up_uc+0xb0>)
 80161a4:	2200      	movs	r2, #0
 80161a6:	601a      	str	r2, [r3, #0]
}
 80161a8:	bf00      	nop
 80161aa:	3710      	adds	r7, #16
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}
 80161b0:	40021000 	.word	0x40021000
 80161b4:	42500000 	.word	0x42500000
 80161b8:	200000e0 	.word	0x200000e0

080161bc <leer_sensores>:
static void leer_sensores(void *argument)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b096      	sub	sp, #88	; 0x58
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
	MEM_BLOCK_t msg;
	uint32_t contador;
  for(;;)
  {

	  BSP_MOTION_SENSOR_GetAxes(LSM6DSM_0,MOTION_ACCELERO ,&Axes_accel);
 80161c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80161c8:	461a      	mov	r2, r3
 80161ca:	2102      	movs	r1, #2
 80161cc:	2000      	movs	r0, #0
 80161ce:	f7ef f823 	bl	8005218 <BSP_MOTION_SENSOR_GetAxes>
	  BSP_MOTION_SENSOR_GetAxes(LSM6DSM_0,MOTION_GYRO,&Axes_gyro);
 80161d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80161d6:	461a      	mov	r2, r3
 80161d8:	2101      	movs	r1, #1
 80161da:	2000      	movs	r0, #0
 80161dc:	f7ef f81c 	bl	8005218 <BSP_MOTION_SENSOR_GetAxes>
	  BSP_MOTION_SENSOR_GetAxes(LSM303AGR_MAG_0,MOTION_MAGNETO ,&Axes_magne);
 80161e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161e4:	461a      	mov	r2, r3
 80161e6:	2104      	movs	r1, #4
 80161e8:	2001      	movs	r0, #1
 80161ea:	f7ef f815 	bl	8005218 <BSP_MOTION_SENSOR_GetAxes>

	   //Leemos el valor del sensor de presión.
	   //float Value;
	   //BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE, &Value);
	  // uint32_t tick = HAL_GetTick(); //Falta por meterlo en el mensaje que se guarda en la cola.
	   msg.Axes_accel = Axes_accel;
 80161ee:	f107 0308 	add.w	r3, r7, #8
 80161f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80161f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80161f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	   msg.Axes_gyro = Axes_gyro;
 80161fc:	f107 0314 	add.w	r3, r7, #20
 8016200:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8016204:	ca07      	ldmia	r2, {r0, r1, r2}
 8016206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	   msg.Axes_magne = Axes_magne;
 801620a:	f107 0320 	add.w	r3, r7, #32
 801620e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016212:	ca07      	ldmia	r2, {r0, r1, r2}
 8016214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	   msg.Idx = contador;
 8016218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801621a:	62fb      	str	r3, [r7, #44]	; 0x2c
	   contador++;
 801621c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801621e:	3301      	adds	r3, #1
 8016220:	657b      	str	r3, [r7, #84]	; 0x54
	   osMessageQueuePut(Q_Raw_Data, &msg,osPriorityNormal7 , osWaitForever); //PONGO LOS DATOS DE LOS SENSORES EN LA COLA
 8016222:	4b06      	ldr	r3, [pc, #24]	; (801623c <leer_sensores+0x80>)
 8016224:	6818      	ldr	r0, [r3, #0]
 8016226:	f107 0108 	add.w	r1, r7, #8
 801622a:	f04f 33ff 	mov.w	r3, #4294967295
 801622e:	221f      	movs	r2, #31
 8016230:	f7fb f9ea 	bl	8011608 <osMessageQueuePut>
	 osDelay(PERIODO_TOMA_DATOS);
 8016234:	200a      	movs	r0, #10
 8016236:	f7fa ffd7 	bl	80111e8 <osDelay>
	  BSP_MOTION_SENSOR_GetAxes(LSM6DSM_0,MOTION_ACCELERO ,&Axes_accel);
 801623a:	e7c3      	b.n	80161c4 <leer_sensores+0x8>
 801623c:	2000c8d8 	.word	0x2000c8d8

08016240 <gestionar_comandos_BLE>:
  }
}
char fichero_actual[100];
static void gestionar_comandos_BLE(void *argument) //Esta tarea se encarga de gestionar los eventos BLE
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  osSemaphoreAcquire(ble_semaphore_Id, osWaitForever);
 8016248:	4b19      	ldr	r3, [pc, #100]	; (80162b0 <gestionar_comandos_BLE+0x70>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	f04f 31ff 	mov.w	r1, #4294967295
 8016250:	4618      	mov	r0, r3
 8016252:	f7fb f895 	bl	8011380 <osSemaphoreAcquire>
	  if(estaba_dormido == 1)
 8016256:	4b17      	ldr	r3, [pc, #92]	; (80162b4 <gestionar_comandos_BLE+0x74>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2b01      	cmp	r3, #1
 801625c:	d101      	bne.n	8016262 <gestionar_comandos_BLE+0x22>
	  {
		  wake_up_uc();
 801625e:	f7ff ff53 	bl	8016108 <wake_up_uc>
	  }

	  hci_user_evt_proc();
 8016262:	f7ff fb9b 	bl	801599c <hci_user_evt_proc>

	  if(estado_uc_actual_ant != estado_uc_actual)
 8016266:	4b14      	ldr	r3, [pc, #80]	; (80162b8 <gestionar_comandos_BLE+0x78>)
 8016268:	781a      	ldrb	r2, [r3, #0]
 801626a:	4b14      	ldr	r3, [pc, #80]	; (80162bc <gestionar_comandos_BLE+0x7c>)
 801626c:	781b      	ldrb	r3, [r3, #0]
 801626e:	429a      	cmp	r2, r3
 8016270:	d008      	beq.n	8016284 <gestionar_comandos_BLE+0x44>
	  {
		  estado_uc_actual_ant = estado_uc_actual; //Importante ya que sino se libera +1 semáforos de maquina de estados
 8016272:	4b12      	ldr	r3, [pc, #72]	; (80162bc <gestionar_comandos_BLE+0x7c>)
 8016274:	781a      	ldrb	r2, [r3, #0]
 8016276:	4b10      	ldr	r3, [pc, #64]	; (80162b8 <gestionar_comandos_BLE+0x78>)
 8016278:	701a      	strb	r2, [r3, #0]
		  osSemaphoreRelease(maquina_estados_semaphore_Id);
 801627a:	4b11      	ldr	r3, [pc, #68]	; (80162c0 <gestionar_comandos_BLE+0x80>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	4618      	mov	r0, r3
 8016280:	f7fb f8e4 	bl	801144c <osSemaphoreRelease>
	  }
	  if((estado_uc_actual == EXTRACCION) && ( Archivo_seleccionado ))
 8016284:	4b0d      	ldr	r3, [pc, #52]	; (80162bc <gestionar_comandos_BLE+0x7c>)
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	2b04      	cmp	r3, #4
 801628a:	d1dd      	bne.n	8016248 <gestionar_comandos_BLE+0x8>
 801628c:	4b0d      	ldr	r3, [pc, #52]	; (80162c4 <gestionar_comandos_BLE+0x84>)
 801628e:	781b      	ldrb	r3, [r3, #0]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d0d9      	beq.n	8016248 <gestionar_comandos_BLE+0x8>
	  {
		  Archivo_seleccionado = 0;
 8016294:	4b0b      	ldr	r3, [pc, #44]	; (80162c4 <gestionar_comandos_BLE+0x84>)
 8016296:	2200      	movs	r2, #0
 8016298:	701a      	strb	r2, [r3, #0]
		  osSemaphoreRelease(extraccion_semaphore_Id);
 801629a:	4b0b      	ldr	r3, [pc, #44]	; (80162c8 <gestionar_comandos_BLE+0x88>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	4618      	mov	r0, r3
 80162a0:	f7fb f8d4 	bl	801144c <osSemaphoreRelease>
		  osThreadResume(extraer_fichero_Id);
 80162a4:	4b09      	ldr	r3, [pc, #36]	; (80162cc <gestionar_comandos_BLE+0x8c>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7fa ff69 	bl	8011180 <osThreadResume>
	  osSemaphoreAcquire(ble_semaphore_Id, osWaitForever);
 80162ae:	e7cb      	b.n	8016248 <gestionar_comandos_BLE+0x8>
 80162b0:	2000c860 	.word	0x2000c860
 80162b4:	200000e0 	.word	0x200000e0
 80162b8:	200000dd 	.word	0x200000dd
 80162bc:	200000dc 	.word	0x200000dc
 80162c0:	2000c86c 	.word	0x2000c86c
 80162c4:	2000b854 	.word	0x2000b854
 80162c8:	2000c864 	.word	0x2000c864
 80162cc:	2000b850 	.word	0x2000b850

080162d0 <enviar_BLE>:
	  }
  }
}
extern uint8_t connection;
static void enviar_BLE(void *argument)
{
 80162d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162d2:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80162d6:	af0a      	add	r7, sp, #40	; 0x28
 80162d8:	f107 030c 	add.w	r3, r7, #12
 80162dc:	6018      	str	r0, [r3, #0]
		char t_ptr[30];
		int i = 0;
 80162de:	2300      	movs	r3, #0
 80162e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		MEM_BLOCK_t msg_r;
		char escribir_hora[200];
		char escribir_sd[200];
		uint32_t tick = HAL_GetTick();
 80162e4:	f7ef fd14 	bl	8005d10 <HAL_GetTick>
 80162e8:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
		for(;;)
		{
			osDelay(100);
 80162ec:	2064      	movs	r0, #100	; 0x64
 80162ee:	f7fa ff7b 	bl	80111e8 <osDelay>

				if(estado_uc_actual == ESPERA_COMANDOS)
 80162f2:	4b34      	ldr	r3, [pc, #208]	; (80163c4 <enviar_BLE+0xf4>)
 80162f4:	781b      	ldrb	r3, [r3, #0]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d126      	bne.n	8016348 <enviar_BLE+0x78>
				{
					//Se suspende la tarea que procesa evento cuando salta una interrupción para que no se active antes de terminar de ejecutar la actualización de la característica.
					osThreadSuspend(gestionar_comandos_BLE_Id);
 80162fa:	4b33      	ldr	r3, [pc, #204]	; (80163c8 <enviar_BLE+0xf8>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	4618      	mov	r0, r3
 8016300:	f7fa ff0a 	bl	8011118 <osThreadSuspend>
					uint32_t my_tick = HAL_GetTick();
 8016304:	f7ef fd04 	bl	8005d10 <HAL_GetTick>
 8016308:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
					int size = sprintf(t_ptr,"%ld",my_tick);
 801630c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8016310:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8016314:	492d      	ldr	r1, [pc, #180]	; (80163cc <enviar_BLE+0xfc>)
 8016316:	4618      	mov	r0, r3
 8016318:	f000 fc1c 	bl	8016b54 <siprintf>
 801631c:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
					aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,t_ptr);
 8016320:	4b2b      	ldr	r3, [pc, #172]	; (80163d0 <enviar_BLE+0x100>)
 8016322:	8818      	ldrh	r0, [r3, #0]
 8016324:	4b2b      	ldr	r3, [pc, #172]	; (80163d4 <enviar_BLE+0x104>)
 8016326:	8819      	ldrh	r1, [r3, #0]
 8016328:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801632c:	b2da      	uxtb	r2, r3
 801632e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8016332:	9300      	str	r3, [sp, #0]
 8016334:	4613      	mov	r3, r2
 8016336:	2200      	movs	r2, #0
 8016338:	f7fe ff04 	bl	8015144 <aci_gatt_update_char_value>
					osThreadResume(gestionar_comandos_BLE_Id);
 801633c:	4b22      	ldr	r3, [pc, #136]	; (80163c8 <enviar_BLE+0xf8>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4618      	mov	r0, r3
 8016342:	f7fa ff1d 	bl	8011180 <osThreadResume>
 8016346:	e7d1      	b.n	80162ec <enviar_BLE+0x1c>
				}
				else if (estado_uc_actual == STREAMING)
 8016348:	4b1e      	ldr	r3, [pc, #120]	; (80163c4 <enviar_BLE+0xf4>)
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	2b03      	cmp	r3, #3
 801634e:	d1cd      	bne.n	80162ec <enviar_BLE+0x1c>
				{
					 osMessageQueueGet (Q_Raw_Data, &msg_r, osPriorityNormal7 , osWaitForever);
 8016350:	4b21      	ldr	r3, [pc, #132]	; (80163d8 <enviar_BLE+0x108>)
 8016352:	6818      	ldr	r0, [r3, #0]
 8016354:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8016358:	f04f 33ff 	mov.w	r3, #4294967295
 801635c:	221f      	movs	r2, #31
 801635e:	f7fb f9c7 	bl	80116f0 <osMessageQueueGet>
					 RTC_obtener_hora_str(escribir_hora);
 8016362:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8016366:	4618      	mov	r0, r3
 8016368:	f7ea feee 	bl	8001148 <RTC_obtener_hora_str>
					 //sprintf(escribir_sd,"%s;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld%ld\r\n",escribir_hora,tick,msg_r.Axes_accel.x,  msg_r.Axes_accel.y, msg_r.Axes_accel.z, msg_r.Axes_gyro.x,   msg_r.Axes_gyro.y,  msg_r.Axes_gyro.z, msg_r.Axes_magne.x, msg_r.Axes_magne.y,  msg_r.Axes_magne.z, a_abs_2);
					 //write_SD(escribir_sd);
					 sprintf(escribir_sd,"%s;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld\r\n",escribir_hora,tick,msg_r.Axes_accel.x,  msg_r.Axes_accel.y, msg_r.Axes_accel.z, msg_r.Axes_gyro.x,   msg_r.Axes_gyro.y,  msg_r.Axes_gyro.z, msg_r.Axes_magne.x, msg_r.Axes_magne.y,  msg_r.Axes_magne.z);
 801636c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8016370:	60bb      	str	r3, [r7, #8]
 8016372:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8016376:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 801637a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 801637e:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8016382:	f8d7 51b4 	ldr.w	r5, [r7, #436]	; 0x1b4
 8016386:	f8d7 61b8 	ldr.w	r6, [r7, #440]	; 0x1b8
 801638a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801638e:	607b      	str	r3, [r7, #4]
 8016390:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8016394:	f107 0ed8 	add.w	lr, r7, #216	; 0xd8
 8016398:	f107 0c10 	add.w	ip, r7, #16
 801639c:	9308      	str	r3, [sp, #32]
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	9307      	str	r3, [sp, #28]
 80163a2:	9606      	str	r6, [sp, #24]
 80163a4:	9505      	str	r5, [sp, #20]
 80163a6:	9404      	str	r4, [sp, #16]
 80163a8:	9003      	str	r0, [sp, #12]
 80163aa:	9102      	str	r1, [sp, #8]
 80163ac:	9201      	str	r2, [sp, #4]
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	9300      	str	r3, [sp, #0]
 80163b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80163b6:	4672      	mov	r2, lr
 80163b8:	4908      	ldr	r1, [pc, #32]	; (80163dc <enviar_BLE+0x10c>)
 80163ba:	4660      	mov	r0, ip
 80163bc:	f000 fbca 	bl	8016b54 <siprintf>
			osDelay(100);
 80163c0:	e794      	b.n	80162ec <enviar_BLE+0x1c>
 80163c2:	bf00      	nop
 80163c4:	200000dc 	.word	0x200000dc
 80163c8:	2000b838 	.word	0x2000b838
 80163cc:	080192cc 	.word	0x080192cc
 80163d0:	2000bbce 	.word	0x2000bbce
 80163d4:	2000bbcc 	.word	0x2000bbcc
 80163d8:	2000c8d8 	.word	0x2000c8d8
 80163dc:	080192d0 	.word	0x080192d0

080163e0 <extraer_fichero>:
				}
		}
}
static FRESULT extraer_fichero(void *argument)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	f5ad 7d44 	sub.w	sp, sp, #784	; 0x310
 80163e6:	af02      	add	r7, sp, #8
 80163e8:	1d3b      	adds	r3, r7, #4
 80163ea:	6018      	str	r0, [r3, #0]
  for(;;)
  {
	  osSemaphoreAcquire(extraccion_semaphore_Id, osWaitForever);
 80163ec:	4b3a      	ldr	r3, [pc, #232]	; (80164d8 <extraer_fichero+0xf8>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	f04f 31ff 	mov.w	r1, #4294967295
 80163f4:	4618      	mov	r0, r3
 80163f6:	f7fa ffc3 	bl	8011380 <osSemaphoreAcquire>
	  char ruta[100];
	  char buff[100];
	  sprintf(ruta,"%s/%s_sen.csv", fichero_actual,fichero_actual);
 80163fa:	f107 0008 	add.w	r0, r7, #8
 80163fe:	4b37      	ldr	r3, [pc, #220]	; (80164dc <extraer_fichero+0xfc>)
 8016400:	4a36      	ldr	r2, [pc, #216]	; (80164dc <extraer_fichero+0xfc>)
 8016402:	4937      	ldr	r1, [pc, #220]	; (80164e0 <extraer_fichero+0x100>)
 8016404:	f000 fba6 	bl	8016b54 <siprintf>
	  //leer_fichero(ruta, buff, 100);
	  FIL fsrc;
	  FRESULT fr;          /* FatFs function common result code */
	  UINT br;         /* File read/write count */

	  fr = f_open(&fsrc, ruta, FA_READ);
 8016408:	f107 0108 	add.w	r1, r7, #8
 801640c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8016410:	2201      	movs	r2, #1
 8016412:	4618      	mov	r0, r3
 8016414:	f7f8 f9da 	bl	800e7cc <f_open>
 8016418:	4603      	mov	r3, r0
 801641a:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
	  if(fr == FR_OK)
 801641e:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 8016422:	2b00      	cmp	r3, #0
 8016424:	d145      	bne.n	80164b2 <extraer_fichero+0xd2>
	  {
		  uint16_t size = f_size(&fsrc);
 8016426:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801642a:	68db      	ldr	r3, [r3, #12]
 801642c:	f8a7 3304 	strh.w	r3, [r7, #772]	; 0x304
		  if (fr) return (int)fr;
 8016430:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 8016434:	2b00      	cmp	r3, #0
 8016436:	d002      	beq.n	801643e <extraer_fichero+0x5e>
 8016438:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 801643c:	e047      	b.n	80164ce <extraer_fichero+0xee>
		  for (;;)
		  {
			  f_read(&fsrc, buff, 20, &br);  /* Read a chunk of data from the source file */
 801643e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8016442:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8016446:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 801644a:	2214      	movs	r2, #20
 801644c:	f7f8 fb8c 	bl	800eb68 <f_read>

			  osThreadSuspend(gestionar_comandos_BLE_Id);
 8016450:	4b24      	ldr	r3, [pc, #144]	; (80164e4 <extraer_fichero+0x104>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	4618      	mov	r0, r3
 8016456:	f7fa fe5f 	bl	8011118 <osThreadSuspend>
			  aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, 20,buff);
 801645a:	4b23      	ldr	r3, [pc, #140]	; (80164e8 <extraer_fichero+0x108>)
 801645c:	8818      	ldrh	r0, [r3, #0]
 801645e:	4b23      	ldr	r3, [pc, #140]	; (80164ec <extraer_fichero+0x10c>)
 8016460:	8819      	ldrh	r1, [r3, #0]
 8016462:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016466:	9300      	str	r3, [sp, #0]
 8016468:	2314      	movs	r3, #20
 801646a:	2200      	movs	r2, #0
 801646c:	f7fe fe6a 	bl	8015144 <aci_gatt_update_char_value>
			  osThreadResume(gestionar_comandos_BLE_Id);
 8016470:	4b1c      	ldr	r3, [pc, #112]	; (80164e4 <extraer_fichero+0x104>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	4618      	mov	r0, r3
 8016476:	f7fa fe83 	bl	8011180 <osThreadResume>

			  if (br == 0) break; /* error or eof */
 801647a:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801647e:	2b00      	cmp	r3, #0
 8016480:	d003      	beq.n	801648a <extraer_fichero+0xaa>
			  osDelay(TIEMPO_ENTRE_EXTRACCIONES_DE_DATOS);
 8016482:	2000      	movs	r0, #0
 8016484:	f7fa feb0 	bl	80111e8 <osDelay>
			  f_read(&fsrc, buff, 20, &br);  /* Read a chunk of data from the source file */
 8016488:	e7d9      	b.n	801643e <extraer_fichero+0x5e>
			  if (br == 0) break; /* error or eof */
 801648a:	bf00      	nop
		  }
	      /* Close open files */
		  aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, SIZE_FIN_TRAMA_EXTRACCION, FIN_TRAMA_EXTRACCION);
 801648c:	4b16      	ldr	r3, [pc, #88]	; (80164e8 <extraer_fichero+0x108>)
 801648e:	8818      	ldrh	r0, [r3, #0]
 8016490:	4b16      	ldr	r3, [pc, #88]	; (80164ec <extraer_fichero+0x10c>)
 8016492:	8819      	ldrh	r1, [r3, #0]
 8016494:	4b16      	ldr	r3, [pc, #88]	; (80164f0 <extraer_fichero+0x110>)
 8016496:	9300      	str	r3, [sp, #0]
 8016498:	2304      	movs	r3, #4
 801649a:	2200      	movs	r2, #0
 801649c:	f7fe fe52 	bl	8015144 <aci_gatt_update_char_value>
		  fr = f_close(&fsrc);
 80164a0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80164a4:	4618      	mov	r0, r3
 80164a6:	f7f8 fe91 	bl	800f1cc <f_close>
 80164aa:	4603      	mov	r3, r0
 80164ac:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
 80164b0:	e009      	b.n	80164c6 <extraer_fichero+0xe6>
	  }
	  else
	  {
		  aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, sizeof("Not Allowed"),"Not Allowed");
 80164b2:	4b0d      	ldr	r3, [pc, #52]	; (80164e8 <extraer_fichero+0x108>)
 80164b4:	8818      	ldrh	r0, [r3, #0]
 80164b6:	4b0d      	ldr	r3, [pc, #52]	; (80164ec <extraer_fichero+0x10c>)
 80164b8:	8819      	ldrh	r1, [r3, #0]
 80164ba:	4b0e      	ldr	r3, [pc, #56]	; (80164f4 <extraer_fichero+0x114>)
 80164bc:	9300      	str	r3, [sp, #0]
 80164be:	230c      	movs	r3, #12
 80164c0:	2200      	movs	r2, #0
 80164c2:	f7fe fe3f 	bl	8015144 <aci_gatt_update_char_value>
	  }
      Archivo_seleccionado = 0;
 80164c6:	4b0c      	ldr	r3, [pc, #48]	; (80164f8 <extraer_fichero+0x118>)
 80164c8:	2200      	movs	r2, #0
 80164ca:	701a      	strb	r2, [r3, #0]
  {
 80164cc:	e78e      	b.n	80163ec <extraer_fichero+0xc>
  }

}
 80164ce:	4618      	mov	r0, r3
 80164d0:	f507 7742 	add.w	r7, r7, #776	; 0x308
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	2000c864 	.word	0x2000c864
 80164dc:	2000c870 	.word	0x2000c870
 80164e0:	08019300 	.word	0x08019300
 80164e4:	2000b838 	.word	0x2000b838
 80164e8:	2000bbce 	.word	0x2000bbce
 80164ec:	2000bbcc 	.word	0x2000bbcc
 80164f0:	08019310 	.word	0x08019310
 80164f4:	08019314 	.word	0x08019314
 80164f8:	2000b854 	.word	0x2000b854

080164fc <Escaneo>:
static void Escaneo(void *argument)
{
 80164fc:	b480      	push	{r7}
 80164fe:	b083      	sub	sp, #12
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  for(;;)
 8016504:	e7fe      	b.n	8016504 <Escaneo+0x8>
	...

08016508 <Iniciar_sensores>:
  {

  }
}
static void Iniciar_sensores(void)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	af00      	add	r7, sp, #0
	  //El pin PA2 sirve para interrupciones del Acelerómetro.
	  // Inicializamos el sensor de LSM6DSM y el sensor LSM303AGR_MAG
	  BSP_MOTION_SENSOR_Init(LSM6DSM_0, MOTION_GYRO|MOTION_ACCELERO);
 801650c:	2103      	movs	r1, #3
 801650e:	2000      	movs	r0, #0
 8016510:	f7ee fd80 	bl	8005014 <BSP_MOTION_SENSOR_Init>
	  BSP_MOTION_SENSOR_Init(LSM303AGR_MAG_0, MOTION_MAGNETO);
 8016514:	2104      	movs	r1, #4
 8016516:	2001      	movs	r0, #1
 8016518:	f7ee fd7c 	bl	8005014 <BSP_MOTION_SENSOR_Init>

	  //Habilito los sensores, TODO: Mirar si es necesario
	  BSP_MOTION_SENSOR_Enable(LSM6DSM_0, MOTION_GYRO);
 801651c:	2101      	movs	r1, #1
 801651e:	2000      	movs	r0, #0
 8016520:	f7ee fe38 	bl	8005194 <BSP_MOTION_SENSOR_Enable>
	  BSP_MOTION_SENSOR_Enable(LSM6DSM_0, MOTION_ACCELERO);
 8016524:	2102      	movs	r1, #2
 8016526:	2000      	movs	r0, #0
 8016528:	f7ee fe34 	bl	8005194 <BSP_MOTION_SENSOR_Enable>
	  BSP_MOTION_SENSOR_Enable(LSM303AGR_MAG_0, MOTION_MAGNETO);
 801652c:	2104      	movs	r1, #4
 801652e:	2001      	movs	r0, #1
 8016530:	f7ee fe30 	bl	8005194 <BSP_MOTION_SENSOR_Enable>

	  BSP_MOTION_SENSOR_SetOutputDataRate(LSM6DSM_0, MOTION_GYRO, FREQ_DURANTE_HP);
 8016534:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801657c <Iniciar_sensores+0x74>
 8016538:	2101      	movs	r1, #1
 801653a:	2000      	movs	r0, #0
 801653c:	f7ee feb0 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
  	  BSP_MOTION_SENSOR_SetOutputDataRate(LSM6DSM_0, MOTION_ACCELERO,FREQ_DURANTE_HP);
 8016540:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801657c <Iniciar_sensores+0x74>
 8016544:	2102      	movs	r1, #2
 8016546:	2000      	movs	r0, #0
 8016548:	f7ee feaa 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
  	  BSP_MOTION_SENSOR_SetOutputDataRate(LSM303AGR_MAG_0, MOTION_MAGNETO, FREQ_DURANTE_HP);
 801654c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801657c <Iniciar_sensores+0x74>
 8016550:	2104      	movs	r1, #4
 8016552:	2001      	movs	r0, #1
 8016554:	f7ee fea4 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>
  	  BSP_MOTION_SENSOR_SetOutputDataRate(LSM303AGR_MAG_0, MOTION_ACCELERO, FREQ_DURANTE_HP);
 8016558:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801657c <Iniciar_sensores+0x74>
 801655c:	2102      	movs	r1, #2
 801655e:	2001      	movs	r0, #1
 8016560:	f7ee fe9e 	bl	80052a0 <BSP_MOTION_SENSOR_SetOutputDataRate>

  	  BSP_MOTION_SENSOR_SetFullScale(LSM6DSM_0, MOTION_ACCELERO,  FS_ACC);
 8016564:	2200      	movs	r2, #0
 8016566:	2102      	movs	r1, #2
 8016568:	2000      	movs	r0, #0
 801656a:	f7ee fedf 	bl	800532c <BSP_MOTION_SENSOR_SetFullScale>
	  ACCEL_MOTION_SENSOR_wakeup_Threshold(UMBRAL_ACC,UMBRAL_DURATION);
 801656e:	2102      	movs	r1, #2
 8016570:	2002      	movs	r0, #2
 8016572:	f7ee fd29 	bl	8004fc8 <ACCEL_MOTION_SENSOR_wakeup_Threshold>
}
 8016576:	bf00      	nop
 8016578:	bd80      	pop	{r7, pc}
 801657a:	bf00      	nop
 801657c:	42500000 	.word	0x42500000

08016580 <procesar_datos>:

static void procesar_datos(void *argument)
{
 8016580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016582:	b0ef      	sub	sp, #444	; 0x1bc
 8016584:	af0a      	add	r7, sp, #40	; 0x28
 8016586:	f107 030c 	add.w	r3, r7, #12
 801658a:	6018      	str	r0, [r3, #0]
	   static contador = 0;
	   char escribir_sd[200];
	   char escribir_hora[100];
	   for(;;)
	   {
	 	 osMessageQueueGet (Q_Raw_Data, &msg_r, osPriorityNormal7 , osWaitForever);
 801658c:	4b49      	ldr	r3, [pc, #292]	; (80166b4 <procesar_datos+0x134>)
 801658e:	6818      	ldr	r0, [r3, #0]
 8016590:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8016594:	f04f 33ff 	mov.w	r3, #4294967295
 8016598:	221f      	movs	r2, #31
 801659a:	f7fb f8a9 	bl	80116f0 <osMessageQueueGet>
	 	 osSemaphoreAcquire(escaneo_semaphore_Id,osWaitForever);
 801659e:	4b46      	ldr	r3, [pc, #280]	; (80166b8 <procesar_datos+0x138>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	f04f 31ff 	mov.w	r1, #4294967295
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7fa feea 	bl	8011380 <osSemaphoreAcquire>
		 uint32_t tick = HAL_GetTick();
 80165ac:	f7ef fbb0 	bl	8005d10 <HAL_GetTick>
 80165b0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
		 datos_sensores[10] =  msg_r.Axes_magne.y; //Magne Y
		 datos_sensores[11] =  msg_r.Axes_magne.z; //Magne Z*/

		// Año - mes - dia - hora -minuto - segundo   .dat
		//
		 sprintf(escribir_sd,"%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld\r\n", contador * PERIODO_TOMA_DATOS,tick,msg_r.Axes_accel.x,  msg_r.Axes_accel.y, msg_r.Axes_accel.z, msg_r.Axes_gyro.x,   msg_r.Axes_gyro.y,  msg_r.Axes_gyro.z, msg_r.Axes_magne.x, msg_r.Axes_magne.y,  msg_r.Axes_magne.z);
 80165b4:	4b41      	ldr	r3, [pc, #260]	; (80166bc <procesar_datos+0x13c>)
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	4613      	mov	r3, r2
 80165ba:	009b      	lsls	r3, r3, #2
 80165bc:	4413      	add	r3, r2
 80165be:	005b      	lsls	r3, r3, #1
 80165c0:	469e      	mov	lr, r3
 80165c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80165c6:	60bb      	str	r3, [r7, #8]
 80165c8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80165cc:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80165d0:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 80165d4:	f8d7 416c 	ldr.w	r4, [r7, #364]	; 0x16c
 80165d8:	f8d7 5170 	ldr.w	r5, [r7, #368]	; 0x170
 80165dc:	f8d7 6174 	ldr.w	r6, [r7, #372]	; 0x174
 80165e0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80165e4:	607b      	str	r3, [r7, #4]
 80165e6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80165ea:	f107 0c94 	add.w	ip, r7, #148	; 0x94
 80165ee:	9308      	str	r3, [sp, #32]
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	9307      	str	r3, [sp, #28]
 80165f4:	9606      	str	r6, [sp, #24]
 80165f6:	9505      	str	r5, [sp, #20]
 80165f8:	9404      	str	r4, [sp, #16]
 80165fa:	9003      	str	r0, [sp, #12]
 80165fc:	9102      	str	r1, [sp, #8]
 80165fe:	9201      	str	r2, [sp, #4]
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	9300      	str	r3, [sp, #0]
 8016604:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8016608:	4672      	mov	r2, lr
 801660a:	492d      	ldr	r1, [pc, #180]	; (80166c0 <procesar_datos+0x140>)
 801660c:	4660      	mov	r0, ip
 801660e:	f000 faa1 	bl	8016b54 <siprintf>
		 write_SD(escribir_sd);
 8016612:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016616:	4618      	mov	r0, r3
 8016618:	f7fa faac 	bl	8010b74 <write_SD>
		 //write_SD_RAW( datos_sensores,24);

		 if(contador ==ITERACIONES_TRAS_PASARSE_UMBRAL) //Guardo en la SD cada ITERACIONES_TRAS_PASARSE_UMBRAL muestras
 801661c:	4b27      	ldr	r3, [pc, #156]	; (80166bc <procesar_datos+0x13c>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	2b64      	cmp	r3, #100	; 0x64
 8016622:	d138      	bne.n	8016696 <procesar_datos+0x116>
		 {
			 cerrar_SD();
 8016624:	f7fa fac0 	bl	8010ba8 <cerrar_SD>
			 cerrar_SD_RAW();
 8016628:	f7fa fb4a 	bl	8010cc0 <cerrar_SD_RAW>
			 //abrir_SD();
			 osThreadSuspend(gestionar_comandos_BLE_Id);
 801662c:	4b25      	ldr	r3, [pc, #148]	; (80166c4 <procesar_datos+0x144>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4618      	mov	r0, r3
 8016632:	f7fa fd71 	bl	8011118 <osThreadSuspend>
			 uint32_t my_tick = HAL_GetTick();
 8016636:	f7ef fb6b 	bl	8005d10 <HAL_GetTick>
 801663a:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
			 char t_ptr[30];
			 int size = sprintf(t_ptr,"%ld",my_tick);
 801663e:	f107 0310 	add.w	r3, r7, #16
 8016642:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8016646:	4920      	ldr	r1, [pc, #128]	; (80166c8 <procesar_datos+0x148>)
 8016648:	4618      	mov	r0, r3
 801664a:	f000 fa83 	bl	8016b54 <siprintf>
 801664e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
			 aci_gatt_update_char_value(ConfigServW2STHandle, ConfigCharHandle, 0, size,t_ptr);
 8016652:	4b1e      	ldr	r3, [pc, #120]	; (80166cc <procesar_datos+0x14c>)
 8016654:	8818      	ldrh	r0, [r3, #0]
 8016656:	4b1e      	ldr	r3, [pc, #120]	; (80166d0 <procesar_datos+0x150>)
 8016658:	8819      	ldrh	r1, [r3, #0]
 801665a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801665e:	b2da      	uxtb	r2, r3
 8016660:	f107 0310 	add.w	r3, r7, #16
 8016664:	9300      	str	r3, [sp, #0]
 8016666:	4613      	mov	r3, r2
 8016668:	2200      	movs	r2, #0
 801666a:	f7fe fd6b 	bl	8015144 <aci_gatt_update_char_value>
			 osThreadResume(gestionar_comandos_BLE_Id);
 801666e:	4b15      	ldr	r3, [pc, #84]	; (80166c4 <procesar_datos+0x144>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	4618      	mov	r0, r3
 8016674:	f7fa fd84 	bl	8011180 <osThreadResume>
			 contador =0 ;
 8016678:	4b10      	ldr	r3, [pc, #64]	; (80166bc <procesar_datos+0x13c>)
 801667a:	2200      	movs	r2, #0
 801667c:	601a      	str	r2, [r3, #0]

			 //Liberar semáforo:
			 estado_uc_actual_ant = BAJO_CONSUMO;
 801667e:	4b15      	ldr	r3, [pc, #84]	; (80166d4 <procesar_datos+0x154>)
 8016680:	2205      	movs	r2, #5
 8016682:	701a      	strb	r2, [r3, #0]
			 estado_uc_actual = BAJO_CONSUMO;
 8016684:	4b14      	ldr	r3, [pc, #80]	; (80166d8 <procesar_datos+0x158>)
 8016686:	2205      	movs	r2, #5
 8016688:	701a      	strb	r2, [r3, #0]
			 osSemaphoreRelease(maquina_estados_semaphore_Id);
 801668a:	4b14      	ldr	r3, [pc, #80]	; (80166dc <procesar_datos+0x15c>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	4618      	mov	r0, r3
 8016690:	f7fa fedc 	bl	801144c <osSemaphoreRelease>
 8016694:	e004      	b.n	80166a0 <procesar_datos+0x120>
		 }
		 else
		 {
			 contador++;
 8016696:	4b09      	ldr	r3, [pc, #36]	; (80166bc <procesar_datos+0x13c>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	3301      	adds	r3, #1
 801669c:	4a07      	ldr	r2, [pc, #28]	; (80166bc <procesar_datos+0x13c>)
 801669e:	6013      	str	r3, [r2, #0]
		 }
    	  osSemaphoreRelease(escaneo_semaphore_Id); //Se libera semáforo para guardar en la SD
 80166a0:	4b05      	ldr	r3, [pc, #20]	; (80166b8 <procesar_datos+0x138>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	4618      	mov	r0, r3
 80166a6:	f7fa fed1 	bl	801144c <osSemaphoreRelease>
		  osDelay(PERIODO_TOMA_DATOS);
 80166aa:	200a      	movs	r0, #10
 80166ac:	f7fa fd9c 	bl	80111e8 <osDelay>
	   {
 80166b0:	e76c      	b.n	801658c <procesar_datos+0xc>
 80166b2:	bf00      	nop
 80166b4:	2000c8d8 	.word	0x2000c8d8
 80166b8:	2000c8d4 	.word	0x2000c8d4
 80166bc:	2000b858 	.word	0x2000b858
 80166c0:	08019320 	.word	0x08019320
 80166c4:	2000b838 	.word	0x2000b838
 80166c8:	080192cc 	.word	0x080192cc
 80166cc:	2000bbce 	.word	0x2000bbce
 80166d0:	2000bbcc 	.word	0x2000bbcc
 80166d4:	200000dd 	.word	0x200000dd
 80166d8:	200000dc 	.word	0x200000dc
 80166dc:	2000c86c 	.word	0x2000c86c

080166e0 <iniciar_pin_SWDIO>:
  }
}
void iniciar_pin_SWDIO(void)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b086      	sub	sp, #24
 80166e4:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 80166e6:	1d3b      	adds	r3, r7, #4
 80166e8:	2200      	movs	r2, #0
 80166ea:	601a      	str	r2, [r3, #0]
 80166ec:	605a      	str	r2, [r3, #4]
 80166ee:	609a      	str	r2, [r3, #8]
 80166f0:	60da      	str	r2, [r3, #12]
 80166f2:	611a      	str	r2, [r3, #16]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 80166f4:	4b12      	ldr	r3, [pc, #72]	; (8016740 <iniciar_pin_SWDIO+0x60>)
 80166f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80166f8:	4a11      	ldr	r2, [pc, #68]	; (8016740 <iniciar_pin_SWDIO+0x60>)
 80166fa:	f043 0301 	orr.w	r3, r3, #1
 80166fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016700:	4b0f      	ldr	r3, [pc, #60]	; (8016740 <iniciar_pin_SWDIO+0x60>)
 8016702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016704:	f003 0301 	and.w	r3, r3, #1
 8016708:	603b      	str	r3, [r7, #0]
 801670a:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 801670c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016712:	2301      	movs	r3, #1
 8016714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016716:	2300      	movs	r3, #0
 8016718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801671a:	2300      	movs	r3, #0
 801671c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801671e:	1d3b      	adds	r3, r7, #4
 8016720:	4619      	mov	r1, r3
 8016722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016726:	f7ef fec9 	bl	80064bc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);//SWDIO APAGO
 801672a:	2200      	movs	r2, #0
 801672c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016734:	f7f0 f976 	bl	8006a24 <HAL_GPIO_WritePin>
}
 8016738:	bf00      	nop
 801673a:	3718      	adds	r7, #24
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}
 8016740:	40021000 	.word	0x40021000

08016744 <encender_zona_3v3>:

void encender_zona_3v3(void)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);//SWDIO APAGO
 8016748:	2201      	movs	r2, #1
 801674a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801674e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016752:	f7f0 f967 	bl	8006a24 <HAL_GPIO_WritePin>
}
 8016756:	bf00      	nop
 8016758:	bd80      	pop	{r7, pc}

0801675a <apagar_zona_3v3>:
void apagar_zona_3v3(void)
{
 801675a:	b580      	push	{r7, lr}
 801675c:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);//SWDIO APAGO
 801675e:	2200      	movs	r2, #0
 8016760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016768:	f7f0 f95c 	bl	8006a24 <HAL_GPIO_WritePin>
}
 801676c:	bf00      	nop
 801676e:	bd80      	pop	{r7, pc}

08016770 <PA2_Init>:

static void PA2_Init(void)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b086      	sub	sp, #24
 8016774:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016776:	1d3b      	adds	r3, r7, #4
 8016778:	2200      	movs	r2, #0
 801677a:	601a      	str	r2, [r3, #0]
 801677c:	605a      	str	r2, [r3, #4]
 801677e:	609a      	str	r2, [r3, #8]
 8016780:	60da      	str	r2, [r3, #12]
 8016782:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8016784:	4b10      	ldr	r3, [pc, #64]	; (80167c8 <PA2_Init+0x58>)
 8016786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016788:	4a0f      	ldr	r2, [pc, #60]	; (80167c8 <PA2_Init+0x58>)
 801678a:	f043 0301 	orr.w	r3, r3, #1
 801678e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016790:	4b0d      	ldr	r3, [pc, #52]	; (80167c8 <PA2_Init+0x58>)
 8016792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016794:	f003 0301 	and.w	r3, r3, #1
 8016798:	603b      	str	r3, [r7, #0]
 801679a:	683b      	ldr	r3, [r7, #0]
	  /*Configure GPIO pin : PA2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801679c:	2304      	movs	r3, #4
 801679e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80167a0:	4b0a      	ldr	r3, [pc, #40]	; (80167cc <PA2_Init+0x5c>)
 80167a2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80167a4:	2300      	movs	r3, #0
 80167a6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80167a8:	1d3b      	adds	r3, r7, #4
 80167aa:	4619      	mov	r1, r3
 80167ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80167b0:	f7ef fe84 	bl	80064bc <HAL_GPIO_Init>
	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 80167b4:	2200      	movs	r2, #0
 80167b6:	210f      	movs	r1, #15
 80167b8:	2008      	movs	r0, #8
 80167ba:	f7ef fbb1 	bl	8005f20 <HAL_NVIC_SetPriority>
	  //HAL_NVIC_EnableIRQ(EXTI2_IRQn);
}
 80167be:	bf00      	nop
 80167c0:	3718      	adds	r7, #24
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	40021000 	.word	0x40021000
 80167cc:	10110000 	.word	0x10110000

080167d0 <crear_configuracion_archivos_inicial>:
void crear_configuracion_archivos_inicial(void)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b0a8      	sub	sp, #160	; 0xa0
 80167d4:	af02      	add	r7, sp, #8
	char escribir_sd[100];
	RTC_obtener_dia_str(escribir_sd);
 80167d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80167da:	4618      	mov	r0, r3
 80167dc:	f7ea fc32 	bl	8001044 <RTC_obtener_dia_str>
	while(f_mkdir(escribir_sd)!=FR_OK)
 80167e0:	e006      	b.n	80167f0 <crear_configuracion_archivos_inicial+0x20>
	{
		RTC_obtener_dia_str(escribir_sd);
 80167e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7ea fc2c 	bl	8001044 <RTC_obtener_dia_str>
		DATALOG_SD_Init();
 80167ec:	f7fa f98e 	bl	8010b0c <DATALOG_SD_Init>
	while(f_mkdir(escribir_sd)!=FR_OK)
 80167f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80167f4:	4618      	mov	r0, r3
 80167f6:	f7f8 fee9 	bl	800f5cc <f_mkdir>
 80167fa:	4603      	mov	r3, r0
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d1f0      	bne.n	80167e2 <crear_configuracion_archivos_inicial+0x12>
	}
	sprintf(nombre_fichero_sensores,"%s/%s%s",escribir_sd,escribir_sd,"_sen");
 8016800:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8016804:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8016808:	4b24      	ldr	r3, [pc, #144]	; (801689c <crear_configuracion_archivos_inicial+0xcc>)
 801680a:	9300      	str	r3, [sp, #0]
 801680c:	460b      	mov	r3, r1
 801680e:	4924      	ldr	r1, [pc, #144]	; (80168a0 <crear_configuracion_archivos_inicial+0xd0>)
 8016810:	4824      	ldr	r0, [pc, #144]	; (80168a4 <crear_configuracion_archivos_inicial+0xd4>)
 8016812:	f000 f99f 	bl	8016b54 <siprintf>
	//Se crea un nuevo fichero en la SD para los sensores:

	abrir_SD_new(nombre_fichero_sensores);
 8016816:	4823      	ldr	r0, [pc, #140]	; (80168a4 <crear_configuracion_archivos_inicial+0xd4>)
 8016818:	f7fa f9ec 	bl	8010bf4 <abrir_SD_new>
	write_SD("Fecha;Timestamp;Accel_x;Accel_y;Accel_z;Gyro_x;Gyro_y;Gyro_z;Magnet_x;Magnet_y;Magnet_z\r\n");
 801681c:	4822      	ldr	r0, [pc, #136]	; (80168a8 <crear_configuracion_archivos_inicial+0xd8>)
 801681e:	f7fa f9a9 	bl	8010b74 <write_SD>
	cerrar_SD();
 8016822:	f7fa f9c1 	bl	8010ba8 <cerrar_SD>

	sprintf(nombre_fichero_raw,"%s/%s%s",escribir_sd,escribir_sd,"_dat");
 8016826:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801682a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801682e:	4b1f      	ldr	r3, [pc, #124]	; (80168ac <crear_configuracion_archivos_inicial+0xdc>)
 8016830:	9300      	str	r3, [sp, #0]
 8016832:	460b      	mov	r3, r1
 8016834:	491a      	ldr	r1, [pc, #104]	; (80168a0 <crear_configuracion_archivos_inicial+0xd0>)
 8016836:	481e      	ldr	r0, [pc, #120]	; (80168b0 <crear_configuracion_archivos_inicial+0xe0>)
 8016838:	f000 f98c 	bl	8016b54 <siprintf>
	abrir_SD_new_RAW(nombre_fichero_raw);
 801683c:	481c      	ldr	r0, [pc, #112]	; (80168b0 <crear_configuracion_archivos_inicial+0xe0>)
 801683e:	f7fa fa4d 	bl	8010cdc <abrir_SD_new_RAW>
	write_SD_RAW("Fecha;Timestamp;Accel_x;Accel_y;Accel_z;Gyro_x;Gyro_y;Gyro_z;Magnet_x;Magnet_y;Magnet_z\r\n",strlen("Fecha;Timestamp;Accel_x;Accel_y;Accel_z;Gyro_x;Gyro_y;Gyro_z;Magnet_x;Magnet_y;Magnet_z\r\n"));
 8016842:	2159      	movs	r1, #89	; 0x59
 8016844:	4818      	ldr	r0, [pc, #96]	; (80168a8 <crear_configuracion_archivos_inicial+0xd8>)
 8016846:	f7fa fa2f 	bl	8010ca8 <write_SD_RAW>
	cerrar_SD_RAW();
 801684a:	f7fa fa39 	bl	8010cc0 <cerrar_SD_RAW>

	cerrar_SD_BT();
 801684e:	f7fa fa05 	bl	8010c5c <cerrar_SD_BT>
	//Se crea un nuevo fichero en la SD para los dispositivos BLE:
	sprintf(nombre_fichero_ble,"%s/%s%s",escribir_sd,escribir_sd,"_BT");
 8016852:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8016856:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801685a:	4b16      	ldr	r3, [pc, #88]	; (80168b4 <crear_configuracion_archivos_inicial+0xe4>)
 801685c:	9300      	str	r3, [sp, #0]
 801685e:	460b      	mov	r3, r1
 8016860:	490f      	ldr	r1, [pc, #60]	; (80168a0 <crear_configuracion_archivos_inicial+0xd0>)
 8016862:	4815      	ldr	r0, [pc, #84]	; (80168b8 <crear_configuracion_archivos_inicial+0xe8>)
 8016864:	f000 f976 	bl	8016b54 <siprintf>
	abrir_SD_new_BT(nombre_fichero_ble);
 8016868:	4813      	ldr	r0, [pc, #76]	; (80168b8 <crear_configuracion_archivos_inicial+0xe8>)
 801686a:	f7fa fa01 	bl	8010c70 <abrir_SD_new_BT>
	write_SD_BT("Dispositivos_BT\r\n");
 801686e:	4813      	ldr	r0, [pc, #76]	; (80168bc <crear_configuracion_archivos_inicial+0xec>)
 8016870:	f7fa f9e0 	bl	8010c34 <write_SD_BT>
	write_SD_BT("Nombre\r\n");
 8016874:	4812      	ldr	r0, [pc, #72]	; (80168c0 <crear_configuracion_archivos_inicial+0xf0>)
 8016876:	f7fa f9dd 	bl	8010c34 <write_SD_BT>
	char BLE_NAME[50];
	sprintf(BLE_NAME,"HOWLA%c",ID_UNIDADES);
 801687a:	463b      	mov	r3, r7
 801687c:	2234      	movs	r2, #52	; 0x34
 801687e:	4911      	ldr	r1, [pc, #68]	; (80168c4 <crear_configuracion_archivos_inicial+0xf4>)
 8016880:	4618      	mov	r0, r3
 8016882:	f000 f967 	bl	8016b54 <siprintf>
	write_SD_BT(BLE_NAME);
 8016886:	463b      	mov	r3, r7
 8016888:	4618      	mov	r0, r3
 801688a:	f7fa f9d3 	bl	8010c34 <write_SD_BT>
	cerrar_SD_BT();
 801688e:	f7fa f9e5 	bl	8010c5c <cerrar_SD_BT>
}
 8016892:	bf00      	nop
 8016894:	3798      	adds	r7, #152	; 0x98
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}
 801689a:	bf00      	nop
 801689c:	08019358 	.word	0x08019358
 80168a0:	08019350 	.word	0x08019350
 80168a4:	2000b704 	.word	0x2000b704
 80168a8:	08019360 	.word	0x08019360
 80168ac:	080193bc 	.word	0x080193bc
 80168b0:	2000b7cc 	.word	0x2000b7cc
 80168b4:	080193c4 	.word	0x080193c4
 80168b8:	2000b768 	.word	0x2000b768
 80168bc:	080193c8 	.word	0x080193c8
 80168c0:	080193dc 	.word	0x080193dc
 80168c4:	080193e8 	.word	0x080193e8

080168c8 <atoi>:
 80168c8:	220a      	movs	r2, #10
 80168ca:	2100      	movs	r1, #0
 80168cc:	f001 b82c 	b.w	8017928 <strtol>

080168d0 <__errno>:
 80168d0:	4b01      	ldr	r3, [pc, #4]	; (80168d8 <__errno+0x8>)
 80168d2:	6818      	ldr	r0, [r3, #0]
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	200000e4 	.word	0x200000e4

080168dc <__libc_init_array>:
 80168dc:	b570      	push	{r4, r5, r6, lr}
 80168de:	4e0d      	ldr	r6, [pc, #52]	; (8016914 <__libc_init_array+0x38>)
 80168e0:	4c0d      	ldr	r4, [pc, #52]	; (8016918 <__libc_init_array+0x3c>)
 80168e2:	1ba4      	subs	r4, r4, r6
 80168e4:	10a4      	asrs	r4, r4, #2
 80168e6:	2500      	movs	r5, #0
 80168e8:	42a5      	cmp	r5, r4
 80168ea:	d109      	bne.n	8016900 <__libc_init_array+0x24>
 80168ec:	4e0b      	ldr	r6, [pc, #44]	; (801691c <__libc_init_array+0x40>)
 80168ee:	4c0c      	ldr	r4, [pc, #48]	; (8016920 <__libc_init_array+0x44>)
 80168f0:	f002 fa7c 	bl	8018dec <_init>
 80168f4:	1ba4      	subs	r4, r4, r6
 80168f6:	10a4      	asrs	r4, r4, #2
 80168f8:	2500      	movs	r5, #0
 80168fa:	42a5      	cmp	r5, r4
 80168fc:	d105      	bne.n	801690a <__libc_init_array+0x2e>
 80168fe:	bd70      	pop	{r4, r5, r6, pc}
 8016900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016904:	4798      	blx	r3
 8016906:	3501      	adds	r5, #1
 8016908:	e7ee      	b.n	80168e8 <__libc_init_array+0xc>
 801690a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801690e:	4798      	blx	r3
 8016910:	3501      	adds	r5, #1
 8016912:	e7f2      	b.n	80168fa <__libc_init_array+0x1e>
 8016914:	08019cb0 	.word	0x08019cb0
 8016918:	08019cb0 	.word	0x08019cb0
 801691c:	08019cb0 	.word	0x08019cb0
 8016920:	08019cb4 	.word	0x08019cb4

08016924 <__locale_ctype_ptr_l>:
 8016924:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016928:	4770      	bx	lr
	...

0801692c <__locale_ctype_ptr>:
 801692c:	4b04      	ldr	r3, [pc, #16]	; (8016940 <__locale_ctype_ptr+0x14>)
 801692e:	4a05      	ldr	r2, [pc, #20]	; (8016944 <__locale_ctype_ptr+0x18>)
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	6a1b      	ldr	r3, [r3, #32]
 8016934:	2b00      	cmp	r3, #0
 8016936:	bf08      	it	eq
 8016938:	4613      	moveq	r3, r2
 801693a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801693e:	4770      	bx	lr
 8016940:	200000e4 	.word	0x200000e4
 8016944:	20000148 	.word	0x20000148

08016948 <malloc>:
 8016948:	4b02      	ldr	r3, [pc, #8]	; (8016954 <malloc+0xc>)
 801694a:	4601      	mov	r1, r0
 801694c:	6818      	ldr	r0, [r3, #0]
 801694e:	f000 b897 	b.w	8016a80 <_malloc_r>
 8016952:	bf00      	nop
 8016954:	200000e4 	.word	0x200000e4

08016958 <free>:
 8016958:	4b02      	ldr	r3, [pc, #8]	; (8016964 <free+0xc>)
 801695a:	4601      	mov	r1, r0
 801695c:	6818      	ldr	r0, [r3, #0]
 801695e:	f000 b841 	b.w	80169e4 <_free_r>
 8016962:	bf00      	nop
 8016964:	200000e4 	.word	0x200000e4

08016968 <__ascii_mbtowc>:
 8016968:	b082      	sub	sp, #8
 801696a:	b901      	cbnz	r1, 801696e <__ascii_mbtowc+0x6>
 801696c:	a901      	add	r1, sp, #4
 801696e:	b142      	cbz	r2, 8016982 <__ascii_mbtowc+0x1a>
 8016970:	b14b      	cbz	r3, 8016986 <__ascii_mbtowc+0x1e>
 8016972:	7813      	ldrb	r3, [r2, #0]
 8016974:	600b      	str	r3, [r1, #0]
 8016976:	7812      	ldrb	r2, [r2, #0]
 8016978:	1c10      	adds	r0, r2, #0
 801697a:	bf18      	it	ne
 801697c:	2001      	movne	r0, #1
 801697e:	b002      	add	sp, #8
 8016980:	4770      	bx	lr
 8016982:	4610      	mov	r0, r2
 8016984:	e7fb      	b.n	801697e <__ascii_mbtowc+0x16>
 8016986:	f06f 0001 	mvn.w	r0, #1
 801698a:	e7f8      	b.n	801697e <__ascii_mbtowc+0x16>

0801698c <memcpy>:
 801698c:	b510      	push	{r4, lr}
 801698e:	1e43      	subs	r3, r0, #1
 8016990:	440a      	add	r2, r1
 8016992:	4291      	cmp	r1, r2
 8016994:	d100      	bne.n	8016998 <memcpy+0xc>
 8016996:	bd10      	pop	{r4, pc}
 8016998:	f811 4b01 	ldrb.w	r4, [r1], #1
 801699c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169a0:	e7f7      	b.n	8016992 <memcpy+0x6>

080169a2 <memmove>:
 80169a2:	4288      	cmp	r0, r1
 80169a4:	b510      	push	{r4, lr}
 80169a6:	eb01 0302 	add.w	r3, r1, r2
 80169aa:	d807      	bhi.n	80169bc <memmove+0x1a>
 80169ac:	1e42      	subs	r2, r0, #1
 80169ae:	4299      	cmp	r1, r3
 80169b0:	d00a      	beq.n	80169c8 <memmove+0x26>
 80169b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80169ba:	e7f8      	b.n	80169ae <memmove+0xc>
 80169bc:	4283      	cmp	r3, r0
 80169be:	d9f5      	bls.n	80169ac <memmove+0xa>
 80169c0:	1881      	adds	r1, r0, r2
 80169c2:	1ad2      	subs	r2, r2, r3
 80169c4:	42d3      	cmn	r3, r2
 80169c6:	d100      	bne.n	80169ca <memmove+0x28>
 80169c8:	bd10      	pop	{r4, pc}
 80169ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80169ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80169d2:	e7f7      	b.n	80169c4 <memmove+0x22>

080169d4 <memset>:
 80169d4:	4402      	add	r2, r0
 80169d6:	4603      	mov	r3, r0
 80169d8:	4293      	cmp	r3, r2
 80169da:	d100      	bne.n	80169de <memset+0xa>
 80169dc:	4770      	bx	lr
 80169de:	f803 1b01 	strb.w	r1, [r3], #1
 80169e2:	e7f9      	b.n	80169d8 <memset+0x4>

080169e4 <_free_r>:
 80169e4:	b538      	push	{r3, r4, r5, lr}
 80169e6:	4605      	mov	r5, r0
 80169e8:	2900      	cmp	r1, #0
 80169ea:	d045      	beq.n	8016a78 <_free_r+0x94>
 80169ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169f0:	1f0c      	subs	r4, r1, #4
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	bfb8      	it	lt
 80169f6:	18e4      	addlt	r4, r4, r3
 80169f8:	f001 fae1 	bl	8017fbe <__malloc_lock>
 80169fc:	4a1f      	ldr	r2, [pc, #124]	; (8016a7c <_free_r+0x98>)
 80169fe:	6813      	ldr	r3, [r2, #0]
 8016a00:	4610      	mov	r0, r2
 8016a02:	b933      	cbnz	r3, 8016a12 <_free_r+0x2e>
 8016a04:	6063      	str	r3, [r4, #4]
 8016a06:	6014      	str	r4, [r2, #0]
 8016a08:	4628      	mov	r0, r5
 8016a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a0e:	f001 bad7 	b.w	8017fc0 <__malloc_unlock>
 8016a12:	42a3      	cmp	r3, r4
 8016a14:	d90c      	bls.n	8016a30 <_free_r+0x4c>
 8016a16:	6821      	ldr	r1, [r4, #0]
 8016a18:	1862      	adds	r2, r4, r1
 8016a1a:	4293      	cmp	r3, r2
 8016a1c:	bf04      	itt	eq
 8016a1e:	681a      	ldreq	r2, [r3, #0]
 8016a20:	685b      	ldreq	r3, [r3, #4]
 8016a22:	6063      	str	r3, [r4, #4]
 8016a24:	bf04      	itt	eq
 8016a26:	1852      	addeq	r2, r2, r1
 8016a28:	6022      	streq	r2, [r4, #0]
 8016a2a:	6004      	str	r4, [r0, #0]
 8016a2c:	e7ec      	b.n	8016a08 <_free_r+0x24>
 8016a2e:	4613      	mov	r3, r2
 8016a30:	685a      	ldr	r2, [r3, #4]
 8016a32:	b10a      	cbz	r2, 8016a38 <_free_r+0x54>
 8016a34:	42a2      	cmp	r2, r4
 8016a36:	d9fa      	bls.n	8016a2e <_free_r+0x4a>
 8016a38:	6819      	ldr	r1, [r3, #0]
 8016a3a:	1858      	adds	r0, r3, r1
 8016a3c:	42a0      	cmp	r0, r4
 8016a3e:	d10b      	bne.n	8016a58 <_free_r+0x74>
 8016a40:	6820      	ldr	r0, [r4, #0]
 8016a42:	4401      	add	r1, r0
 8016a44:	1858      	adds	r0, r3, r1
 8016a46:	4282      	cmp	r2, r0
 8016a48:	6019      	str	r1, [r3, #0]
 8016a4a:	d1dd      	bne.n	8016a08 <_free_r+0x24>
 8016a4c:	6810      	ldr	r0, [r2, #0]
 8016a4e:	6852      	ldr	r2, [r2, #4]
 8016a50:	605a      	str	r2, [r3, #4]
 8016a52:	4401      	add	r1, r0
 8016a54:	6019      	str	r1, [r3, #0]
 8016a56:	e7d7      	b.n	8016a08 <_free_r+0x24>
 8016a58:	d902      	bls.n	8016a60 <_free_r+0x7c>
 8016a5a:	230c      	movs	r3, #12
 8016a5c:	602b      	str	r3, [r5, #0]
 8016a5e:	e7d3      	b.n	8016a08 <_free_r+0x24>
 8016a60:	6820      	ldr	r0, [r4, #0]
 8016a62:	1821      	adds	r1, r4, r0
 8016a64:	428a      	cmp	r2, r1
 8016a66:	bf04      	itt	eq
 8016a68:	6811      	ldreq	r1, [r2, #0]
 8016a6a:	6852      	ldreq	r2, [r2, #4]
 8016a6c:	6062      	str	r2, [r4, #4]
 8016a6e:	bf04      	itt	eq
 8016a70:	1809      	addeq	r1, r1, r0
 8016a72:	6021      	streq	r1, [r4, #0]
 8016a74:	605c      	str	r4, [r3, #4]
 8016a76:	e7c7      	b.n	8016a08 <_free_r+0x24>
 8016a78:	bd38      	pop	{r3, r4, r5, pc}
 8016a7a:	bf00      	nop
 8016a7c:	2000b85c 	.word	0x2000b85c

08016a80 <_malloc_r>:
 8016a80:	b570      	push	{r4, r5, r6, lr}
 8016a82:	1ccd      	adds	r5, r1, #3
 8016a84:	f025 0503 	bic.w	r5, r5, #3
 8016a88:	3508      	adds	r5, #8
 8016a8a:	2d0c      	cmp	r5, #12
 8016a8c:	bf38      	it	cc
 8016a8e:	250c      	movcc	r5, #12
 8016a90:	2d00      	cmp	r5, #0
 8016a92:	4606      	mov	r6, r0
 8016a94:	db01      	blt.n	8016a9a <_malloc_r+0x1a>
 8016a96:	42a9      	cmp	r1, r5
 8016a98:	d903      	bls.n	8016aa2 <_malloc_r+0x22>
 8016a9a:	230c      	movs	r3, #12
 8016a9c:	6033      	str	r3, [r6, #0]
 8016a9e:	2000      	movs	r0, #0
 8016aa0:	bd70      	pop	{r4, r5, r6, pc}
 8016aa2:	f001 fa8c 	bl	8017fbe <__malloc_lock>
 8016aa6:	4a21      	ldr	r2, [pc, #132]	; (8016b2c <_malloc_r+0xac>)
 8016aa8:	6814      	ldr	r4, [r2, #0]
 8016aaa:	4621      	mov	r1, r4
 8016aac:	b991      	cbnz	r1, 8016ad4 <_malloc_r+0x54>
 8016aae:	4c20      	ldr	r4, [pc, #128]	; (8016b30 <_malloc_r+0xb0>)
 8016ab0:	6823      	ldr	r3, [r4, #0]
 8016ab2:	b91b      	cbnz	r3, 8016abc <_malloc_r+0x3c>
 8016ab4:	4630      	mov	r0, r6
 8016ab6:	f000 f83d 	bl	8016b34 <_sbrk_r>
 8016aba:	6020      	str	r0, [r4, #0]
 8016abc:	4629      	mov	r1, r5
 8016abe:	4630      	mov	r0, r6
 8016ac0:	f000 f838 	bl	8016b34 <_sbrk_r>
 8016ac4:	1c43      	adds	r3, r0, #1
 8016ac6:	d124      	bne.n	8016b12 <_malloc_r+0x92>
 8016ac8:	230c      	movs	r3, #12
 8016aca:	6033      	str	r3, [r6, #0]
 8016acc:	4630      	mov	r0, r6
 8016ace:	f001 fa77 	bl	8017fc0 <__malloc_unlock>
 8016ad2:	e7e4      	b.n	8016a9e <_malloc_r+0x1e>
 8016ad4:	680b      	ldr	r3, [r1, #0]
 8016ad6:	1b5b      	subs	r3, r3, r5
 8016ad8:	d418      	bmi.n	8016b0c <_malloc_r+0x8c>
 8016ada:	2b0b      	cmp	r3, #11
 8016adc:	d90f      	bls.n	8016afe <_malloc_r+0x7e>
 8016ade:	600b      	str	r3, [r1, #0]
 8016ae0:	50cd      	str	r5, [r1, r3]
 8016ae2:	18cc      	adds	r4, r1, r3
 8016ae4:	4630      	mov	r0, r6
 8016ae6:	f001 fa6b 	bl	8017fc0 <__malloc_unlock>
 8016aea:	f104 000b 	add.w	r0, r4, #11
 8016aee:	1d23      	adds	r3, r4, #4
 8016af0:	f020 0007 	bic.w	r0, r0, #7
 8016af4:	1ac3      	subs	r3, r0, r3
 8016af6:	d0d3      	beq.n	8016aa0 <_malloc_r+0x20>
 8016af8:	425a      	negs	r2, r3
 8016afa:	50e2      	str	r2, [r4, r3]
 8016afc:	e7d0      	b.n	8016aa0 <_malloc_r+0x20>
 8016afe:	428c      	cmp	r4, r1
 8016b00:	684b      	ldr	r3, [r1, #4]
 8016b02:	bf16      	itet	ne
 8016b04:	6063      	strne	r3, [r4, #4]
 8016b06:	6013      	streq	r3, [r2, #0]
 8016b08:	460c      	movne	r4, r1
 8016b0a:	e7eb      	b.n	8016ae4 <_malloc_r+0x64>
 8016b0c:	460c      	mov	r4, r1
 8016b0e:	6849      	ldr	r1, [r1, #4]
 8016b10:	e7cc      	b.n	8016aac <_malloc_r+0x2c>
 8016b12:	1cc4      	adds	r4, r0, #3
 8016b14:	f024 0403 	bic.w	r4, r4, #3
 8016b18:	42a0      	cmp	r0, r4
 8016b1a:	d005      	beq.n	8016b28 <_malloc_r+0xa8>
 8016b1c:	1a21      	subs	r1, r4, r0
 8016b1e:	4630      	mov	r0, r6
 8016b20:	f000 f808 	bl	8016b34 <_sbrk_r>
 8016b24:	3001      	adds	r0, #1
 8016b26:	d0cf      	beq.n	8016ac8 <_malloc_r+0x48>
 8016b28:	6025      	str	r5, [r4, #0]
 8016b2a:	e7db      	b.n	8016ae4 <_malloc_r+0x64>
 8016b2c:	2000b85c 	.word	0x2000b85c
 8016b30:	2000b860 	.word	0x2000b860

08016b34 <_sbrk_r>:
 8016b34:	b538      	push	{r3, r4, r5, lr}
 8016b36:	4c06      	ldr	r4, [pc, #24]	; (8016b50 <_sbrk_r+0x1c>)
 8016b38:	2300      	movs	r3, #0
 8016b3a:	4605      	mov	r5, r0
 8016b3c:	4608      	mov	r0, r1
 8016b3e:	6023      	str	r3, [r4, #0]
 8016b40:	f7eb fdc2 	bl	80026c8 <_sbrk>
 8016b44:	1c43      	adds	r3, r0, #1
 8016b46:	d102      	bne.n	8016b4e <_sbrk_r+0x1a>
 8016b48:	6823      	ldr	r3, [r4, #0]
 8016b4a:	b103      	cbz	r3, 8016b4e <_sbrk_r+0x1a>
 8016b4c:	602b      	str	r3, [r5, #0]
 8016b4e:	bd38      	pop	{r3, r4, r5, pc}
 8016b50:	2000c8dc 	.word	0x2000c8dc

08016b54 <siprintf>:
 8016b54:	b40e      	push	{r1, r2, r3}
 8016b56:	b500      	push	{lr}
 8016b58:	b09c      	sub	sp, #112	; 0x70
 8016b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8016b5c:	9002      	str	r0, [sp, #8]
 8016b5e:	9006      	str	r0, [sp, #24]
 8016b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b64:	4809      	ldr	r0, [pc, #36]	; (8016b8c <siprintf+0x38>)
 8016b66:	9107      	str	r1, [sp, #28]
 8016b68:	9104      	str	r1, [sp, #16]
 8016b6a:	4909      	ldr	r1, [pc, #36]	; (8016b90 <siprintf+0x3c>)
 8016b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b70:	9105      	str	r1, [sp, #20]
 8016b72:	6800      	ldr	r0, [r0, #0]
 8016b74:	9301      	str	r3, [sp, #4]
 8016b76:	a902      	add	r1, sp, #8
 8016b78:	f001 fe8a 	bl	8018890 <_svfiprintf_r>
 8016b7c:	9b02      	ldr	r3, [sp, #8]
 8016b7e:	2200      	movs	r2, #0
 8016b80:	701a      	strb	r2, [r3, #0]
 8016b82:	b01c      	add	sp, #112	; 0x70
 8016b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b88:	b003      	add	sp, #12
 8016b8a:	4770      	bx	lr
 8016b8c:	200000e4 	.word	0x200000e4
 8016b90:	ffff0208 	.word	0xffff0208

08016b94 <strchr>:
 8016b94:	b2c9      	uxtb	r1, r1
 8016b96:	4603      	mov	r3, r0
 8016b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b9c:	b11a      	cbz	r2, 8016ba6 <strchr+0x12>
 8016b9e:	428a      	cmp	r2, r1
 8016ba0:	d1f9      	bne.n	8016b96 <strchr+0x2>
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	4770      	bx	lr
 8016ba6:	2900      	cmp	r1, #0
 8016ba8:	bf18      	it	ne
 8016baa:	2300      	movne	r3, #0
 8016bac:	e7f9      	b.n	8016ba2 <strchr+0xe>

08016bae <strcpy>:
 8016bae:	4603      	mov	r3, r0
 8016bb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016bb4:	f803 2b01 	strb.w	r2, [r3], #1
 8016bb8:	2a00      	cmp	r2, #0
 8016bba:	d1f9      	bne.n	8016bb0 <strcpy+0x2>
 8016bbc:	4770      	bx	lr

08016bbe <strncmp>:
 8016bbe:	b510      	push	{r4, lr}
 8016bc0:	b16a      	cbz	r2, 8016bde <strncmp+0x20>
 8016bc2:	3901      	subs	r1, #1
 8016bc4:	1884      	adds	r4, r0, r2
 8016bc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016bca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016bce:	4293      	cmp	r3, r2
 8016bd0:	d103      	bne.n	8016bda <strncmp+0x1c>
 8016bd2:	42a0      	cmp	r0, r4
 8016bd4:	d001      	beq.n	8016bda <strncmp+0x1c>
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d1f5      	bne.n	8016bc6 <strncmp+0x8>
 8016bda:	1a98      	subs	r0, r3, r2
 8016bdc:	bd10      	pop	{r4, pc}
 8016bde:	4610      	mov	r0, r2
 8016be0:	e7fc      	b.n	8016bdc <strncmp+0x1e>

08016be2 <sulp>:
 8016be2:	b570      	push	{r4, r5, r6, lr}
 8016be4:	4604      	mov	r4, r0
 8016be6:	460d      	mov	r5, r1
 8016be8:	ec45 4b10 	vmov	d0, r4, r5
 8016bec:	4616      	mov	r6, r2
 8016bee:	f001 fcb3 	bl	8018558 <__ulp>
 8016bf2:	ec51 0b10 	vmov	r0, r1, d0
 8016bf6:	b17e      	cbz	r6, 8016c18 <sulp+0x36>
 8016bf8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016bfc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	dd09      	ble.n	8016c18 <sulp+0x36>
 8016c04:	051b      	lsls	r3, r3, #20
 8016c06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c0a:	2400      	movs	r4, #0
 8016c0c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016c10:	4622      	mov	r2, r4
 8016c12:	462b      	mov	r3, r5
 8016c14:	f7e9 fd00 	bl	8000618 <__aeabi_dmul>
 8016c18:	bd70      	pop	{r4, r5, r6, pc}
 8016c1a:	0000      	movs	r0, r0
 8016c1c:	0000      	movs	r0, r0
	...

08016c20 <_strtod_l>:
 8016c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c24:	461f      	mov	r7, r3
 8016c26:	b0a1      	sub	sp, #132	; 0x84
 8016c28:	2300      	movs	r3, #0
 8016c2a:	4681      	mov	r9, r0
 8016c2c:	4638      	mov	r0, r7
 8016c2e:	460e      	mov	r6, r1
 8016c30:	9217      	str	r2, [sp, #92]	; 0x5c
 8016c32:	931c      	str	r3, [sp, #112]	; 0x70
 8016c34:	f001 f9c1 	bl	8017fba <__localeconv_l>
 8016c38:	4680      	mov	r8, r0
 8016c3a:	6800      	ldr	r0, [r0, #0]
 8016c3c:	f7e9 fad2 	bl	80001e4 <strlen>
 8016c40:	f04f 0a00 	mov.w	sl, #0
 8016c44:	4604      	mov	r4, r0
 8016c46:	f04f 0b00 	mov.w	fp, #0
 8016c4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c4e:	781a      	ldrb	r2, [r3, #0]
 8016c50:	2a0d      	cmp	r2, #13
 8016c52:	d832      	bhi.n	8016cba <_strtod_l+0x9a>
 8016c54:	2a09      	cmp	r2, #9
 8016c56:	d236      	bcs.n	8016cc6 <_strtod_l+0xa6>
 8016c58:	2a00      	cmp	r2, #0
 8016c5a:	d03e      	beq.n	8016cda <_strtod_l+0xba>
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8016c60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016c62:	782b      	ldrb	r3, [r5, #0]
 8016c64:	2b30      	cmp	r3, #48	; 0x30
 8016c66:	f040 80ac 	bne.w	8016dc2 <_strtod_l+0x1a2>
 8016c6a:	786b      	ldrb	r3, [r5, #1]
 8016c6c:	2b58      	cmp	r3, #88	; 0x58
 8016c6e:	d001      	beq.n	8016c74 <_strtod_l+0x54>
 8016c70:	2b78      	cmp	r3, #120	; 0x78
 8016c72:	d167      	bne.n	8016d44 <_strtod_l+0x124>
 8016c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c76:	9301      	str	r3, [sp, #4]
 8016c78:	ab1c      	add	r3, sp, #112	; 0x70
 8016c7a:	9300      	str	r3, [sp, #0]
 8016c7c:	9702      	str	r7, [sp, #8]
 8016c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8016c80:	4a88      	ldr	r2, [pc, #544]	; (8016ea4 <_strtod_l+0x284>)
 8016c82:	a91b      	add	r1, sp, #108	; 0x6c
 8016c84:	4648      	mov	r0, r9
 8016c86:	f000 fec1 	bl	8017a0c <__gethex>
 8016c8a:	f010 0407 	ands.w	r4, r0, #7
 8016c8e:	4606      	mov	r6, r0
 8016c90:	d005      	beq.n	8016c9e <_strtod_l+0x7e>
 8016c92:	2c06      	cmp	r4, #6
 8016c94:	d12b      	bne.n	8016cee <_strtod_l+0xce>
 8016c96:	3501      	adds	r5, #1
 8016c98:	2300      	movs	r3, #0
 8016c9a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016c9c:	930d      	str	r3, [sp, #52]	; 0x34
 8016c9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	f040 859a 	bne.w	80177da <_strtod_l+0xbba>
 8016ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ca8:	b1e3      	cbz	r3, 8016ce4 <_strtod_l+0xc4>
 8016caa:	4652      	mov	r2, sl
 8016cac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016cb0:	ec43 2b10 	vmov	d0, r2, r3
 8016cb4:	b021      	add	sp, #132	; 0x84
 8016cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cba:	2a2b      	cmp	r2, #43	; 0x2b
 8016cbc:	d015      	beq.n	8016cea <_strtod_l+0xca>
 8016cbe:	2a2d      	cmp	r2, #45	; 0x2d
 8016cc0:	d004      	beq.n	8016ccc <_strtod_l+0xac>
 8016cc2:	2a20      	cmp	r2, #32
 8016cc4:	d1ca      	bne.n	8016c5c <_strtod_l+0x3c>
 8016cc6:	3301      	adds	r3, #1
 8016cc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016cca:	e7bf      	b.n	8016c4c <_strtod_l+0x2c>
 8016ccc:	2201      	movs	r2, #1
 8016cce:	920d      	str	r2, [sp, #52]	; 0x34
 8016cd0:	1c5a      	adds	r2, r3, #1
 8016cd2:	921b      	str	r2, [sp, #108]	; 0x6c
 8016cd4:	785b      	ldrb	r3, [r3, #1]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d1c2      	bne.n	8016c60 <_strtod_l+0x40>
 8016cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016cdc:	961b      	str	r6, [sp, #108]	; 0x6c
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	f040 8579 	bne.w	80177d6 <_strtod_l+0xbb6>
 8016ce4:	4652      	mov	r2, sl
 8016ce6:	465b      	mov	r3, fp
 8016ce8:	e7e2      	b.n	8016cb0 <_strtod_l+0x90>
 8016cea:	2200      	movs	r2, #0
 8016cec:	e7ef      	b.n	8016cce <_strtod_l+0xae>
 8016cee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016cf0:	b13a      	cbz	r2, 8016d02 <_strtod_l+0xe2>
 8016cf2:	2135      	movs	r1, #53	; 0x35
 8016cf4:	a81e      	add	r0, sp, #120	; 0x78
 8016cf6:	f001 fd27 	bl	8018748 <__copybits>
 8016cfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016cfc:	4648      	mov	r0, r9
 8016cfe:	f001 f994 	bl	801802a <_Bfree>
 8016d02:	3c01      	subs	r4, #1
 8016d04:	2c04      	cmp	r4, #4
 8016d06:	d806      	bhi.n	8016d16 <_strtod_l+0xf6>
 8016d08:	e8df f004 	tbb	[pc, r4]
 8016d0c:	1714030a 	.word	0x1714030a
 8016d10:	0a          	.byte	0x0a
 8016d11:	00          	.byte	0x00
 8016d12:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016d16:	0730      	lsls	r0, r6, #28
 8016d18:	d5c1      	bpl.n	8016c9e <_strtod_l+0x7e>
 8016d1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016d1e:	e7be      	b.n	8016c9e <_strtod_l+0x7e>
 8016d20:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016d24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016d26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016d2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016d2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016d32:	e7f0      	b.n	8016d16 <_strtod_l+0xf6>
 8016d34:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016ea8 <_strtod_l+0x288>
 8016d38:	e7ed      	b.n	8016d16 <_strtod_l+0xf6>
 8016d3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016d3e:	f04f 3aff 	mov.w	sl, #4294967295
 8016d42:	e7e8      	b.n	8016d16 <_strtod_l+0xf6>
 8016d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d46:	1c5a      	adds	r2, r3, #1
 8016d48:	921b      	str	r2, [sp, #108]	; 0x6c
 8016d4a:	785b      	ldrb	r3, [r3, #1]
 8016d4c:	2b30      	cmp	r3, #48	; 0x30
 8016d4e:	d0f9      	beq.n	8016d44 <_strtod_l+0x124>
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d0a4      	beq.n	8016c9e <_strtod_l+0x7e>
 8016d54:	2301      	movs	r3, #1
 8016d56:	2500      	movs	r5, #0
 8016d58:	9306      	str	r3, [sp, #24]
 8016d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d5c:	9308      	str	r3, [sp, #32]
 8016d5e:	9507      	str	r5, [sp, #28]
 8016d60:	9505      	str	r5, [sp, #20]
 8016d62:	220a      	movs	r2, #10
 8016d64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016d66:	7807      	ldrb	r7, [r0, #0]
 8016d68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016d6c:	b2d9      	uxtb	r1, r3
 8016d6e:	2909      	cmp	r1, #9
 8016d70:	d929      	bls.n	8016dc6 <_strtod_l+0x1a6>
 8016d72:	4622      	mov	r2, r4
 8016d74:	f8d8 1000 	ldr.w	r1, [r8]
 8016d78:	f7ff ff21 	bl	8016bbe <strncmp>
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	d031      	beq.n	8016de4 <_strtod_l+0x1c4>
 8016d80:	2000      	movs	r0, #0
 8016d82:	9c05      	ldr	r4, [sp, #20]
 8016d84:	9004      	str	r0, [sp, #16]
 8016d86:	463b      	mov	r3, r7
 8016d88:	4602      	mov	r2, r0
 8016d8a:	2b65      	cmp	r3, #101	; 0x65
 8016d8c:	d001      	beq.n	8016d92 <_strtod_l+0x172>
 8016d8e:	2b45      	cmp	r3, #69	; 0x45
 8016d90:	d114      	bne.n	8016dbc <_strtod_l+0x19c>
 8016d92:	b924      	cbnz	r4, 8016d9e <_strtod_l+0x17e>
 8016d94:	b910      	cbnz	r0, 8016d9c <_strtod_l+0x17c>
 8016d96:	9b06      	ldr	r3, [sp, #24]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d09e      	beq.n	8016cda <_strtod_l+0xba>
 8016d9c:	2400      	movs	r4, #0
 8016d9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016da0:	1c73      	adds	r3, r6, #1
 8016da2:	931b      	str	r3, [sp, #108]	; 0x6c
 8016da4:	7873      	ldrb	r3, [r6, #1]
 8016da6:	2b2b      	cmp	r3, #43	; 0x2b
 8016da8:	d078      	beq.n	8016e9c <_strtod_l+0x27c>
 8016daa:	2b2d      	cmp	r3, #45	; 0x2d
 8016dac:	d070      	beq.n	8016e90 <_strtod_l+0x270>
 8016dae:	f04f 0c00 	mov.w	ip, #0
 8016db2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016db6:	2f09      	cmp	r7, #9
 8016db8:	d97c      	bls.n	8016eb4 <_strtod_l+0x294>
 8016dba:	961b      	str	r6, [sp, #108]	; 0x6c
 8016dbc:	f04f 0e00 	mov.w	lr, #0
 8016dc0:	e09a      	b.n	8016ef8 <_strtod_l+0x2d8>
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	e7c7      	b.n	8016d56 <_strtod_l+0x136>
 8016dc6:	9905      	ldr	r1, [sp, #20]
 8016dc8:	2908      	cmp	r1, #8
 8016dca:	bfdd      	ittte	le
 8016dcc:	9907      	ldrle	r1, [sp, #28]
 8016dce:	fb02 3301 	mlale	r3, r2, r1, r3
 8016dd2:	9307      	strle	r3, [sp, #28]
 8016dd4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016dd8:	9b05      	ldr	r3, [sp, #20]
 8016dda:	3001      	adds	r0, #1
 8016ddc:	3301      	adds	r3, #1
 8016dde:	9305      	str	r3, [sp, #20]
 8016de0:	901b      	str	r0, [sp, #108]	; 0x6c
 8016de2:	e7bf      	b.n	8016d64 <_strtod_l+0x144>
 8016de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016de6:	191a      	adds	r2, r3, r4
 8016de8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016dea:	9a05      	ldr	r2, [sp, #20]
 8016dec:	5d1b      	ldrb	r3, [r3, r4]
 8016dee:	2a00      	cmp	r2, #0
 8016df0:	d037      	beq.n	8016e62 <_strtod_l+0x242>
 8016df2:	9c05      	ldr	r4, [sp, #20]
 8016df4:	4602      	mov	r2, r0
 8016df6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016dfa:	2909      	cmp	r1, #9
 8016dfc:	d913      	bls.n	8016e26 <_strtod_l+0x206>
 8016dfe:	2101      	movs	r1, #1
 8016e00:	9104      	str	r1, [sp, #16]
 8016e02:	e7c2      	b.n	8016d8a <_strtod_l+0x16a>
 8016e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e06:	1c5a      	adds	r2, r3, #1
 8016e08:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e0a:	785b      	ldrb	r3, [r3, #1]
 8016e0c:	3001      	adds	r0, #1
 8016e0e:	2b30      	cmp	r3, #48	; 0x30
 8016e10:	d0f8      	beq.n	8016e04 <_strtod_l+0x1e4>
 8016e12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016e16:	2a08      	cmp	r2, #8
 8016e18:	f200 84e4 	bhi.w	80177e4 <_strtod_l+0xbc4>
 8016e1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016e1e:	9208      	str	r2, [sp, #32]
 8016e20:	4602      	mov	r2, r0
 8016e22:	2000      	movs	r0, #0
 8016e24:	4604      	mov	r4, r0
 8016e26:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016e2a:	f100 0101 	add.w	r1, r0, #1
 8016e2e:	d012      	beq.n	8016e56 <_strtod_l+0x236>
 8016e30:	440a      	add	r2, r1
 8016e32:	eb00 0c04 	add.w	ip, r0, r4
 8016e36:	4621      	mov	r1, r4
 8016e38:	270a      	movs	r7, #10
 8016e3a:	458c      	cmp	ip, r1
 8016e3c:	d113      	bne.n	8016e66 <_strtod_l+0x246>
 8016e3e:	1821      	adds	r1, r4, r0
 8016e40:	2908      	cmp	r1, #8
 8016e42:	f104 0401 	add.w	r4, r4, #1
 8016e46:	4404      	add	r4, r0
 8016e48:	dc19      	bgt.n	8016e7e <_strtod_l+0x25e>
 8016e4a:	9b07      	ldr	r3, [sp, #28]
 8016e4c:	210a      	movs	r1, #10
 8016e4e:	fb01 e303 	mla	r3, r1, r3, lr
 8016e52:	9307      	str	r3, [sp, #28]
 8016e54:	2100      	movs	r1, #0
 8016e56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e58:	1c58      	adds	r0, r3, #1
 8016e5a:	901b      	str	r0, [sp, #108]	; 0x6c
 8016e5c:	785b      	ldrb	r3, [r3, #1]
 8016e5e:	4608      	mov	r0, r1
 8016e60:	e7c9      	b.n	8016df6 <_strtod_l+0x1d6>
 8016e62:	9805      	ldr	r0, [sp, #20]
 8016e64:	e7d3      	b.n	8016e0e <_strtod_l+0x1ee>
 8016e66:	2908      	cmp	r1, #8
 8016e68:	f101 0101 	add.w	r1, r1, #1
 8016e6c:	dc03      	bgt.n	8016e76 <_strtod_l+0x256>
 8016e6e:	9b07      	ldr	r3, [sp, #28]
 8016e70:	437b      	muls	r3, r7
 8016e72:	9307      	str	r3, [sp, #28]
 8016e74:	e7e1      	b.n	8016e3a <_strtod_l+0x21a>
 8016e76:	2910      	cmp	r1, #16
 8016e78:	bfd8      	it	le
 8016e7a:	437d      	mulle	r5, r7
 8016e7c:	e7dd      	b.n	8016e3a <_strtod_l+0x21a>
 8016e7e:	2c10      	cmp	r4, #16
 8016e80:	bfdc      	itt	le
 8016e82:	210a      	movle	r1, #10
 8016e84:	fb01 e505 	mlale	r5, r1, r5, lr
 8016e88:	e7e4      	b.n	8016e54 <_strtod_l+0x234>
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	9304      	str	r3, [sp, #16]
 8016e8e:	e781      	b.n	8016d94 <_strtod_l+0x174>
 8016e90:	f04f 0c01 	mov.w	ip, #1
 8016e94:	1cb3      	adds	r3, r6, #2
 8016e96:	931b      	str	r3, [sp, #108]	; 0x6c
 8016e98:	78b3      	ldrb	r3, [r6, #2]
 8016e9a:	e78a      	b.n	8016db2 <_strtod_l+0x192>
 8016e9c:	f04f 0c00 	mov.w	ip, #0
 8016ea0:	e7f8      	b.n	8016e94 <_strtod_l+0x274>
 8016ea2:	bf00      	nop
 8016ea4:	08019a24 	.word	0x08019a24
 8016ea8:	7ff00000 	.word	0x7ff00000
 8016eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016eae:	1c5f      	adds	r7, r3, #1
 8016eb0:	971b      	str	r7, [sp, #108]	; 0x6c
 8016eb2:	785b      	ldrb	r3, [r3, #1]
 8016eb4:	2b30      	cmp	r3, #48	; 0x30
 8016eb6:	d0f9      	beq.n	8016eac <_strtod_l+0x28c>
 8016eb8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016ebc:	2f08      	cmp	r7, #8
 8016ebe:	f63f af7d 	bhi.w	8016dbc <_strtod_l+0x19c>
 8016ec2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016ec6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8016eca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ecc:	1c5f      	adds	r7, r3, #1
 8016ece:	971b      	str	r7, [sp, #108]	; 0x6c
 8016ed0:	785b      	ldrb	r3, [r3, #1]
 8016ed2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016ed6:	f1b8 0f09 	cmp.w	r8, #9
 8016eda:	d937      	bls.n	8016f4c <_strtod_l+0x32c>
 8016edc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016ede:	1a7f      	subs	r7, r7, r1
 8016ee0:	2f08      	cmp	r7, #8
 8016ee2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016ee6:	dc37      	bgt.n	8016f58 <_strtod_l+0x338>
 8016ee8:	45be      	cmp	lr, r7
 8016eea:	bfa8      	it	ge
 8016eec:	46be      	movge	lr, r7
 8016eee:	f1bc 0f00 	cmp.w	ip, #0
 8016ef2:	d001      	beq.n	8016ef8 <_strtod_l+0x2d8>
 8016ef4:	f1ce 0e00 	rsb	lr, lr, #0
 8016ef8:	2c00      	cmp	r4, #0
 8016efa:	d151      	bne.n	8016fa0 <_strtod_l+0x380>
 8016efc:	2800      	cmp	r0, #0
 8016efe:	f47f aece 	bne.w	8016c9e <_strtod_l+0x7e>
 8016f02:	9a06      	ldr	r2, [sp, #24]
 8016f04:	2a00      	cmp	r2, #0
 8016f06:	f47f aeca 	bne.w	8016c9e <_strtod_l+0x7e>
 8016f0a:	9a04      	ldr	r2, [sp, #16]
 8016f0c:	2a00      	cmp	r2, #0
 8016f0e:	f47f aee4 	bne.w	8016cda <_strtod_l+0xba>
 8016f12:	2b4e      	cmp	r3, #78	; 0x4e
 8016f14:	d027      	beq.n	8016f66 <_strtod_l+0x346>
 8016f16:	dc21      	bgt.n	8016f5c <_strtod_l+0x33c>
 8016f18:	2b49      	cmp	r3, #73	; 0x49
 8016f1a:	f47f aede 	bne.w	8016cda <_strtod_l+0xba>
 8016f1e:	49a0      	ldr	r1, [pc, #640]	; (80171a0 <_strtod_l+0x580>)
 8016f20:	a81b      	add	r0, sp, #108	; 0x6c
 8016f22:	f000 ffa6 	bl	8017e72 <__match>
 8016f26:	2800      	cmp	r0, #0
 8016f28:	f43f aed7 	beq.w	8016cda <_strtod_l+0xba>
 8016f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f2e:	499d      	ldr	r1, [pc, #628]	; (80171a4 <_strtod_l+0x584>)
 8016f30:	3b01      	subs	r3, #1
 8016f32:	a81b      	add	r0, sp, #108	; 0x6c
 8016f34:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f36:	f000 ff9c 	bl	8017e72 <__match>
 8016f3a:	b910      	cbnz	r0, 8016f42 <_strtod_l+0x322>
 8016f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f3e:	3301      	adds	r3, #1
 8016f40:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f42:	f8df b274 	ldr.w	fp, [pc, #628]	; 80171b8 <_strtod_l+0x598>
 8016f46:	f04f 0a00 	mov.w	sl, #0
 8016f4a:	e6a8      	b.n	8016c9e <_strtod_l+0x7e>
 8016f4c:	210a      	movs	r1, #10
 8016f4e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016f52:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016f56:	e7b8      	b.n	8016eca <_strtod_l+0x2aa>
 8016f58:	46be      	mov	lr, r7
 8016f5a:	e7c8      	b.n	8016eee <_strtod_l+0x2ce>
 8016f5c:	2b69      	cmp	r3, #105	; 0x69
 8016f5e:	d0de      	beq.n	8016f1e <_strtod_l+0x2fe>
 8016f60:	2b6e      	cmp	r3, #110	; 0x6e
 8016f62:	f47f aeba 	bne.w	8016cda <_strtod_l+0xba>
 8016f66:	4990      	ldr	r1, [pc, #576]	; (80171a8 <_strtod_l+0x588>)
 8016f68:	a81b      	add	r0, sp, #108	; 0x6c
 8016f6a:	f000 ff82 	bl	8017e72 <__match>
 8016f6e:	2800      	cmp	r0, #0
 8016f70:	f43f aeb3 	beq.w	8016cda <_strtod_l+0xba>
 8016f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	2b28      	cmp	r3, #40	; 0x28
 8016f7a:	d10e      	bne.n	8016f9a <_strtod_l+0x37a>
 8016f7c:	aa1e      	add	r2, sp, #120	; 0x78
 8016f7e:	498b      	ldr	r1, [pc, #556]	; (80171ac <_strtod_l+0x58c>)
 8016f80:	a81b      	add	r0, sp, #108	; 0x6c
 8016f82:	f000 ff8a 	bl	8017e9a <__hexnan>
 8016f86:	2805      	cmp	r0, #5
 8016f88:	d107      	bne.n	8016f9a <_strtod_l+0x37a>
 8016f8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016f8c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016f90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016f94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016f98:	e681      	b.n	8016c9e <_strtod_l+0x7e>
 8016f9a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80171c0 <_strtod_l+0x5a0>
 8016f9e:	e7d2      	b.n	8016f46 <_strtod_l+0x326>
 8016fa0:	ebae 0302 	sub.w	r3, lr, r2
 8016fa4:	9306      	str	r3, [sp, #24]
 8016fa6:	9b05      	ldr	r3, [sp, #20]
 8016fa8:	9807      	ldr	r0, [sp, #28]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	bf08      	it	eq
 8016fae:	4623      	moveq	r3, r4
 8016fb0:	2c10      	cmp	r4, #16
 8016fb2:	9305      	str	r3, [sp, #20]
 8016fb4:	46a0      	mov	r8, r4
 8016fb6:	bfa8      	it	ge
 8016fb8:	f04f 0810 	movge.w	r8, #16
 8016fbc:	f7e9 fab2 	bl	8000524 <__aeabi_ui2d>
 8016fc0:	2c09      	cmp	r4, #9
 8016fc2:	4682      	mov	sl, r0
 8016fc4:	468b      	mov	fp, r1
 8016fc6:	dc13      	bgt.n	8016ff0 <_strtod_l+0x3d0>
 8016fc8:	9b06      	ldr	r3, [sp, #24]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	f43f ae67 	beq.w	8016c9e <_strtod_l+0x7e>
 8016fd0:	9b06      	ldr	r3, [sp, #24]
 8016fd2:	dd7a      	ble.n	80170ca <_strtod_l+0x4aa>
 8016fd4:	2b16      	cmp	r3, #22
 8016fd6:	dc61      	bgt.n	801709c <_strtod_l+0x47c>
 8016fd8:	4a75      	ldr	r2, [pc, #468]	; (80171b0 <_strtod_l+0x590>)
 8016fda:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016fde:	e9de 0100 	ldrd	r0, r1, [lr]
 8016fe2:	4652      	mov	r2, sl
 8016fe4:	465b      	mov	r3, fp
 8016fe6:	f7e9 fb17 	bl	8000618 <__aeabi_dmul>
 8016fea:	4682      	mov	sl, r0
 8016fec:	468b      	mov	fp, r1
 8016fee:	e656      	b.n	8016c9e <_strtod_l+0x7e>
 8016ff0:	4b6f      	ldr	r3, [pc, #444]	; (80171b0 <_strtod_l+0x590>)
 8016ff2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016ff6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016ffa:	f7e9 fb0d 	bl	8000618 <__aeabi_dmul>
 8016ffe:	4606      	mov	r6, r0
 8017000:	4628      	mov	r0, r5
 8017002:	460f      	mov	r7, r1
 8017004:	f7e9 fa8e 	bl	8000524 <__aeabi_ui2d>
 8017008:	4602      	mov	r2, r0
 801700a:	460b      	mov	r3, r1
 801700c:	4630      	mov	r0, r6
 801700e:	4639      	mov	r1, r7
 8017010:	f7e9 f94c 	bl	80002ac <__adddf3>
 8017014:	2c0f      	cmp	r4, #15
 8017016:	4682      	mov	sl, r0
 8017018:	468b      	mov	fp, r1
 801701a:	ddd5      	ble.n	8016fc8 <_strtod_l+0x3a8>
 801701c:	9b06      	ldr	r3, [sp, #24]
 801701e:	eba4 0808 	sub.w	r8, r4, r8
 8017022:	4498      	add	r8, r3
 8017024:	f1b8 0f00 	cmp.w	r8, #0
 8017028:	f340 8096 	ble.w	8017158 <_strtod_l+0x538>
 801702c:	f018 030f 	ands.w	r3, r8, #15
 8017030:	d00a      	beq.n	8017048 <_strtod_l+0x428>
 8017032:	495f      	ldr	r1, [pc, #380]	; (80171b0 <_strtod_l+0x590>)
 8017034:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017038:	4652      	mov	r2, sl
 801703a:	465b      	mov	r3, fp
 801703c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017040:	f7e9 faea 	bl	8000618 <__aeabi_dmul>
 8017044:	4682      	mov	sl, r0
 8017046:	468b      	mov	fp, r1
 8017048:	f038 080f 	bics.w	r8, r8, #15
 801704c:	d073      	beq.n	8017136 <_strtod_l+0x516>
 801704e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017052:	dd47      	ble.n	80170e4 <_strtod_l+0x4c4>
 8017054:	2400      	movs	r4, #0
 8017056:	46a0      	mov	r8, r4
 8017058:	9407      	str	r4, [sp, #28]
 801705a:	9405      	str	r4, [sp, #20]
 801705c:	2322      	movs	r3, #34	; 0x22
 801705e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80171b8 <_strtod_l+0x598>
 8017062:	f8c9 3000 	str.w	r3, [r9]
 8017066:	f04f 0a00 	mov.w	sl, #0
 801706a:	9b07      	ldr	r3, [sp, #28]
 801706c:	2b00      	cmp	r3, #0
 801706e:	f43f ae16 	beq.w	8016c9e <_strtod_l+0x7e>
 8017072:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017074:	4648      	mov	r0, r9
 8017076:	f000 ffd8 	bl	801802a <_Bfree>
 801707a:	9905      	ldr	r1, [sp, #20]
 801707c:	4648      	mov	r0, r9
 801707e:	f000 ffd4 	bl	801802a <_Bfree>
 8017082:	4641      	mov	r1, r8
 8017084:	4648      	mov	r0, r9
 8017086:	f000 ffd0 	bl	801802a <_Bfree>
 801708a:	9907      	ldr	r1, [sp, #28]
 801708c:	4648      	mov	r0, r9
 801708e:	f000 ffcc 	bl	801802a <_Bfree>
 8017092:	4621      	mov	r1, r4
 8017094:	4648      	mov	r0, r9
 8017096:	f000 ffc8 	bl	801802a <_Bfree>
 801709a:	e600      	b.n	8016c9e <_strtod_l+0x7e>
 801709c:	9a06      	ldr	r2, [sp, #24]
 801709e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80170a2:	4293      	cmp	r3, r2
 80170a4:	dbba      	blt.n	801701c <_strtod_l+0x3fc>
 80170a6:	4d42      	ldr	r5, [pc, #264]	; (80171b0 <_strtod_l+0x590>)
 80170a8:	f1c4 040f 	rsb	r4, r4, #15
 80170ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80170b0:	4652      	mov	r2, sl
 80170b2:	465b      	mov	r3, fp
 80170b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170b8:	f7e9 faae 	bl	8000618 <__aeabi_dmul>
 80170bc:	9b06      	ldr	r3, [sp, #24]
 80170be:	1b1c      	subs	r4, r3, r4
 80170c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80170c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80170c8:	e78d      	b.n	8016fe6 <_strtod_l+0x3c6>
 80170ca:	f113 0f16 	cmn.w	r3, #22
 80170ce:	dba5      	blt.n	801701c <_strtod_l+0x3fc>
 80170d0:	4a37      	ldr	r2, [pc, #220]	; (80171b0 <_strtod_l+0x590>)
 80170d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80170d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80170da:	4650      	mov	r0, sl
 80170dc:	4659      	mov	r1, fp
 80170de:	f7e9 fbc5 	bl	800086c <__aeabi_ddiv>
 80170e2:	e782      	b.n	8016fea <_strtod_l+0x3ca>
 80170e4:	2300      	movs	r3, #0
 80170e6:	4e33      	ldr	r6, [pc, #204]	; (80171b4 <_strtod_l+0x594>)
 80170e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80170ec:	4650      	mov	r0, sl
 80170ee:	4659      	mov	r1, fp
 80170f0:	461d      	mov	r5, r3
 80170f2:	f1b8 0f01 	cmp.w	r8, #1
 80170f6:	dc21      	bgt.n	801713c <_strtod_l+0x51c>
 80170f8:	b10b      	cbz	r3, 80170fe <_strtod_l+0x4de>
 80170fa:	4682      	mov	sl, r0
 80170fc:	468b      	mov	fp, r1
 80170fe:	4b2d      	ldr	r3, [pc, #180]	; (80171b4 <_strtod_l+0x594>)
 8017100:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017104:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017108:	4652      	mov	r2, sl
 801710a:	465b      	mov	r3, fp
 801710c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017110:	f7e9 fa82 	bl	8000618 <__aeabi_dmul>
 8017114:	4b28      	ldr	r3, [pc, #160]	; (80171b8 <_strtod_l+0x598>)
 8017116:	460a      	mov	r2, r1
 8017118:	400b      	ands	r3, r1
 801711a:	4928      	ldr	r1, [pc, #160]	; (80171bc <_strtod_l+0x59c>)
 801711c:	428b      	cmp	r3, r1
 801711e:	4682      	mov	sl, r0
 8017120:	d898      	bhi.n	8017054 <_strtod_l+0x434>
 8017122:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017126:	428b      	cmp	r3, r1
 8017128:	bf86      	itte	hi
 801712a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80171c4 <_strtod_l+0x5a4>
 801712e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017132:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017136:	2300      	movs	r3, #0
 8017138:	9304      	str	r3, [sp, #16]
 801713a:	e077      	b.n	801722c <_strtod_l+0x60c>
 801713c:	f018 0f01 	tst.w	r8, #1
 8017140:	d006      	beq.n	8017150 <_strtod_l+0x530>
 8017142:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8017146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714a:	f7e9 fa65 	bl	8000618 <__aeabi_dmul>
 801714e:	2301      	movs	r3, #1
 8017150:	3501      	adds	r5, #1
 8017152:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017156:	e7cc      	b.n	80170f2 <_strtod_l+0x4d2>
 8017158:	d0ed      	beq.n	8017136 <_strtod_l+0x516>
 801715a:	f1c8 0800 	rsb	r8, r8, #0
 801715e:	f018 020f 	ands.w	r2, r8, #15
 8017162:	d00a      	beq.n	801717a <_strtod_l+0x55a>
 8017164:	4b12      	ldr	r3, [pc, #72]	; (80171b0 <_strtod_l+0x590>)
 8017166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801716a:	4650      	mov	r0, sl
 801716c:	4659      	mov	r1, fp
 801716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017172:	f7e9 fb7b 	bl	800086c <__aeabi_ddiv>
 8017176:	4682      	mov	sl, r0
 8017178:	468b      	mov	fp, r1
 801717a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801717e:	d0da      	beq.n	8017136 <_strtod_l+0x516>
 8017180:	f1b8 0f1f 	cmp.w	r8, #31
 8017184:	dd20      	ble.n	80171c8 <_strtod_l+0x5a8>
 8017186:	2400      	movs	r4, #0
 8017188:	46a0      	mov	r8, r4
 801718a:	9407      	str	r4, [sp, #28]
 801718c:	9405      	str	r4, [sp, #20]
 801718e:	2322      	movs	r3, #34	; 0x22
 8017190:	f04f 0a00 	mov.w	sl, #0
 8017194:	f04f 0b00 	mov.w	fp, #0
 8017198:	f8c9 3000 	str.w	r3, [r9]
 801719c:	e765      	b.n	801706a <_strtod_l+0x44a>
 801719e:	bf00      	nop
 80171a0:	08019a16 	.word	0x08019a16
 80171a4:	08019a19 	.word	0x08019a19
 80171a8:	08019a1f 	.word	0x08019a1f
 80171ac:	08019a38 	.word	0x08019a38
 80171b0:	08019ba8 	.word	0x08019ba8
 80171b4:	08019b80 	.word	0x08019b80
 80171b8:	7ff00000 	.word	0x7ff00000
 80171bc:	7ca00000 	.word	0x7ca00000
 80171c0:	fff80000 	.word	0xfff80000
 80171c4:	7fefffff 	.word	0x7fefffff
 80171c8:	f018 0310 	ands.w	r3, r8, #16
 80171cc:	bf18      	it	ne
 80171ce:	236a      	movne	r3, #106	; 0x6a
 80171d0:	4da0      	ldr	r5, [pc, #640]	; (8017454 <_strtod_l+0x834>)
 80171d2:	9304      	str	r3, [sp, #16]
 80171d4:	4650      	mov	r0, sl
 80171d6:	4659      	mov	r1, fp
 80171d8:	2300      	movs	r3, #0
 80171da:	f1b8 0f00 	cmp.w	r8, #0
 80171de:	f300 810a 	bgt.w	80173f6 <_strtod_l+0x7d6>
 80171e2:	b10b      	cbz	r3, 80171e8 <_strtod_l+0x5c8>
 80171e4:	4682      	mov	sl, r0
 80171e6:	468b      	mov	fp, r1
 80171e8:	9b04      	ldr	r3, [sp, #16]
 80171ea:	b1bb      	cbz	r3, 801721c <_strtod_l+0x5fc>
 80171ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80171f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	4659      	mov	r1, fp
 80171f8:	dd10      	ble.n	801721c <_strtod_l+0x5fc>
 80171fa:	2b1f      	cmp	r3, #31
 80171fc:	f340 8107 	ble.w	801740e <_strtod_l+0x7ee>
 8017200:	2b34      	cmp	r3, #52	; 0x34
 8017202:	bfde      	ittt	le
 8017204:	3b20      	suble	r3, #32
 8017206:	f04f 32ff 	movle.w	r2, #4294967295
 801720a:	fa02 f303 	lslle.w	r3, r2, r3
 801720e:	f04f 0a00 	mov.w	sl, #0
 8017212:	bfcc      	ite	gt
 8017214:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017218:	ea03 0b01 	andle.w	fp, r3, r1
 801721c:	2200      	movs	r2, #0
 801721e:	2300      	movs	r3, #0
 8017220:	4650      	mov	r0, sl
 8017222:	4659      	mov	r1, fp
 8017224:	f7e9 fc60 	bl	8000ae8 <__aeabi_dcmpeq>
 8017228:	2800      	cmp	r0, #0
 801722a:	d1ac      	bne.n	8017186 <_strtod_l+0x566>
 801722c:	9b07      	ldr	r3, [sp, #28]
 801722e:	9300      	str	r3, [sp, #0]
 8017230:	9a05      	ldr	r2, [sp, #20]
 8017232:	9908      	ldr	r1, [sp, #32]
 8017234:	4623      	mov	r3, r4
 8017236:	4648      	mov	r0, r9
 8017238:	f000 ff49 	bl	80180ce <__s2b>
 801723c:	9007      	str	r0, [sp, #28]
 801723e:	2800      	cmp	r0, #0
 8017240:	f43f af08 	beq.w	8017054 <_strtod_l+0x434>
 8017244:	9a06      	ldr	r2, [sp, #24]
 8017246:	9b06      	ldr	r3, [sp, #24]
 8017248:	2a00      	cmp	r2, #0
 801724a:	f1c3 0300 	rsb	r3, r3, #0
 801724e:	bfa8      	it	ge
 8017250:	2300      	movge	r3, #0
 8017252:	930e      	str	r3, [sp, #56]	; 0x38
 8017254:	2400      	movs	r4, #0
 8017256:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801725a:	9316      	str	r3, [sp, #88]	; 0x58
 801725c:	46a0      	mov	r8, r4
 801725e:	9b07      	ldr	r3, [sp, #28]
 8017260:	4648      	mov	r0, r9
 8017262:	6859      	ldr	r1, [r3, #4]
 8017264:	f000 fead 	bl	8017fc2 <_Balloc>
 8017268:	9005      	str	r0, [sp, #20]
 801726a:	2800      	cmp	r0, #0
 801726c:	f43f aef6 	beq.w	801705c <_strtod_l+0x43c>
 8017270:	9b07      	ldr	r3, [sp, #28]
 8017272:	691a      	ldr	r2, [r3, #16]
 8017274:	3202      	adds	r2, #2
 8017276:	f103 010c 	add.w	r1, r3, #12
 801727a:	0092      	lsls	r2, r2, #2
 801727c:	300c      	adds	r0, #12
 801727e:	f7ff fb85 	bl	801698c <memcpy>
 8017282:	aa1e      	add	r2, sp, #120	; 0x78
 8017284:	a91d      	add	r1, sp, #116	; 0x74
 8017286:	ec4b ab10 	vmov	d0, sl, fp
 801728a:	4648      	mov	r0, r9
 801728c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017290:	f001 f9d8 	bl	8018644 <__d2b>
 8017294:	901c      	str	r0, [sp, #112]	; 0x70
 8017296:	2800      	cmp	r0, #0
 8017298:	f43f aee0 	beq.w	801705c <_strtod_l+0x43c>
 801729c:	2101      	movs	r1, #1
 801729e:	4648      	mov	r0, r9
 80172a0:	f000 ffa1 	bl	80181e6 <__i2b>
 80172a4:	4680      	mov	r8, r0
 80172a6:	2800      	cmp	r0, #0
 80172a8:	f43f aed8 	beq.w	801705c <_strtod_l+0x43c>
 80172ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80172ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80172b0:	2e00      	cmp	r6, #0
 80172b2:	bfab      	itete	ge
 80172b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80172b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80172b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80172ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80172bc:	bfac      	ite	ge
 80172be:	18f7      	addge	r7, r6, r3
 80172c0:	1b9d      	sublt	r5, r3, r6
 80172c2:	9b04      	ldr	r3, [sp, #16]
 80172c4:	1af6      	subs	r6, r6, r3
 80172c6:	4416      	add	r6, r2
 80172c8:	4b63      	ldr	r3, [pc, #396]	; (8017458 <_strtod_l+0x838>)
 80172ca:	3e01      	subs	r6, #1
 80172cc:	429e      	cmp	r6, r3
 80172ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80172d2:	f280 80af 	bge.w	8017434 <_strtod_l+0x814>
 80172d6:	1b9b      	subs	r3, r3, r6
 80172d8:	2b1f      	cmp	r3, #31
 80172da:	eba2 0203 	sub.w	r2, r2, r3
 80172de:	f04f 0101 	mov.w	r1, #1
 80172e2:	f300 809b 	bgt.w	801741c <_strtod_l+0x7fc>
 80172e6:	fa01 f303 	lsl.w	r3, r1, r3
 80172ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80172ec:	2300      	movs	r3, #0
 80172ee:	930a      	str	r3, [sp, #40]	; 0x28
 80172f0:	18be      	adds	r6, r7, r2
 80172f2:	9b04      	ldr	r3, [sp, #16]
 80172f4:	42b7      	cmp	r7, r6
 80172f6:	4415      	add	r5, r2
 80172f8:	441d      	add	r5, r3
 80172fa:	463b      	mov	r3, r7
 80172fc:	bfa8      	it	ge
 80172fe:	4633      	movge	r3, r6
 8017300:	42ab      	cmp	r3, r5
 8017302:	bfa8      	it	ge
 8017304:	462b      	movge	r3, r5
 8017306:	2b00      	cmp	r3, #0
 8017308:	bfc2      	ittt	gt
 801730a:	1af6      	subgt	r6, r6, r3
 801730c:	1aed      	subgt	r5, r5, r3
 801730e:	1aff      	subgt	r7, r7, r3
 8017310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017312:	b1bb      	cbz	r3, 8017344 <_strtod_l+0x724>
 8017314:	4641      	mov	r1, r8
 8017316:	461a      	mov	r2, r3
 8017318:	4648      	mov	r0, r9
 801731a:	f001 f803 	bl	8018324 <__pow5mult>
 801731e:	4680      	mov	r8, r0
 8017320:	2800      	cmp	r0, #0
 8017322:	f43f ae9b 	beq.w	801705c <_strtod_l+0x43c>
 8017326:	4601      	mov	r1, r0
 8017328:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801732a:	4648      	mov	r0, r9
 801732c:	f000 ff64 	bl	80181f8 <__multiply>
 8017330:	900c      	str	r0, [sp, #48]	; 0x30
 8017332:	2800      	cmp	r0, #0
 8017334:	f43f ae92 	beq.w	801705c <_strtod_l+0x43c>
 8017338:	991c      	ldr	r1, [sp, #112]	; 0x70
 801733a:	4648      	mov	r0, r9
 801733c:	f000 fe75 	bl	801802a <_Bfree>
 8017340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017342:	931c      	str	r3, [sp, #112]	; 0x70
 8017344:	2e00      	cmp	r6, #0
 8017346:	dc7a      	bgt.n	801743e <_strtod_l+0x81e>
 8017348:	9b06      	ldr	r3, [sp, #24]
 801734a:	2b00      	cmp	r3, #0
 801734c:	dd08      	ble.n	8017360 <_strtod_l+0x740>
 801734e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017350:	9905      	ldr	r1, [sp, #20]
 8017352:	4648      	mov	r0, r9
 8017354:	f000 ffe6 	bl	8018324 <__pow5mult>
 8017358:	9005      	str	r0, [sp, #20]
 801735a:	2800      	cmp	r0, #0
 801735c:	f43f ae7e 	beq.w	801705c <_strtod_l+0x43c>
 8017360:	2d00      	cmp	r5, #0
 8017362:	dd08      	ble.n	8017376 <_strtod_l+0x756>
 8017364:	462a      	mov	r2, r5
 8017366:	9905      	ldr	r1, [sp, #20]
 8017368:	4648      	mov	r0, r9
 801736a:	f001 f829 	bl	80183c0 <__lshift>
 801736e:	9005      	str	r0, [sp, #20]
 8017370:	2800      	cmp	r0, #0
 8017372:	f43f ae73 	beq.w	801705c <_strtod_l+0x43c>
 8017376:	2f00      	cmp	r7, #0
 8017378:	dd08      	ble.n	801738c <_strtod_l+0x76c>
 801737a:	4641      	mov	r1, r8
 801737c:	463a      	mov	r2, r7
 801737e:	4648      	mov	r0, r9
 8017380:	f001 f81e 	bl	80183c0 <__lshift>
 8017384:	4680      	mov	r8, r0
 8017386:	2800      	cmp	r0, #0
 8017388:	f43f ae68 	beq.w	801705c <_strtod_l+0x43c>
 801738c:	9a05      	ldr	r2, [sp, #20]
 801738e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017390:	4648      	mov	r0, r9
 8017392:	f001 f883 	bl	801849c <__mdiff>
 8017396:	4604      	mov	r4, r0
 8017398:	2800      	cmp	r0, #0
 801739a:	f43f ae5f 	beq.w	801705c <_strtod_l+0x43c>
 801739e:	68c3      	ldr	r3, [r0, #12]
 80173a0:	930c      	str	r3, [sp, #48]	; 0x30
 80173a2:	2300      	movs	r3, #0
 80173a4:	60c3      	str	r3, [r0, #12]
 80173a6:	4641      	mov	r1, r8
 80173a8:	f001 f85e 	bl	8018468 <__mcmp>
 80173ac:	2800      	cmp	r0, #0
 80173ae:	da55      	bge.n	801745c <_strtod_l+0x83c>
 80173b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173b2:	b9e3      	cbnz	r3, 80173ee <_strtod_l+0x7ce>
 80173b4:	f1ba 0f00 	cmp.w	sl, #0
 80173b8:	d119      	bne.n	80173ee <_strtod_l+0x7ce>
 80173ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173be:	b9b3      	cbnz	r3, 80173ee <_strtod_l+0x7ce>
 80173c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80173c4:	0d1b      	lsrs	r3, r3, #20
 80173c6:	051b      	lsls	r3, r3, #20
 80173c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80173cc:	d90f      	bls.n	80173ee <_strtod_l+0x7ce>
 80173ce:	6963      	ldr	r3, [r4, #20]
 80173d0:	b913      	cbnz	r3, 80173d8 <_strtod_l+0x7b8>
 80173d2:	6923      	ldr	r3, [r4, #16]
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	dd0a      	ble.n	80173ee <_strtod_l+0x7ce>
 80173d8:	4621      	mov	r1, r4
 80173da:	2201      	movs	r2, #1
 80173dc:	4648      	mov	r0, r9
 80173de:	f000 ffef 	bl	80183c0 <__lshift>
 80173e2:	4641      	mov	r1, r8
 80173e4:	4604      	mov	r4, r0
 80173e6:	f001 f83f 	bl	8018468 <__mcmp>
 80173ea:	2800      	cmp	r0, #0
 80173ec:	dc67      	bgt.n	80174be <_strtod_l+0x89e>
 80173ee:	9b04      	ldr	r3, [sp, #16]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d171      	bne.n	80174d8 <_strtod_l+0x8b8>
 80173f4:	e63d      	b.n	8017072 <_strtod_l+0x452>
 80173f6:	f018 0f01 	tst.w	r8, #1
 80173fa:	d004      	beq.n	8017406 <_strtod_l+0x7e6>
 80173fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017400:	f7e9 f90a 	bl	8000618 <__aeabi_dmul>
 8017404:	2301      	movs	r3, #1
 8017406:	ea4f 0868 	mov.w	r8, r8, asr #1
 801740a:	3508      	adds	r5, #8
 801740c:	e6e5      	b.n	80171da <_strtod_l+0x5ba>
 801740e:	f04f 32ff 	mov.w	r2, #4294967295
 8017412:	fa02 f303 	lsl.w	r3, r2, r3
 8017416:	ea03 0a0a 	and.w	sl, r3, sl
 801741a:	e6ff      	b.n	801721c <_strtod_l+0x5fc>
 801741c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017420:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017424:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017428:	36e2      	adds	r6, #226	; 0xe2
 801742a:	fa01 f306 	lsl.w	r3, r1, r6
 801742e:	930a      	str	r3, [sp, #40]	; 0x28
 8017430:	910f      	str	r1, [sp, #60]	; 0x3c
 8017432:	e75d      	b.n	80172f0 <_strtod_l+0x6d0>
 8017434:	2300      	movs	r3, #0
 8017436:	930a      	str	r3, [sp, #40]	; 0x28
 8017438:	2301      	movs	r3, #1
 801743a:	930f      	str	r3, [sp, #60]	; 0x3c
 801743c:	e758      	b.n	80172f0 <_strtod_l+0x6d0>
 801743e:	4632      	mov	r2, r6
 8017440:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017442:	4648      	mov	r0, r9
 8017444:	f000 ffbc 	bl	80183c0 <__lshift>
 8017448:	901c      	str	r0, [sp, #112]	; 0x70
 801744a:	2800      	cmp	r0, #0
 801744c:	f47f af7c 	bne.w	8017348 <_strtod_l+0x728>
 8017450:	e604      	b.n	801705c <_strtod_l+0x43c>
 8017452:	bf00      	nop
 8017454:	08019a50 	.word	0x08019a50
 8017458:	fffffc02 	.word	0xfffffc02
 801745c:	465d      	mov	r5, fp
 801745e:	f040 8086 	bne.w	801756e <_strtod_l+0x94e>
 8017462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017468:	b32a      	cbz	r2, 80174b6 <_strtod_l+0x896>
 801746a:	4aaf      	ldr	r2, [pc, #700]	; (8017728 <_strtod_l+0xb08>)
 801746c:	4293      	cmp	r3, r2
 801746e:	d153      	bne.n	8017518 <_strtod_l+0x8f8>
 8017470:	9b04      	ldr	r3, [sp, #16]
 8017472:	4650      	mov	r0, sl
 8017474:	b1d3      	cbz	r3, 80174ac <_strtod_l+0x88c>
 8017476:	4aad      	ldr	r2, [pc, #692]	; (801772c <_strtod_l+0xb0c>)
 8017478:	402a      	ands	r2, r5
 801747a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801747e:	f04f 31ff 	mov.w	r1, #4294967295
 8017482:	d816      	bhi.n	80174b2 <_strtod_l+0x892>
 8017484:	0d12      	lsrs	r2, r2, #20
 8017486:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801748a:	fa01 f303 	lsl.w	r3, r1, r3
 801748e:	4298      	cmp	r0, r3
 8017490:	d142      	bne.n	8017518 <_strtod_l+0x8f8>
 8017492:	4ba7      	ldr	r3, [pc, #668]	; (8017730 <_strtod_l+0xb10>)
 8017494:	429d      	cmp	r5, r3
 8017496:	d102      	bne.n	801749e <_strtod_l+0x87e>
 8017498:	3001      	adds	r0, #1
 801749a:	f43f addf 	beq.w	801705c <_strtod_l+0x43c>
 801749e:	4ba3      	ldr	r3, [pc, #652]	; (801772c <_strtod_l+0xb0c>)
 80174a0:	402b      	ands	r3, r5
 80174a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80174a6:	f04f 0a00 	mov.w	sl, #0
 80174aa:	e7a0      	b.n	80173ee <_strtod_l+0x7ce>
 80174ac:	f04f 33ff 	mov.w	r3, #4294967295
 80174b0:	e7ed      	b.n	801748e <_strtod_l+0x86e>
 80174b2:	460b      	mov	r3, r1
 80174b4:	e7eb      	b.n	801748e <_strtod_l+0x86e>
 80174b6:	bb7b      	cbnz	r3, 8017518 <_strtod_l+0x8f8>
 80174b8:	f1ba 0f00 	cmp.w	sl, #0
 80174bc:	d12c      	bne.n	8017518 <_strtod_l+0x8f8>
 80174be:	9904      	ldr	r1, [sp, #16]
 80174c0:	4a9a      	ldr	r2, [pc, #616]	; (801772c <_strtod_l+0xb0c>)
 80174c2:	465b      	mov	r3, fp
 80174c4:	b1f1      	cbz	r1, 8017504 <_strtod_l+0x8e4>
 80174c6:	ea02 010b 	and.w	r1, r2, fp
 80174ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80174ce:	dc19      	bgt.n	8017504 <_strtod_l+0x8e4>
 80174d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80174d4:	f77f ae5b 	ble.w	801718e <_strtod_l+0x56e>
 80174d8:	4a96      	ldr	r2, [pc, #600]	; (8017734 <_strtod_l+0xb14>)
 80174da:	2300      	movs	r3, #0
 80174dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80174e0:	4650      	mov	r0, sl
 80174e2:	4659      	mov	r1, fp
 80174e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80174e8:	f7e9 f896 	bl	8000618 <__aeabi_dmul>
 80174ec:	4682      	mov	sl, r0
 80174ee:	468b      	mov	fp, r1
 80174f0:	2900      	cmp	r1, #0
 80174f2:	f47f adbe 	bne.w	8017072 <_strtod_l+0x452>
 80174f6:	2800      	cmp	r0, #0
 80174f8:	f47f adbb 	bne.w	8017072 <_strtod_l+0x452>
 80174fc:	2322      	movs	r3, #34	; 0x22
 80174fe:	f8c9 3000 	str.w	r3, [r9]
 8017502:	e5b6      	b.n	8017072 <_strtod_l+0x452>
 8017504:	4013      	ands	r3, r2
 8017506:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801750a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801750e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017512:	f04f 3aff 	mov.w	sl, #4294967295
 8017516:	e76a      	b.n	80173ee <_strtod_l+0x7ce>
 8017518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801751a:	b193      	cbz	r3, 8017542 <_strtod_l+0x922>
 801751c:	422b      	tst	r3, r5
 801751e:	f43f af66 	beq.w	80173ee <_strtod_l+0x7ce>
 8017522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017524:	9a04      	ldr	r2, [sp, #16]
 8017526:	4650      	mov	r0, sl
 8017528:	4659      	mov	r1, fp
 801752a:	b173      	cbz	r3, 801754a <_strtod_l+0x92a>
 801752c:	f7ff fb59 	bl	8016be2 <sulp>
 8017530:	4602      	mov	r2, r0
 8017532:	460b      	mov	r3, r1
 8017534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017538:	f7e8 feb8 	bl	80002ac <__adddf3>
 801753c:	4682      	mov	sl, r0
 801753e:	468b      	mov	fp, r1
 8017540:	e755      	b.n	80173ee <_strtod_l+0x7ce>
 8017542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017544:	ea13 0f0a 	tst.w	r3, sl
 8017548:	e7e9      	b.n	801751e <_strtod_l+0x8fe>
 801754a:	f7ff fb4a 	bl	8016be2 <sulp>
 801754e:	4602      	mov	r2, r0
 8017550:	460b      	mov	r3, r1
 8017552:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017556:	f7e8 fea7 	bl	80002a8 <__aeabi_dsub>
 801755a:	2200      	movs	r2, #0
 801755c:	2300      	movs	r3, #0
 801755e:	4682      	mov	sl, r0
 8017560:	468b      	mov	fp, r1
 8017562:	f7e9 fac1 	bl	8000ae8 <__aeabi_dcmpeq>
 8017566:	2800      	cmp	r0, #0
 8017568:	f47f ae11 	bne.w	801718e <_strtod_l+0x56e>
 801756c:	e73f      	b.n	80173ee <_strtod_l+0x7ce>
 801756e:	4641      	mov	r1, r8
 8017570:	4620      	mov	r0, r4
 8017572:	f001 f8b6 	bl	80186e2 <__ratio>
 8017576:	ec57 6b10 	vmov	r6, r7, d0
 801757a:	2200      	movs	r2, #0
 801757c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017580:	ee10 0a10 	vmov	r0, s0
 8017584:	4639      	mov	r1, r7
 8017586:	f7e9 fac3 	bl	8000b10 <__aeabi_dcmple>
 801758a:	2800      	cmp	r0, #0
 801758c:	d077      	beq.n	801767e <_strtod_l+0xa5e>
 801758e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017590:	2b00      	cmp	r3, #0
 8017592:	d04a      	beq.n	801762a <_strtod_l+0xa0a>
 8017594:	4b68      	ldr	r3, [pc, #416]	; (8017738 <_strtod_l+0xb18>)
 8017596:	2200      	movs	r2, #0
 8017598:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801759c:	4f66      	ldr	r7, [pc, #408]	; (8017738 <_strtod_l+0xb18>)
 801759e:	2600      	movs	r6, #0
 80175a0:	4b62      	ldr	r3, [pc, #392]	; (801772c <_strtod_l+0xb0c>)
 80175a2:	402b      	ands	r3, r5
 80175a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80175a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175a8:	4b64      	ldr	r3, [pc, #400]	; (801773c <_strtod_l+0xb1c>)
 80175aa:	429a      	cmp	r2, r3
 80175ac:	f040 80ce 	bne.w	801774c <_strtod_l+0xb2c>
 80175b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80175b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80175bc:	ec4b ab10 	vmov	d0, sl, fp
 80175c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80175c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80175c8:	f000 ffc6 	bl	8018558 <__ulp>
 80175cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175d0:	ec53 2b10 	vmov	r2, r3, d0
 80175d4:	f7e9 f820 	bl	8000618 <__aeabi_dmul>
 80175d8:	4652      	mov	r2, sl
 80175da:	465b      	mov	r3, fp
 80175dc:	f7e8 fe66 	bl	80002ac <__adddf3>
 80175e0:	460b      	mov	r3, r1
 80175e2:	4952      	ldr	r1, [pc, #328]	; (801772c <_strtod_l+0xb0c>)
 80175e4:	4a56      	ldr	r2, [pc, #344]	; (8017740 <_strtod_l+0xb20>)
 80175e6:	4019      	ands	r1, r3
 80175e8:	4291      	cmp	r1, r2
 80175ea:	4682      	mov	sl, r0
 80175ec:	d95b      	bls.n	80176a6 <_strtod_l+0xa86>
 80175ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80175f4:	4293      	cmp	r3, r2
 80175f6:	d103      	bne.n	8017600 <_strtod_l+0x9e0>
 80175f8:	9b08      	ldr	r3, [sp, #32]
 80175fa:	3301      	adds	r3, #1
 80175fc:	f43f ad2e 	beq.w	801705c <_strtod_l+0x43c>
 8017600:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017730 <_strtod_l+0xb10>
 8017604:	f04f 3aff 	mov.w	sl, #4294967295
 8017608:	991c      	ldr	r1, [sp, #112]	; 0x70
 801760a:	4648      	mov	r0, r9
 801760c:	f000 fd0d 	bl	801802a <_Bfree>
 8017610:	9905      	ldr	r1, [sp, #20]
 8017612:	4648      	mov	r0, r9
 8017614:	f000 fd09 	bl	801802a <_Bfree>
 8017618:	4641      	mov	r1, r8
 801761a:	4648      	mov	r0, r9
 801761c:	f000 fd05 	bl	801802a <_Bfree>
 8017620:	4621      	mov	r1, r4
 8017622:	4648      	mov	r0, r9
 8017624:	f000 fd01 	bl	801802a <_Bfree>
 8017628:	e619      	b.n	801725e <_strtod_l+0x63e>
 801762a:	f1ba 0f00 	cmp.w	sl, #0
 801762e:	d11a      	bne.n	8017666 <_strtod_l+0xa46>
 8017630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017634:	b9eb      	cbnz	r3, 8017672 <_strtod_l+0xa52>
 8017636:	2200      	movs	r2, #0
 8017638:	4b3f      	ldr	r3, [pc, #252]	; (8017738 <_strtod_l+0xb18>)
 801763a:	4630      	mov	r0, r6
 801763c:	4639      	mov	r1, r7
 801763e:	f7e9 fa5d 	bl	8000afc <__aeabi_dcmplt>
 8017642:	b9c8      	cbnz	r0, 8017678 <_strtod_l+0xa58>
 8017644:	4630      	mov	r0, r6
 8017646:	4639      	mov	r1, r7
 8017648:	2200      	movs	r2, #0
 801764a:	4b3e      	ldr	r3, [pc, #248]	; (8017744 <_strtod_l+0xb24>)
 801764c:	f7e8 ffe4 	bl	8000618 <__aeabi_dmul>
 8017650:	4606      	mov	r6, r0
 8017652:	460f      	mov	r7, r1
 8017654:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017658:	9618      	str	r6, [sp, #96]	; 0x60
 801765a:	9319      	str	r3, [sp, #100]	; 0x64
 801765c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017660:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017664:	e79c      	b.n	80175a0 <_strtod_l+0x980>
 8017666:	f1ba 0f01 	cmp.w	sl, #1
 801766a:	d102      	bne.n	8017672 <_strtod_l+0xa52>
 801766c:	2d00      	cmp	r5, #0
 801766e:	f43f ad8e 	beq.w	801718e <_strtod_l+0x56e>
 8017672:	2200      	movs	r2, #0
 8017674:	4b34      	ldr	r3, [pc, #208]	; (8017748 <_strtod_l+0xb28>)
 8017676:	e78f      	b.n	8017598 <_strtod_l+0x978>
 8017678:	2600      	movs	r6, #0
 801767a:	4f32      	ldr	r7, [pc, #200]	; (8017744 <_strtod_l+0xb24>)
 801767c:	e7ea      	b.n	8017654 <_strtod_l+0xa34>
 801767e:	4b31      	ldr	r3, [pc, #196]	; (8017744 <_strtod_l+0xb24>)
 8017680:	4630      	mov	r0, r6
 8017682:	4639      	mov	r1, r7
 8017684:	2200      	movs	r2, #0
 8017686:	f7e8 ffc7 	bl	8000618 <__aeabi_dmul>
 801768a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801768c:	4606      	mov	r6, r0
 801768e:	460f      	mov	r7, r1
 8017690:	b933      	cbnz	r3, 80176a0 <_strtod_l+0xa80>
 8017692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017696:	9010      	str	r0, [sp, #64]	; 0x40
 8017698:	9311      	str	r3, [sp, #68]	; 0x44
 801769a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801769e:	e7df      	b.n	8017660 <_strtod_l+0xa40>
 80176a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80176a4:	e7f9      	b.n	801769a <_strtod_l+0xa7a>
 80176a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80176aa:	9b04      	ldr	r3, [sp, #16]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d1ab      	bne.n	8017608 <_strtod_l+0x9e8>
 80176b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80176b4:	0d1b      	lsrs	r3, r3, #20
 80176b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80176b8:	051b      	lsls	r3, r3, #20
 80176ba:	429a      	cmp	r2, r3
 80176bc:	465d      	mov	r5, fp
 80176be:	d1a3      	bne.n	8017608 <_strtod_l+0x9e8>
 80176c0:	4639      	mov	r1, r7
 80176c2:	4630      	mov	r0, r6
 80176c4:	f7e9 fa58 	bl	8000b78 <__aeabi_d2iz>
 80176c8:	f7e8 ff3c 	bl	8000544 <__aeabi_i2d>
 80176cc:	460b      	mov	r3, r1
 80176ce:	4602      	mov	r2, r0
 80176d0:	4639      	mov	r1, r7
 80176d2:	4630      	mov	r0, r6
 80176d4:	f7e8 fde8 	bl	80002a8 <__aeabi_dsub>
 80176d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176da:	4606      	mov	r6, r0
 80176dc:	460f      	mov	r7, r1
 80176de:	b933      	cbnz	r3, 80176ee <_strtod_l+0xace>
 80176e0:	f1ba 0f00 	cmp.w	sl, #0
 80176e4:	d103      	bne.n	80176ee <_strtod_l+0xace>
 80176e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80176ea:	2d00      	cmp	r5, #0
 80176ec:	d06d      	beq.n	80177ca <_strtod_l+0xbaa>
 80176ee:	a30a      	add	r3, pc, #40	; (adr r3, 8017718 <_strtod_l+0xaf8>)
 80176f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176f4:	4630      	mov	r0, r6
 80176f6:	4639      	mov	r1, r7
 80176f8:	f7e9 fa00 	bl	8000afc <__aeabi_dcmplt>
 80176fc:	2800      	cmp	r0, #0
 80176fe:	f47f acb8 	bne.w	8017072 <_strtod_l+0x452>
 8017702:	a307      	add	r3, pc, #28	; (adr r3, 8017720 <_strtod_l+0xb00>)
 8017704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017708:	4630      	mov	r0, r6
 801770a:	4639      	mov	r1, r7
 801770c:	f7e9 fa14 	bl	8000b38 <__aeabi_dcmpgt>
 8017710:	2800      	cmp	r0, #0
 8017712:	f43f af79 	beq.w	8017608 <_strtod_l+0x9e8>
 8017716:	e4ac      	b.n	8017072 <_strtod_l+0x452>
 8017718:	94a03595 	.word	0x94a03595
 801771c:	3fdfffff 	.word	0x3fdfffff
 8017720:	35afe535 	.word	0x35afe535
 8017724:	3fe00000 	.word	0x3fe00000
 8017728:	000fffff 	.word	0x000fffff
 801772c:	7ff00000 	.word	0x7ff00000
 8017730:	7fefffff 	.word	0x7fefffff
 8017734:	39500000 	.word	0x39500000
 8017738:	3ff00000 	.word	0x3ff00000
 801773c:	7fe00000 	.word	0x7fe00000
 8017740:	7c9fffff 	.word	0x7c9fffff
 8017744:	3fe00000 	.word	0x3fe00000
 8017748:	bff00000 	.word	0xbff00000
 801774c:	9b04      	ldr	r3, [sp, #16]
 801774e:	b333      	cbz	r3, 801779e <_strtod_l+0xb7e>
 8017750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017752:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017756:	d822      	bhi.n	801779e <_strtod_l+0xb7e>
 8017758:	a327      	add	r3, pc, #156	; (adr r3, 80177f8 <_strtod_l+0xbd8>)
 801775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801775e:	4630      	mov	r0, r6
 8017760:	4639      	mov	r1, r7
 8017762:	f7e9 f9d5 	bl	8000b10 <__aeabi_dcmple>
 8017766:	b1a0      	cbz	r0, 8017792 <_strtod_l+0xb72>
 8017768:	4639      	mov	r1, r7
 801776a:	4630      	mov	r0, r6
 801776c:	f7e9 fa2c 	bl	8000bc8 <__aeabi_d2uiz>
 8017770:	2800      	cmp	r0, #0
 8017772:	bf08      	it	eq
 8017774:	2001      	moveq	r0, #1
 8017776:	f7e8 fed5 	bl	8000524 <__aeabi_ui2d>
 801777a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801777c:	4606      	mov	r6, r0
 801777e:	460f      	mov	r7, r1
 8017780:	bb03      	cbnz	r3, 80177c4 <_strtod_l+0xba4>
 8017782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017786:	9012      	str	r0, [sp, #72]	; 0x48
 8017788:	9313      	str	r3, [sp, #76]	; 0x4c
 801778a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801778e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017796:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801779a:	1a9b      	subs	r3, r3, r2
 801779c:	930b      	str	r3, [sp, #44]	; 0x2c
 801779e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80177a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80177a6:	f000 fed7 	bl	8018558 <__ulp>
 80177aa:	4650      	mov	r0, sl
 80177ac:	ec53 2b10 	vmov	r2, r3, d0
 80177b0:	4659      	mov	r1, fp
 80177b2:	f7e8 ff31 	bl	8000618 <__aeabi_dmul>
 80177b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80177ba:	f7e8 fd77 	bl	80002ac <__adddf3>
 80177be:	4682      	mov	sl, r0
 80177c0:	468b      	mov	fp, r1
 80177c2:	e772      	b.n	80176aa <_strtod_l+0xa8a>
 80177c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80177c8:	e7df      	b.n	801778a <_strtod_l+0xb6a>
 80177ca:	a30d      	add	r3, pc, #52	; (adr r3, 8017800 <_strtod_l+0xbe0>)
 80177cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d0:	f7e9 f994 	bl	8000afc <__aeabi_dcmplt>
 80177d4:	e79c      	b.n	8017710 <_strtod_l+0xaf0>
 80177d6:	2300      	movs	r3, #0
 80177d8:	930d      	str	r3, [sp, #52]	; 0x34
 80177da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80177dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80177de:	6013      	str	r3, [r2, #0]
 80177e0:	f7ff ba61 	b.w	8016ca6 <_strtod_l+0x86>
 80177e4:	2b65      	cmp	r3, #101	; 0x65
 80177e6:	f04f 0200 	mov.w	r2, #0
 80177ea:	f43f ab4e 	beq.w	8016e8a <_strtod_l+0x26a>
 80177ee:	2101      	movs	r1, #1
 80177f0:	4614      	mov	r4, r2
 80177f2:	9104      	str	r1, [sp, #16]
 80177f4:	f7ff bacb 	b.w	8016d8e <_strtod_l+0x16e>
 80177f8:	ffc00000 	.word	0xffc00000
 80177fc:	41dfffff 	.word	0x41dfffff
 8017800:	94a03595 	.word	0x94a03595
 8017804:	3fcfffff 	.word	0x3fcfffff

08017808 <strtod>:
 8017808:	4b07      	ldr	r3, [pc, #28]	; (8017828 <strtod+0x20>)
 801780a:	4a08      	ldr	r2, [pc, #32]	; (801782c <strtod+0x24>)
 801780c:	b410      	push	{r4}
 801780e:	681c      	ldr	r4, [r3, #0]
 8017810:	6a23      	ldr	r3, [r4, #32]
 8017812:	2b00      	cmp	r3, #0
 8017814:	bf08      	it	eq
 8017816:	4613      	moveq	r3, r2
 8017818:	460a      	mov	r2, r1
 801781a:	4601      	mov	r1, r0
 801781c:	4620      	mov	r0, r4
 801781e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017822:	f7ff b9fd 	b.w	8016c20 <_strtod_l>
 8017826:	bf00      	nop
 8017828:	200000e4 	.word	0x200000e4
 801782c:	20000148 	.word	0x20000148

08017830 <_strtol_l.isra.0>:
 8017830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017834:	4680      	mov	r8, r0
 8017836:	4689      	mov	r9, r1
 8017838:	4692      	mov	sl, r2
 801783a:	461e      	mov	r6, r3
 801783c:	460f      	mov	r7, r1
 801783e:	463d      	mov	r5, r7
 8017840:	9808      	ldr	r0, [sp, #32]
 8017842:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017846:	f7ff f86d 	bl	8016924 <__locale_ctype_ptr_l>
 801784a:	4420      	add	r0, r4
 801784c:	7843      	ldrb	r3, [r0, #1]
 801784e:	f013 0308 	ands.w	r3, r3, #8
 8017852:	d132      	bne.n	80178ba <_strtol_l.isra.0+0x8a>
 8017854:	2c2d      	cmp	r4, #45	; 0x2d
 8017856:	d132      	bne.n	80178be <_strtol_l.isra.0+0x8e>
 8017858:	787c      	ldrb	r4, [r7, #1]
 801785a:	1cbd      	adds	r5, r7, #2
 801785c:	2201      	movs	r2, #1
 801785e:	2e00      	cmp	r6, #0
 8017860:	d05d      	beq.n	801791e <_strtol_l.isra.0+0xee>
 8017862:	2e10      	cmp	r6, #16
 8017864:	d109      	bne.n	801787a <_strtol_l.isra.0+0x4a>
 8017866:	2c30      	cmp	r4, #48	; 0x30
 8017868:	d107      	bne.n	801787a <_strtol_l.isra.0+0x4a>
 801786a:	782b      	ldrb	r3, [r5, #0]
 801786c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017870:	2b58      	cmp	r3, #88	; 0x58
 8017872:	d14f      	bne.n	8017914 <_strtol_l.isra.0+0xe4>
 8017874:	786c      	ldrb	r4, [r5, #1]
 8017876:	2610      	movs	r6, #16
 8017878:	3502      	adds	r5, #2
 801787a:	2a00      	cmp	r2, #0
 801787c:	bf14      	ite	ne
 801787e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017882:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017886:	2700      	movs	r7, #0
 8017888:	fbb1 fcf6 	udiv	ip, r1, r6
 801788c:	4638      	mov	r0, r7
 801788e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017892:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017896:	2b09      	cmp	r3, #9
 8017898:	d817      	bhi.n	80178ca <_strtol_l.isra.0+0x9a>
 801789a:	461c      	mov	r4, r3
 801789c:	42a6      	cmp	r6, r4
 801789e:	dd23      	ble.n	80178e8 <_strtol_l.isra.0+0xb8>
 80178a0:	1c7b      	adds	r3, r7, #1
 80178a2:	d007      	beq.n	80178b4 <_strtol_l.isra.0+0x84>
 80178a4:	4584      	cmp	ip, r0
 80178a6:	d31c      	bcc.n	80178e2 <_strtol_l.isra.0+0xb2>
 80178a8:	d101      	bne.n	80178ae <_strtol_l.isra.0+0x7e>
 80178aa:	45a6      	cmp	lr, r4
 80178ac:	db19      	blt.n	80178e2 <_strtol_l.isra.0+0xb2>
 80178ae:	fb00 4006 	mla	r0, r0, r6, r4
 80178b2:	2701      	movs	r7, #1
 80178b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80178b8:	e7eb      	b.n	8017892 <_strtol_l.isra.0+0x62>
 80178ba:	462f      	mov	r7, r5
 80178bc:	e7bf      	b.n	801783e <_strtol_l.isra.0+0xe>
 80178be:	2c2b      	cmp	r4, #43	; 0x2b
 80178c0:	bf04      	itt	eq
 80178c2:	1cbd      	addeq	r5, r7, #2
 80178c4:	787c      	ldrbeq	r4, [r7, #1]
 80178c6:	461a      	mov	r2, r3
 80178c8:	e7c9      	b.n	801785e <_strtol_l.isra.0+0x2e>
 80178ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80178ce:	2b19      	cmp	r3, #25
 80178d0:	d801      	bhi.n	80178d6 <_strtol_l.isra.0+0xa6>
 80178d2:	3c37      	subs	r4, #55	; 0x37
 80178d4:	e7e2      	b.n	801789c <_strtol_l.isra.0+0x6c>
 80178d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80178da:	2b19      	cmp	r3, #25
 80178dc:	d804      	bhi.n	80178e8 <_strtol_l.isra.0+0xb8>
 80178de:	3c57      	subs	r4, #87	; 0x57
 80178e0:	e7dc      	b.n	801789c <_strtol_l.isra.0+0x6c>
 80178e2:	f04f 37ff 	mov.w	r7, #4294967295
 80178e6:	e7e5      	b.n	80178b4 <_strtol_l.isra.0+0x84>
 80178e8:	1c7b      	adds	r3, r7, #1
 80178ea:	d108      	bne.n	80178fe <_strtol_l.isra.0+0xce>
 80178ec:	2322      	movs	r3, #34	; 0x22
 80178ee:	f8c8 3000 	str.w	r3, [r8]
 80178f2:	4608      	mov	r0, r1
 80178f4:	f1ba 0f00 	cmp.w	sl, #0
 80178f8:	d107      	bne.n	801790a <_strtol_l.isra.0+0xda>
 80178fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178fe:	b102      	cbz	r2, 8017902 <_strtol_l.isra.0+0xd2>
 8017900:	4240      	negs	r0, r0
 8017902:	f1ba 0f00 	cmp.w	sl, #0
 8017906:	d0f8      	beq.n	80178fa <_strtol_l.isra.0+0xca>
 8017908:	b10f      	cbz	r7, 801790e <_strtol_l.isra.0+0xde>
 801790a:	f105 39ff 	add.w	r9, r5, #4294967295
 801790e:	f8ca 9000 	str.w	r9, [sl]
 8017912:	e7f2      	b.n	80178fa <_strtol_l.isra.0+0xca>
 8017914:	2430      	movs	r4, #48	; 0x30
 8017916:	2e00      	cmp	r6, #0
 8017918:	d1af      	bne.n	801787a <_strtol_l.isra.0+0x4a>
 801791a:	2608      	movs	r6, #8
 801791c:	e7ad      	b.n	801787a <_strtol_l.isra.0+0x4a>
 801791e:	2c30      	cmp	r4, #48	; 0x30
 8017920:	d0a3      	beq.n	801786a <_strtol_l.isra.0+0x3a>
 8017922:	260a      	movs	r6, #10
 8017924:	e7a9      	b.n	801787a <_strtol_l.isra.0+0x4a>
	...

08017928 <strtol>:
 8017928:	4b08      	ldr	r3, [pc, #32]	; (801794c <strtol+0x24>)
 801792a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801792c:	681c      	ldr	r4, [r3, #0]
 801792e:	4d08      	ldr	r5, [pc, #32]	; (8017950 <strtol+0x28>)
 8017930:	6a23      	ldr	r3, [r4, #32]
 8017932:	2b00      	cmp	r3, #0
 8017934:	bf08      	it	eq
 8017936:	462b      	moveq	r3, r5
 8017938:	9300      	str	r3, [sp, #0]
 801793a:	4613      	mov	r3, r2
 801793c:	460a      	mov	r2, r1
 801793e:	4601      	mov	r1, r0
 8017940:	4620      	mov	r0, r4
 8017942:	f7ff ff75 	bl	8017830 <_strtol_l.isra.0>
 8017946:	b003      	add	sp, #12
 8017948:	bd30      	pop	{r4, r5, pc}
 801794a:	bf00      	nop
 801794c:	200000e4 	.word	0x200000e4
 8017950:	20000148 	.word	0x20000148

08017954 <__ascii_wctomb>:
 8017954:	b149      	cbz	r1, 801796a <__ascii_wctomb+0x16>
 8017956:	2aff      	cmp	r2, #255	; 0xff
 8017958:	bf85      	ittet	hi
 801795a:	238a      	movhi	r3, #138	; 0x8a
 801795c:	6003      	strhi	r3, [r0, #0]
 801795e:	700a      	strbls	r2, [r1, #0]
 8017960:	f04f 30ff 	movhi.w	r0, #4294967295
 8017964:	bf98      	it	ls
 8017966:	2001      	movls	r0, #1
 8017968:	4770      	bx	lr
 801796a:	4608      	mov	r0, r1
 801796c:	4770      	bx	lr

0801796e <rshift>:
 801796e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017970:	6906      	ldr	r6, [r0, #16]
 8017972:	114b      	asrs	r3, r1, #5
 8017974:	429e      	cmp	r6, r3
 8017976:	f100 0414 	add.w	r4, r0, #20
 801797a:	dd30      	ble.n	80179de <rshift+0x70>
 801797c:	f011 011f 	ands.w	r1, r1, #31
 8017980:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017984:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017988:	d108      	bne.n	801799c <rshift+0x2e>
 801798a:	4621      	mov	r1, r4
 801798c:	42b2      	cmp	r2, r6
 801798e:	460b      	mov	r3, r1
 8017990:	d211      	bcs.n	80179b6 <rshift+0x48>
 8017992:	f852 3b04 	ldr.w	r3, [r2], #4
 8017996:	f841 3b04 	str.w	r3, [r1], #4
 801799a:	e7f7      	b.n	801798c <rshift+0x1e>
 801799c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80179a0:	f1c1 0c20 	rsb	ip, r1, #32
 80179a4:	40cd      	lsrs	r5, r1
 80179a6:	3204      	adds	r2, #4
 80179a8:	4623      	mov	r3, r4
 80179aa:	42b2      	cmp	r2, r6
 80179ac:	4617      	mov	r7, r2
 80179ae:	d30c      	bcc.n	80179ca <rshift+0x5c>
 80179b0:	601d      	str	r5, [r3, #0]
 80179b2:	b105      	cbz	r5, 80179b6 <rshift+0x48>
 80179b4:	3304      	adds	r3, #4
 80179b6:	1b1a      	subs	r2, r3, r4
 80179b8:	42a3      	cmp	r3, r4
 80179ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80179be:	bf08      	it	eq
 80179c0:	2300      	moveq	r3, #0
 80179c2:	6102      	str	r2, [r0, #16]
 80179c4:	bf08      	it	eq
 80179c6:	6143      	streq	r3, [r0, #20]
 80179c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179ca:	683f      	ldr	r7, [r7, #0]
 80179cc:	fa07 f70c 	lsl.w	r7, r7, ip
 80179d0:	433d      	orrs	r5, r7
 80179d2:	f843 5b04 	str.w	r5, [r3], #4
 80179d6:	f852 5b04 	ldr.w	r5, [r2], #4
 80179da:	40cd      	lsrs	r5, r1
 80179dc:	e7e5      	b.n	80179aa <rshift+0x3c>
 80179de:	4623      	mov	r3, r4
 80179e0:	e7e9      	b.n	80179b6 <rshift+0x48>

080179e2 <__hexdig_fun>:
 80179e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80179e6:	2b09      	cmp	r3, #9
 80179e8:	d802      	bhi.n	80179f0 <__hexdig_fun+0xe>
 80179ea:	3820      	subs	r0, #32
 80179ec:	b2c0      	uxtb	r0, r0
 80179ee:	4770      	bx	lr
 80179f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80179f4:	2b05      	cmp	r3, #5
 80179f6:	d801      	bhi.n	80179fc <__hexdig_fun+0x1a>
 80179f8:	3847      	subs	r0, #71	; 0x47
 80179fa:	e7f7      	b.n	80179ec <__hexdig_fun+0xa>
 80179fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017a00:	2b05      	cmp	r3, #5
 8017a02:	d801      	bhi.n	8017a08 <__hexdig_fun+0x26>
 8017a04:	3827      	subs	r0, #39	; 0x27
 8017a06:	e7f1      	b.n	80179ec <__hexdig_fun+0xa>
 8017a08:	2000      	movs	r0, #0
 8017a0a:	4770      	bx	lr

08017a0c <__gethex>:
 8017a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a10:	b08b      	sub	sp, #44	; 0x2c
 8017a12:	468a      	mov	sl, r1
 8017a14:	9002      	str	r0, [sp, #8]
 8017a16:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017a18:	9306      	str	r3, [sp, #24]
 8017a1a:	4690      	mov	r8, r2
 8017a1c:	f000 facd 	bl	8017fba <__localeconv_l>
 8017a20:	6803      	ldr	r3, [r0, #0]
 8017a22:	9303      	str	r3, [sp, #12]
 8017a24:	4618      	mov	r0, r3
 8017a26:	f7e8 fbdd 	bl	80001e4 <strlen>
 8017a2a:	9b03      	ldr	r3, [sp, #12]
 8017a2c:	9001      	str	r0, [sp, #4]
 8017a2e:	4403      	add	r3, r0
 8017a30:	f04f 0b00 	mov.w	fp, #0
 8017a34:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017a38:	9307      	str	r3, [sp, #28]
 8017a3a:	f8da 3000 	ldr.w	r3, [sl]
 8017a3e:	3302      	adds	r3, #2
 8017a40:	461f      	mov	r7, r3
 8017a42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017a46:	2830      	cmp	r0, #48	; 0x30
 8017a48:	d06c      	beq.n	8017b24 <__gethex+0x118>
 8017a4a:	f7ff ffca 	bl	80179e2 <__hexdig_fun>
 8017a4e:	4604      	mov	r4, r0
 8017a50:	2800      	cmp	r0, #0
 8017a52:	d16a      	bne.n	8017b2a <__gethex+0x11e>
 8017a54:	9a01      	ldr	r2, [sp, #4]
 8017a56:	9903      	ldr	r1, [sp, #12]
 8017a58:	4638      	mov	r0, r7
 8017a5a:	f7ff f8b0 	bl	8016bbe <strncmp>
 8017a5e:	2800      	cmp	r0, #0
 8017a60:	d166      	bne.n	8017b30 <__gethex+0x124>
 8017a62:	9b01      	ldr	r3, [sp, #4]
 8017a64:	5cf8      	ldrb	r0, [r7, r3]
 8017a66:	18fe      	adds	r6, r7, r3
 8017a68:	f7ff ffbb 	bl	80179e2 <__hexdig_fun>
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	d062      	beq.n	8017b36 <__gethex+0x12a>
 8017a70:	4633      	mov	r3, r6
 8017a72:	7818      	ldrb	r0, [r3, #0]
 8017a74:	2830      	cmp	r0, #48	; 0x30
 8017a76:	461f      	mov	r7, r3
 8017a78:	f103 0301 	add.w	r3, r3, #1
 8017a7c:	d0f9      	beq.n	8017a72 <__gethex+0x66>
 8017a7e:	f7ff ffb0 	bl	80179e2 <__hexdig_fun>
 8017a82:	fab0 f580 	clz	r5, r0
 8017a86:	096d      	lsrs	r5, r5, #5
 8017a88:	4634      	mov	r4, r6
 8017a8a:	f04f 0b01 	mov.w	fp, #1
 8017a8e:	463a      	mov	r2, r7
 8017a90:	4616      	mov	r6, r2
 8017a92:	3201      	adds	r2, #1
 8017a94:	7830      	ldrb	r0, [r6, #0]
 8017a96:	f7ff ffa4 	bl	80179e2 <__hexdig_fun>
 8017a9a:	2800      	cmp	r0, #0
 8017a9c:	d1f8      	bne.n	8017a90 <__gethex+0x84>
 8017a9e:	9a01      	ldr	r2, [sp, #4]
 8017aa0:	9903      	ldr	r1, [sp, #12]
 8017aa2:	4630      	mov	r0, r6
 8017aa4:	f7ff f88b 	bl	8016bbe <strncmp>
 8017aa8:	b950      	cbnz	r0, 8017ac0 <__gethex+0xb4>
 8017aaa:	b954      	cbnz	r4, 8017ac2 <__gethex+0xb6>
 8017aac:	9b01      	ldr	r3, [sp, #4]
 8017aae:	18f4      	adds	r4, r6, r3
 8017ab0:	4622      	mov	r2, r4
 8017ab2:	4616      	mov	r6, r2
 8017ab4:	3201      	adds	r2, #1
 8017ab6:	7830      	ldrb	r0, [r6, #0]
 8017ab8:	f7ff ff93 	bl	80179e2 <__hexdig_fun>
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d1f8      	bne.n	8017ab2 <__gethex+0xa6>
 8017ac0:	b10c      	cbz	r4, 8017ac6 <__gethex+0xba>
 8017ac2:	1ba4      	subs	r4, r4, r6
 8017ac4:	00a4      	lsls	r4, r4, #2
 8017ac6:	7833      	ldrb	r3, [r6, #0]
 8017ac8:	2b50      	cmp	r3, #80	; 0x50
 8017aca:	d001      	beq.n	8017ad0 <__gethex+0xc4>
 8017acc:	2b70      	cmp	r3, #112	; 0x70
 8017ace:	d140      	bne.n	8017b52 <__gethex+0x146>
 8017ad0:	7873      	ldrb	r3, [r6, #1]
 8017ad2:	2b2b      	cmp	r3, #43	; 0x2b
 8017ad4:	d031      	beq.n	8017b3a <__gethex+0x12e>
 8017ad6:	2b2d      	cmp	r3, #45	; 0x2d
 8017ad8:	d033      	beq.n	8017b42 <__gethex+0x136>
 8017ada:	1c71      	adds	r1, r6, #1
 8017adc:	f04f 0900 	mov.w	r9, #0
 8017ae0:	7808      	ldrb	r0, [r1, #0]
 8017ae2:	f7ff ff7e 	bl	80179e2 <__hexdig_fun>
 8017ae6:	1e43      	subs	r3, r0, #1
 8017ae8:	b2db      	uxtb	r3, r3
 8017aea:	2b18      	cmp	r3, #24
 8017aec:	d831      	bhi.n	8017b52 <__gethex+0x146>
 8017aee:	f1a0 0210 	sub.w	r2, r0, #16
 8017af2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017af6:	f7ff ff74 	bl	80179e2 <__hexdig_fun>
 8017afa:	1e43      	subs	r3, r0, #1
 8017afc:	b2db      	uxtb	r3, r3
 8017afe:	2b18      	cmp	r3, #24
 8017b00:	d922      	bls.n	8017b48 <__gethex+0x13c>
 8017b02:	f1b9 0f00 	cmp.w	r9, #0
 8017b06:	d000      	beq.n	8017b0a <__gethex+0xfe>
 8017b08:	4252      	negs	r2, r2
 8017b0a:	4414      	add	r4, r2
 8017b0c:	f8ca 1000 	str.w	r1, [sl]
 8017b10:	b30d      	cbz	r5, 8017b56 <__gethex+0x14a>
 8017b12:	f1bb 0f00 	cmp.w	fp, #0
 8017b16:	bf0c      	ite	eq
 8017b18:	2706      	moveq	r7, #6
 8017b1a:	2700      	movne	r7, #0
 8017b1c:	4638      	mov	r0, r7
 8017b1e:	b00b      	add	sp, #44	; 0x2c
 8017b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b24:	f10b 0b01 	add.w	fp, fp, #1
 8017b28:	e78a      	b.n	8017a40 <__gethex+0x34>
 8017b2a:	2500      	movs	r5, #0
 8017b2c:	462c      	mov	r4, r5
 8017b2e:	e7ae      	b.n	8017a8e <__gethex+0x82>
 8017b30:	463e      	mov	r6, r7
 8017b32:	2501      	movs	r5, #1
 8017b34:	e7c7      	b.n	8017ac6 <__gethex+0xba>
 8017b36:	4604      	mov	r4, r0
 8017b38:	e7fb      	b.n	8017b32 <__gethex+0x126>
 8017b3a:	f04f 0900 	mov.w	r9, #0
 8017b3e:	1cb1      	adds	r1, r6, #2
 8017b40:	e7ce      	b.n	8017ae0 <__gethex+0xd4>
 8017b42:	f04f 0901 	mov.w	r9, #1
 8017b46:	e7fa      	b.n	8017b3e <__gethex+0x132>
 8017b48:	230a      	movs	r3, #10
 8017b4a:	fb03 0202 	mla	r2, r3, r2, r0
 8017b4e:	3a10      	subs	r2, #16
 8017b50:	e7cf      	b.n	8017af2 <__gethex+0xe6>
 8017b52:	4631      	mov	r1, r6
 8017b54:	e7da      	b.n	8017b0c <__gethex+0x100>
 8017b56:	1bf3      	subs	r3, r6, r7
 8017b58:	3b01      	subs	r3, #1
 8017b5a:	4629      	mov	r1, r5
 8017b5c:	2b07      	cmp	r3, #7
 8017b5e:	dc49      	bgt.n	8017bf4 <__gethex+0x1e8>
 8017b60:	9802      	ldr	r0, [sp, #8]
 8017b62:	f000 fa2e 	bl	8017fc2 <_Balloc>
 8017b66:	9b01      	ldr	r3, [sp, #4]
 8017b68:	f100 0914 	add.w	r9, r0, #20
 8017b6c:	f04f 0b00 	mov.w	fp, #0
 8017b70:	f1c3 0301 	rsb	r3, r3, #1
 8017b74:	4605      	mov	r5, r0
 8017b76:	f8cd 9010 	str.w	r9, [sp, #16]
 8017b7a:	46da      	mov	sl, fp
 8017b7c:	9308      	str	r3, [sp, #32]
 8017b7e:	42b7      	cmp	r7, r6
 8017b80:	d33b      	bcc.n	8017bfa <__gethex+0x1ee>
 8017b82:	9804      	ldr	r0, [sp, #16]
 8017b84:	f840 ab04 	str.w	sl, [r0], #4
 8017b88:	eba0 0009 	sub.w	r0, r0, r9
 8017b8c:	1080      	asrs	r0, r0, #2
 8017b8e:	6128      	str	r0, [r5, #16]
 8017b90:	0147      	lsls	r7, r0, #5
 8017b92:	4650      	mov	r0, sl
 8017b94:	f000 fad9 	bl	801814a <__hi0bits>
 8017b98:	f8d8 6000 	ldr.w	r6, [r8]
 8017b9c:	1a3f      	subs	r7, r7, r0
 8017b9e:	42b7      	cmp	r7, r6
 8017ba0:	dd64      	ble.n	8017c6c <__gethex+0x260>
 8017ba2:	1bbf      	subs	r7, r7, r6
 8017ba4:	4639      	mov	r1, r7
 8017ba6:	4628      	mov	r0, r5
 8017ba8:	f000 fde8 	bl	801877c <__any_on>
 8017bac:	4682      	mov	sl, r0
 8017bae:	b178      	cbz	r0, 8017bd0 <__gethex+0x1c4>
 8017bb0:	1e7b      	subs	r3, r7, #1
 8017bb2:	1159      	asrs	r1, r3, #5
 8017bb4:	f003 021f 	and.w	r2, r3, #31
 8017bb8:	f04f 0a01 	mov.w	sl, #1
 8017bbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017bc0:	fa0a f202 	lsl.w	r2, sl, r2
 8017bc4:	420a      	tst	r2, r1
 8017bc6:	d003      	beq.n	8017bd0 <__gethex+0x1c4>
 8017bc8:	4553      	cmp	r3, sl
 8017bca:	dc46      	bgt.n	8017c5a <__gethex+0x24e>
 8017bcc:	f04f 0a02 	mov.w	sl, #2
 8017bd0:	4639      	mov	r1, r7
 8017bd2:	4628      	mov	r0, r5
 8017bd4:	f7ff fecb 	bl	801796e <rshift>
 8017bd8:	443c      	add	r4, r7
 8017bda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017bde:	42a3      	cmp	r3, r4
 8017be0:	da52      	bge.n	8017c88 <__gethex+0x27c>
 8017be2:	4629      	mov	r1, r5
 8017be4:	9802      	ldr	r0, [sp, #8]
 8017be6:	f000 fa20 	bl	801802a <_Bfree>
 8017bea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017bec:	2300      	movs	r3, #0
 8017bee:	6013      	str	r3, [r2, #0]
 8017bf0:	27a3      	movs	r7, #163	; 0xa3
 8017bf2:	e793      	b.n	8017b1c <__gethex+0x110>
 8017bf4:	3101      	adds	r1, #1
 8017bf6:	105b      	asrs	r3, r3, #1
 8017bf8:	e7b0      	b.n	8017b5c <__gethex+0x150>
 8017bfa:	1e73      	subs	r3, r6, #1
 8017bfc:	9305      	str	r3, [sp, #20]
 8017bfe:	9a07      	ldr	r2, [sp, #28]
 8017c00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017c04:	4293      	cmp	r3, r2
 8017c06:	d018      	beq.n	8017c3a <__gethex+0x22e>
 8017c08:	f1bb 0f20 	cmp.w	fp, #32
 8017c0c:	d107      	bne.n	8017c1e <__gethex+0x212>
 8017c0e:	9b04      	ldr	r3, [sp, #16]
 8017c10:	f8c3 a000 	str.w	sl, [r3]
 8017c14:	3304      	adds	r3, #4
 8017c16:	f04f 0a00 	mov.w	sl, #0
 8017c1a:	9304      	str	r3, [sp, #16]
 8017c1c:	46d3      	mov	fp, sl
 8017c1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017c22:	f7ff fede 	bl	80179e2 <__hexdig_fun>
 8017c26:	f000 000f 	and.w	r0, r0, #15
 8017c2a:	fa00 f00b 	lsl.w	r0, r0, fp
 8017c2e:	ea4a 0a00 	orr.w	sl, sl, r0
 8017c32:	f10b 0b04 	add.w	fp, fp, #4
 8017c36:	9b05      	ldr	r3, [sp, #20]
 8017c38:	e00d      	b.n	8017c56 <__gethex+0x24a>
 8017c3a:	9b05      	ldr	r3, [sp, #20]
 8017c3c:	9a08      	ldr	r2, [sp, #32]
 8017c3e:	4413      	add	r3, r2
 8017c40:	42bb      	cmp	r3, r7
 8017c42:	d3e1      	bcc.n	8017c08 <__gethex+0x1fc>
 8017c44:	4618      	mov	r0, r3
 8017c46:	9a01      	ldr	r2, [sp, #4]
 8017c48:	9903      	ldr	r1, [sp, #12]
 8017c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8017c4c:	f7fe ffb7 	bl	8016bbe <strncmp>
 8017c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c52:	2800      	cmp	r0, #0
 8017c54:	d1d8      	bne.n	8017c08 <__gethex+0x1fc>
 8017c56:	461e      	mov	r6, r3
 8017c58:	e791      	b.n	8017b7e <__gethex+0x172>
 8017c5a:	1eb9      	subs	r1, r7, #2
 8017c5c:	4628      	mov	r0, r5
 8017c5e:	f000 fd8d 	bl	801877c <__any_on>
 8017c62:	2800      	cmp	r0, #0
 8017c64:	d0b2      	beq.n	8017bcc <__gethex+0x1c0>
 8017c66:	f04f 0a03 	mov.w	sl, #3
 8017c6a:	e7b1      	b.n	8017bd0 <__gethex+0x1c4>
 8017c6c:	da09      	bge.n	8017c82 <__gethex+0x276>
 8017c6e:	1bf7      	subs	r7, r6, r7
 8017c70:	4629      	mov	r1, r5
 8017c72:	463a      	mov	r2, r7
 8017c74:	9802      	ldr	r0, [sp, #8]
 8017c76:	f000 fba3 	bl	80183c0 <__lshift>
 8017c7a:	1be4      	subs	r4, r4, r7
 8017c7c:	4605      	mov	r5, r0
 8017c7e:	f100 0914 	add.w	r9, r0, #20
 8017c82:	f04f 0a00 	mov.w	sl, #0
 8017c86:	e7a8      	b.n	8017bda <__gethex+0x1ce>
 8017c88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017c8c:	42a0      	cmp	r0, r4
 8017c8e:	dd6a      	ble.n	8017d66 <__gethex+0x35a>
 8017c90:	1b04      	subs	r4, r0, r4
 8017c92:	42a6      	cmp	r6, r4
 8017c94:	dc2e      	bgt.n	8017cf4 <__gethex+0x2e8>
 8017c96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017c9a:	2b02      	cmp	r3, #2
 8017c9c:	d022      	beq.n	8017ce4 <__gethex+0x2d8>
 8017c9e:	2b03      	cmp	r3, #3
 8017ca0:	d024      	beq.n	8017cec <__gethex+0x2e0>
 8017ca2:	2b01      	cmp	r3, #1
 8017ca4:	d115      	bne.n	8017cd2 <__gethex+0x2c6>
 8017ca6:	42a6      	cmp	r6, r4
 8017ca8:	d113      	bne.n	8017cd2 <__gethex+0x2c6>
 8017caa:	2e01      	cmp	r6, #1
 8017cac:	dc0b      	bgt.n	8017cc6 <__gethex+0x2ba>
 8017cae:	9a06      	ldr	r2, [sp, #24]
 8017cb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017cb4:	6013      	str	r3, [r2, #0]
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	612b      	str	r3, [r5, #16]
 8017cba:	f8c9 3000 	str.w	r3, [r9]
 8017cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017cc0:	2762      	movs	r7, #98	; 0x62
 8017cc2:	601d      	str	r5, [r3, #0]
 8017cc4:	e72a      	b.n	8017b1c <__gethex+0x110>
 8017cc6:	1e71      	subs	r1, r6, #1
 8017cc8:	4628      	mov	r0, r5
 8017cca:	f000 fd57 	bl	801877c <__any_on>
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d1ed      	bne.n	8017cae <__gethex+0x2a2>
 8017cd2:	4629      	mov	r1, r5
 8017cd4:	9802      	ldr	r0, [sp, #8]
 8017cd6:	f000 f9a8 	bl	801802a <_Bfree>
 8017cda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cdc:	2300      	movs	r3, #0
 8017cde:	6013      	str	r3, [r2, #0]
 8017ce0:	2750      	movs	r7, #80	; 0x50
 8017ce2:	e71b      	b.n	8017b1c <__gethex+0x110>
 8017ce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d0e1      	beq.n	8017cae <__gethex+0x2a2>
 8017cea:	e7f2      	b.n	8017cd2 <__gethex+0x2c6>
 8017cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d1dd      	bne.n	8017cae <__gethex+0x2a2>
 8017cf2:	e7ee      	b.n	8017cd2 <__gethex+0x2c6>
 8017cf4:	1e67      	subs	r7, r4, #1
 8017cf6:	f1ba 0f00 	cmp.w	sl, #0
 8017cfa:	d131      	bne.n	8017d60 <__gethex+0x354>
 8017cfc:	b127      	cbz	r7, 8017d08 <__gethex+0x2fc>
 8017cfe:	4639      	mov	r1, r7
 8017d00:	4628      	mov	r0, r5
 8017d02:	f000 fd3b 	bl	801877c <__any_on>
 8017d06:	4682      	mov	sl, r0
 8017d08:	117a      	asrs	r2, r7, #5
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	f007 071f 	and.w	r7, r7, #31
 8017d10:	fa03 f707 	lsl.w	r7, r3, r7
 8017d14:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017d18:	4621      	mov	r1, r4
 8017d1a:	421f      	tst	r7, r3
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	bf18      	it	ne
 8017d20:	f04a 0a02 	orrne.w	sl, sl, #2
 8017d24:	1b36      	subs	r6, r6, r4
 8017d26:	f7ff fe22 	bl	801796e <rshift>
 8017d2a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017d2e:	2702      	movs	r7, #2
 8017d30:	f1ba 0f00 	cmp.w	sl, #0
 8017d34:	d048      	beq.n	8017dc8 <__gethex+0x3bc>
 8017d36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d3a:	2b02      	cmp	r3, #2
 8017d3c:	d015      	beq.n	8017d6a <__gethex+0x35e>
 8017d3e:	2b03      	cmp	r3, #3
 8017d40:	d017      	beq.n	8017d72 <__gethex+0x366>
 8017d42:	2b01      	cmp	r3, #1
 8017d44:	d109      	bne.n	8017d5a <__gethex+0x34e>
 8017d46:	f01a 0f02 	tst.w	sl, #2
 8017d4a:	d006      	beq.n	8017d5a <__gethex+0x34e>
 8017d4c:	f8d9 3000 	ldr.w	r3, [r9]
 8017d50:	ea4a 0a03 	orr.w	sl, sl, r3
 8017d54:	f01a 0f01 	tst.w	sl, #1
 8017d58:	d10e      	bne.n	8017d78 <__gethex+0x36c>
 8017d5a:	f047 0710 	orr.w	r7, r7, #16
 8017d5e:	e033      	b.n	8017dc8 <__gethex+0x3bc>
 8017d60:	f04f 0a01 	mov.w	sl, #1
 8017d64:	e7d0      	b.n	8017d08 <__gethex+0x2fc>
 8017d66:	2701      	movs	r7, #1
 8017d68:	e7e2      	b.n	8017d30 <__gethex+0x324>
 8017d6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d6c:	f1c3 0301 	rsb	r3, r3, #1
 8017d70:	9315      	str	r3, [sp, #84]	; 0x54
 8017d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d0f0      	beq.n	8017d5a <__gethex+0x34e>
 8017d78:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017d7c:	f105 0314 	add.w	r3, r5, #20
 8017d80:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017d84:	eb03 010a 	add.w	r1, r3, sl
 8017d88:	f04f 0c00 	mov.w	ip, #0
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d92:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017d96:	d01c      	beq.n	8017dd2 <__gethex+0x3c6>
 8017d98:	3201      	adds	r2, #1
 8017d9a:	6002      	str	r2, [r0, #0]
 8017d9c:	2f02      	cmp	r7, #2
 8017d9e:	f105 0314 	add.w	r3, r5, #20
 8017da2:	d138      	bne.n	8017e16 <__gethex+0x40a>
 8017da4:	f8d8 2000 	ldr.w	r2, [r8]
 8017da8:	3a01      	subs	r2, #1
 8017daa:	42b2      	cmp	r2, r6
 8017dac:	d10a      	bne.n	8017dc4 <__gethex+0x3b8>
 8017dae:	1171      	asrs	r1, r6, #5
 8017db0:	2201      	movs	r2, #1
 8017db2:	f006 061f 	and.w	r6, r6, #31
 8017db6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017dba:	fa02 f606 	lsl.w	r6, r2, r6
 8017dbe:	421e      	tst	r6, r3
 8017dc0:	bf18      	it	ne
 8017dc2:	4617      	movne	r7, r2
 8017dc4:	f047 0720 	orr.w	r7, r7, #32
 8017dc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017dca:	601d      	str	r5, [r3, #0]
 8017dcc:	9b06      	ldr	r3, [sp, #24]
 8017dce:	601c      	str	r4, [r3, #0]
 8017dd0:	e6a4      	b.n	8017b1c <__gethex+0x110>
 8017dd2:	4299      	cmp	r1, r3
 8017dd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8017dd8:	d8d8      	bhi.n	8017d8c <__gethex+0x380>
 8017dda:	68ab      	ldr	r3, [r5, #8]
 8017ddc:	4599      	cmp	r9, r3
 8017dde:	db12      	blt.n	8017e06 <__gethex+0x3fa>
 8017de0:	6869      	ldr	r1, [r5, #4]
 8017de2:	9802      	ldr	r0, [sp, #8]
 8017de4:	3101      	adds	r1, #1
 8017de6:	f000 f8ec 	bl	8017fc2 <_Balloc>
 8017dea:	692a      	ldr	r2, [r5, #16]
 8017dec:	3202      	adds	r2, #2
 8017dee:	f105 010c 	add.w	r1, r5, #12
 8017df2:	4683      	mov	fp, r0
 8017df4:	0092      	lsls	r2, r2, #2
 8017df6:	300c      	adds	r0, #12
 8017df8:	f7fe fdc8 	bl	801698c <memcpy>
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	9802      	ldr	r0, [sp, #8]
 8017e00:	f000 f913 	bl	801802a <_Bfree>
 8017e04:	465d      	mov	r5, fp
 8017e06:	692b      	ldr	r3, [r5, #16]
 8017e08:	1c5a      	adds	r2, r3, #1
 8017e0a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017e0e:	612a      	str	r2, [r5, #16]
 8017e10:	2201      	movs	r2, #1
 8017e12:	615a      	str	r2, [r3, #20]
 8017e14:	e7c2      	b.n	8017d9c <__gethex+0x390>
 8017e16:	692a      	ldr	r2, [r5, #16]
 8017e18:	454a      	cmp	r2, r9
 8017e1a:	dd0b      	ble.n	8017e34 <__gethex+0x428>
 8017e1c:	2101      	movs	r1, #1
 8017e1e:	4628      	mov	r0, r5
 8017e20:	f7ff fda5 	bl	801796e <rshift>
 8017e24:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e28:	3401      	adds	r4, #1
 8017e2a:	42a3      	cmp	r3, r4
 8017e2c:	f6ff aed9 	blt.w	8017be2 <__gethex+0x1d6>
 8017e30:	2701      	movs	r7, #1
 8017e32:	e7c7      	b.n	8017dc4 <__gethex+0x3b8>
 8017e34:	f016 061f 	ands.w	r6, r6, #31
 8017e38:	d0fa      	beq.n	8017e30 <__gethex+0x424>
 8017e3a:	449a      	add	sl, r3
 8017e3c:	f1c6 0620 	rsb	r6, r6, #32
 8017e40:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017e44:	f000 f981 	bl	801814a <__hi0bits>
 8017e48:	42b0      	cmp	r0, r6
 8017e4a:	dbe7      	blt.n	8017e1c <__gethex+0x410>
 8017e4c:	e7f0      	b.n	8017e30 <__gethex+0x424>

08017e4e <L_shift>:
 8017e4e:	f1c2 0208 	rsb	r2, r2, #8
 8017e52:	0092      	lsls	r2, r2, #2
 8017e54:	b570      	push	{r4, r5, r6, lr}
 8017e56:	f1c2 0620 	rsb	r6, r2, #32
 8017e5a:	6843      	ldr	r3, [r0, #4]
 8017e5c:	6804      	ldr	r4, [r0, #0]
 8017e5e:	fa03 f506 	lsl.w	r5, r3, r6
 8017e62:	432c      	orrs	r4, r5
 8017e64:	40d3      	lsrs	r3, r2
 8017e66:	6004      	str	r4, [r0, #0]
 8017e68:	f840 3f04 	str.w	r3, [r0, #4]!
 8017e6c:	4288      	cmp	r0, r1
 8017e6e:	d3f4      	bcc.n	8017e5a <L_shift+0xc>
 8017e70:	bd70      	pop	{r4, r5, r6, pc}

08017e72 <__match>:
 8017e72:	b530      	push	{r4, r5, lr}
 8017e74:	6803      	ldr	r3, [r0, #0]
 8017e76:	3301      	adds	r3, #1
 8017e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e7c:	b914      	cbnz	r4, 8017e84 <__match+0x12>
 8017e7e:	6003      	str	r3, [r0, #0]
 8017e80:	2001      	movs	r0, #1
 8017e82:	bd30      	pop	{r4, r5, pc}
 8017e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e88:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017e8c:	2d19      	cmp	r5, #25
 8017e8e:	bf98      	it	ls
 8017e90:	3220      	addls	r2, #32
 8017e92:	42a2      	cmp	r2, r4
 8017e94:	d0f0      	beq.n	8017e78 <__match+0x6>
 8017e96:	2000      	movs	r0, #0
 8017e98:	e7f3      	b.n	8017e82 <__match+0x10>

08017e9a <__hexnan>:
 8017e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e9e:	680b      	ldr	r3, [r1, #0]
 8017ea0:	6801      	ldr	r1, [r0, #0]
 8017ea2:	115f      	asrs	r7, r3, #5
 8017ea4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017ea8:	f013 031f 	ands.w	r3, r3, #31
 8017eac:	b087      	sub	sp, #28
 8017eae:	bf18      	it	ne
 8017eb0:	3704      	addne	r7, #4
 8017eb2:	2500      	movs	r5, #0
 8017eb4:	1f3e      	subs	r6, r7, #4
 8017eb6:	4682      	mov	sl, r0
 8017eb8:	4690      	mov	r8, r2
 8017eba:	9301      	str	r3, [sp, #4]
 8017ebc:	f847 5c04 	str.w	r5, [r7, #-4]
 8017ec0:	46b1      	mov	r9, r6
 8017ec2:	4634      	mov	r4, r6
 8017ec4:	9502      	str	r5, [sp, #8]
 8017ec6:	46ab      	mov	fp, r5
 8017ec8:	784a      	ldrb	r2, [r1, #1]
 8017eca:	1c4b      	adds	r3, r1, #1
 8017ecc:	9303      	str	r3, [sp, #12]
 8017ece:	b342      	cbz	r2, 8017f22 <__hexnan+0x88>
 8017ed0:	4610      	mov	r0, r2
 8017ed2:	9105      	str	r1, [sp, #20]
 8017ed4:	9204      	str	r2, [sp, #16]
 8017ed6:	f7ff fd84 	bl	80179e2 <__hexdig_fun>
 8017eda:	2800      	cmp	r0, #0
 8017edc:	d143      	bne.n	8017f66 <__hexnan+0xcc>
 8017ede:	9a04      	ldr	r2, [sp, #16]
 8017ee0:	9905      	ldr	r1, [sp, #20]
 8017ee2:	2a20      	cmp	r2, #32
 8017ee4:	d818      	bhi.n	8017f18 <__hexnan+0x7e>
 8017ee6:	9b02      	ldr	r3, [sp, #8]
 8017ee8:	459b      	cmp	fp, r3
 8017eea:	dd13      	ble.n	8017f14 <__hexnan+0x7a>
 8017eec:	454c      	cmp	r4, r9
 8017eee:	d206      	bcs.n	8017efe <__hexnan+0x64>
 8017ef0:	2d07      	cmp	r5, #7
 8017ef2:	dc04      	bgt.n	8017efe <__hexnan+0x64>
 8017ef4:	462a      	mov	r2, r5
 8017ef6:	4649      	mov	r1, r9
 8017ef8:	4620      	mov	r0, r4
 8017efa:	f7ff ffa8 	bl	8017e4e <L_shift>
 8017efe:	4544      	cmp	r4, r8
 8017f00:	d944      	bls.n	8017f8c <__hexnan+0xf2>
 8017f02:	2300      	movs	r3, #0
 8017f04:	f1a4 0904 	sub.w	r9, r4, #4
 8017f08:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f0c:	f8cd b008 	str.w	fp, [sp, #8]
 8017f10:	464c      	mov	r4, r9
 8017f12:	461d      	mov	r5, r3
 8017f14:	9903      	ldr	r1, [sp, #12]
 8017f16:	e7d7      	b.n	8017ec8 <__hexnan+0x2e>
 8017f18:	2a29      	cmp	r2, #41	; 0x29
 8017f1a:	d14a      	bne.n	8017fb2 <__hexnan+0x118>
 8017f1c:	3102      	adds	r1, #2
 8017f1e:	f8ca 1000 	str.w	r1, [sl]
 8017f22:	f1bb 0f00 	cmp.w	fp, #0
 8017f26:	d044      	beq.n	8017fb2 <__hexnan+0x118>
 8017f28:	454c      	cmp	r4, r9
 8017f2a:	d206      	bcs.n	8017f3a <__hexnan+0xa0>
 8017f2c:	2d07      	cmp	r5, #7
 8017f2e:	dc04      	bgt.n	8017f3a <__hexnan+0xa0>
 8017f30:	462a      	mov	r2, r5
 8017f32:	4649      	mov	r1, r9
 8017f34:	4620      	mov	r0, r4
 8017f36:	f7ff ff8a 	bl	8017e4e <L_shift>
 8017f3a:	4544      	cmp	r4, r8
 8017f3c:	d928      	bls.n	8017f90 <__hexnan+0xf6>
 8017f3e:	4643      	mov	r3, r8
 8017f40:	f854 2b04 	ldr.w	r2, [r4], #4
 8017f44:	f843 2b04 	str.w	r2, [r3], #4
 8017f48:	42a6      	cmp	r6, r4
 8017f4a:	d2f9      	bcs.n	8017f40 <__hexnan+0xa6>
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	f843 2b04 	str.w	r2, [r3], #4
 8017f52:	429e      	cmp	r6, r3
 8017f54:	d2fb      	bcs.n	8017f4e <__hexnan+0xb4>
 8017f56:	6833      	ldr	r3, [r6, #0]
 8017f58:	b91b      	cbnz	r3, 8017f62 <__hexnan+0xc8>
 8017f5a:	4546      	cmp	r6, r8
 8017f5c:	d127      	bne.n	8017fae <__hexnan+0x114>
 8017f5e:	2301      	movs	r3, #1
 8017f60:	6033      	str	r3, [r6, #0]
 8017f62:	2005      	movs	r0, #5
 8017f64:	e026      	b.n	8017fb4 <__hexnan+0x11a>
 8017f66:	3501      	adds	r5, #1
 8017f68:	2d08      	cmp	r5, #8
 8017f6a:	f10b 0b01 	add.w	fp, fp, #1
 8017f6e:	dd06      	ble.n	8017f7e <__hexnan+0xe4>
 8017f70:	4544      	cmp	r4, r8
 8017f72:	d9cf      	bls.n	8017f14 <__hexnan+0x7a>
 8017f74:	2300      	movs	r3, #0
 8017f76:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f7a:	2501      	movs	r5, #1
 8017f7c:	3c04      	subs	r4, #4
 8017f7e:	6822      	ldr	r2, [r4, #0]
 8017f80:	f000 000f 	and.w	r0, r0, #15
 8017f84:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017f88:	6020      	str	r0, [r4, #0]
 8017f8a:	e7c3      	b.n	8017f14 <__hexnan+0x7a>
 8017f8c:	2508      	movs	r5, #8
 8017f8e:	e7c1      	b.n	8017f14 <__hexnan+0x7a>
 8017f90:	9b01      	ldr	r3, [sp, #4]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d0df      	beq.n	8017f56 <__hexnan+0xbc>
 8017f96:	f04f 32ff 	mov.w	r2, #4294967295
 8017f9a:	f1c3 0320 	rsb	r3, r3, #32
 8017f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8017fa2:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017fa6:	401a      	ands	r2, r3
 8017fa8:	f847 2c04 	str.w	r2, [r7, #-4]
 8017fac:	e7d3      	b.n	8017f56 <__hexnan+0xbc>
 8017fae:	3e04      	subs	r6, #4
 8017fb0:	e7d1      	b.n	8017f56 <__hexnan+0xbc>
 8017fb2:	2004      	movs	r0, #4
 8017fb4:	b007      	add	sp, #28
 8017fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017fba <__localeconv_l>:
 8017fba:	30f0      	adds	r0, #240	; 0xf0
 8017fbc:	4770      	bx	lr

08017fbe <__malloc_lock>:
 8017fbe:	4770      	bx	lr

08017fc0 <__malloc_unlock>:
 8017fc0:	4770      	bx	lr

08017fc2 <_Balloc>:
 8017fc2:	b570      	push	{r4, r5, r6, lr}
 8017fc4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017fc6:	4604      	mov	r4, r0
 8017fc8:	460e      	mov	r6, r1
 8017fca:	b93d      	cbnz	r5, 8017fdc <_Balloc+0x1a>
 8017fcc:	2010      	movs	r0, #16
 8017fce:	f7fe fcbb 	bl	8016948 <malloc>
 8017fd2:	6260      	str	r0, [r4, #36]	; 0x24
 8017fd4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017fd8:	6005      	str	r5, [r0, #0]
 8017fda:	60c5      	str	r5, [r0, #12]
 8017fdc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017fde:	68eb      	ldr	r3, [r5, #12]
 8017fe0:	b183      	cbz	r3, 8018004 <_Balloc+0x42>
 8017fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017fe4:	68db      	ldr	r3, [r3, #12]
 8017fe6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017fea:	b9b8      	cbnz	r0, 801801c <_Balloc+0x5a>
 8017fec:	2101      	movs	r1, #1
 8017fee:	fa01 f506 	lsl.w	r5, r1, r6
 8017ff2:	1d6a      	adds	r2, r5, #5
 8017ff4:	0092      	lsls	r2, r2, #2
 8017ff6:	4620      	mov	r0, r4
 8017ff8:	f000 fbe1 	bl	80187be <_calloc_r>
 8017ffc:	b160      	cbz	r0, 8018018 <_Balloc+0x56>
 8017ffe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018002:	e00e      	b.n	8018022 <_Balloc+0x60>
 8018004:	2221      	movs	r2, #33	; 0x21
 8018006:	2104      	movs	r1, #4
 8018008:	4620      	mov	r0, r4
 801800a:	f000 fbd8 	bl	80187be <_calloc_r>
 801800e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018010:	60e8      	str	r0, [r5, #12]
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d1e4      	bne.n	8017fe2 <_Balloc+0x20>
 8018018:	2000      	movs	r0, #0
 801801a:	bd70      	pop	{r4, r5, r6, pc}
 801801c:	6802      	ldr	r2, [r0, #0]
 801801e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018022:	2300      	movs	r3, #0
 8018024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018028:	e7f7      	b.n	801801a <_Balloc+0x58>

0801802a <_Bfree>:
 801802a:	b570      	push	{r4, r5, r6, lr}
 801802c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801802e:	4606      	mov	r6, r0
 8018030:	460d      	mov	r5, r1
 8018032:	b93c      	cbnz	r4, 8018044 <_Bfree+0x1a>
 8018034:	2010      	movs	r0, #16
 8018036:	f7fe fc87 	bl	8016948 <malloc>
 801803a:	6270      	str	r0, [r6, #36]	; 0x24
 801803c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018040:	6004      	str	r4, [r0, #0]
 8018042:	60c4      	str	r4, [r0, #12]
 8018044:	b13d      	cbz	r5, 8018056 <_Bfree+0x2c>
 8018046:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018048:	686a      	ldr	r2, [r5, #4]
 801804a:	68db      	ldr	r3, [r3, #12]
 801804c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018050:	6029      	str	r1, [r5, #0]
 8018052:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018056:	bd70      	pop	{r4, r5, r6, pc}

08018058 <__multadd>:
 8018058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801805c:	690d      	ldr	r5, [r1, #16]
 801805e:	461f      	mov	r7, r3
 8018060:	4606      	mov	r6, r0
 8018062:	460c      	mov	r4, r1
 8018064:	f101 0c14 	add.w	ip, r1, #20
 8018068:	2300      	movs	r3, #0
 801806a:	f8dc 0000 	ldr.w	r0, [ip]
 801806e:	b281      	uxth	r1, r0
 8018070:	fb02 7101 	mla	r1, r2, r1, r7
 8018074:	0c0f      	lsrs	r7, r1, #16
 8018076:	0c00      	lsrs	r0, r0, #16
 8018078:	fb02 7000 	mla	r0, r2, r0, r7
 801807c:	b289      	uxth	r1, r1
 801807e:	3301      	adds	r3, #1
 8018080:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018084:	429d      	cmp	r5, r3
 8018086:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801808a:	f84c 1b04 	str.w	r1, [ip], #4
 801808e:	dcec      	bgt.n	801806a <__multadd+0x12>
 8018090:	b1d7      	cbz	r7, 80180c8 <__multadd+0x70>
 8018092:	68a3      	ldr	r3, [r4, #8]
 8018094:	42ab      	cmp	r3, r5
 8018096:	dc12      	bgt.n	80180be <__multadd+0x66>
 8018098:	6861      	ldr	r1, [r4, #4]
 801809a:	4630      	mov	r0, r6
 801809c:	3101      	adds	r1, #1
 801809e:	f7ff ff90 	bl	8017fc2 <_Balloc>
 80180a2:	6922      	ldr	r2, [r4, #16]
 80180a4:	3202      	adds	r2, #2
 80180a6:	f104 010c 	add.w	r1, r4, #12
 80180aa:	4680      	mov	r8, r0
 80180ac:	0092      	lsls	r2, r2, #2
 80180ae:	300c      	adds	r0, #12
 80180b0:	f7fe fc6c 	bl	801698c <memcpy>
 80180b4:	4621      	mov	r1, r4
 80180b6:	4630      	mov	r0, r6
 80180b8:	f7ff ffb7 	bl	801802a <_Bfree>
 80180bc:	4644      	mov	r4, r8
 80180be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80180c2:	3501      	adds	r5, #1
 80180c4:	615f      	str	r7, [r3, #20]
 80180c6:	6125      	str	r5, [r4, #16]
 80180c8:	4620      	mov	r0, r4
 80180ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080180ce <__s2b>:
 80180ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180d2:	460c      	mov	r4, r1
 80180d4:	4615      	mov	r5, r2
 80180d6:	461f      	mov	r7, r3
 80180d8:	2209      	movs	r2, #9
 80180da:	3308      	adds	r3, #8
 80180dc:	4606      	mov	r6, r0
 80180de:	fb93 f3f2 	sdiv	r3, r3, r2
 80180e2:	2100      	movs	r1, #0
 80180e4:	2201      	movs	r2, #1
 80180e6:	429a      	cmp	r2, r3
 80180e8:	db20      	blt.n	801812c <__s2b+0x5e>
 80180ea:	4630      	mov	r0, r6
 80180ec:	f7ff ff69 	bl	8017fc2 <_Balloc>
 80180f0:	9b08      	ldr	r3, [sp, #32]
 80180f2:	6143      	str	r3, [r0, #20]
 80180f4:	2d09      	cmp	r5, #9
 80180f6:	f04f 0301 	mov.w	r3, #1
 80180fa:	6103      	str	r3, [r0, #16]
 80180fc:	dd19      	ble.n	8018132 <__s2b+0x64>
 80180fe:	f104 0809 	add.w	r8, r4, #9
 8018102:	46c1      	mov	r9, r8
 8018104:	442c      	add	r4, r5
 8018106:	f819 3b01 	ldrb.w	r3, [r9], #1
 801810a:	4601      	mov	r1, r0
 801810c:	3b30      	subs	r3, #48	; 0x30
 801810e:	220a      	movs	r2, #10
 8018110:	4630      	mov	r0, r6
 8018112:	f7ff ffa1 	bl	8018058 <__multadd>
 8018116:	45a1      	cmp	r9, r4
 8018118:	d1f5      	bne.n	8018106 <__s2b+0x38>
 801811a:	eb08 0405 	add.w	r4, r8, r5
 801811e:	3c08      	subs	r4, #8
 8018120:	1b2d      	subs	r5, r5, r4
 8018122:	1963      	adds	r3, r4, r5
 8018124:	42bb      	cmp	r3, r7
 8018126:	db07      	blt.n	8018138 <__s2b+0x6a>
 8018128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801812c:	0052      	lsls	r2, r2, #1
 801812e:	3101      	adds	r1, #1
 8018130:	e7d9      	b.n	80180e6 <__s2b+0x18>
 8018132:	340a      	adds	r4, #10
 8018134:	2509      	movs	r5, #9
 8018136:	e7f3      	b.n	8018120 <__s2b+0x52>
 8018138:	f814 3b01 	ldrb.w	r3, [r4], #1
 801813c:	4601      	mov	r1, r0
 801813e:	3b30      	subs	r3, #48	; 0x30
 8018140:	220a      	movs	r2, #10
 8018142:	4630      	mov	r0, r6
 8018144:	f7ff ff88 	bl	8018058 <__multadd>
 8018148:	e7eb      	b.n	8018122 <__s2b+0x54>

0801814a <__hi0bits>:
 801814a:	0c02      	lsrs	r2, r0, #16
 801814c:	0412      	lsls	r2, r2, #16
 801814e:	4603      	mov	r3, r0
 8018150:	b9b2      	cbnz	r2, 8018180 <__hi0bits+0x36>
 8018152:	0403      	lsls	r3, r0, #16
 8018154:	2010      	movs	r0, #16
 8018156:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801815a:	bf04      	itt	eq
 801815c:	021b      	lsleq	r3, r3, #8
 801815e:	3008      	addeq	r0, #8
 8018160:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018164:	bf04      	itt	eq
 8018166:	011b      	lsleq	r3, r3, #4
 8018168:	3004      	addeq	r0, #4
 801816a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801816e:	bf04      	itt	eq
 8018170:	009b      	lsleq	r3, r3, #2
 8018172:	3002      	addeq	r0, #2
 8018174:	2b00      	cmp	r3, #0
 8018176:	db06      	blt.n	8018186 <__hi0bits+0x3c>
 8018178:	005b      	lsls	r3, r3, #1
 801817a:	d503      	bpl.n	8018184 <__hi0bits+0x3a>
 801817c:	3001      	adds	r0, #1
 801817e:	4770      	bx	lr
 8018180:	2000      	movs	r0, #0
 8018182:	e7e8      	b.n	8018156 <__hi0bits+0xc>
 8018184:	2020      	movs	r0, #32
 8018186:	4770      	bx	lr

08018188 <__lo0bits>:
 8018188:	6803      	ldr	r3, [r0, #0]
 801818a:	f013 0207 	ands.w	r2, r3, #7
 801818e:	4601      	mov	r1, r0
 8018190:	d00b      	beq.n	80181aa <__lo0bits+0x22>
 8018192:	07da      	lsls	r2, r3, #31
 8018194:	d423      	bmi.n	80181de <__lo0bits+0x56>
 8018196:	0798      	lsls	r0, r3, #30
 8018198:	bf49      	itett	mi
 801819a:	085b      	lsrmi	r3, r3, #1
 801819c:	089b      	lsrpl	r3, r3, #2
 801819e:	2001      	movmi	r0, #1
 80181a0:	600b      	strmi	r3, [r1, #0]
 80181a2:	bf5c      	itt	pl
 80181a4:	600b      	strpl	r3, [r1, #0]
 80181a6:	2002      	movpl	r0, #2
 80181a8:	4770      	bx	lr
 80181aa:	b298      	uxth	r0, r3
 80181ac:	b9a8      	cbnz	r0, 80181da <__lo0bits+0x52>
 80181ae:	0c1b      	lsrs	r3, r3, #16
 80181b0:	2010      	movs	r0, #16
 80181b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80181b6:	bf04      	itt	eq
 80181b8:	0a1b      	lsreq	r3, r3, #8
 80181ba:	3008      	addeq	r0, #8
 80181bc:	071a      	lsls	r2, r3, #28
 80181be:	bf04      	itt	eq
 80181c0:	091b      	lsreq	r3, r3, #4
 80181c2:	3004      	addeq	r0, #4
 80181c4:	079a      	lsls	r2, r3, #30
 80181c6:	bf04      	itt	eq
 80181c8:	089b      	lsreq	r3, r3, #2
 80181ca:	3002      	addeq	r0, #2
 80181cc:	07da      	lsls	r2, r3, #31
 80181ce:	d402      	bmi.n	80181d6 <__lo0bits+0x4e>
 80181d0:	085b      	lsrs	r3, r3, #1
 80181d2:	d006      	beq.n	80181e2 <__lo0bits+0x5a>
 80181d4:	3001      	adds	r0, #1
 80181d6:	600b      	str	r3, [r1, #0]
 80181d8:	4770      	bx	lr
 80181da:	4610      	mov	r0, r2
 80181dc:	e7e9      	b.n	80181b2 <__lo0bits+0x2a>
 80181de:	2000      	movs	r0, #0
 80181e0:	4770      	bx	lr
 80181e2:	2020      	movs	r0, #32
 80181e4:	4770      	bx	lr

080181e6 <__i2b>:
 80181e6:	b510      	push	{r4, lr}
 80181e8:	460c      	mov	r4, r1
 80181ea:	2101      	movs	r1, #1
 80181ec:	f7ff fee9 	bl	8017fc2 <_Balloc>
 80181f0:	2201      	movs	r2, #1
 80181f2:	6144      	str	r4, [r0, #20]
 80181f4:	6102      	str	r2, [r0, #16]
 80181f6:	bd10      	pop	{r4, pc}

080181f8 <__multiply>:
 80181f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181fc:	4614      	mov	r4, r2
 80181fe:	690a      	ldr	r2, [r1, #16]
 8018200:	6923      	ldr	r3, [r4, #16]
 8018202:	429a      	cmp	r2, r3
 8018204:	bfb8      	it	lt
 8018206:	460b      	movlt	r3, r1
 8018208:	4688      	mov	r8, r1
 801820a:	bfbc      	itt	lt
 801820c:	46a0      	movlt	r8, r4
 801820e:	461c      	movlt	r4, r3
 8018210:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018214:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018218:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801821c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018220:	eb07 0609 	add.w	r6, r7, r9
 8018224:	42b3      	cmp	r3, r6
 8018226:	bfb8      	it	lt
 8018228:	3101      	addlt	r1, #1
 801822a:	f7ff feca 	bl	8017fc2 <_Balloc>
 801822e:	f100 0514 	add.w	r5, r0, #20
 8018232:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018236:	462b      	mov	r3, r5
 8018238:	2200      	movs	r2, #0
 801823a:	4573      	cmp	r3, lr
 801823c:	d316      	bcc.n	801826c <__multiply+0x74>
 801823e:	f104 0214 	add.w	r2, r4, #20
 8018242:	f108 0114 	add.w	r1, r8, #20
 8018246:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801824a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801824e:	9300      	str	r3, [sp, #0]
 8018250:	9b00      	ldr	r3, [sp, #0]
 8018252:	9201      	str	r2, [sp, #4]
 8018254:	4293      	cmp	r3, r2
 8018256:	d80c      	bhi.n	8018272 <__multiply+0x7a>
 8018258:	2e00      	cmp	r6, #0
 801825a:	dd03      	ble.n	8018264 <__multiply+0x6c>
 801825c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018260:	2b00      	cmp	r3, #0
 8018262:	d05d      	beq.n	8018320 <__multiply+0x128>
 8018264:	6106      	str	r6, [r0, #16]
 8018266:	b003      	add	sp, #12
 8018268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801826c:	f843 2b04 	str.w	r2, [r3], #4
 8018270:	e7e3      	b.n	801823a <__multiply+0x42>
 8018272:	f8b2 b000 	ldrh.w	fp, [r2]
 8018276:	f1bb 0f00 	cmp.w	fp, #0
 801827a:	d023      	beq.n	80182c4 <__multiply+0xcc>
 801827c:	4689      	mov	r9, r1
 801827e:	46ac      	mov	ip, r5
 8018280:	f04f 0800 	mov.w	r8, #0
 8018284:	f859 4b04 	ldr.w	r4, [r9], #4
 8018288:	f8dc a000 	ldr.w	sl, [ip]
 801828c:	b2a3      	uxth	r3, r4
 801828e:	fa1f fa8a 	uxth.w	sl, sl
 8018292:	fb0b a303 	mla	r3, fp, r3, sl
 8018296:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801829a:	f8dc 4000 	ldr.w	r4, [ip]
 801829e:	4443      	add	r3, r8
 80182a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80182a4:	fb0b 840a 	mla	r4, fp, sl, r8
 80182a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80182ac:	46e2      	mov	sl, ip
 80182ae:	b29b      	uxth	r3, r3
 80182b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80182b4:	454f      	cmp	r7, r9
 80182b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80182ba:	f84a 3b04 	str.w	r3, [sl], #4
 80182be:	d82b      	bhi.n	8018318 <__multiply+0x120>
 80182c0:	f8cc 8004 	str.w	r8, [ip, #4]
 80182c4:	9b01      	ldr	r3, [sp, #4]
 80182c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80182ca:	3204      	adds	r2, #4
 80182cc:	f1ba 0f00 	cmp.w	sl, #0
 80182d0:	d020      	beq.n	8018314 <__multiply+0x11c>
 80182d2:	682b      	ldr	r3, [r5, #0]
 80182d4:	4689      	mov	r9, r1
 80182d6:	46a8      	mov	r8, r5
 80182d8:	f04f 0b00 	mov.w	fp, #0
 80182dc:	f8b9 c000 	ldrh.w	ip, [r9]
 80182e0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80182e4:	fb0a 440c 	mla	r4, sl, ip, r4
 80182e8:	445c      	add	r4, fp
 80182ea:	46c4      	mov	ip, r8
 80182ec:	b29b      	uxth	r3, r3
 80182ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80182f2:	f84c 3b04 	str.w	r3, [ip], #4
 80182f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80182fa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80182fe:	0c1b      	lsrs	r3, r3, #16
 8018300:	fb0a b303 	mla	r3, sl, r3, fp
 8018304:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018308:	454f      	cmp	r7, r9
 801830a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801830e:	d805      	bhi.n	801831c <__multiply+0x124>
 8018310:	f8c8 3004 	str.w	r3, [r8, #4]
 8018314:	3504      	adds	r5, #4
 8018316:	e79b      	b.n	8018250 <__multiply+0x58>
 8018318:	46d4      	mov	ip, sl
 801831a:	e7b3      	b.n	8018284 <__multiply+0x8c>
 801831c:	46e0      	mov	r8, ip
 801831e:	e7dd      	b.n	80182dc <__multiply+0xe4>
 8018320:	3e01      	subs	r6, #1
 8018322:	e799      	b.n	8018258 <__multiply+0x60>

08018324 <__pow5mult>:
 8018324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018328:	4615      	mov	r5, r2
 801832a:	f012 0203 	ands.w	r2, r2, #3
 801832e:	4606      	mov	r6, r0
 8018330:	460f      	mov	r7, r1
 8018332:	d007      	beq.n	8018344 <__pow5mult+0x20>
 8018334:	3a01      	subs	r2, #1
 8018336:	4c21      	ldr	r4, [pc, #132]	; (80183bc <__pow5mult+0x98>)
 8018338:	2300      	movs	r3, #0
 801833a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801833e:	f7ff fe8b 	bl	8018058 <__multadd>
 8018342:	4607      	mov	r7, r0
 8018344:	10ad      	asrs	r5, r5, #2
 8018346:	d035      	beq.n	80183b4 <__pow5mult+0x90>
 8018348:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801834a:	b93c      	cbnz	r4, 801835c <__pow5mult+0x38>
 801834c:	2010      	movs	r0, #16
 801834e:	f7fe fafb 	bl	8016948 <malloc>
 8018352:	6270      	str	r0, [r6, #36]	; 0x24
 8018354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018358:	6004      	str	r4, [r0, #0]
 801835a:	60c4      	str	r4, [r0, #12]
 801835c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018364:	b94c      	cbnz	r4, 801837a <__pow5mult+0x56>
 8018366:	f240 2171 	movw	r1, #625	; 0x271
 801836a:	4630      	mov	r0, r6
 801836c:	f7ff ff3b 	bl	80181e6 <__i2b>
 8018370:	2300      	movs	r3, #0
 8018372:	f8c8 0008 	str.w	r0, [r8, #8]
 8018376:	4604      	mov	r4, r0
 8018378:	6003      	str	r3, [r0, #0]
 801837a:	f04f 0800 	mov.w	r8, #0
 801837e:	07eb      	lsls	r3, r5, #31
 8018380:	d50a      	bpl.n	8018398 <__pow5mult+0x74>
 8018382:	4639      	mov	r1, r7
 8018384:	4622      	mov	r2, r4
 8018386:	4630      	mov	r0, r6
 8018388:	f7ff ff36 	bl	80181f8 <__multiply>
 801838c:	4639      	mov	r1, r7
 801838e:	4681      	mov	r9, r0
 8018390:	4630      	mov	r0, r6
 8018392:	f7ff fe4a 	bl	801802a <_Bfree>
 8018396:	464f      	mov	r7, r9
 8018398:	106d      	asrs	r5, r5, #1
 801839a:	d00b      	beq.n	80183b4 <__pow5mult+0x90>
 801839c:	6820      	ldr	r0, [r4, #0]
 801839e:	b938      	cbnz	r0, 80183b0 <__pow5mult+0x8c>
 80183a0:	4622      	mov	r2, r4
 80183a2:	4621      	mov	r1, r4
 80183a4:	4630      	mov	r0, r6
 80183a6:	f7ff ff27 	bl	80181f8 <__multiply>
 80183aa:	6020      	str	r0, [r4, #0]
 80183ac:	f8c0 8000 	str.w	r8, [r0]
 80183b0:	4604      	mov	r4, r0
 80183b2:	e7e4      	b.n	801837e <__pow5mult+0x5a>
 80183b4:	4638      	mov	r0, r7
 80183b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183ba:	bf00      	nop
 80183bc:	08019c70 	.word	0x08019c70

080183c0 <__lshift>:
 80183c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183c4:	460c      	mov	r4, r1
 80183c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80183ca:	6923      	ldr	r3, [r4, #16]
 80183cc:	6849      	ldr	r1, [r1, #4]
 80183ce:	eb0a 0903 	add.w	r9, sl, r3
 80183d2:	68a3      	ldr	r3, [r4, #8]
 80183d4:	4607      	mov	r7, r0
 80183d6:	4616      	mov	r6, r2
 80183d8:	f109 0501 	add.w	r5, r9, #1
 80183dc:	42ab      	cmp	r3, r5
 80183de:	db32      	blt.n	8018446 <__lshift+0x86>
 80183e0:	4638      	mov	r0, r7
 80183e2:	f7ff fdee 	bl	8017fc2 <_Balloc>
 80183e6:	2300      	movs	r3, #0
 80183e8:	4680      	mov	r8, r0
 80183ea:	f100 0114 	add.w	r1, r0, #20
 80183ee:	461a      	mov	r2, r3
 80183f0:	4553      	cmp	r3, sl
 80183f2:	db2b      	blt.n	801844c <__lshift+0x8c>
 80183f4:	6920      	ldr	r0, [r4, #16]
 80183f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80183fa:	f104 0314 	add.w	r3, r4, #20
 80183fe:	f016 021f 	ands.w	r2, r6, #31
 8018402:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018406:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801840a:	d025      	beq.n	8018458 <__lshift+0x98>
 801840c:	f1c2 0e20 	rsb	lr, r2, #32
 8018410:	2000      	movs	r0, #0
 8018412:	681e      	ldr	r6, [r3, #0]
 8018414:	468a      	mov	sl, r1
 8018416:	4096      	lsls	r6, r2
 8018418:	4330      	orrs	r0, r6
 801841a:	f84a 0b04 	str.w	r0, [sl], #4
 801841e:	f853 0b04 	ldr.w	r0, [r3], #4
 8018422:	459c      	cmp	ip, r3
 8018424:	fa20 f00e 	lsr.w	r0, r0, lr
 8018428:	d814      	bhi.n	8018454 <__lshift+0x94>
 801842a:	6048      	str	r0, [r1, #4]
 801842c:	b108      	cbz	r0, 8018432 <__lshift+0x72>
 801842e:	f109 0502 	add.w	r5, r9, #2
 8018432:	3d01      	subs	r5, #1
 8018434:	4638      	mov	r0, r7
 8018436:	f8c8 5010 	str.w	r5, [r8, #16]
 801843a:	4621      	mov	r1, r4
 801843c:	f7ff fdf5 	bl	801802a <_Bfree>
 8018440:	4640      	mov	r0, r8
 8018442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018446:	3101      	adds	r1, #1
 8018448:	005b      	lsls	r3, r3, #1
 801844a:	e7c7      	b.n	80183dc <__lshift+0x1c>
 801844c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018450:	3301      	adds	r3, #1
 8018452:	e7cd      	b.n	80183f0 <__lshift+0x30>
 8018454:	4651      	mov	r1, sl
 8018456:	e7dc      	b.n	8018412 <__lshift+0x52>
 8018458:	3904      	subs	r1, #4
 801845a:	f853 2b04 	ldr.w	r2, [r3], #4
 801845e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018462:	459c      	cmp	ip, r3
 8018464:	d8f9      	bhi.n	801845a <__lshift+0x9a>
 8018466:	e7e4      	b.n	8018432 <__lshift+0x72>

08018468 <__mcmp>:
 8018468:	6903      	ldr	r3, [r0, #16]
 801846a:	690a      	ldr	r2, [r1, #16]
 801846c:	1a9b      	subs	r3, r3, r2
 801846e:	b530      	push	{r4, r5, lr}
 8018470:	d10c      	bne.n	801848c <__mcmp+0x24>
 8018472:	0092      	lsls	r2, r2, #2
 8018474:	3014      	adds	r0, #20
 8018476:	3114      	adds	r1, #20
 8018478:	1884      	adds	r4, r0, r2
 801847a:	4411      	add	r1, r2
 801847c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018480:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018484:	4295      	cmp	r5, r2
 8018486:	d003      	beq.n	8018490 <__mcmp+0x28>
 8018488:	d305      	bcc.n	8018496 <__mcmp+0x2e>
 801848a:	2301      	movs	r3, #1
 801848c:	4618      	mov	r0, r3
 801848e:	bd30      	pop	{r4, r5, pc}
 8018490:	42a0      	cmp	r0, r4
 8018492:	d3f3      	bcc.n	801847c <__mcmp+0x14>
 8018494:	e7fa      	b.n	801848c <__mcmp+0x24>
 8018496:	f04f 33ff 	mov.w	r3, #4294967295
 801849a:	e7f7      	b.n	801848c <__mcmp+0x24>

0801849c <__mdiff>:
 801849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184a0:	460d      	mov	r5, r1
 80184a2:	4607      	mov	r7, r0
 80184a4:	4611      	mov	r1, r2
 80184a6:	4628      	mov	r0, r5
 80184a8:	4614      	mov	r4, r2
 80184aa:	f7ff ffdd 	bl	8018468 <__mcmp>
 80184ae:	1e06      	subs	r6, r0, #0
 80184b0:	d108      	bne.n	80184c4 <__mdiff+0x28>
 80184b2:	4631      	mov	r1, r6
 80184b4:	4638      	mov	r0, r7
 80184b6:	f7ff fd84 	bl	8017fc2 <_Balloc>
 80184ba:	2301      	movs	r3, #1
 80184bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80184c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184c4:	bfa4      	itt	ge
 80184c6:	4623      	movge	r3, r4
 80184c8:	462c      	movge	r4, r5
 80184ca:	4638      	mov	r0, r7
 80184cc:	6861      	ldr	r1, [r4, #4]
 80184ce:	bfa6      	itte	ge
 80184d0:	461d      	movge	r5, r3
 80184d2:	2600      	movge	r6, #0
 80184d4:	2601      	movlt	r6, #1
 80184d6:	f7ff fd74 	bl	8017fc2 <_Balloc>
 80184da:	692b      	ldr	r3, [r5, #16]
 80184dc:	60c6      	str	r6, [r0, #12]
 80184de:	6926      	ldr	r6, [r4, #16]
 80184e0:	f105 0914 	add.w	r9, r5, #20
 80184e4:	f104 0214 	add.w	r2, r4, #20
 80184e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80184ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80184f0:	f100 0514 	add.w	r5, r0, #20
 80184f4:	f04f 0e00 	mov.w	lr, #0
 80184f8:	f852 ab04 	ldr.w	sl, [r2], #4
 80184fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8018500:	fa1e f18a 	uxtah	r1, lr, sl
 8018504:	b2a3      	uxth	r3, r4
 8018506:	1ac9      	subs	r1, r1, r3
 8018508:	0c23      	lsrs	r3, r4, #16
 801850a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801850e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018512:	b289      	uxth	r1, r1
 8018514:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018518:	45c8      	cmp	r8, r9
 801851a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801851e:	4694      	mov	ip, r2
 8018520:	f845 3b04 	str.w	r3, [r5], #4
 8018524:	d8e8      	bhi.n	80184f8 <__mdiff+0x5c>
 8018526:	45bc      	cmp	ip, r7
 8018528:	d304      	bcc.n	8018534 <__mdiff+0x98>
 801852a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801852e:	b183      	cbz	r3, 8018552 <__mdiff+0xb6>
 8018530:	6106      	str	r6, [r0, #16]
 8018532:	e7c5      	b.n	80184c0 <__mdiff+0x24>
 8018534:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018538:	fa1e f381 	uxtah	r3, lr, r1
 801853c:	141a      	asrs	r2, r3, #16
 801853e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018542:	b29b      	uxth	r3, r3
 8018544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018548:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801854c:	f845 3b04 	str.w	r3, [r5], #4
 8018550:	e7e9      	b.n	8018526 <__mdiff+0x8a>
 8018552:	3e01      	subs	r6, #1
 8018554:	e7e9      	b.n	801852a <__mdiff+0x8e>
	...

08018558 <__ulp>:
 8018558:	4b12      	ldr	r3, [pc, #72]	; (80185a4 <__ulp+0x4c>)
 801855a:	ee10 2a90 	vmov	r2, s1
 801855e:	401a      	ands	r2, r3
 8018560:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018564:	2b00      	cmp	r3, #0
 8018566:	dd04      	ble.n	8018572 <__ulp+0x1a>
 8018568:	2000      	movs	r0, #0
 801856a:	4619      	mov	r1, r3
 801856c:	ec41 0b10 	vmov	d0, r0, r1
 8018570:	4770      	bx	lr
 8018572:	425b      	negs	r3, r3
 8018574:	151b      	asrs	r3, r3, #20
 8018576:	2b13      	cmp	r3, #19
 8018578:	f04f 0000 	mov.w	r0, #0
 801857c:	f04f 0100 	mov.w	r1, #0
 8018580:	dc04      	bgt.n	801858c <__ulp+0x34>
 8018582:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018586:	fa42 f103 	asr.w	r1, r2, r3
 801858a:	e7ef      	b.n	801856c <__ulp+0x14>
 801858c:	3b14      	subs	r3, #20
 801858e:	2b1e      	cmp	r3, #30
 8018590:	f04f 0201 	mov.w	r2, #1
 8018594:	bfda      	itte	le
 8018596:	f1c3 031f 	rsble	r3, r3, #31
 801859a:	fa02 f303 	lslle.w	r3, r2, r3
 801859e:	4613      	movgt	r3, r2
 80185a0:	4618      	mov	r0, r3
 80185a2:	e7e3      	b.n	801856c <__ulp+0x14>
 80185a4:	7ff00000 	.word	0x7ff00000

080185a8 <__b2d>:
 80185a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185aa:	6905      	ldr	r5, [r0, #16]
 80185ac:	f100 0714 	add.w	r7, r0, #20
 80185b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80185b4:	1f2e      	subs	r6, r5, #4
 80185b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80185ba:	4620      	mov	r0, r4
 80185bc:	f7ff fdc5 	bl	801814a <__hi0bits>
 80185c0:	f1c0 0320 	rsb	r3, r0, #32
 80185c4:	280a      	cmp	r0, #10
 80185c6:	600b      	str	r3, [r1, #0]
 80185c8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018640 <__b2d+0x98>
 80185cc:	dc14      	bgt.n	80185f8 <__b2d+0x50>
 80185ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80185d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80185d6:	42b7      	cmp	r7, r6
 80185d8:	ea41 030c 	orr.w	r3, r1, ip
 80185dc:	bf34      	ite	cc
 80185de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80185e2:	2100      	movcs	r1, #0
 80185e4:	3015      	adds	r0, #21
 80185e6:	fa04 f000 	lsl.w	r0, r4, r0
 80185ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80185ee:	ea40 0201 	orr.w	r2, r0, r1
 80185f2:	ec43 2b10 	vmov	d0, r2, r3
 80185f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185f8:	42b7      	cmp	r7, r6
 80185fa:	bf3a      	itte	cc
 80185fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8018600:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018604:	2100      	movcs	r1, #0
 8018606:	380b      	subs	r0, #11
 8018608:	d015      	beq.n	8018636 <__b2d+0x8e>
 801860a:	4084      	lsls	r4, r0
 801860c:	f1c0 0520 	rsb	r5, r0, #32
 8018610:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018614:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018618:	42be      	cmp	r6, r7
 801861a:	fa21 fc05 	lsr.w	ip, r1, r5
 801861e:	ea44 030c 	orr.w	r3, r4, ip
 8018622:	bf8c      	ite	hi
 8018624:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018628:	2400      	movls	r4, #0
 801862a:	fa01 f000 	lsl.w	r0, r1, r0
 801862e:	40ec      	lsrs	r4, r5
 8018630:	ea40 0204 	orr.w	r2, r0, r4
 8018634:	e7dd      	b.n	80185f2 <__b2d+0x4a>
 8018636:	ea44 030c 	orr.w	r3, r4, ip
 801863a:	460a      	mov	r2, r1
 801863c:	e7d9      	b.n	80185f2 <__b2d+0x4a>
 801863e:	bf00      	nop
 8018640:	3ff00000 	.word	0x3ff00000

08018644 <__d2b>:
 8018644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018648:	460e      	mov	r6, r1
 801864a:	2101      	movs	r1, #1
 801864c:	ec59 8b10 	vmov	r8, r9, d0
 8018650:	4615      	mov	r5, r2
 8018652:	f7ff fcb6 	bl	8017fc2 <_Balloc>
 8018656:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801865a:	4607      	mov	r7, r0
 801865c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018660:	bb34      	cbnz	r4, 80186b0 <__d2b+0x6c>
 8018662:	9301      	str	r3, [sp, #4]
 8018664:	f1b8 0300 	subs.w	r3, r8, #0
 8018668:	d027      	beq.n	80186ba <__d2b+0x76>
 801866a:	a802      	add	r0, sp, #8
 801866c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018670:	f7ff fd8a 	bl	8018188 <__lo0bits>
 8018674:	9900      	ldr	r1, [sp, #0]
 8018676:	b1f0      	cbz	r0, 80186b6 <__d2b+0x72>
 8018678:	9a01      	ldr	r2, [sp, #4]
 801867a:	f1c0 0320 	rsb	r3, r0, #32
 801867e:	fa02 f303 	lsl.w	r3, r2, r3
 8018682:	430b      	orrs	r3, r1
 8018684:	40c2      	lsrs	r2, r0
 8018686:	617b      	str	r3, [r7, #20]
 8018688:	9201      	str	r2, [sp, #4]
 801868a:	9b01      	ldr	r3, [sp, #4]
 801868c:	61bb      	str	r3, [r7, #24]
 801868e:	2b00      	cmp	r3, #0
 8018690:	bf14      	ite	ne
 8018692:	2102      	movne	r1, #2
 8018694:	2101      	moveq	r1, #1
 8018696:	6139      	str	r1, [r7, #16]
 8018698:	b1c4      	cbz	r4, 80186cc <__d2b+0x88>
 801869a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801869e:	4404      	add	r4, r0
 80186a0:	6034      	str	r4, [r6, #0]
 80186a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80186a6:	6028      	str	r0, [r5, #0]
 80186a8:	4638      	mov	r0, r7
 80186aa:	b003      	add	sp, #12
 80186ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80186b4:	e7d5      	b.n	8018662 <__d2b+0x1e>
 80186b6:	6179      	str	r1, [r7, #20]
 80186b8:	e7e7      	b.n	801868a <__d2b+0x46>
 80186ba:	a801      	add	r0, sp, #4
 80186bc:	f7ff fd64 	bl	8018188 <__lo0bits>
 80186c0:	9b01      	ldr	r3, [sp, #4]
 80186c2:	617b      	str	r3, [r7, #20]
 80186c4:	2101      	movs	r1, #1
 80186c6:	6139      	str	r1, [r7, #16]
 80186c8:	3020      	adds	r0, #32
 80186ca:	e7e5      	b.n	8018698 <__d2b+0x54>
 80186cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80186d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80186d4:	6030      	str	r0, [r6, #0]
 80186d6:	6918      	ldr	r0, [r3, #16]
 80186d8:	f7ff fd37 	bl	801814a <__hi0bits>
 80186dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80186e0:	e7e1      	b.n	80186a6 <__d2b+0x62>

080186e2 <__ratio>:
 80186e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e6:	4688      	mov	r8, r1
 80186e8:	4669      	mov	r1, sp
 80186ea:	4681      	mov	r9, r0
 80186ec:	f7ff ff5c 	bl	80185a8 <__b2d>
 80186f0:	a901      	add	r1, sp, #4
 80186f2:	4640      	mov	r0, r8
 80186f4:	ec57 6b10 	vmov	r6, r7, d0
 80186f8:	f7ff ff56 	bl	80185a8 <__b2d>
 80186fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018700:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018704:	eba3 0c02 	sub.w	ip, r3, r2
 8018708:	e9dd 3200 	ldrd	r3, r2, [sp]
 801870c:	1a9b      	subs	r3, r3, r2
 801870e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018712:	ec5b ab10 	vmov	sl, fp, d0
 8018716:	2b00      	cmp	r3, #0
 8018718:	bfce      	itee	gt
 801871a:	463a      	movgt	r2, r7
 801871c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018720:	465a      	movle	r2, fp
 8018722:	4659      	mov	r1, fp
 8018724:	463d      	mov	r5, r7
 8018726:	bfd4      	ite	le
 8018728:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801872c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018730:	4630      	mov	r0, r6
 8018732:	ee10 2a10 	vmov	r2, s0
 8018736:	460b      	mov	r3, r1
 8018738:	4629      	mov	r1, r5
 801873a:	f7e8 f897 	bl	800086c <__aeabi_ddiv>
 801873e:	ec41 0b10 	vmov	d0, r0, r1
 8018742:	b003      	add	sp, #12
 8018744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018748 <__copybits>:
 8018748:	3901      	subs	r1, #1
 801874a:	b510      	push	{r4, lr}
 801874c:	1149      	asrs	r1, r1, #5
 801874e:	6914      	ldr	r4, [r2, #16]
 8018750:	3101      	adds	r1, #1
 8018752:	f102 0314 	add.w	r3, r2, #20
 8018756:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801875a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801875e:	42a3      	cmp	r3, r4
 8018760:	4602      	mov	r2, r0
 8018762:	d303      	bcc.n	801876c <__copybits+0x24>
 8018764:	2300      	movs	r3, #0
 8018766:	428a      	cmp	r2, r1
 8018768:	d305      	bcc.n	8018776 <__copybits+0x2e>
 801876a:	bd10      	pop	{r4, pc}
 801876c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018770:	f840 2b04 	str.w	r2, [r0], #4
 8018774:	e7f3      	b.n	801875e <__copybits+0x16>
 8018776:	f842 3b04 	str.w	r3, [r2], #4
 801877a:	e7f4      	b.n	8018766 <__copybits+0x1e>

0801877c <__any_on>:
 801877c:	f100 0214 	add.w	r2, r0, #20
 8018780:	6900      	ldr	r0, [r0, #16]
 8018782:	114b      	asrs	r3, r1, #5
 8018784:	4298      	cmp	r0, r3
 8018786:	b510      	push	{r4, lr}
 8018788:	db11      	blt.n	80187ae <__any_on+0x32>
 801878a:	dd0a      	ble.n	80187a2 <__any_on+0x26>
 801878c:	f011 011f 	ands.w	r1, r1, #31
 8018790:	d007      	beq.n	80187a2 <__any_on+0x26>
 8018792:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018796:	fa24 f001 	lsr.w	r0, r4, r1
 801879a:	fa00 f101 	lsl.w	r1, r0, r1
 801879e:	428c      	cmp	r4, r1
 80187a0:	d10b      	bne.n	80187ba <__any_on+0x3e>
 80187a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80187a6:	4293      	cmp	r3, r2
 80187a8:	d803      	bhi.n	80187b2 <__any_on+0x36>
 80187aa:	2000      	movs	r0, #0
 80187ac:	bd10      	pop	{r4, pc}
 80187ae:	4603      	mov	r3, r0
 80187b0:	e7f7      	b.n	80187a2 <__any_on+0x26>
 80187b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80187b6:	2900      	cmp	r1, #0
 80187b8:	d0f5      	beq.n	80187a6 <__any_on+0x2a>
 80187ba:	2001      	movs	r0, #1
 80187bc:	e7f6      	b.n	80187ac <__any_on+0x30>

080187be <_calloc_r>:
 80187be:	b538      	push	{r3, r4, r5, lr}
 80187c0:	fb02 f401 	mul.w	r4, r2, r1
 80187c4:	4621      	mov	r1, r4
 80187c6:	f7fe f95b 	bl	8016a80 <_malloc_r>
 80187ca:	4605      	mov	r5, r0
 80187cc:	b118      	cbz	r0, 80187d6 <_calloc_r+0x18>
 80187ce:	4622      	mov	r2, r4
 80187d0:	2100      	movs	r1, #0
 80187d2:	f7fe f8ff 	bl	80169d4 <memset>
 80187d6:	4628      	mov	r0, r5
 80187d8:	bd38      	pop	{r3, r4, r5, pc}

080187da <__ssputs_r>:
 80187da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187de:	688e      	ldr	r6, [r1, #8]
 80187e0:	429e      	cmp	r6, r3
 80187e2:	4682      	mov	sl, r0
 80187e4:	460c      	mov	r4, r1
 80187e6:	4690      	mov	r8, r2
 80187e8:	4699      	mov	r9, r3
 80187ea:	d837      	bhi.n	801885c <__ssputs_r+0x82>
 80187ec:	898a      	ldrh	r2, [r1, #12]
 80187ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80187f2:	d031      	beq.n	8018858 <__ssputs_r+0x7e>
 80187f4:	6825      	ldr	r5, [r4, #0]
 80187f6:	6909      	ldr	r1, [r1, #16]
 80187f8:	1a6f      	subs	r7, r5, r1
 80187fa:	6965      	ldr	r5, [r4, #20]
 80187fc:	2302      	movs	r3, #2
 80187fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018802:	fb95 f5f3 	sdiv	r5, r5, r3
 8018806:	f109 0301 	add.w	r3, r9, #1
 801880a:	443b      	add	r3, r7
 801880c:	429d      	cmp	r5, r3
 801880e:	bf38      	it	cc
 8018810:	461d      	movcc	r5, r3
 8018812:	0553      	lsls	r3, r2, #21
 8018814:	d530      	bpl.n	8018878 <__ssputs_r+0x9e>
 8018816:	4629      	mov	r1, r5
 8018818:	f7fe f932 	bl	8016a80 <_malloc_r>
 801881c:	4606      	mov	r6, r0
 801881e:	b950      	cbnz	r0, 8018836 <__ssputs_r+0x5c>
 8018820:	230c      	movs	r3, #12
 8018822:	f8ca 3000 	str.w	r3, [sl]
 8018826:	89a3      	ldrh	r3, [r4, #12]
 8018828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801882c:	81a3      	strh	r3, [r4, #12]
 801882e:	f04f 30ff 	mov.w	r0, #4294967295
 8018832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018836:	463a      	mov	r2, r7
 8018838:	6921      	ldr	r1, [r4, #16]
 801883a:	f7fe f8a7 	bl	801698c <memcpy>
 801883e:	89a3      	ldrh	r3, [r4, #12]
 8018840:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018848:	81a3      	strh	r3, [r4, #12]
 801884a:	6126      	str	r6, [r4, #16]
 801884c:	6165      	str	r5, [r4, #20]
 801884e:	443e      	add	r6, r7
 8018850:	1bed      	subs	r5, r5, r7
 8018852:	6026      	str	r6, [r4, #0]
 8018854:	60a5      	str	r5, [r4, #8]
 8018856:	464e      	mov	r6, r9
 8018858:	454e      	cmp	r6, r9
 801885a:	d900      	bls.n	801885e <__ssputs_r+0x84>
 801885c:	464e      	mov	r6, r9
 801885e:	4632      	mov	r2, r6
 8018860:	4641      	mov	r1, r8
 8018862:	6820      	ldr	r0, [r4, #0]
 8018864:	f7fe f89d 	bl	80169a2 <memmove>
 8018868:	68a3      	ldr	r3, [r4, #8]
 801886a:	1b9b      	subs	r3, r3, r6
 801886c:	60a3      	str	r3, [r4, #8]
 801886e:	6823      	ldr	r3, [r4, #0]
 8018870:	441e      	add	r6, r3
 8018872:	6026      	str	r6, [r4, #0]
 8018874:	2000      	movs	r0, #0
 8018876:	e7dc      	b.n	8018832 <__ssputs_r+0x58>
 8018878:	462a      	mov	r2, r5
 801887a:	f000 fa89 	bl	8018d90 <_realloc_r>
 801887e:	4606      	mov	r6, r0
 8018880:	2800      	cmp	r0, #0
 8018882:	d1e2      	bne.n	801884a <__ssputs_r+0x70>
 8018884:	6921      	ldr	r1, [r4, #16]
 8018886:	4650      	mov	r0, sl
 8018888:	f7fe f8ac 	bl	80169e4 <_free_r>
 801888c:	e7c8      	b.n	8018820 <__ssputs_r+0x46>
	...

08018890 <_svfiprintf_r>:
 8018890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018894:	461d      	mov	r5, r3
 8018896:	898b      	ldrh	r3, [r1, #12]
 8018898:	061f      	lsls	r7, r3, #24
 801889a:	b09d      	sub	sp, #116	; 0x74
 801889c:	4680      	mov	r8, r0
 801889e:	460c      	mov	r4, r1
 80188a0:	4616      	mov	r6, r2
 80188a2:	d50f      	bpl.n	80188c4 <_svfiprintf_r+0x34>
 80188a4:	690b      	ldr	r3, [r1, #16]
 80188a6:	b96b      	cbnz	r3, 80188c4 <_svfiprintf_r+0x34>
 80188a8:	2140      	movs	r1, #64	; 0x40
 80188aa:	f7fe f8e9 	bl	8016a80 <_malloc_r>
 80188ae:	6020      	str	r0, [r4, #0]
 80188b0:	6120      	str	r0, [r4, #16]
 80188b2:	b928      	cbnz	r0, 80188c0 <_svfiprintf_r+0x30>
 80188b4:	230c      	movs	r3, #12
 80188b6:	f8c8 3000 	str.w	r3, [r8]
 80188ba:	f04f 30ff 	mov.w	r0, #4294967295
 80188be:	e0c8      	b.n	8018a52 <_svfiprintf_r+0x1c2>
 80188c0:	2340      	movs	r3, #64	; 0x40
 80188c2:	6163      	str	r3, [r4, #20]
 80188c4:	2300      	movs	r3, #0
 80188c6:	9309      	str	r3, [sp, #36]	; 0x24
 80188c8:	2320      	movs	r3, #32
 80188ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80188ce:	2330      	movs	r3, #48	; 0x30
 80188d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80188d4:	9503      	str	r5, [sp, #12]
 80188d6:	f04f 0b01 	mov.w	fp, #1
 80188da:	4637      	mov	r7, r6
 80188dc:	463d      	mov	r5, r7
 80188de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80188e2:	b10b      	cbz	r3, 80188e8 <_svfiprintf_r+0x58>
 80188e4:	2b25      	cmp	r3, #37	; 0x25
 80188e6:	d13e      	bne.n	8018966 <_svfiprintf_r+0xd6>
 80188e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80188ec:	d00b      	beq.n	8018906 <_svfiprintf_r+0x76>
 80188ee:	4653      	mov	r3, sl
 80188f0:	4632      	mov	r2, r6
 80188f2:	4621      	mov	r1, r4
 80188f4:	4640      	mov	r0, r8
 80188f6:	f7ff ff70 	bl	80187da <__ssputs_r>
 80188fa:	3001      	adds	r0, #1
 80188fc:	f000 80a4 	beq.w	8018a48 <_svfiprintf_r+0x1b8>
 8018900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018902:	4453      	add	r3, sl
 8018904:	9309      	str	r3, [sp, #36]	; 0x24
 8018906:	783b      	ldrb	r3, [r7, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	f000 809d 	beq.w	8018a48 <_svfiprintf_r+0x1b8>
 801890e:	2300      	movs	r3, #0
 8018910:	f04f 32ff 	mov.w	r2, #4294967295
 8018914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018918:	9304      	str	r3, [sp, #16]
 801891a:	9307      	str	r3, [sp, #28]
 801891c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018920:	931a      	str	r3, [sp, #104]	; 0x68
 8018922:	462f      	mov	r7, r5
 8018924:	2205      	movs	r2, #5
 8018926:	f817 1b01 	ldrb.w	r1, [r7], #1
 801892a:	4850      	ldr	r0, [pc, #320]	; (8018a6c <_svfiprintf_r+0x1dc>)
 801892c:	f7e7 fc68 	bl	8000200 <memchr>
 8018930:	9b04      	ldr	r3, [sp, #16]
 8018932:	b9d0      	cbnz	r0, 801896a <_svfiprintf_r+0xda>
 8018934:	06d9      	lsls	r1, r3, #27
 8018936:	bf44      	itt	mi
 8018938:	2220      	movmi	r2, #32
 801893a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801893e:	071a      	lsls	r2, r3, #28
 8018940:	bf44      	itt	mi
 8018942:	222b      	movmi	r2, #43	; 0x2b
 8018944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018948:	782a      	ldrb	r2, [r5, #0]
 801894a:	2a2a      	cmp	r2, #42	; 0x2a
 801894c:	d015      	beq.n	801897a <_svfiprintf_r+0xea>
 801894e:	9a07      	ldr	r2, [sp, #28]
 8018950:	462f      	mov	r7, r5
 8018952:	2000      	movs	r0, #0
 8018954:	250a      	movs	r5, #10
 8018956:	4639      	mov	r1, r7
 8018958:	f811 3b01 	ldrb.w	r3, [r1], #1
 801895c:	3b30      	subs	r3, #48	; 0x30
 801895e:	2b09      	cmp	r3, #9
 8018960:	d94d      	bls.n	80189fe <_svfiprintf_r+0x16e>
 8018962:	b1b8      	cbz	r0, 8018994 <_svfiprintf_r+0x104>
 8018964:	e00f      	b.n	8018986 <_svfiprintf_r+0xf6>
 8018966:	462f      	mov	r7, r5
 8018968:	e7b8      	b.n	80188dc <_svfiprintf_r+0x4c>
 801896a:	4a40      	ldr	r2, [pc, #256]	; (8018a6c <_svfiprintf_r+0x1dc>)
 801896c:	1a80      	subs	r0, r0, r2
 801896e:	fa0b f000 	lsl.w	r0, fp, r0
 8018972:	4318      	orrs	r0, r3
 8018974:	9004      	str	r0, [sp, #16]
 8018976:	463d      	mov	r5, r7
 8018978:	e7d3      	b.n	8018922 <_svfiprintf_r+0x92>
 801897a:	9a03      	ldr	r2, [sp, #12]
 801897c:	1d11      	adds	r1, r2, #4
 801897e:	6812      	ldr	r2, [r2, #0]
 8018980:	9103      	str	r1, [sp, #12]
 8018982:	2a00      	cmp	r2, #0
 8018984:	db01      	blt.n	801898a <_svfiprintf_r+0xfa>
 8018986:	9207      	str	r2, [sp, #28]
 8018988:	e004      	b.n	8018994 <_svfiprintf_r+0x104>
 801898a:	4252      	negs	r2, r2
 801898c:	f043 0302 	orr.w	r3, r3, #2
 8018990:	9207      	str	r2, [sp, #28]
 8018992:	9304      	str	r3, [sp, #16]
 8018994:	783b      	ldrb	r3, [r7, #0]
 8018996:	2b2e      	cmp	r3, #46	; 0x2e
 8018998:	d10c      	bne.n	80189b4 <_svfiprintf_r+0x124>
 801899a:	787b      	ldrb	r3, [r7, #1]
 801899c:	2b2a      	cmp	r3, #42	; 0x2a
 801899e:	d133      	bne.n	8018a08 <_svfiprintf_r+0x178>
 80189a0:	9b03      	ldr	r3, [sp, #12]
 80189a2:	1d1a      	adds	r2, r3, #4
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	9203      	str	r2, [sp, #12]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	bfb8      	it	lt
 80189ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80189b0:	3702      	adds	r7, #2
 80189b2:	9305      	str	r3, [sp, #20]
 80189b4:	4d2e      	ldr	r5, [pc, #184]	; (8018a70 <_svfiprintf_r+0x1e0>)
 80189b6:	7839      	ldrb	r1, [r7, #0]
 80189b8:	2203      	movs	r2, #3
 80189ba:	4628      	mov	r0, r5
 80189bc:	f7e7 fc20 	bl	8000200 <memchr>
 80189c0:	b138      	cbz	r0, 80189d2 <_svfiprintf_r+0x142>
 80189c2:	2340      	movs	r3, #64	; 0x40
 80189c4:	1b40      	subs	r0, r0, r5
 80189c6:	fa03 f000 	lsl.w	r0, r3, r0
 80189ca:	9b04      	ldr	r3, [sp, #16]
 80189cc:	4303      	orrs	r3, r0
 80189ce:	3701      	adds	r7, #1
 80189d0:	9304      	str	r3, [sp, #16]
 80189d2:	7839      	ldrb	r1, [r7, #0]
 80189d4:	4827      	ldr	r0, [pc, #156]	; (8018a74 <_svfiprintf_r+0x1e4>)
 80189d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80189da:	2206      	movs	r2, #6
 80189dc:	1c7e      	adds	r6, r7, #1
 80189de:	f7e7 fc0f 	bl	8000200 <memchr>
 80189e2:	2800      	cmp	r0, #0
 80189e4:	d038      	beq.n	8018a58 <_svfiprintf_r+0x1c8>
 80189e6:	4b24      	ldr	r3, [pc, #144]	; (8018a78 <_svfiprintf_r+0x1e8>)
 80189e8:	bb13      	cbnz	r3, 8018a30 <_svfiprintf_r+0x1a0>
 80189ea:	9b03      	ldr	r3, [sp, #12]
 80189ec:	3307      	adds	r3, #7
 80189ee:	f023 0307 	bic.w	r3, r3, #7
 80189f2:	3308      	adds	r3, #8
 80189f4:	9303      	str	r3, [sp, #12]
 80189f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189f8:	444b      	add	r3, r9
 80189fa:	9309      	str	r3, [sp, #36]	; 0x24
 80189fc:	e76d      	b.n	80188da <_svfiprintf_r+0x4a>
 80189fe:	fb05 3202 	mla	r2, r5, r2, r3
 8018a02:	2001      	movs	r0, #1
 8018a04:	460f      	mov	r7, r1
 8018a06:	e7a6      	b.n	8018956 <_svfiprintf_r+0xc6>
 8018a08:	2300      	movs	r3, #0
 8018a0a:	3701      	adds	r7, #1
 8018a0c:	9305      	str	r3, [sp, #20]
 8018a0e:	4619      	mov	r1, r3
 8018a10:	250a      	movs	r5, #10
 8018a12:	4638      	mov	r0, r7
 8018a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a18:	3a30      	subs	r2, #48	; 0x30
 8018a1a:	2a09      	cmp	r2, #9
 8018a1c:	d903      	bls.n	8018a26 <_svfiprintf_r+0x196>
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d0c8      	beq.n	80189b4 <_svfiprintf_r+0x124>
 8018a22:	9105      	str	r1, [sp, #20]
 8018a24:	e7c6      	b.n	80189b4 <_svfiprintf_r+0x124>
 8018a26:	fb05 2101 	mla	r1, r5, r1, r2
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	4607      	mov	r7, r0
 8018a2e:	e7f0      	b.n	8018a12 <_svfiprintf_r+0x182>
 8018a30:	ab03      	add	r3, sp, #12
 8018a32:	9300      	str	r3, [sp, #0]
 8018a34:	4622      	mov	r2, r4
 8018a36:	4b11      	ldr	r3, [pc, #68]	; (8018a7c <_svfiprintf_r+0x1ec>)
 8018a38:	a904      	add	r1, sp, #16
 8018a3a:	4640      	mov	r0, r8
 8018a3c:	f3af 8000 	nop.w
 8018a40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018a44:	4681      	mov	r9, r0
 8018a46:	d1d6      	bne.n	80189f6 <_svfiprintf_r+0x166>
 8018a48:	89a3      	ldrh	r3, [r4, #12]
 8018a4a:	065b      	lsls	r3, r3, #25
 8018a4c:	f53f af35 	bmi.w	80188ba <_svfiprintf_r+0x2a>
 8018a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a52:	b01d      	add	sp, #116	; 0x74
 8018a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a58:	ab03      	add	r3, sp, #12
 8018a5a:	9300      	str	r3, [sp, #0]
 8018a5c:	4622      	mov	r2, r4
 8018a5e:	4b07      	ldr	r3, [pc, #28]	; (8018a7c <_svfiprintf_r+0x1ec>)
 8018a60:	a904      	add	r1, sp, #16
 8018a62:	4640      	mov	r0, r8
 8018a64:	f000 f882 	bl	8018b6c <_printf_i>
 8018a68:	e7ea      	b.n	8018a40 <_svfiprintf_r+0x1b0>
 8018a6a:	bf00      	nop
 8018a6c:	08019c7c 	.word	0x08019c7c
 8018a70:	08019c82 	.word	0x08019c82
 8018a74:	08019c86 	.word	0x08019c86
 8018a78:	00000000 	.word	0x00000000
 8018a7c:	080187db 	.word	0x080187db

08018a80 <_printf_common>:
 8018a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a84:	4691      	mov	r9, r2
 8018a86:	461f      	mov	r7, r3
 8018a88:	688a      	ldr	r2, [r1, #8]
 8018a8a:	690b      	ldr	r3, [r1, #16]
 8018a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018a90:	4293      	cmp	r3, r2
 8018a92:	bfb8      	it	lt
 8018a94:	4613      	movlt	r3, r2
 8018a96:	f8c9 3000 	str.w	r3, [r9]
 8018a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018a9e:	4606      	mov	r6, r0
 8018aa0:	460c      	mov	r4, r1
 8018aa2:	b112      	cbz	r2, 8018aaa <_printf_common+0x2a>
 8018aa4:	3301      	adds	r3, #1
 8018aa6:	f8c9 3000 	str.w	r3, [r9]
 8018aaa:	6823      	ldr	r3, [r4, #0]
 8018aac:	0699      	lsls	r1, r3, #26
 8018aae:	bf42      	ittt	mi
 8018ab0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018ab4:	3302      	addmi	r3, #2
 8018ab6:	f8c9 3000 	strmi.w	r3, [r9]
 8018aba:	6825      	ldr	r5, [r4, #0]
 8018abc:	f015 0506 	ands.w	r5, r5, #6
 8018ac0:	d107      	bne.n	8018ad2 <_printf_common+0x52>
 8018ac2:	f104 0a19 	add.w	sl, r4, #25
 8018ac6:	68e3      	ldr	r3, [r4, #12]
 8018ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8018acc:	1a9b      	subs	r3, r3, r2
 8018ace:	42ab      	cmp	r3, r5
 8018ad0:	dc28      	bgt.n	8018b24 <_printf_common+0xa4>
 8018ad2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018ad6:	6822      	ldr	r2, [r4, #0]
 8018ad8:	3300      	adds	r3, #0
 8018ada:	bf18      	it	ne
 8018adc:	2301      	movne	r3, #1
 8018ade:	0692      	lsls	r2, r2, #26
 8018ae0:	d42d      	bmi.n	8018b3e <_printf_common+0xbe>
 8018ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018ae6:	4639      	mov	r1, r7
 8018ae8:	4630      	mov	r0, r6
 8018aea:	47c0      	blx	r8
 8018aec:	3001      	adds	r0, #1
 8018aee:	d020      	beq.n	8018b32 <_printf_common+0xb2>
 8018af0:	6823      	ldr	r3, [r4, #0]
 8018af2:	68e5      	ldr	r5, [r4, #12]
 8018af4:	f8d9 2000 	ldr.w	r2, [r9]
 8018af8:	f003 0306 	and.w	r3, r3, #6
 8018afc:	2b04      	cmp	r3, #4
 8018afe:	bf08      	it	eq
 8018b00:	1aad      	subeq	r5, r5, r2
 8018b02:	68a3      	ldr	r3, [r4, #8]
 8018b04:	6922      	ldr	r2, [r4, #16]
 8018b06:	bf0c      	ite	eq
 8018b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018b0c:	2500      	movne	r5, #0
 8018b0e:	4293      	cmp	r3, r2
 8018b10:	bfc4      	itt	gt
 8018b12:	1a9b      	subgt	r3, r3, r2
 8018b14:	18ed      	addgt	r5, r5, r3
 8018b16:	f04f 0900 	mov.w	r9, #0
 8018b1a:	341a      	adds	r4, #26
 8018b1c:	454d      	cmp	r5, r9
 8018b1e:	d11a      	bne.n	8018b56 <_printf_common+0xd6>
 8018b20:	2000      	movs	r0, #0
 8018b22:	e008      	b.n	8018b36 <_printf_common+0xb6>
 8018b24:	2301      	movs	r3, #1
 8018b26:	4652      	mov	r2, sl
 8018b28:	4639      	mov	r1, r7
 8018b2a:	4630      	mov	r0, r6
 8018b2c:	47c0      	blx	r8
 8018b2e:	3001      	adds	r0, #1
 8018b30:	d103      	bne.n	8018b3a <_printf_common+0xba>
 8018b32:	f04f 30ff 	mov.w	r0, #4294967295
 8018b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b3a:	3501      	adds	r5, #1
 8018b3c:	e7c3      	b.n	8018ac6 <_printf_common+0x46>
 8018b3e:	18e1      	adds	r1, r4, r3
 8018b40:	1c5a      	adds	r2, r3, #1
 8018b42:	2030      	movs	r0, #48	; 0x30
 8018b44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018b48:	4422      	add	r2, r4
 8018b4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018b4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018b52:	3302      	adds	r3, #2
 8018b54:	e7c5      	b.n	8018ae2 <_printf_common+0x62>
 8018b56:	2301      	movs	r3, #1
 8018b58:	4622      	mov	r2, r4
 8018b5a:	4639      	mov	r1, r7
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	47c0      	blx	r8
 8018b60:	3001      	adds	r0, #1
 8018b62:	d0e6      	beq.n	8018b32 <_printf_common+0xb2>
 8018b64:	f109 0901 	add.w	r9, r9, #1
 8018b68:	e7d8      	b.n	8018b1c <_printf_common+0x9c>
	...

08018b6c <_printf_i>:
 8018b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018b74:	460c      	mov	r4, r1
 8018b76:	7e09      	ldrb	r1, [r1, #24]
 8018b78:	b085      	sub	sp, #20
 8018b7a:	296e      	cmp	r1, #110	; 0x6e
 8018b7c:	4617      	mov	r7, r2
 8018b7e:	4606      	mov	r6, r0
 8018b80:	4698      	mov	r8, r3
 8018b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b84:	f000 80b3 	beq.w	8018cee <_printf_i+0x182>
 8018b88:	d822      	bhi.n	8018bd0 <_printf_i+0x64>
 8018b8a:	2963      	cmp	r1, #99	; 0x63
 8018b8c:	d036      	beq.n	8018bfc <_printf_i+0x90>
 8018b8e:	d80a      	bhi.n	8018ba6 <_printf_i+0x3a>
 8018b90:	2900      	cmp	r1, #0
 8018b92:	f000 80b9 	beq.w	8018d08 <_printf_i+0x19c>
 8018b96:	2958      	cmp	r1, #88	; 0x58
 8018b98:	f000 8083 	beq.w	8018ca2 <_printf_i+0x136>
 8018b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018ba0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018ba4:	e032      	b.n	8018c0c <_printf_i+0xa0>
 8018ba6:	2964      	cmp	r1, #100	; 0x64
 8018ba8:	d001      	beq.n	8018bae <_printf_i+0x42>
 8018baa:	2969      	cmp	r1, #105	; 0x69
 8018bac:	d1f6      	bne.n	8018b9c <_printf_i+0x30>
 8018bae:	6820      	ldr	r0, [r4, #0]
 8018bb0:	6813      	ldr	r3, [r2, #0]
 8018bb2:	0605      	lsls	r5, r0, #24
 8018bb4:	f103 0104 	add.w	r1, r3, #4
 8018bb8:	d52a      	bpl.n	8018c10 <_printf_i+0xa4>
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	6011      	str	r1, [r2, #0]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	da03      	bge.n	8018bca <_printf_i+0x5e>
 8018bc2:	222d      	movs	r2, #45	; 0x2d
 8018bc4:	425b      	negs	r3, r3
 8018bc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018bca:	486f      	ldr	r0, [pc, #444]	; (8018d88 <_printf_i+0x21c>)
 8018bcc:	220a      	movs	r2, #10
 8018bce:	e039      	b.n	8018c44 <_printf_i+0xd8>
 8018bd0:	2973      	cmp	r1, #115	; 0x73
 8018bd2:	f000 809d 	beq.w	8018d10 <_printf_i+0x1a4>
 8018bd6:	d808      	bhi.n	8018bea <_printf_i+0x7e>
 8018bd8:	296f      	cmp	r1, #111	; 0x6f
 8018bda:	d020      	beq.n	8018c1e <_printf_i+0xb2>
 8018bdc:	2970      	cmp	r1, #112	; 0x70
 8018bde:	d1dd      	bne.n	8018b9c <_printf_i+0x30>
 8018be0:	6823      	ldr	r3, [r4, #0]
 8018be2:	f043 0320 	orr.w	r3, r3, #32
 8018be6:	6023      	str	r3, [r4, #0]
 8018be8:	e003      	b.n	8018bf2 <_printf_i+0x86>
 8018bea:	2975      	cmp	r1, #117	; 0x75
 8018bec:	d017      	beq.n	8018c1e <_printf_i+0xb2>
 8018bee:	2978      	cmp	r1, #120	; 0x78
 8018bf0:	d1d4      	bne.n	8018b9c <_printf_i+0x30>
 8018bf2:	2378      	movs	r3, #120	; 0x78
 8018bf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018bf8:	4864      	ldr	r0, [pc, #400]	; (8018d8c <_printf_i+0x220>)
 8018bfa:	e055      	b.n	8018ca8 <_printf_i+0x13c>
 8018bfc:	6813      	ldr	r3, [r2, #0]
 8018bfe:	1d19      	adds	r1, r3, #4
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	6011      	str	r1, [r2, #0]
 8018c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018c0c:	2301      	movs	r3, #1
 8018c0e:	e08c      	b.n	8018d2a <_printf_i+0x1be>
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	6011      	str	r1, [r2, #0]
 8018c14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018c18:	bf18      	it	ne
 8018c1a:	b21b      	sxthne	r3, r3
 8018c1c:	e7cf      	b.n	8018bbe <_printf_i+0x52>
 8018c1e:	6813      	ldr	r3, [r2, #0]
 8018c20:	6825      	ldr	r5, [r4, #0]
 8018c22:	1d18      	adds	r0, r3, #4
 8018c24:	6010      	str	r0, [r2, #0]
 8018c26:	0628      	lsls	r0, r5, #24
 8018c28:	d501      	bpl.n	8018c2e <_printf_i+0xc2>
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	e002      	b.n	8018c34 <_printf_i+0xc8>
 8018c2e:	0668      	lsls	r0, r5, #25
 8018c30:	d5fb      	bpl.n	8018c2a <_printf_i+0xbe>
 8018c32:	881b      	ldrh	r3, [r3, #0]
 8018c34:	4854      	ldr	r0, [pc, #336]	; (8018d88 <_printf_i+0x21c>)
 8018c36:	296f      	cmp	r1, #111	; 0x6f
 8018c38:	bf14      	ite	ne
 8018c3a:	220a      	movne	r2, #10
 8018c3c:	2208      	moveq	r2, #8
 8018c3e:	2100      	movs	r1, #0
 8018c40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018c44:	6865      	ldr	r5, [r4, #4]
 8018c46:	60a5      	str	r5, [r4, #8]
 8018c48:	2d00      	cmp	r5, #0
 8018c4a:	f2c0 8095 	blt.w	8018d78 <_printf_i+0x20c>
 8018c4e:	6821      	ldr	r1, [r4, #0]
 8018c50:	f021 0104 	bic.w	r1, r1, #4
 8018c54:	6021      	str	r1, [r4, #0]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d13d      	bne.n	8018cd6 <_printf_i+0x16a>
 8018c5a:	2d00      	cmp	r5, #0
 8018c5c:	f040 808e 	bne.w	8018d7c <_printf_i+0x210>
 8018c60:	4665      	mov	r5, ip
 8018c62:	2a08      	cmp	r2, #8
 8018c64:	d10b      	bne.n	8018c7e <_printf_i+0x112>
 8018c66:	6823      	ldr	r3, [r4, #0]
 8018c68:	07db      	lsls	r3, r3, #31
 8018c6a:	d508      	bpl.n	8018c7e <_printf_i+0x112>
 8018c6c:	6923      	ldr	r3, [r4, #16]
 8018c6e:	6862      	ldr	r2, [r4, #4]
 8018c70:	429a      	cmp	r2, r3
 8018c72:	bfde      	ittt	le
 8018c74:	2330      	movle	r3, #48	; 0x30
 8018c76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018c7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018c7e:	ebac 0305 	sub.w	r3, ip, r5
 8018c82:	6123      	str	r3, [r4, #16]
 8018c84:	f8cd 8000 	str.w	r8, [sp]
 8018c88:	463b      	mov	r3, r7
 8018c8a:	aa03      	add	r2, sp, #12
 8018c8c:	4621      	mov	r1, r4
 8018c8e:	4630      	mov	r0, r6
 8018c90:	f7ff fef6 	bl	8018a80 <_printf_common>
 8018c94:	3001      	adds	r0, #1
 8018c96:	d14d      	bne.n	8018d34 <_printf_i+0x1c8>
 8018c98:	f04f 30ff 	mov.w	r0, #4294967295
 8018c9c:	b005      	add	sp, #20
 8018c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ca2:	4839      	ldr	r0, [pc, #228]	; (8018d88 <_printf_i+0x21c>)
 8018ca4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018ca8:	6813      	ldr	r3, [r2, #0]
 8018caa:	6821      	ldr	r1, [r4, #0]
 8018cac:	1d1d      	adds	r5, r3, #4
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	6015      	str	r5, [r2, #0]
 8018cb2:	060a      	lsls	r2, r1, #24
 8018cb4:	d50b      	bpl.n	8018cce <_printf_i+0x162>
 8018cb6:	07ca      	lsls	r2, r1, #31
 8018cb8:	bf44      	itt	mi
 8018cba:	f041 0120 	orrmi.w	r1, r1, #32
 8018cbe:	6021      	strmi	r1, [r4, #0]
 8018cc0:	b91b      	cbnz	r3, 8018cca <_printf_i+0x15e>
 8018cc2:	6822      	ldr	r2, [r4, #0]
 8018cc4:	f022 0220 	bic.w	r2, r2, #32
 8018cc8:	6022      	str	r2, [r4, #0]
 8018cca:	2210      	movs	r2, #16
 8018ccc:	e7b7      	b.n	8018c3e <_printf_i+0xd2>
 8018cce:	064d      	lsls	r5, r1, #25
 8018cd0:	bf48      	it	mi
 8018cd2:	b29b      	uxthmi	r3, r3
 8018cd4:	e7ef      	b.n	8018cb6 <_printf_i+0x14a>
 8018cd6:	4665      	mov	r5, ip
 8018cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8018cdc:	fb02 3311 	mls	r3, r2, r1, r3
 8018ce0:	5cc3      	ldrb	r3, [r0, r3]
 8018ce2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018ce6:	460b      	mov	r3, r1
 8018ce8:	2900      	cmp	r1, #0
 8018cea:	d1f5      	bne.n	8018cd8 <_printf_i+0x16c>
 8018cec:	e7b9      	b.n	8018c62 <_printf_i+0xf6>
 8018cee:	6813      	ldr	r3, [r2, #0]
 8018cf0:	6825      	ldr	r5, [r4, #0]
 8018cf2:	6961      	ldr	r1, [r4, #20]
 8018cf4:	1d18      	adds	r0, r3, #4
 8018cf6:	6010      	str	r0, [r2, #0]
 8018cf8:	0628      	lsls	r0, r5, #24
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	d501      	bpl.n	8018d02 <_printf_i+0x196>
 8018cfe:	6019      	str	r1, [r3, #0]
 8018d00:	e002      	b.n	8018d08 <_printf_i+0x19c>
 8018d02:	066a      	lsls	r2, r5, #25
 8018d04:	d5fb      	bpl.n	8018cfe <_printf_i+0x192>
 8018d06:	8019      	strh	r1, [r3, #0]
 8018d08:	2300      	movs	r3, #0
 8018d0a:	6123      	str	r3, [r4, #16]
 8018d0c:	4665      	mov	r5, ip
 8018d0e:	e7b9      	b.n	8018c84 <_printf_i+0x118>
 8018d10:	6813      	ldr	r3, [r2, #0]
 8018d12:	1d19      	adds	r1, r3, #4
 8018d14:	6011      	str	r1, [r2, #0]
 8018d16:	681d      	ldr	r5, [r3, #0]
 8018d18:	6862      	ldr	r2, [r4, #4]
 8018d1a:	2100      	movs	r1, #0
 8018d1c:	4628      	mov	r0, r5
 8018d1e:	f7e7 fa6f 	bl	8000200 <memchr>
 8018d22:	b108      	cbz	r0, 8018d28 <_printf_i+0x1bc>
 8018d24:	1b40      	subs	r0, r0, r5
 8018d26:	6060      	str	r0, [r4, #4]
 8018d28:	6863      	ldr	r3, [r4, #4]
 8018d2a:	6123      	str	r3, [r4, #16]
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d32:	e7a7      	b.n	8018c84 <_printf_i+0x118>
 8018d34:	6923      	ldr	r3, [r4, #16]
 8018d36:	462a      	mov	r2, r5
 8018d38:	4639      	mov	r1, r7
 8018d3a:	4630      	mov	r0, r6
 8018d3c:	47c0      	blx	r8
 8018d3e:	3001      	adds	r0, #1
 8018d40:	d0aa      	beq.n	8018c98 <_printf_i+0x12c>
 8018d42:	6823      	ldr	r3, [r4, #0]
 8018d44:	079b      	lsls	r3, r3, #30
 8018d46:	d413      	bmi.n	8018d70 <_printf_i+0x204>
 8018d48:	68e0      	ldr	r0, [r4, #12]
 8018d4a:	9b03      	ldr	r3, [sp, #12]
 8018d4c:	4298      	cmp	r0, r3
 8018d4e:	bfb8      	it	lt
 8018d50:	4618      	movlt	r0, r3
 8018d52:	e7a3      	b.n	8018c9c <_printf_i+0x130>
 8018d54:	2301      	movs	r3, #1
 8018d56:	464a      	mov	r2, r9
 8018d58:	4639      	mov	r1, r7
 8018d5a:	4630      	mov	r0, r6
 8018d5c:	47c0      	blx	r8
 8018d5e:	3001      	adds	r0, #1
 8018d60:	d09a      	beq.n	8018c98 <_printf_i+0x12c>
 8018d62:	3501      	adds	r5, #1
 8018d64:	68e3      	ldr	r3, [r4, #12]
 8018d66:	9a03      	ldr	r2, [sp, #12]
 8018d68:	1a9b      	subs	r3, r3, r2
 8018d6a:	42ab      	cmp	r3, r5
 8018d6c:	dcf2      	bgt.n	8018d54 <_printf_i+0x1e8>
 8018d6e:	e7eb      	b.n	8018d48 <_printf_i+0x1dc>
 8018d70:	2500      	movs	r5, #0
 8018d72:	f104 0919 	add.w	r9, r4, #25
 8018d76:	e7f5      	b.n	8018d64 <_printf_i+0x1f8>
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d1ac      	bne.n	8018cd6 <_printf_i+0x16a>
 8018d7c:	7803      	ldrb	r3, [r0, #0]
 8018d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018d82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018d86:	e76c      	b.n	8018c62 <_printf_i+0xf6>
 8018d88:	08019c8d 	.word	0x08019c8d
 8018d8c:	08019c9e 	.word	0x08019c9e

08018d90 <_realloc_r>:
 8018d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d92:	4607      	mov	r7, r0
 8018d94:	4614      	mov	r4, r2
 8018d96:	460e      	mov	r6, r1
 8018d98:	b921      	cbnz	r1, 8018da4 <_realloc_r+0x14>
 8018d9a:	4611      	mov	r1, r2
 8018d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018da0:	f7fd be6e 	b.w	8016a80 <_malloc_r>
 8018da4:	b922      	cbnz	r2, 8018db0 <_realloc_r+0x20>
 8018da6:	f7fd fe1d 	bl	80169e4 <_free_r>
 8018daa:	4625      	mov	r5, r4
 8018dac:	4628      	mov	r0, r5
 8018dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018db0:	f000 f814 	bl	8018ddc <_malloc_usable_size_r>
 8018db4:	42a0      	cmp	r0, r4
 8018db6:	d20f      	bcs.n	8018dd8 <_realloc_r+0x48>
 8018db8:	4621      	mov	r1, r4
 8018dba:	4638      	mov	r0, r7
 8018dbc:	f7fd fe60 	bl	8016a80 <_malloc_r>
 8018dc0:	4605      	mov	r5, r0
 8018dc2:	2800      	cmp	r0, #0
 8018dc4:	d0f2      	beq.n	8018dac <_realloc_r+0x1c>
 8018dc6:	4631      	mov	r1, r6
 8018dc8:	4622      	mov	r2, r4
 8018dca:	f7fd fddf 	bl	801698c <memcpy>
 8018dce:	4631      	mov	r1, r6
 8018dd0:	4638      	mov	r0, r7
 8018dd2:	f7fd fe07 	bl	80169e4 <_free_r>
 8018dd6:	e7e9      	b.n	8018dac <_realloc_r+0x1c>
 8018dd8:	4635      	mov	r5, r6
 8018dda:	e7e7      	b.n	8018dac <_realloc_r+0x1c>

08018ddc <_malloc_usable_size_r>:
 8018ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018de0:	1f18      	subs	r0, r3, #4
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	bfbc      	itt	lt
 8018de6:	580b      	ldrlt	r3, [r1, r0]
 8018de8:	18c0      	addlt	r0, r0, r3
 8018dea:	4770      	bx	lr

08018dec <_init>:
 8018dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dee:	bf00      	nop
 8018df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018df2:	bc08      	pop	{r3}
 8018df4:	469e      	mov	lr, r3
 8018df6:	4770      	bx	lr

08018df8 <_fini>:
 8018df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dfa:	bf00      	nop
 8018dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dfe:	bc08      	pop	{r3}
 8018e00:	469e      	mov	lr, r3
 8018e02:	4770      	bx	lr
